
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
  'use strict';

  /**
   * Template7 1.4.2
   * Mobile-first HTML template engine
   * 
   * http://www.idangero.us/template7/
   * 
   * Copyright 2019, Vladimir Kharlampidi
   * The iDangero.us
   * http://www.idangero.us/
   * 
   * Licensed under MIT
   * 
   * Released on: June 14, 2019
   */

  let t7ctx;
  if (typeof window !== 'undefined') {
    t7ctx = window;
  } else if (typeof global !== 'undefined') {
    t7ctx = global;
  } else {
    t7ctx = undefined;
  }

  const Template7Context = t7ctx;

  const Template7Utils = {
    quoteSingleRexExp: new RegExp('\'', 'g'),
    quoteDoubleRexExp: new RegExp('"', 'g'),
    isFunction(func) {
      return typeof func === 'function';
    },
    escape(string = '') {
      return string
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
    },
    helperToSlices(string) {
      const { quoteDoubleRexExp, quoteSingleRexExp } = Template7Utils;
      const helperParts = string.replace(/[{}#}]/g, '').trim().split(' ');
      const slices = [];
      let shiftIndex;
      let i;
      let j;
      for (i = 0; i < helperParts.length; i += 1) {
        let part = helperParts[i];
        let blockQuoteRegExp;
        let openingQuote;
        if (i === 0) slices.push(part);
        else if (part.indexOf('"') === 0 || part.indexOf('\'') === 0) {
          blockQuoteRegExp = part.indexOf('"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;
          openingQuote = part.indexOf('"') === 0 ? '"' : '\'';
          // Plain String
          if (part.match(blockQuoteRegExp).length === 2) {
            // One word string
            slices.push(part);
          } else {
            // Find closed Index
            shiftIndex = 0;
            for (j = i + 1; j < helperParts.length; j += 1) {
              part += ` ${helperParts[j]}`;
              if (helperParts[j].indexOf(openingQuote) >= 0) {
                shiftIndex = j;
                slices.push(part);
                break;
              }
            }
            if (shiftIndex) i = shiftIndex;
          }
        } else if (part.indexOf('=') > 0) {
          // Hash
          const hashParts = part.split('=');
          const hashName = hashParts[0];
          let hashContent = hashParts[1];
          if (!blockQuoteRegExp) {
            blockQuoteRegExp = hashContent.indexOf('"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;
            openingQuote = hashContent.indexOf('"') === 0 ? '"' : '\'';
          }
          if (hashContent.match(blockQuoteRegExp).length !== 2) {
            shiftIndex = 0;
            for (j = i + 1; j < helperParts.length; j += 1) {
              hashContent += ` ${helperParts[j]}`;
              if (helperParts[j].indexOf(openingQuote) >= 0) {
                shiftIndex = j;
                break;
              }
            }
            if (shiftIndex) i = shiftIndex;
          }
          const hash = [hashName, hashContent.replace(blockQuoteRegExp, '')];
          slices.push(hash);
        } else {
          // Plain variable
          slices.push(part);
        }
      }
      return slices;
    },
    stringToBlocks(string) {
      const blocks = [];
      let i;
      let j;
      if (!string) return [];
      const stringBlocks = string.split(/({{[^{^}]*}})/);
      for (i = 0; i < stringBlocks.length; i += 1) {
        let block = stringBlocks[i];
        if (block === '') continue;
        if (block.indexOf('{{') < 0) {
          blocks.push({
            type: 'plain',
            content: block,
          });
        } else {
          if (block.indexOf('{/') >= 0) {
            continue;
          }
          block = block
            .replace(/{{([#/])*([ ])*/, '{{$1')
            .replace(/([ ])*}}/, '}}');
          if (block.indexOf('{#') < 0 && block.indexOf(' ') < 0 && block.indexOf('else') < 0) {
            // Simple variable
            blocks.push({
              type: 'variable',
              contextName: block.replace(/[{}]/g, ''),
            });
            continue;
          }
          // Helpers
          const helperSlices = Template7Utils.helperToSlices(block);
          let helperName = helperSlices[0];
          const isPartial = helperName === '>';
          const helperContext = [];
          const helperHash = {};
          for (j = 1; j < helperSlices.length; j += 1) {
            const slice = helperSlices[j];
            if (Array.isArray(slice)) {
              // Hash
              helperHash[slice[0]] = slice[1] === 'false' ? false : slice[1];
            } else {
              helperContext.push(slice);
            }
          }

          if (block.indexOf('{#') >= 0) {
            // Condition/Helper
            let helperContent = '';
            let elseContent = '';
            let toSkip = 0;
            let shiftIndex;
            let foundClosed = false;
            let foundElse = false;
            let depth = 0;
            for (j = i + 1; j < stringBlocks.length; j += 1) {
              if (stringBlocks[j].indexOf('{{#') >= 0) {
                depth += 1;
              }
              if (stringBlocks[j].indexOf('{{/') >= 0) {
                depth -= 1;
              }
              if (stringBlocks[j].indexOf(`{{#${helperName}`) >= 0) {
                helperContent += stringBlocks[j];
                if (foundElse) elseContent += stringBlocks[j];
                toSkip += 1;
              } else if (stringBlocks[j].indexOf(`{{/${helperName}`) >= 0) {
                if (toSkip > 0) {
                  toSkip -= 1;
                  helperContent += stringBlocks[j];
                  if (foundElse) elseContent += stringBlocks[j];
                } else {
                  shiftIndex = j;
                  foundClosed = true;
                  break;
                }
              } else if (stringBlocks[j].indexOf('else') >= 0 && depth === 0) {
                foundElse = true;
              } else {
                if (!foundElse) helperContent += stringBlocks[j];
                if (foundElse) elseContent += stringBlocks[j];
              }
            }
            if (foundClosed) {
              if (shiftIndex) i = shiftIndex;
              if (helperName === 'raw') {
                blocks.push({
                  type: 'plain',
                  content: helperContent,
                });
              } else {
                blocks.push({
                  type: 'helper',
                  helperName,
                  contextName: helperContext,
                  content: helperContent,
                  inverseContent: elseContent,
                  hash: helperHash,
                });
              }
            }
          } else if (block.indexOf(' ') > 0) {
            if (isPartial) {
              helperName = '_partial';
              if (helperContext[0]) {
                if (helperContext[0].indexOf('[') === 0) helperContext[0] = helperContext[0].replace(/[[\]]/g, '');
                else helperContext[0] = `"${helperContext[0].replace(/"|'/g, '')}"`;
              }
            }
            blocks.push({
              type: 'helper',
              helperName,
              contextName: helperContext,
              hash: helperHash,
            });
          }
        }
      }
      return blocks;
    },
    parseJsVariable(expression, replace, object) {
      return expression.split(/([+ \-*/^()&=|<>!%:?])/g).reduce((arr, part) => {
        if (!part) {
          return arr;
        }
        if (part.indexOf(replace) < 0) {
          arr.push(part);
          return arr;
        }
        if (!object) {
          arr.push(JSON.stringify(''));
          return arr;
        }

        let variable = object;
        if (part.indexOf(`${replace}.`) >= 0) {
          part.split(`${replace}.`)[1].split('.').forEach((partName) => {
            if (partName in variable) variable = variable[partName];
            else variable = undefined;
          });
        }
        if (
          (typeof variable === 'string')
          || Array.isArray(variable)
          || (variable.constructor && variable.constructor === Object)
        ) {
          variable = JSON.stringify(variable);
        }
        if (variable === undefined) variable = 'undefined';

        arr.push(variable);
        return arr;
      }, []).join('');

    },
    parseJsParents(expression, parents) {
      return expression.split(/([+ \-*^()&=|<>!%:?])/g).reduce((arr, part) => {
        if (!part) {
          return arr;
        }

        if (part.indexOf('../') < 0) {
          arr.push(part);
          return arr;
        }

        if (!parents || parents.length === 0) {
          arr.push(JSON.stringify(''));
          return arr;
        }

        const levelsUp = part.split('../').length - 1;
        const parentData = levelsUp > parents.length ? parents[parents.length - 1] : parents[levelsUp - 1];

        let variable = parentData;
        const parentPart = part.replace(/..\//g, '');
        parentPart.split('.').forEach((partName) => {
          if (typeof variable[partName] !== 'undefined') variable = variable[partName];
          else variable = 'undefined';
        });
        if (variable === false || variable === true) {
          arr.push(JSON.stringify(variable));
          return arr;
        }
        if (variable === null || variable === 'undefined') {
          arr.push(JSON.stringify(''));
          return arr;
        }
        arr.push(JSON.stringify(variable));
        return arr;
      }, []).join('');
    },
    getCompileVar(name, ctx, data = 'data_1') {
      let variable = ctx;
      let parts;
      let levelsUp = 0;
      let newDepth;
      if (name.indexOf('../') === 0) {
        levelsUp = name.split('../').length - 1;
        newDepth = variable.split('_')[1] - levelsUp;
        variable = `ctx_${newDepth >= 1 ? newDepth : 1}`;
        parts = name.split('../')[levelsUp].split('.');
      } else if (name.indexOf('@global') === 0) {
        variable = 'Template7.global';
        parts = name.split('@global.')[1].split('.');
      } else if (name.indexOf('@root') === 0) {
        variable = 'root';
        parts = name.split('@root.')[1].split('.');
      } else {
        parts = name.split('.');
      }
      for (let i = 0; i < parts.length; i += 1) {
        const part = parts[i];
        if (part.indexOf('@') === 0) {
          let dataLevel = data.split('_')[1];
          if (levelsUp > 0) {
            dataLevel = newDepth;
          }
          if (i > 0) {
            variable += `[(data_${dataLevel} && data_${dataLevel}.${part.replace('@', '')})]`;
          } else {
            variable = `(data_${dataLevel} && data_${dataLevel}.${part.replace('@', '')})`;
          }
        } else if (Number.isFinite ? Number.isFinite(part) : Template7Context.isFinite(part)) {
          variable += `[${part}]`;
        } else if (part === 'this' || part.indexOf('this.') >= 0 || part.indexOf('this[') >= 0 || part.indexOf('this(') >= 0) {
          variable = part.replace('this', ctx);
        } else {
          variable += `.${part}`;
        }
      }
      return variable;
    },
    getCompiledArguments(contextArray, ctx, data) {
      const arr = [];
      for (let i = 0; i < contextArray.length; i += 1) {
        if (/^['"]/.test(contextArray[i])) arr.push(contextArray[i]);
        else if (/^(true|false|\d+)$/.test(contextArray[i])) arr.push(contextArray[i]);
        else {
          arr.push(Template7Utils.getCompileVar(contextArray[i], ctx, data));
        }
      }

      return arr.join(', ');
    },
  };

  /* eslint no-eval: "off" */

  const Template7Helpers = {
    _partial(partialName, options) {
      const ctx = this;
      const p = Template7Class.partials[partialName];
      if (!p || (p && !p.template)) return '';
      if (!p.compiled) {
        p.compiled = new Template7Class(p.template).compile();
      }
      Object.keys(options.hash).forEach((hashName) => {
        ctx[hashName] = options.hash[hashName];
      });
      return p.compiled(ctx, options.data, options.root);
    },
    escape(context) {
      if (typeof context === 'undefined' || context === null) return '';
      if (typeof context !== 'string') {
        throw new Error('Template7: Passed context to "escape" helper should be a string');
      }
      return Template7Utils.escape(context);
    },
    if(context, options) {
      let ctx = context;
      if (Template7Utils.isFunction(ctx)) { ctx = ctx.call(this); }
      if (ctx) {
        return options.fn(this, options.data);
      }

      return options.inverse(this, options.data);
    },
    unless(context, options) {
      let ctx = context;
      if (Template7Utils.isFunction(ctx)) { ctx = ctx.call(this); }
      if (!ctx) {
        return options.fn(this, options.data);
      }

      return options.inverse(this, options.data);
    },
    each(context, options) {
      let ctx = context;
      let ret = '';
      let i = 0;
      if (Template7Utils.isFunction(ctx)) { ctx = ctx.call(this); }
      if (Array.isArray(ctx)) {
        if (options.hash.reverse) {
          ctx = ctx.reverse();
        }
        for (i = 0; i < ctx.length; i += 1) {
          ret += options.fn(ctx[i], { first: i === 0, last: i === ctx.length - 1, index: i });
        }
        if (options.hash.reverse) {
          ctx = ctx.reverse();
        }
      } else {
        // eslint-disable-next-line
        for (const key in ctx) {
          i += 1;
          ret += options.fn(ctx[key], { key });
        }
      }
      if (i > 0) return ret;
      return options.inverse(this);
    },
    with(context, options) {
      let ctx = context;
      if (Template7Utils.isFunction(ctx)) { ctx = context.call(this); }
      return options.fn(ctx);
    },
    join(context, options) {
      let ctx = context;
      if (Template7Utils.isFunction(ctx)) { ctx = ctx.call(this); }
      return ctx.join(options.hash.delimiter || options.hash.delimeter);
    },
    js(expression, options) {
      const data = options.data;
      let func;
      let execute = expression;
      ('index first last key').split(' ').forEach((prop) => {
        if (typeof data[prop] !== 'undefined') {
          const re1 = new RegExp(`this.@${prop}`, 'g');
          const re2 = new RegExp(`@${prop}`, 'g');
          execute = execute
            .replace(re1, JSON.stringify(data[prop]))
            .replace(re2, JSON.stringify(data[prop]));
        }
      });
      if (options.root && execute.indexOf('@root') >= 0) {
        execute = Template7Utils.parseJsVariable(execute, '@root', options.root);
      }
      if (execute.indexOf('@global') >= 0) {
        execute = Template7Utils.parseJsVariable(execute, '@global', Template7Context.Template7.global);
      }
      if (execute.indexOf('../') >= 0) {
        execute = Template7Utils.parseJsParents(execute, options.parents);
      }
      if (execute.indexOf('return') >= 0) {
        func = `(function(){${execute}})`;
      } else {
        func = `(function(){return (${execute})})`;
      }
      return eval(func).call(this);
    },
    js_if(expression, options) {
      const data = options.data;
      let func;
      let execute = expression;
      ('index first last key').split(' ').forEach((prop) => {
        if (typeof data[prop] !== 'undefined') {
          const re1 = new RegExp(`this.@${prop}`, 'g');
          const re2 = new RegExp(`@${prop}`, 'g');
          execute = execute
            .replace(re1, JSON.stringify(data[prop]))
            .replace(re2, JSON.stringify(data[prop]));
        }
      });
      if (options.root && execute.indexOf('@root') >= 0) {
        execute = Template7Utils.parseJsVariable(execute, '@root', options.root);
      }
      if (execute.indexOf('@global') >= 0) {
        execute = Template7Utils.parseJsVariable(execute, '@global', Template7Context.Template7.global);
      }
      if (execute.indexOf('../') >= 0) {
        execute = Template7Utils.parseJsParents(execute, options.parents);
      }
      if (execute.indexOf('return') >= 0) {
        func = `(function(){${execute}})`;
      } else {
        func = `(function(){return (${execute})})`;
      }
      const condition = eval(func).call(this);
      if (condition) {
        return options.fn(this, options.data);
      }

      return options.inverse(this, options.data);
    },
  };
  Template7Helpers.js_compare = Template7Helpers.js_if;

  const Template7Options = {};
  const Template7Partials = {};

  class Template7Class {
    constructor(template) {
      const t = this;
      t.template = template;
    }
    compile(template = this.template, depth = 1) {
      const t = this;
      if (t.compiled) return t.compiled;

      if (typeof template !== 'string') {
        throw new Error('Template7: Template must be a string');
      }
      const { stringToBlocks, getCompileVar, getCompiledArguments } = Template7Utils;

      const blocks = stringToBlocks(template);
      const ctx = `ctx_${depth}`;
      const data = `data_${depth}`;
      if (blocks.length === 0) {
        return function empty() { return ''; };
      }

      function getCompileFn(block, newDepth) {
        if (block.content) return t.compile(block.content, newDepth);
        return function empty() { return ''; };
      }
      function getCompileInverse(block, newDepth) {
        if (block.inverseContent) return t.compile(block.inverseContent, newDepth);
        return function empty() { return ''; };
      }

      let resultString = '';
      if (depth === 1) {
        resultString += `(function (${ctx}, ${data}, root) {\n`;
      } else {
        resultString += `(function (${ctx}, ${data}) {\n`;
      }
      if (depth === 1) {
        resultString += 'function isArray(arr){return Array.isArray(arr);}\n';
        resultString += 'function isFunction(func){return (typeof func === \'function\');}\n';
        resultString += 'function c(val, ctx) {if (typeof val !== "undefined" && val !== null) {if (isFunction(val)) {return val.call(ctx);} else return val;} else return "";}\n';
        resultString += 'root = root || ctx_1 || {};\n';
      }
      resultString += 'var r = \'\';\n';
      let i;
      for (i = 0; i < blocks.length; i += 1) {
        const block = blocks[i];
        // Plain block
        if (block.type === 'plain') {
          // eslint-disable-next-line
          resultString += `r +='${(block.content).replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/'/g, '\\' + '\'')}';`;
          continue;
        }
        let variable;
        let compiledArguments;
        // Variable block
        if (block.type === 'variable') {
          variable = getCompileVar(block.contextName, ctx, data);
          resultString += `r += c(${variable}, ${ctx});`;
        }
        // Helpers block
        if (block.type === 'helper') {
          let parents;
          if (ctx !== 'ctx_1') {
            const level = ctx.split('_')[1];
            let parentsString = `ctx_${level - 1}`;
            for (let j = level - 2; j >= 1; j -= 1) {
              parentsString += `, ctx_${j}`;
            }
            parents = `[${parentsString}]`;
          } else {
            parents = `[${ctx}]`;
          }
          let dynamicHelper;
          if (block.helperName.indexOf('[') === 0) {
            block.helperName = getCompileVar(block.helperName.replace(/[[\]]/g, ''), ctx, data);
            dynamicHelper = true;
          }
          if (dynamicHelper || block.helperName in Template7Helpers) {
            compiledArguments = getCompiledArguments(block.contextName, ctx, data);
            resultString += `r += (Template7Helpers${dynamicHelper ? `[${block.helperName}]` : `.${block.helperName}`}).call(${ctx}, ${compiledArguments && (`${compiledArguments}, `)}{hash:${JSON.stringify(block.hash)}, data: ${data} || {}, fn: ${getCompileFn(block, depth + 1)}, inverse: ${getCompileInverse(block, depth + 1)}, root: root, parents: ${parents}});`;
          } else if (block.contextName.length > 0) {
            throw new Error(`Template7: Missing helper: "${block.helperName}"`);
          } else {
            variable = getCompileVar(block.helperName, ctx, data);
            resultString += `if (${variable}) {`;
            resultString += `if (isArray(${variable})) {`;
            resultString += `r += (Template7Helpers.each).call(${ctx}, ${variable}, {hash:${JSON.stringify(block.hash)}, data: ${data} || {}, fn: ${getCompileFn(block, depth + 1)}, inverse: ${getCompileInverse(block, depth + 1)}, root: root, parents: ${parents}});`;
            resultString += '}else {';
            resultString += `r += (Template7Helpers.with).call(${ctx}, ${variable}, {hash:${JSON.stringify(block.hash)}, data: ${data} || {}, fn: ${getCompileFn(block, depth + 1)}, inverse: ${getCompileInverse(block, depth + 1)}, root: root, parents: ${parents}});`;
            resultString += '}}';
          }
        }
      }
      resultString += '\nreturn r;})';

      if (depth === 1) {
        // eslint-disable-next-line
        t.compiled = eval(resultString);
        return t.compiled;
      }
      return resultString;
    }
    static get options() {
      return Template7Options;
    }
    static get partials() {
      return Template7Partials;
    }
    static get helpers() {
      return Template7Helpers;
    }
  }

  function Template7(...args) {
    const [template, data] = args;
    if (args.length === 2) {
      let instance = new Template7Class(template);
      const rendered = instance.compile()(data);
      instance = null;
      return (rendered);
    }
    return new Template7Class(template);
  }
  Template7.registerHelper = function registerHelper(name, fn) {
    Template7Class.helpers[name] = fn;
  };
  Template7.unregisterHelper = function unregisterHelper(name) {
    Template7Class.helpers[name] = undefined;
    delete Template7Class.helpers[name];
  };
  Template7.registerPartial = function registerPartial(name, template) {
    Template7Class.partials[name] = { template };
  };
  Template7.unregisterPartial = function unregisterPartial(name) {
    if (Template7Class.partials[name]) {
      Template7Class.partials[name] = undefined;
      delete Template7Class.partials[name];
    }
  };
  Template7.compile = function compile(template, options) {
    const instance = new Template7Class(template, options);
    return instance.compile();
  };

  Template7.options = Template7Class.options;
  Template7.helpers = Template7Class.helpers;
  Template7.partials = Template7Class.partials;

  /**
   * SSR Window 2.0.0
   * Better handling for window object in SSR environment
   * https://github.com/nolimits4web/ssr-window
   *
   * Copyright 2020, Vladimir Kharlampidi
   *
   * Licensed under MIT
   *
   * Released on: May 12, 2020
   */
  /* eslint-disable no-param-reassign */
  function isObject(obj) {
      return (obj !== null &&
          typeof obj === 'object' &&
          'constructor' in obj &&
          obj.constructor === Object);
  }
  function extend(target, src) {
      if (target === void 0) { target = {}; }
      if (src === void 0) { src = {}; }
      Object.keys(src).forEach(function (key) {
          if (typeof target[key] === 'undefined')
              target[key] = src[key];
          else if (isObject(src[key]) &&
              isObject(target[key]) &&
              Object.keys(src[key]).length > 0) {
              extend(target[key], src[key]);
          }
      });
  }

  var doc = typeof document !== 'undefined' ? document : {};
  var ssrDocument = {
      body: {},
      addEventListener: function () { },
      removeEventListener: function () { },
      activeElement: {
          blur: function () { },
          nodeName: '',
      },
      querySelector: function () {
          return null;
      },
      querySelectorAll: function () {
          return [];
      },
      getElementById: function () {
          return null;
      },
      createEvent: function () {
          return {
              initEvent: function () { },
          };
      },
      createElement: function () {
          return {
              children: [],
              childNodes: [],
              style: {},
              setAttribute: function () { },
              getElementsByTagName: function () {
                  return [];
              },
          };
      },
      createElementNS: function () {
          return {};
      },
      importNode: function () {
          return null;
      },
      location: {
          hash: '',
          host: '',
          hostname: '',
          href: '',
          origin: '',
          pathname: '',
          protocol: '',
          search: '',
      },
  };
  extend(doc, ssrDocument);

  var win = typeof window !== 'undefined' ? window : {};
  var ssrWindow = {
      document: ssrDocument,
      navigator: {
          userAgent: '',
      },
      location: {
          hash: '',
          host: '',
          hostname: '',
          href: '',
          origin: '',
          pathname: '',
          protocol: '',
          search: '',
      },
      history: {
          replaceState: function () { },
          pushState: function () { },
          go: function () { },
          back: function () { },
      },
      CustomEvent: function CustomEvent() {
          return this;
      },
      addEventListener: function () { },
      removeEventListener: function () { },
      getComputedStyle: function () {
          return {
              getPropertyValue: function () {
                  return '';
              },
          };
      },
      Image: function () { },
      Date: function () { },
      screen: {},
      setTimeout: function () { },
      clearTimeout: function () { },
      matchMedia: function () {
          return {};
      },
  };
  extend(win, ssrWindow);

  /**
   * Dom7 2.1.5
   * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
   * http://framework7.io/docs/dom.html
   *
   * Copyright 2020, Vladimir Kharlampidi
   * The iDangero.us
   * http://www.idangero.us/
   *
   * Licensed under MIT
   *
   * Released on: May 15, 2020
   */

  class Dom7 {
    constructor(arr) {
      const self = this;
      // Create array-like object
      for (let i = 0; i < arr.length; i += 1) {
        self[i] = arr[i];
      }
      self.length = arr.length;
      // Return collection with methods
      return this;
    }
  }

  function $(selector, context) {
    const arr = [];
    let i = 0;
    if (selector && !context) {
      if (selector instanceof Dom7) {
        return selector;
      }
    }
    if (selector) {
        // String
      if (typeof selector === 'string') {
        let els;
        let tempParent;
        const html = selector.trim();
        if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
          let toCreate = 'div';
          if (html.indexOf('<li') === 0) toCreate = 'ul';
          if (html.indexOf('<tr') === 0) toCreate = 'tbody';
          if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
          if (html.indexOf('<tbody') === 0) toCreate = 'table';
          if (html.indexOf('<option') === 0) toCreate = 'select';
          tempParent = doc.createElement(toCreate);
          tempParent.innerHTML = html;
          for (i = 0; i < tempParent.childNodes.length; i += 1) {
            arr.push(tempParent.childNodes[i]);
          }
        } else {
          if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
            // Pure ID selector
            els = [doc.getElementById(selector.trim().split('#')[1])];
          } else {
            // Other selectors
            els = (context || doc).querySelectorAll(selector.trim());
          }
          for (i = 0; i < els.length; i += 1) {
            if (els[i]) arr.push(els[i]);
          }
        }
      } else if (selector.nodeType || selector === win || selector === doc) {
        // Node/element
        arr.push(selector);
      } else if (selector.length > 0 && selector[0].nodeType) {
        // Array of elements or instance of Dom
        for (i = 0; i < selector.length; i += 1) {
          arr.push(selector[i]);
        }
      }
    }
    return new Dom7(arr);
  }

  $.fn = Dom7.prototype;
  $.Class = Dom7;
  $.Dom7 = Dom7;

  function unique(arr) {
    const uniqueArray = [];
    for (let i = 0; i < arr.length; i += 1) {
      if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
    }
    return uniqueArray;
  }
  function toCamelCase(string) {
    return string.toLowerCase().replace(/-(.)/g, (match, group1) => group1.toUpperCase());
  }

  function requestAnimationFrame(callback) {
    if (win.requestAnimationFrame) return win.requestAnimationFrame(callback);
    else if (win.webkitRequestAnimationFrame) return win.webkitRequestAnimationFrame(callback);
    return win.setTimeout(callback, 1000 / 60);
  }
  function cancelAnimationFrame(id) {
    if (win.cancelAnimationFrame) return win.cancelAnimationFrame(id);
    else if (win.webkitCancelAnimationFrame) return win.webkitCancelAnimationFrame(id);
    return win.clearTimeout(id);
  }

  // Classes and attributes
  function addClass(className) {
    if (typeof className === 'undefined') {
      return this;
    }
    const classes = className.split(' ');
    for (let i = 0; i < classes.length; i += 1) {
      for (let j = 0; j < this.length; j += 1) {
        if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.add(classes[i]);
      }
    }
    return this;
  }
  function removeClass(className) {
    const classes = className.split(' ');
    for (let i = 0; i < classes.length; i += 1) {
      for (let j = 0; j < this.length; j += 1) {
        if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.remove(classes[i]);
      }
    }
    return this;
  }
  function hasClass(className) {
    if (!this[0]) return false;
    return this[0].classList.contains(className);
  }
  function toggleClass(className) {
    const classes = className.split(' ');
    for (let i = 0; i < classes.length; i += 1) {
      for (let j = 0; j < this.length; j += 1) {
        if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.toggle(classes[i]);
      }
    }
    return this;
  }
  function attr(attrs, value) {
    if (arguments.length === 1 && typeof attrs === 'string') {
      // Get attr
      if (this[0]) return this[0].getAttribute(attrs);
      return undefined;
    }

    // Set attrs
    for (let i = 0; i < this.length; i += 1) {
      if (arguments.length === 2) {
        // String
        this[i].setAttribute(attrs, value);
      } else {
        // Object
        // eslint-disable-next-line
        for (const attrName in attrs) {
          this[i][attrName] = attrs[attrName];
          this[i].setAttribute(attrName, attrs[attrName]);
        }
      }
    }
    return this;
  }
  // eslint-disable-next-line
  function removeAttr(attr) {
    for (let i = 0; i < this.length; i += 1) {
      this[i].removeAttribute(attr);
    }
    return this;
  }
  // eslint-disable-next-line
  function prop(props, value) {
    if (arguments.length === 1 && typeof props === 'string') {
      // Get prop
      if (this[0]) return this[0][props];
    } else {
      // Set props
      for (let i = 0; i < this.length; i += 1) {
        if (arguments.length === 2) {
          // String
          this[i][props] = value;
        } else {
          // Object
          // eslint-disable-next-line
          for (const propName in props) {
            this[i][propName] = props[propName];
          }
        }
      }
      return this;
    }
  }
  function data(key, value) {
    let el;
    if (typeof value === 'undefined') {
      el = this[0];
      // Get value
      if (el) {
        if (el.dom7ElementDataStorage && (key in el.dom7ElementDataStorage)) {
          return el.dom7ElementDataStorage[key];
        }

        const dataKey = el.getAttribute(`data-${key}`);
        if (dataKey) {
          return dataKey;
        }
        return undefined;
      }
      return undefined;
    }

    // Set value
    for (let i = 0; i < this.length; i += 1) {
      el = this[i];
      if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};
      el.dom7ElementDataStorage[key] = value;
    }
    return this;
  }
  function removeData(key) {
    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];
      if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {
        el.dom7ElementDataStorage[key] = null;
        delete el.dom7ElementDataStorage[key];
      }
    }
  }
  function dataset() {
    const el = this[0];
    if (!el) return undefined;
    const dataset = {}; // eslint-disable-line
    if (el.dataset) {
      // eslint-disable-next-line
      for (const dataKey in el.dataset) {
        dataset[dataKey] = el.dataset[dataKey];
      }
    } else {
      for (let i = 0; i < el.attributes.length; i += 1) {
        // eslint-disable-next-line
        const attr = el.attributes[i];
        if (attr.name.indexOf('data-') >= 0) {
          dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;
        }
      }
    }
    // eslint-disable-next-line
    for (const key in dataset) {
      if (dataset[key] === 'false') dataset[key] = false;
      else if (dataset[key] === 'true') dataset[key] = true;
      else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;
    }
    return dataset;
  }
  function val(value) {
    const dom = this;
    if (typeof value === 'undefined') {
      if (dom[0]) {
        if (dom[0].multiple && dom[0].nodeName.toLowerCase() === 'select') {
          const values = [];
          for (let i = 0; i < dom[0].selectedOptions.length; i += 1) {
            values.push(dom[0].selectedOptions[i].value);
          }
          return values;
        }
        return dom[0].value;
      }
      return undefined;
    }

    for (let i = 0; i < dom.length; i += 1) {
      const el = dom[i];
      if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {
        for (let j = 0; j < el.options.length; j += 1) {
          el.options[j].selected = value.indexOf(el.options[j].value) >= 0;
        }
      } else {
        el.value = value;
      }
    }
    return dom;
  }
  // Transforms
  // eslint-disable-next-line
  function transform(transform) {
    for (let i = 0; i < this.length; i += 1) {
      const elStyle = this[i].style;
      elStyle.webkitTransform = transform;
      elStyle.transform = transform;
    }
    return this;
  }
  function transition(duration) {
    if (typeof duration !== 'string') {
      duration = `${duration}ms`; // eslint-disable-line
    }
    for (let i = 0; i < this.length; i += 1) {
      const elStyle = this[i].style;
      elStyle.webkitTransitionDuration = duration;
      elStyle.transitionDuration = duration;
    }
    return this;
  }
  // Events
  function on(...args) {
    let [eventType, targetSelector, listener, capture] = args;
    if (typeof args[1] === 'function') {
      [eventType, listener, capture] = args;
      targetSelector = undefined;
    }
    if (!capture) capture = false;

    function handleLiveEvent(e) {
      const target = e.target;
      if (!target) return;
      const eventData = e.target.dom7EventData || [];
      if (eventData.indexOf(e) < 0) {
        eventData.unshift(e);
      }
      if ($(target).is(targetSelector)) listener.apply(target, eventData);
      else {
        const parents = $(target).parents(); // eslint-disable-line
        for (let k = 0; k < parents.length; k += 1) {
          if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);
        }
      }
    }
    function handleEvent(e) {
      const eventData = e && e.target ? e.target.dom7EventData || [] : [];
      if (eventData.indexOf(e) < 0) {
        eventData.unshift(e);
      }
      listener.apply(this, eventData);
    }
    const events = eventType.split(' ');
    let j;
    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];
      if (!targetSelector) {
        for (j = 0; j < events.length; j += 1) {
          const event = events[j];
          if (!el.dom7Listeners) el.dom7Listeners = {};
          if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
          el.dom7Listeners[event].push({
            listener,
            proxyListener: handleEvent,
          });
          el.addEventListener(event, handleEvent, capture);
        }
      } else {
        // Live events
        for (j = 0; j < events.length; j += 1) {
          const event = events[j];
          if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
          if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];
          el.dom7LiveListeners[event].push({
            listener,
            proxyListener: handleLiveEvent,
          });
          el.addEventListener(event, handleLiveEvent, capture);
        }
      }
    }
    return this;
  }
  function off(...args) {
    let [eventType, targetSelector, listener, capture] = args;
    if (typeof args[1] === 'function') {
      [eventType, listener, capture] = args;
      targetSelector = undefined;
    }
    if (!capture) capture = false;

    const events = eventType.split(' ');
    for (let i = 0; i < events.length; i += 1) {
      const event = events[i];
      for (let j = 0; j < this.length; j += 1) {
        const el = this[j];
        let handlers;
        if (!targetSelector && el.dom7Listeners) {
          handlers = el.dom7Listeners[event];
        } else if (targetSelector && el.dom7LiveListeners) {
          handlers = el.dom7LiveListeners[event];
        }
        if (handlers && handlers.length) {
          for (let k = handlers.length - 1; k >= 0; k -= 1) {
            const handler = handlers[k];
            if (listener && handler.listener === listener) {
              el.removeEventListener(event, handler.proxyListener, capture);
              handlers.splice(k, 1);
            } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
              el.removeEventListener(event, handler.proxyListener, capture);
              handlers.splice(k, 1);
            } else if (!listener) {
              el.removeEventListener(event, handler.proxyListener, capture);
              handlers.splice(k, 1);
            }
          }
        }
      }
    }
    return this;
  }
  function once(...args) {
    const dom = this;
    let [eventName, targetSelector, listener, capture] = args;
    if (typeof args[1] === 'function') {
      [eventName, listener, capture] = args;
      targetSelector = undefined;
    }
    function onceHandler(...eventArgs) {
      listener.apply(this, eventArgs);
      dom.off(eventName, targetSelector, onceHandler, capture);
      if (onceHandler.dom7proxy) {
        delete onceHandler.dom7proxy;
      }
    }
    onceHandler.dom7proxy = listener;
    return dom.on(eventName, targetSelector, onceHandler, capture);
  }
  function trigger(...args) {
    const events = args[0].split(' ');
    const eventData = args[1];
    for (let i = 0; i < events.length; i += 1) {
      const event = events[i];
      for (let j = 0; j < this.length; j += 1) {
        const el = this[j];
        let evt;
        try {
          evt = new win.CustomEvent(event, {
            detail: eventData,
            bubbles: true,
            cancelable: true,
          });
        } catch (e) {
          evt = doc.createEvent('Event');
          evt.initEvent(event, true, true);
          evt.detail = eventData;
        }
        // eslint-disable-next-line
        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);
        el.dispatchEvent(evt);
        el.dom7EventData = [];
        delete el.dom7EventData;
      }
    }
    return this;
  }
  function transitionEnd(callback) {
    const events = ['webkitTransitionEnd', 'transitionend'];
    const dom = this;
    let i;
    function fireCallBack(e) {
      /* jshint validthis:true */
      if (e.target !== this) return;
      callback.call(this, e);
      for (i = 0; i < events.length; i += 1) {
        dom.off(events[i], fireCallBack);
      }
    }
    if (callback) {
      for (i = 0; i < events.length; i += 1) {
        dom.on(events[i], fireCallBack);
      }
    }
    return this;
  }
  function animationEnd(callback) {
    const events = ['webkitAnimationEnd', 'animationend'];
    const dom = this;
    let i;
    function fireCallBack(e) {
      if (e.target !== this) return;
      callback.call(this, e);
      for (i = 0; i < events.length; i += 1) {
        dom.off(events[i], fireCallBack);
      }
    }
    if (callback) {
      for (i = 0; i < events.length; i += 1) {
        dom.on(events[i], fireCallBack);
      }
    }
    return this;
  }
  // Sizing/Styles
  function width() {
    if (this[0] === win) {
      return win.innerWidth;
    }

    if (this.length > 0) {
      return parseFloat(this.css('width'));
    }

    return null;
  }
  function outerWidth(includeMargins) {
    if (this.length > 0) {
      if (includeMargins) {
        // eslint-disable-next-line
        const styles = this.styles();
        return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));
      }
      return this[0].offsetWidth;
    }
    return null;
  }
  function height() {
    if (this[0] === win) {
      return win.innerHeight;
    }

    if (this.length > 0) {
      return parseFloat(this.css('height'));
    }

    return null;
  }
  function outerHeight(includeMargins) {
    if (this.length > 0) {
      if (includeMargins) {
        // eslint-disable-next-line
        const styles = this.styles();
        return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));
      }
      return this[0].offsetHeight;
    }
    return null;
  }
  function offset() {
    if (this.length > 0) {
      const el = this[0];
      const box = el.getBoundingClientRect();
      const body = doc.body;
      const clientTop = el.clientTop || body.clientTop || 0;
      const clientLeft = el.clientLeft || body.clientLeft || 0;
      const scrollTop = el === win ? win.scrollY : el.scrollTop;
      const scrollLeft = el === win ? win.scrollX : el.scrollLeft;
      return {
        top: (box.top + scrollTop) - clientTop,
        left: (box.left + scrollLeft) - clientLeft,
      };
    }

    return null;
  }
  function hide() {
    for (let i = 0; i < this.length; i += 1) {
      this[i].style.display = 'none';
    }
    return this;
  }
  function show() {
    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];
      if (el.style.display === 'none') {
        el.style.display = '';
      }
      if (win.getComputedStyle(el, null).getPropertyValue('display') === 'none') {
        // Still not visible
        el.style.display = 'block';
      }
    }
    return this;
  }
  function styles() {
    if (this[0]) return win.getComputedStyle(this[0], null);
    return {};
  }
  function css(props, value) {
    let i;
    if (arguments.length === 1) {
      if (typeof props === 'string') {
        if (this[0]) return win.getComputedStyle(this[0], null).getPropertyValue(props);
      } else {
        for (i = 0; i < this.length; i += 1) {
          // eslint-disable-next-line
          for (let prop in props) {
            this[i].style[prop] = props[prop];
          }
        }
        return this;
      }
    }
    if (arguments.length === 2 && typeof props === 'string') {
      for (i = 0; i < this.length; i += 1) {
        this[i].style[props] = value;
      }
      return this;
    }
    return this;
  }

  // Dom manipulation
  function toArray() {
    const arr = [];
    for (let i = 0; i < this.length; i += 1) {
      arr.push(this[i]);
    }
    return arr;
  }
  // Iterate over the collection passing elements to `callback`
  function each(callback) {
    // Don't bother continuing without a callback
    if (!callback) return this;
    // Iterate over the current collection
    for (let i = 0; i < this.length; i += 1) {
      // If the callback returns false
      if (callback.call(this[i], i, this[i]) === false) {
        // End the loop early
        return this;
      }
    }
    // Return `this` to allow chained DOM operations
    return this;
  }
  function forEach(callback) {
    // Don't bother continuing without a callback
    if (!callback) return this;
    // Iterate over the current collection
    for (let i = 0; i < this.length; i += 1) {
      // If the callback returns false
      if (callback.call(this[i], this[i], i) === false) {
        // End the loop early
        return this;
      }
    }
    // Return `this` to allow chained DOM operations
    return this;
  }
  function filter(callback) {
    const matchedItems = [];
    const dom = this;
    for (let i = 0; i < dom.length; i += 1) {
      if (callback.call(dom[i], i, dom[i])) matchedItems.push(dom[i]);
    }
    return new Dom7(matchedItems);
  }
  function map(callback) {
    const modifiedItems = [];
    const dom = this;
    for (let i = 0; i < dom.length; i += 1) {
      modifiedItems.push(callback.call(dom[i], i, dom[i]));
    }
    return new Dom7(modifiedItems);
  }
  // eslint-disable-next-line
  function html(html) {
    if (typeof html === 'undefined') {
      return this[0] ? this[0].innerHTML : undefined;
    }

    for (let i = 0; i < this.length; i += 1) {
      this[i].innerHTML = html;
    }
    return this;
  }
  // eslint-disable-next-line
  function text(text) {
    if (typeof text === 'undefined') {
      if (this[0]) {
        return this[0].textContent.trim();
      }
      return null;
    }

    for (let i = 0; i < this.length; i += 1) {
      this[i].textContent = text;
    }
    return this;
  }
  function is(selector) {
    const el = this[0];
    let compareWith;
    let i;
    if (!el || typeof selector === 'undefined') return false;
    if (typeof selector === 'string') {
      if (el.matches) return el.matches(selector);
      else if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
      else if (el.msMatchesSelector) return el.msMatchesSelector(selector);

      compareWith = $(selector);
      for (i = 0; i < compareWith.length; i += 1) {
        if (compareWith[i] === el) return true;
      }
      return false;
    } else if (selector === doc) return el === doc;
    else if (selector === win) return el === win;

    if (selector.nodeType || selector instanceof Dom7) {
      compareWith = selector.nodeType ? [selector] : selector;
      for (i = 0; i < compareWith.length; i += 1) {
        if (compareWith[i] === el) return true;
      }
      return false;
    }
    return false;
  }
  function indexOf(el) {
    for (let i = 0; i < this.length; i += 1) {
      if (this[i] === el) return i;
    }
    return -1;
  }
  function index() {
    let child = this[0];
    let i;
    if (child) {
      i = 0;
      // eslint-disable-next-line
      while ((child = child.previousSibling) !== null) {
        if (child.nodeType === 1) i += 1;
      }
      return i;
    }
    return undefined;
  }
  // eslint-disable-next-line
  function eq(index) {
    if (typeof index === 'undefined') return this;
    const length = this.length;
    let returnIndex;
    if (index > length - 1) {
      return new Dom7([]);
    }
    if (index < 0) {
      returnIndex = length + index;
      if (returnIndex < 0) return new Dom7([]);
      return new Dom7([this[returnIndex]]);
    }
    return new Dom7([this[index]]);
  }
  function append(...args) {
    let newChild;

    for (let k = 0; k < args.length; k += 1) {
      newChild = args[k];
      for (let i = 0; i < this.length; i += 1) {
        if (typeof newChild === 'string') {
          const tempDiv = doc.createElement('div');
          tempDiv.innerHTML = newChild;
          while (tempDiv.firstChild) {
            this[i].appendChild(tempDiv.firstChild);
          }
        } else if (newChild instanceof Dom7) {
          for (let j = 0; j < newChild.length; j += 1) {
            this[i].appendChild(newChild[j]);
          }
        } else {
          this[i].appendChild(newChild);
        }
      }
    }

    return this;
  }
  // eslint-disable-next-line
  function appendTo(parent) {
    $(parent).append(this);
    return this;
  }
  function prepend(newChild) {
    let i;
    let j;
    for (i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        const tempDiv = doc.createElement('div');
        tempDiv.innerHTML = newChild;
        for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
          this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
        }
      } else if (newChild instanceof Dom7) {
        for (j = 0; j < newChild.length; j += 1) {
          this[i].insertBefore(newChild[j], this[i].childNodes[0]);
        }
      } else {
        this[i].insertBefore(newChild, this[i].childNodes[0]);
      }
    }
    return this;
  }
  // eslint-disable-next-line
  function prependTo(parent) {
    $(parent).prepend(this);
    return this;
  }
  function insertBefore(selector) {
    const before = $(selector);
    for (let i = 0; i < this.length; i += 1) {
      if (before.length === 1) {
        before[0].parentNode.insertBefore(this[i], before[0]);
      } else if (before.length > 1) {
        for (let j = 0; j < before.length; j += 1) {
          before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
        }
      }
    }
  }
  function insertAfter(selector) {
    const after = $(selector);
    for (let i = 0; i < this.length; i += 1) {
      if (after.length === 1) {
        after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
      } else if (after.length > 1) {
        for (let j = 0; j < after.length; j += 1) {
          after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
        }
      }
    }
  }
  function next(selector) {
    if (this.length > 0) {
      if (selector) {
        if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
          return new Dom7([this[0].nextElementSibling]);
        }
        return new Dom7([]);
      }

      if (this[0].nextElementSibling) return new Dom7([this[0].nextElementSibling]);
      return new Dom7([]);
    }
    return new Dom7([]);
  }
  function nextAll(selector) {
    const nextEls = [];
    let el = this[0];
    if (!el) return new Dom7([]);
    while (el.nextElementSibling) {
      const next = el.nextElementSibling; // eslint-disable-line
      if (selector) {
        if ($(next).is(selector)) nextEls.push(next);
      } else nextEls.push(next);
      el = next;
    }
    return new Dom7(nextEls);
  }
  function prev(selector) {
    if (this.length > 0) {
      const el = this[0];
      if (selector) {
        if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {
          return new Dom7([el.previousElementSibling]);
        }
        return new Dom7([]);
      }

      if (el.previousElementSibling) return new Dom7([el.previousElementSibling]);
      return new Dom7([]);
    }
    return new Dom7([]);
  }
  function prevAll(selector) {
    const prevEls = [];
    let el = this[0];
    if (!el) return new Dom7([]);
    while (el.previousElementSibling) {
      const prev = el.previousElementSibling; // eslint-disable-line
      if (selector) {
        if ($(prev).is(selector)) prevEls.push(prev);
      } else prevEls.push(prev);
      el = prev;
    }
    return new Dom7(prevEls);
  }
  function siblings(selector) {
    return this.nextAll(selector).add(this.prevAll(selector));
  }
  function parent(selector) {
    const parents = []; // eslint-disable-line
    for (let i = 0; i < this.length; i += 1) {
      if (this[i].parentNode !== null) {
        if (selector) {
          if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
        } else {
          parents.push(this[i].parentNode);
        }
      }
    }
    return $(unique(parents));
  }
  function parents(selector) {
    const parents = []; // eslint-disable-line
    for (let i = 0; i < this.length; i += 1) {
      let parent = this[i].parentNode; // eslint-disable-line
      while (parent) {
        if (selector) {
          if ($(parent).is(selector)) parents.push(parent);
        } else {
          parents.push(parent);
        }
        parent = parent.parentNode;
      }
    }
    return $(unique(parents));
  }
  function closest(selector) {
    let closest = this; // eslint-disable-line
    if (typeof selector === 'undefined') {
      return new Dom7([]);
    }
    if (!closest.is(selector)) {
      closest = closest.parents(selector).eq(0);
    }
    return closest;
  }
  function find(selector) {
    const foundElements = [];
    for (let i = 0; i < this.length; i += 1) {
      const found = this[i].querySelectorAll(selector);
      for (let j = 0; j < found.length; j += 1) {
        foundElements.push(found[j]);
      }
    }
    return new Dom7(foundElements);
  }
  function children(selector) {
    const children = []; // eslint-disable-line
    for (let i = 0; i < this.length; i += 1) {
      const childNodes = this[i].childNodes;

      for (let j = 0; j < childNodes.length; j += 1) {
        if (!selector) {
          if (childNodes[j].nodeType === 1) children.push(childNodes[j]);
        } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {
          children.push(childNodes[j]);
        }
      }
    }
    return new Dom7(unique(children));
  }
  function remove() {
    for (let i = 0; i < this.length; i += 1) {
      if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
    }
    return this;
  }
  function detach() {
    return this.remove();
  }
  function add(...args) {
    const dom = this;
    let i;
    let j;
    for (i = 0; i < args.length; i += 1) {
      const toAdd = $(args[i]);
      for (j = 0; j < toAdd.length; j += 1) {
        dom[dom.length] = toAdd[j];
        dom.length += 1;
      }
    }
    return dom;
  }
  function empty() {
    for (let i = 0; i < this.length; i += 1) {
      const el = this[i];
      if (el.nodeType === 1) {
        for (let j = 0; j < el.childNodes.length; j += 1) {
          if (el.childNodes[j].parentNode) {
            el.childNodes[j].parentNode.removeChild(el.childNodes[j]);
          }
        }
        el.textContent = '';
      }
    }
    return this;
  }

  var Methods = /*#__PURE__*/Object.freeze({
    addClass: addClass,
    removeClass: removeClass,
    hasClass: hasClass,
    toggleClass: toggleClass,
    attr: attr,
    removeAttr: removeAttr,
    prop: prop,
    data: data,
    removeData: removeData,
    dataset: dataset,
    val: val,
    transform: transform,
    transition: transition,
    on: on,
    off: off,
    once: once,
    trigger: trigger,
    transitionEnd: transitionEnd,
    animationEnd: animationEnd,
    width: width,
    outerWidth: outerWidth,
    height: height,
    outerHeight: outerHeight,
    offset: offset,
    hide: hide,
    show: show,
    styles: styles,
    css: css,
    toArray: toArray,
    each: each,
    forEach: forEach,
    filter: filter,
    map: map,
    html: html,
    text: text,
    is: is,
    indexOf: indexOf,
    index: index,
    eq: eq,
    append: append,
    appendTo: appendTo,
    prepend: prepend,
    prependTo: prependTo,
    insertBefore: insertBefore,
    insertAfter: insertAfter,
    next: next,
    nextAll: nextAll,
    prev: prev,
    prevAll: prevAll,
    siblings: siblings,
    parent: parent,
    parents: parents,
    closest: closest,
    find: find,
    children: children,
    remove: remove,
    detach: detach,
    add: add,
    empty: empty
  });

  function scrollTo(...args) {
    let [left, top, duration, easing, callback] = args;
    if (args.length === 4 && typeof easing === 'function') {
      callback = easing;
      [left, top, duration, callback, easing] = args;
    }
    if (typeof easing === 'undefined') easing = 'swing';

    return this.each(function animate() {
      const el = this;
      let currentTop;
      let currentLeft;
      let maxTop;
      let maxLeft;
      let newTop;
      let newLeft;
      let scrollTop; // eslint-disable-line
      let scrollLeft; // eslint-disable-line
      let animateTop = top > 0 || top === 0;
      let animateLeft = left > 0 || left === 0;
      if (typeof easing === 'undefined') {
        easing = 'swing';
      }
      if (animateTop) {
        currentTop = el.scrollTop;
        if (!duration) {
          el.scrollTop = top;
        }
      }
      if (animateLeft) {
        currentLeft = el.scrollLeft;
        if (!duration) {
          el.scrollLeft = left;
        }
      }
      if (!duration) return;
      if (animateTop) {
        maxTop = el.scrollHeight - el.offsetHeight;
        newTop = Math.max(Math.min(top, maxTop), 0);
      }
      if (animateLeft) {
        maxLeft = el.scrollWidth - el.offsetWidth;
        newLeft = Math.max(Math.min(left, maxLeft), 0);
      }
      let startTime = null;
      if (animateTop && newTop === currentTop) animateTop = false;
      if (animateLeft && newLeft === currentLeft) animateLeft = false;
      function render(time = new Date().getTime()) {
        if (startTime === null) {
          startTime = time;
        }
        const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);
        const easeProgress = easing === 'linear' ? progress : (0.5 - (Math.cos(progress * Math.PI) / 2));
        let done;
        if (animateTop) scrollTop = currentTop + (easeProgress * (newTop - currentTop));
        if (animateLeft) scrollLeft = currentLeft + (easeProgress * (newLeft - currentLeft));
        if (animateTop && newTop > currentTop && scrollTop >= newTop) {
          el.scrollTop = newTop;
          done = true;
        }
        if (animateTop && newTop < currentTop && scrollTop <= newTop) {
          el.scrollTop = newTop;
          done = true;
        }
        if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {
          el.scrollLeft = newLeft;
          done = true;
        }
        if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {
          el.scrollLeft = newLeft;
          done = true;
        }

        if (done) {
          if (callback) callback();
          return;
        }
        if (animateTop) el.scrollTop = scrollTop;
        if (animateLeft) el.scrollLeft = scrollLeft;
        requestAnimationFrame(render);
      }
      requestAnimationFrame(render);
    });
  }
  // scrollTop(top, duration, easing, callback) {
  function scrollTop(...args) {
    let [top, duration, easing, callback] = args;
    if (args.length === 3 && typeof easing === 'function') {
      [top, duration, callback, easing] = args;
    }
    const dom = this;
    if (typeof top === 'undefined') {
      if (dom.length > 0) return dom[0].scrollTop;
      return null;
    }
    return dom.scrollTo(undefined, top, duration, easing, callback);
  }
  function scrollLeft(...args) {
    let [left, duration, easing, callback] = args;
    if (args.length === 3 && typeof easing === 'function') {
      [left, duration, callback, easing] = args;
    }
    const dom = this;
    if (typeof left === 'undefined') {
      if (dom.length > 0) return dom[0].scrollLeft;
      return null;
    }
    return dom.scrollTo(left, undefined, duration, easing, callback);
  }

  var Scroll = /*#__PURE__*/Object.freeze({
    scrollTo: scrollTo,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  });

  function animate(initialProps, initialParams) {
    const els = this;
    const a = {
      props: Object.assign({}, initialProps),
      params: Object.assign({
        duration: 300,
        easing: 'swing', // or 'linear'
        /* Callbacks
        begin(elements)
        complete(elements)
        progress(elements, complete, remaining, start, tweenValue)
        */
      }, initialParams),

      elements: els,
      animating: false,
      que: [],

      easingProgress(easing, progress) {
        if (easing === 'swing') {
          return 0.5 - (Math.cos(progress * Math.PI) / 2);
        }
        if (typeof easing === 'function') {
          return easing(progress);
        }
        return progress;
      },
      stop() {
        if (a.frameId) {
          cancelAnimationFrame(a.frameId);
        }
        a.animating = false;
        a.elements.each((index, el) => {
          const element = el;
          delete element.dom7AnimateInstance;
        });
        a.que = [];
      },
      done(complete) {
        a.animating = false;
        a.elements.each((index, el) => {
          const element = el;
          delete element.dom7AnimateInstance;
        });
        if (complete) complete(els);
        if (a.que.length > 0) {
          const que = a.que.shift();
          a.animate(que[0], que[1]);
        }
      },
      animate(props, params) {
        if (a.animating) {
          a.que.push([props, params]);
          return a;
        }
        const elements = [];

        // Define & Cache Initials & Units
        a.elements.each((index, el) => {
          let initialFullValue;
          let initialValue;
          let unit;
          let finalValue;
          let finalFullValue;

          if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;

          elements[index] = {
            container: el,
          };
          Object.keys(props).forEach((prop) => {
            initialFullValue = win.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');
            initialValue = parseFloat(initialFullValue);
            unit = initialFullValue.replace(initialValue, '');
            finalValue = parseFloat(props[prop]);
            finalFullValue = props[prop] + unit;
            elements[index][prop] = {
              initialFullValue,
              initialValue,
              unit,
              finalValue,
              finalFullValue,
              currentValue: initialValue,
            };
          });
        });

        let startTime = null;
        let time;
        let elementsDone = 0;
        let propsDone = 0;
        let done;
        let began = false;

        a.animating = true;

        function render() {
          time = new Date().getTime();
          let progress;
          let easeProgress;
          // let el;
          if (!began) {
            began = true;
            if (params.begin) params.begin(els);
          }
          if (startTime === null) {
            startTime = time;
          }
          if (params.progress) {
            // eslint-disable-next-line
            params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), ((startTime + params.duration) - time < 0 ? 0 : (startTime + params.duration) - time), startTime);
          }

          elements.forEach((element) => {
            const el = element;
            if (done || el.done) return;
            Object.keys(props).forEach((prop) => {
              if (done || el.done) return;
              progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);
              easeProgress = a.easingProgress(params.easing, progress);
              const { initialValue, finalValue, unit } = el[prop];
              el[prop].currentValue = initialValue + (easeProgress * (finalValue - initialValue));
              const currentValue = el[prop].currentValue;

              if (
                (finalValue > initialValue && currentValue >= finalValue) ||
                (finalValue < initialValue && currentValue <= finalValue)) {
                el.container.style[prop] = finalValue + unit;
                propsDone += 1;
                if (propsDone === Object.keys(props).length) {
                  el.done = true;
                  elementsDone += 1;
                }
                if (elementsDone === elements.length) {
                  done = true;
                }
              }
              if (done) {
                a.done(params.complete);
                return;
              }
              el.container.style[prop] = currentValue + unit;
            });
          });
          if (done) return;
          // Then call
          a.frameId = requestAnimationFrame(render);
        }
        a.frameId = requestAnimationFrame(render);
        return a;
      },
    };

    if (a.elements.length === 0) {
      return els;
    }

    let animateInstance;
    for (let i = 0; i < a.elements.length; i += 1) {
      if (a.elements[i].dom7AnimateInstance) {
        animateInstance = a.elements[i].dom7AnimateInstance;
      } else a.elements[i].dom7AnimateInstance = a;
    }
    if (!animateInstance) {
      animateInstance = a;
    }

    if (initialProps === 'stop') {
      animateInstance.stop();
    } else {
      animateInstance.animate(a.props, a.params);
    }

    return els;
  }

  function stop() {
    const els = this;
    for (let i = 0; i < els.length; i += 1) {
      if (els[i].dom7AnimateInstance) {
        els[i].dom7AnimateInstance.stop();
      }
    }
  }

  var Animate = /*#__PURE__*/Object.freeze({
    animate: animate,
    stop: stop
  });

  const noTrigger = ('resize scroll').split(' ');
  function eventShortcut(name, ...args) {
    if (typeof args[0] === 'undefined') {
      for (let i = 0; i < this.length; i += 1) {
        if (noTrigger.indexOf(name) < 0) {
          if (name in this[i]) this[i][name]();
          else {
            $(this[i]).trigger(name);
          }
        }
      }
      return this;
    }
    return this.on(name, ...args);
  }

  function click(...args) {
    return eventShortcut.bind(this)('click', ...args);
  }
  function blur(...args) {
    return eventShortcut.bind(this)('blur', ...args);
  }
  function focus(...args) {
    return eventShortcut.bind(this)('focus', ...args);
  }
  function focusin(...args) {
    return eventShortcut.bind(this)('focusin', ...args);
  }
  function focusout(...args) {
    return eventShortcut.bind(this)('focusout', ...args);
  }
  function keyup(...args) {
    return eventShortcut.bind(this)('keyup', ...args);
  }
  function keydown(...args) {
    return eventShortcut.bind(this)('keydown', ...args);
  }
  function keypress(...args) {
    return eventShortcut.bind(this)('keypress', ...args);
  }
  function submit(...args) {
    return eventShortcut.bind(this)('submit', ...args);
  }
  function change(...args) {
    return eventShortcut.bind(this)('change', ...args);
  }
  function mousedown(...args) {
    return eventShortcut.bind(this)('mousedown', ...args);
  }
  function mousemove(...args) {
    return eventShortcut.bind(this)('mousemove', ...args);
  }
  function mouseup(...args) {
    return eventShortcut.bind(this)('mouseup', ...args);
  }
  function mouseenter(...args) {
    return eventShortcut.bind(this)('mouseenter', ...args);
  }
  function mouseleave(...args) {
    return eventShortcut.bind(this)('mouseleave', ...args);
  }
  function mouseout(...args) {
    return eventShortcut.bind(this)('mouseout', ...args);
  }
  function mouseover(...args) {
    return eventShortcut.bind(this)('mouseover', ...args);
  }
  function touchstart(...args) {
    return eventShortcut.bind(this)('touchstart', ...args);
  }
  function touchend(...args) {
    return eventShortcut.bind(this)('touchend', ...args);
  }
  function touchmove(...args) {
    return eventShortcut.bind(this)('touchmove', ...args);
  }
  function resize(...args) {
    return eventShortcut.bind(this)('resize', ...args);
  }
  function scroll(...args) {
    return eventShortcut.bind(this)('scroll', ...args);
  }

  var eventShortcuts = /*#__PURE__*/Object.freeze({
    click: click,
    blur: blur,
    focus: focus,
    focusin: focusin,
    focusout: focusout,
    keyup: keyup,
    keydown: keydown,
    keypress: keypress,
    submit: submit,
    change: change,
    mousedown: mousedown,
    mousemove: mousemove,
    mouseup: mouseup,
    mouseenter: mouseenter,
    mouseleave: mouseleave,
    mouseout: mouseout,
    mouseover: mouseover,
    touchstart: touchstart,
    touchend: touchend,
    touchmove: touchmove,
    resize: resize,
    scroll: scroll
  });

  [Methods, Scroll, Animate, eventShortcuts].forEach((group) => {
    Object.keys(group).forEach((methodName) => {
      $.fn[methodName] = group[methodName];
    });
  });

  /* eslint no-control-regex: "off" */

  // Remove Diacritics
  const defaultDiacriticsRemovalap = [
    { base: 'A', letters: '\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F' },
    { base: 'AA', letters: '\uA732' },
    { base: 'AE', letters: '\u00C6\u01FC\u01E2' },
    { base: 'AO', letters: '\uA734' },
    { base: 'AU', letters: '\uA736' },
    { base: 'AV', letters: '\uA738\uA73A' },
    { base: 'AY', letters: '\uA73C' },
    { base: 'B', letters: '\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181' },
    { base: 'C', letters: '\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E' },
    { base: 'D', letters: '\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779' },
    { base: 'DZ', letters: '\u01F1\u01C4' },
    { base: 'Dz', letters: '\u01F2\u01C5' },
    { base: 'E', letters: '\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E' },
    { base: 'F', letters: '\u0046\u24BB\uFF26\u1E1E\u0191\uA77B' },
    { base: 'G', letters: '\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E' },
    { base: 'H', letters: '\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D' },
    { base: 'I', letters: '\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197' },
    { base: 'J', letters: '\u004A\u24BF\uFF2A\u0134\u0248' },
    { base: 'K', letters: '\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2' },
    { base: 'L', letters: '\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780' },
    { base: 'LJ', letters: '\u01C7' },
    { base: 'Lj', letters: '\u01C8' },
    { base: 'M', letters: '\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C' },
    { base: 'N', letters: '\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4' },
    { base: 'NJ', letters: '\u01CA' },
    { base: 'Nj', letters: '\u01CB' },
    { base: 'O', letters: '\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C' },
    { base: 'OI', letters: '\u01A2' },
    { base: 'OO', letters: '\uA74E' },
    { base: 'OU', letters: '\u0222' },
    { base: 'OE', letters: '\u008C\u0152' },
    { base: 'oe', letters: '\u009C\u0153' },
    { base: 'P', letters: '\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754' },
    { base: 'Q', letters: '\u0051\u24C6\uFF31\uA756\uA758\u024A' },
    { base: 'R', letters: '\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782' },
    { base: 'S', letters: '\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784' },
    { base: 'T', letters: '\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786' },
    { base: 'TZ', letters: '\uA728' },
    { base: 'U', letters: '\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244' },
    { base: 'V', letters: '\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245' },
    { base: 'VY', letters: '\uA760' },
    { base: 'W', letters: '\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72' },
    { base: 'X', letters: '\u0058\u24CD\uFF38\u1E8A\u1E8C' },
    { base: 'Y', letters: '\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE' },
    { base: 'Z', letters: '\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762' },
    { base: 'a', letters: '\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250' },
    { base: 'aa', letters: '\uA733' },
    { base: 'ae', letters: '\u00E6\u01FD\u01E3' },
    { base: 'ao', letters: '\uA735' },
    { base: 'au', letters: '\uA737' },
    { base: 'av', letters: '\uA739\uA73B' },
    { base: 'ay', letters: '\uA73D' },
    { base: 'b', letters: '\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253' },
    { base: 'c', letters: '\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184' },
    { base: 'd', letters: '\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A' },
    { base: 'dz', letters: '\u01F3\u01C6' },
    { base: 'e', letters: '\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD' },
    { base: 'f', letters: '\u0066\u24D5\uFF46\u1E1F\u0192\uA77C' },
    { base: 'g', letters: '\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F' },
    { base: 'h', letters: '\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265' },
    { base: 'hv', letters: '\u0195' },
    { base: 'i', letters: '\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131' },
    { base: 'j', letters: '\u006A\u24D9\uFF4A\u0135\u01F0\u0249' },
    { base: 'k', letters: '\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3' },
    { base: 'l', letters: '\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747' },
    { base: 'lj', letters: '\u01C9' },
    { base: 'm', letters: '\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F' },
    { base: 'n', letters: '\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5' },
    { base: 'nj', letters: '\u01CC' },
    { base: 'o', letters: '\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275' },
    { base: 'oi', letters: '\u01A3' },
    { base: 'ou', letters: '\u0223' },
    { base: 'oo', letters: '\uA74F' },
    { base: 'p', letters: '\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755' },
    { base: 'q', letters: '\u0071\u24E0\uFF51\u024B\uA757\uA759' },
    { base: 'r', letters: '\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783' },
    { base: 's', letters: '\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B' },
    { base: 't', letters: '\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787' },
    { base: 'tz', letters: '\uA729' },
    { base: 'u', letters: '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289' },
    { base: 'v', letters: '\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C' },
    { base: 'vy', letters: '\uA761' },
    { base: 'w', letters: '\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73' },
    { base: 'x', letters: '\u0078\u24E7\uFF58\u1E8B\u1E8D' },
    { base: 'y', letters: '\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF' },
    { base: 'z', letters: '\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763' },
  ];

  const diacriticsMap = {};
  for (let i = 0; i < defaultDiacriticsRemovalap.length; i += 1) {
    const letters = defaultDiacriticsRemovalap[i].letters;
    for (let j = 0; j < letters.length; j += 1) {
      diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base;
    }
  }

  let uniqueNumber = 1;

  const Utils = {
    uniqueNumber() {
      uniqueNumber += 1;
      return uniqueNumber;
    },
    id(mask = 'xxxxxxxxxx', map = '0123456789abcdef') {
      const length = map.length;
      return mask.replace(/x/g, () => map[Math.floor((Math.random() * length))]);
    },
    mdPreloaderContent: `
    <span class="preloader-inner">
      <span class="preloader-inner-gap"></span>
      <span class="preloader-inner-left">
          <span class="preloader-inner-half-circle"></span>
      </span>
      <span class="preloader-inner-right">
          <span class="preloader-inner-half-circle"></span>
      </span>
    </span>
  `.trim(),
    iosPreloaderContent: `
    <span class="preloader-inner">
      ${[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(() => '<span class="preloader-inner-line"></span>').join('')}
    </span>
  `.trim(),
    auroraPreloaderContent: `
    <span class="preloader-inner">
      <span class="preloader-inner-circle"></span>
    </span>
  `,
    eventNameToColonCase(eventName) {
      let hasColon;
      return eventName.split('').map((char, index) => {
        if (char.match(/[A-Z]/) && index !== 0 && !hasColon) {
          hasColon = true;
          return `:${char.toLowerCase()}`;
        }
        return char.toLowerCase();
      }).join('');
    },
    deleteProps(obj) {
      const object = obj;
      Object.keys(object).forEach((key) => {
        try {
          object[key] = null;
        } catch (e) {
          // no setter for object
        }
        try {
          delete object[key];
        } catch (e) {
          // something got wrong
        }
      });
    },
    nextTick(callback, delay = 0) {
      return setTimeout(callback, delay);
    },
    nextFrame(callback) {
      return Utils.requestAnimationFrame(() => {
        Utils.requestAnimationFrame(callback);
      });
    },
    now() {
      return Date.now();
    },
    requestAnimationFrame(callback) {
      return win.requestAnimationFrame(callback);
    },
    cancelAnimationFrame(id) {
      return win.cancelAnimationFrame(id);
    },
    removeDiacritics(str) {
      return str.replace(/[^\u0000-\u007E]/g, a => diacriticsMap[a] || a);
    },
    parseUrlQuery(url) {
      const query = {};
      let urlToParse = url || win.location.href;
      let i;
      let params;
      let param;
      let length;
      if (typeof urlToParse === 'string' && urlToParse.length) {
        urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\S*\?/, '') : '';
        params = urlToParse.split('&').filter(paramsPart => paramsPart !== '');
        length = params.length;

        for (i = 0; i < length; i += 1) {
          param = params[i].replace(/#\S+/g, '').split('=');
          query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param.slice(1).join('=')) || '';
        }
      }
      return query;
    },
    getTranslate(el, axis = 'x') {
      let matrix;
      let curTransform;
      let transformMatrix;

      const curStyle = win.getComputedStyle(el, null);

      if (win.WebKitCSSMatrix) {
        curTransform = curStyle.transform || curStyle.webkitTransform;
        if (curTransform.split(',').length > 6) {
          curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');
        }
        // Some old versions of Webkit choke when 'none' is passed; pass
        // empty string instead in this case
        transformMatrix = new win.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
      } else {
        transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
        matrix = transformMatrix.toString().split(',');
      }

      if (axis === 'x') {
        // Latest Chrome and webkits Fix
        if (win.WebKitCSSMatrix) curTransform = transformMatrix.m41;
        // Crazy IE10 Matrix
        else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);
        // Normal Browsers
        else curTransform = parseFloat(matrix[4]);
      }
      if (axis === 'y') {
        // Latest Chrome and webkits Fix
        if (win.WebKitCSSMatrix) curTransform = transformMatrix.m42;
        // Crazy IE10 Matrix
        else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);
        // Normal Browsers
        else curTransform = parseFloat(matrix[5]);
      }
      return curTransform || 0;
    },
    serializeObject(obj, parents = []) {
      if (typeof obj === 'string') return obj;
      const resultArray = [];
      const separator = '&';
      let newParents;
      function varName(name) {
        if (parents.length > 0) {
          let parentParts = '';
          for (let j = 0; j < parents.length; j += 1) {
            if (j === 0) parentParts += parents[j];
            else parentParts += `[${encodeURIComponent(parents[j])}]`;
          }
          return `${parentParts}[${encodeURIComponent(name)}]`;
        }
        return encodeURIComponent(name);
      }
      function varValue(value) {
        return encodeURIComponent(value);
      }
      Object.keys(obj).forEach((prop) => {
        let toPush;
        if (Array.isArray(obj[prop])) {
          toPush = [];
          for (let i = 0; i < obj[prop].length; i += 1) {
            if (!Array.isArray(obj[prop][i]) && typeof obj[prop][i] === 'object') {
              newParents = parents.slice();
              newParents.push(prop);
              newParents.push(String(i));
              toPush.push(Utils.serializeObject(obj[prop][i], newParents));
            } else {
              toPush.push(`${varName(prop)}[]=${varValue(obj[prop][i])}`);
            }
          }
          if (toPush.length > 0) resultArray.push(toPush.join(separator));
        } else if (obj[prop] === null || obj[prop] === '') {
          resultArray.push(`${varName(prop)}=`);
        } else if (typeof obj[prop] === 'object') {
          // Object, convert to named array
          newParents = parents.slice();
          newParents.push(prop);
          toPush = Utils.serializeObject(obj[prop], newParents);
          if (toPush !== '') resultArray.push(toPush);
        } else if (typeof obj[prop] !== 'undefined' && obj[prop] !== '') {
          // Should be string or plain value
          resultArray.push(`${varName(prop)}=${varValue(obj[prop])}`);
        } else if (obj[prop] === '') resultArray.push(varName(prop));
      });
      return resultArray.join(separator);
    },
    isObject(o) {
      return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
    },
    merge(...args) {
      const to = args[0];
      args.splice(0, 1);
      const from = args;

      for (let i = 0; i < from.length; i += 1) {
        const nextSource = args[i];
        if (nextSource !== undefined && nextSource !== null) {
          const keysArray = Object.keys(Object(nextSource));
          for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
            const nextKey = keysArray[nextIndex];
            const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    },
    extend(...args) {
      let deep = true;
      let to;
      let from;
      if (typeof args[0] === 'boolean') {
        deep = args[0];
        to = args[1];
        args.splice(0, 2);
        from = args;
      } else {
        to = args[0];
        args.splice(0, 1);
        from = args;
      }
      for (let i = 0; i < from.length; i += 1) {
        const nextSource = args[i];
        if (nextSource !== undefined && nextSource !== null) {
          const keysArray = Object.keys(Object(nextSource));
          for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
            const nextKey = keysArray[nextIndex];
            const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) {
              if (!deep) {
                to[nextKey] = nextSource[nextKey];
              } else if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
                Utils.extend(to[nextKey], nextSource[nextKey]);
              } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {
                to[nextKey] = {};
                Utils.extend(to[nextKey], nextSource[nextKey]);
              } else {
                to[nextKey] = nextSource[nextKey];
              }
            }
          }
        }
      }
      return to;
    },
    colorHexToRgb(hex) {
      const h = hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (m, r, g, b) => r + r + g + g + b + b);
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(h);
      return result
        ? result.slice(1).map(n => parseInt(n, 16))
        : null;
    },
    colorRgbToHex(r, g, b) {
      const result = [r, g, b].map((n) => {
        const hex = n.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }).join('');
      return `#${result}`;
    },
    colorRgbToHsl(r, g, b) {
      r /= 255; // eslint-disable-line
      g /= 255; // eslint-disable-line
      b /= 255; // eslint-disable-line
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      const d = max - min;
      let h;
      if (d === 0) h = 0;
      else if (max === r) h = ((g - b) / d) % 6;
      else if (max === g) h = (b - r) / d + 2;
      else if (max === b) h = (r - g) / d + 4;
      const l = (min + max) / 2;
      const s = d === 0 ? 0 : d / (1 - Math.abs(2 * l - 1));
      if (h < 0) h = 360 / 60 + h;
      return [h * 60, s, l];
    },
    colorHslToRgb(h, s, l) {
      const c = (1 - Math.abs(2 * l - 1)) * s;
      const hp = h / 60;
      const x = c * (1 - Math.abs((hp % 2) - 1));
      let rgb1;
      if (Number.isNaN(h) || typeof h === 'undefined') {
        rgb1 = [0, 0, 0];
      } else if (hp <= 1) rgb1 = [c, x, 0];
      else if (hp <= 2) rgb1 = [x, c, 0];
      else if (hp <= 3) rgb1 = [0, c, x];
      else if (hp <= 4) rgb1 = [0, x, c];
      else if (hp <= 5) rgb1 = [x, 0, c];
      else if (hp <= 6) rgb1 = [c, 0, x];
      const m = l - (c / 2);
      return rgb1.map(n => Math.max(0, Math.min(255, Math.round(255 * (n + m)))));
    },
    colorHsbToHsl(h, s, b) {
      const HSL = {
        h,
        s: 0,
        l: 0,
      };
      const HSB = { h, s, b };

      HSL.l = (2 - HSB.s) * HSB.b / 2;
      HSL.s = HSL.l && HSL.l < 1 ? HSB.s * HSB.b / (HSL.l < 0.5 ? HSL.l * 2 : 2 - HSL.l * 2) : HSL.s;

      return [HSL.h, HSL.s, HSL.l];
    },
    colorHslToHsb(h, s, l) {
      const HSB = {
        h,
        s: 0,
        b: 0,
      };
      const HSL = { h, s, l };

      const t = HSL.s * (HSL.l < 0.5 ? HSL.l : 1 - HSL.l);
      HSB.b = HSL.l + t;
      HSB.s = HSL.l > 0 ? 2 * t / HSB.b : HSB.s;

      return [HSB.h, HSB.s, HSB.b];
    },
    colorThemeCSSProperties(...args) {
      let hex;
      let rgb;
      if (args.length === 1) {
        hex = args[0];
        rgb = Utils.colorHexToRgb(hex);
      } else if (args.length === 3) {
        rgb = args;
        hex = Utils.colorRgbToHex(...rgb);
      }
      if (!rgb) return {};
      const hsl = Utils.colorRgbToHsl(...rgb);
      const hslShade = [hsl[0], hsl[1], Math.max(0, (hsl[2] - 0.08))];
      const hslTint = [hsl[0], hsl[1], Math.max(0, (hsl[2] + 0.08))];
      const shade = Utils.colorRgbToHex(...Utils.colorHslToRgb(...hslShade));
      const tint = Utils.colorRgbToHex(...Utils.colorHslToRgb(...hslTint));
      return {
        '--f7-theme-color': hex,
        '--f7-theme-color-rgb': rgb.join(', '),
        '--f7-theme-color-shade': shade,
        '--f7-theme-color-tint': tint,
      };
    },
  };

  const Support = (function Support() {
    return {
      touch: !!(('ontouchstart' in win) || (win.DocumentTouch && doc instanceof win.DocumentTouch)),

      pointerEvents: !!win.PointerEvent && ('maxTouchPoints' in win.navigator) && win.navigator.maxTouchPoints >= 0,

      observer: (function checkObserver() {
        return ('MutationObserver' in win || 'WebkitMutationObserver' in win);
      }()),

      passiveListener: (function checkPassiveListener() {
        let supportsPassive = false;
        try {
          const opts = Object.defineProperty({}, 'passive', {
            // eslint-disable-next-line
            get() {
              supportsPassive = true;
            },
          });
          win.addEventListener('testPassiveListener', null, opts);
        } catch (e) {
          // No support
        }
        return supportsPassive;
      }()),

      gestures: (function checkGestures() {
        return 'ongesturestart' in win;
      }()),

      intersectionObserver: (function checkObserver() {
        return ('IntersectionObserver' in win);
      }()),
    };
  }());

  const Device = (function Device() {
    const platform = win.navigator.platform;
    const ua = win.navigator.userAgent;

    const device = {
      ios: false,
      android: false,
      androidChrome: false,
      desktop: false,
      iphone: false,
      ipod: false,
      ipad: false,
      edge: false,
      ie: false,
      firefox: false,
      macos: false,
      windows: false,
      cordova: !!(win.cordova || win.phonegap),
      phonegap: !!(win.cordova || win.phonegap),
      electron: false,
      nwjs: false,
    };

    const screenWidth = win.screen.width;
    const screenHeight = win.screen.height;

    const android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line
    let ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
    const ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
    const iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
    const ie = ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    const edge = ua.indexOf('Edge/') >= 0;
    const firefox = ua.indexOf('Gecko/') >= 0 && ua.indexOf('Firefox/') >= 0;
    const windows = platform === 'Win32';
    const electron = ua.toLowerCase().indexOf('electron') >= 0;
    const nwjs = typeof nw !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.nw !== 'undefined';
    let macos = platform === 'MacIntel';

    // iPadOs 13 fix
    const iPadScreens = [
      '1024x1366',
      '1366x1024',
      '834x1194',
      '1194x834',
      '834x1112',
      '1112x834',
      '768x1024',
      '1024x768',
      '820x1180',
      '1180x820',
      '810x1080',
      '1080x810',
    ];
    if (!ipad
      && macos
      && Support.touch
      && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0
    ) {
      ipad = ua.match(/(Version)\/([\d.]+)/);
      if (!ipad) ipad = [0, 1, '13_0_0'];
      macos = false;
    }

    device.ie = ie;
    device.edge = edge;
    device.firefox = firefox;

    // Android
    if (android && !windows) {
      device.os = 'android';
      device.osVersion = android[2];
      device.android = true;
      device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;
    }
    if (ipad || iphone || ipod) {
      device.os = 'ios';
      device.ios = true;
    }
    // iOS
    if (iphone && !ipod) {
      device.osVersion = iphone[2].replace(/_/g, '.');
      device.iphone = true;
    }
    if (ipad) {
      device.osVersion = ipad[2].replace(/_/g, '.');
      device.ipad = true;
    }
    if (ipod) {
      device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
      device.ipod = true;
    }
    // iOS 8+ changed UA
    if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {
      if (device.osVersion.split('.')[0] === '10') {
        device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];
      }
    }

    // Webview
    device.webView = !!((iphone || ipad || ipod) && (ua.match(/.*AppleWebKit(?!.*Safari)/i) || win.navigator.standalone))
      || (win.matchMedia && win.matchMedia('(display-mode: standalone)').matches);
    device.webview = device.webView;
    device.standalone = device.webView;

    // Desktop
    device.desktop = !(device.ios || device.android) || electron || nwjs;
    if (device.desktop) {
      device.electron = electron;
      device.nwjs = nwjs;
      device.macos = macos;
      device.windows = windows;
      if (device.macos) {
        device.os = 'macos';
      }
      if (device.windows) {
        device.os = 'windows';
      }
    }

    // Pixel Ratio
    device.pixelRatio = win.devicePixelRatio || 1;

    // Color Scheme
    const DARK = '(prefers-color-scheme: dark)';
    const LIGHT = '(prefers-color-scheme: light)';
    device.prefersColorScheme = function prefersColorTheme() {
      let theme;
      if (win.matchMedia && win.matchMedia(LIGHT).matches) {
        theme = 'light';
      }
      if (win.matchMedia && win.matchMedia(DARK).matches) {
        theme = 'dark';
      }
      return theme;
    };

    // Export object
    return device;
  }());

  class EventsClass {
    constructor(parents = []) {
      const self = this;
      self.eventsParents = parents;
      self.eventsListeners = {};
    }

    on(events, handler, priority) {
      const self = this;
      if (typeof handler !== 'function') return self;
      const method = priority ? 'unshift' : 'push';
      events.split(' ').forEach((event) => {
        if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
        self.eventsListeners[event][method](handler);
      });
      return self;
    }

    once(events, handler, priority) {
      const self = this;
      if (typeof handler !== 'function') return self;
      function onceHandler(...args) {
        self.off(events, onceHandler);
        if (onceHandler.f7proxy) {
          delete onceHandler.f7proxy;
        }
        handler.apply(self, args);
      }
      onceHandler.f7proxy = handler;
      return self.on(events, onceHandler, priority);
    }

    off(events, handler) {
      const self = this;
      if (!self.eventsListeners) return self;
      events.split(' ').forEach((event) => {
        if (typeof handler === 'undefined') {
          self.eventsListeners[event] = [];
        } else if (self.eventsListeners[event]) {
          self.eventsListeners[event].forEach((eventHandler, index) => {
            if (eventHandler === handler || (eventHandler.f7proxy && eventHandler.f7proxy === handler)) {
              self.eventsListeners[event].splice(index, 1);
            }
          });
        }
      });
      return self;
    }

    emit(...args) {
      const self = this;
      if (!self.eventsListeners) return self;
      let events;
      let data;
      let context;
      let eventsParents;
      if (typeof args[0] === 'string' || Array.isArray(args[0])) {
        events = args[0];
        data = args.slice(1, args.length);
        context = self;
        eventsParents = self.eventsParents;
      } else {
        events = args[0].events;
        data = args[0].data;
        context = args[0].context || self;
        eventsParents = args[0].local ? [] : args[0].parents || self.eventsParents;
      }
      const eventsArray = Array.isArray(events) ? events : events.split(' ');
      const localEvents = eventsArray.map(eventName => eventName.replace('local::', ''));
      const parentEvents = eventsArray.filter(eventName => eventName.indexOf('local::') < 0);

      localEvents.forEach((event) => {
        if (self.eventsListeners && self.eventsListeners[event]) {
          const handlers = [];
          self.eventsListeners[event].forEach((eventHandler) => {
            handlers.push(eventHandler);
          });
          handlers.forEach((eventHandler) => {
            eventHandler.apply(context, data);
          });
        }
      });
      if (eventsParents && eventsParents.length > 0) {
        eventsParents.forEach((eventsParent) => {
          eventsParent.emit(parentEvents, ...data);
        });
      }
      return self;
    }
  }

  class Framework7Class extends EventsClass {
    constructor(params = {}, parents = []) {
      super(parents);
      const self = this;
      self.params = params;

      if (self.params && self.params.on) {
        Object.keys(self.params.on).forEach((eventName) => {
          self.on(eventName, self.params.on[eventName]);
        });
      }
    }

    // eslint-disable-next-line
    useModuleParams(module, instanceParams) {
      if (module.params) {
        const originalParams = {};
        Object.keys(module.params).forEach((paramKey) => {
          if (typeof instanceParams[paramKey] === 'undefined') return;
          originalParams[paramKey] = Utils.extend({}, instanceParams[paramKey]);
        });
        Utils.extend(instanceParams, module.params);
        Object.keys(originalParams).forEach((paramKey) => {
          Utils.extend(instanceParams[paramKey], originalParams[paramKey]);
        });
      }
    }

    useModulesParams(instanceParams) {
      const instance = this;
      if (!instance.modules) return;
      Object.keys(instance.modules).forEach((moduleName) => {
        const module = instance.modules[moduleName];
        // Extend params
        if (module.params) {
          Utils.extend(instanceParams, module.params);
        }
      });
    }

    useModule(moduleName = '', moduleParams = {}) {
      const instance = this;
      if (!instance.modules) return;
      const module = typeof moduleName === 'string' ? instance.modules[moduleName] : moduleName;
      if (!module) return;

      // Extend instance methods and props
      if (module.instance) {
        Object.keys(module.instance).forEach((modulePropName) => {
          const moduleProp = module.instance[modulePropName];
          if (typeof moduleProp === 'function') {
            instance[modulePropName] = moduleProp.bind(instance);
          } else {
            instance[modulePropName] = moduleProp;
          }
        });
      }
      // Add event listeners
      if (module.on && instance.on) {
        Object.keys(module.on).forEach((moduleEventName) => {
          instance.on(moduleEventName, module.on[moduleEventName]);
        });
      }
      // Add vnode hooks
      if (module.vnode) {
        if (!instance.vnodeHooks) instance.vnodeHooks = {};
        Object.keys(module.vnode).forEach((vnodeId) => {
          Object.keys(module.vnode[vnodeId]).forEach((hookName) => {
            const handler = module.vnode[vnodeId][hookName];
            if (!instance.vnodeHooks[hookName]) instance.vnodeHooks[hookName] = {};
            if (!instance.vnodeHooks[hookName][vnodeId]) instance.vnodeHooks[hookName][vnodeId] = [];
            instance.vnodeHooks[hookName][vnodeId].push(handler.bind(instance));
          });
        });
      }
      // Module create callback
      if (module.create) {
        module.create.bind(instance)(moduleParams);
      }
    }

    useModules(modulesParams = {}) {
      const instance = this;
      if (!instance.modules) return;
      Object.keys(instance.modules).forEach((moduleName) => {
        const moduleParams = modulesParams[moduleName] || {};
        instance.useModule(moduleName, moduleParams);
      });
    }

    static set components(components) {
      const Class = this;
      if (!Class.use) return;
      Class.use(components);
    }

    static installModule(module, ...params) {
      const Class = this;
      if (!Class.prototype.modules) Class.prototype.modules = {};
      const name = module.name || (`${Object.keys(Class.prototype.modules).length}_${Utils.now()}`);
      Class.prototype.modules[name] = module;
      // Prototype
      if (module.proto) {
        Object.keys(module.proto).forEach((key) => {
          Class.prototype[key] = module.proto[key];
        });
      }
      // Class
      if (module.static) {
        Object.keys(module.static).forEach((key) => {
          Class[key] = module.static[key];
        });
      }
      // Callback
      if (module.install) {
        module.install.apply(Class, params);
      }
      return Class;
    }

    static use(module, ...params) {
      const Class = this;
      if (Array.isArray(module)) {
        module.forEach(m => Class.installModule(m));
        return Class;
      }
      return Class.installModule(module, ...params);
    }
  }

  function ConstructorMethods (parameters = {}) {
    const {
      defaultSelector,
      constructor: Constructor,
      domProp,
      app,
      addMethods,
    } = parameters;
    const methods = {
      create(...args) {
        if (app) return new Constructor(app, ...args);
        return new Constructor(...args);
      },
      get(el = defaultSelector) {
        if (el instanceof Constructor) return el;
        const $el = $(el);
        if ($el.length === 0) return undefined;
        return $el[0][domProp];
      },
      destroy(el) {
        const instance = methods.get(el);
        if (instance && instance.destroy) return instance.destroy();
        return undefined;
      },
    };
    if (addMethods && Array.isArray(addMethods)) {
      addMethods.forEach((methodName) => {
        methods[methodName] = (el = defaultSelector, ...args) => {
          const instance = methods.get(el);
          if (instance && instance[methodName]) return instance[methodName](...args);
          return undefined;
        };
      });
    }
    return methods;
  }

  function ModalMethods (parameters = {}) {
    const { defaultSelector, constructor: Constructor, app } = parameters;
    const methods = Utils.extend(
      ConstructorMethods({
        defaultSelector,
        constructor: Constructor,
        app,
        domProp: 'f7Modal',
      }),
      {
        open(el, animate, targetEl) {
          let $el = $(el);
          if ($el.length > 1 && targetEl) {
            // check if same modal in other page
            const $targetPage = $(targetEl).parents('.page');
            if ($targetPage.length) {
              $el.each((index, modalEl) => {
                const $modalEl = $(modalEl);
                if ($modalEl.parents($targetPage)[0] === $targetPage[0]) {
                  $el = $modalEl;
                }
              });
            }
          }
          if ($el.length > 1) {
            $el = $el.eq($el.length - 1);
          }
          if (!$el.length) return undefined;
          let instance = $el[0].f7Modal;
          if (!instance) {
            const params = $el.dataset();
            instance = new Constructor(app, { el: $el, ...params });
          }
          return instance.open(animate);
        },
        close(el = defaultSelector, animate, targetEl) {
          let $el = $(el);
          if (!$el.length) return undefined;
          if ($el.length > 1) {
            // check if close link (targetEl) in this modal
            let $parentEl;
            if (targetEl) {
              const $targetEl = $(targetEl);
              if ($targetEl.length) {
                $parentEl = $targetEl.parents($el);
              }
            }
            if ($parentEl && $parentEl.length > 0) {
              $el = $parentEl;
            } else {
              $el = $el.eq($el.length - 1);
            }
          }
          let instance = $el[0].f7Modal;
          if (!instance) {
            const params = $el.dataset();
            instance = new Constructor(app, { el: $el, ...params });
          }
          return instance.close(animate);
        },
      }
    );
    return methods;
  }

  const fetchedModules = [];
  function loadModule(moduleToLoad) {
    const Framework7 = this;
    return new Promise((resolve, reject) => {
      const app = Framework7.instance;
      let modulePath;
      let moduleObj;
      let moduleFunc;
      if (!moduleToLoad) {
        reject(new Error('Framework7: Lazy module must be specified'));
        return;
      }

      function install(module) {
        Framework7.use(module);

        if (app) {
          app.useModuleParams(module, app.params);
          app.useModule(module);
        }
      }

      if (typeof moduleToLoad === 'string') {
        const matchNamePattern = moduleToLoad.match(/([a-z0-9-]*)/i);
        if (moduleToLoad.indexOf('.') < 0 && matchNamePattern && matchNamePattern[0].length === moduleToLoad.length) {
          if (!app || (app && !app.params.lazyModulesPath)) {
            reject(new Error('Framework7: "lazyModulesPath" app parameter must be specified to fetch module by name'));
            return;
          }
          modulePath = `${app.params.lazyModulesPath}/${moduleToLoad}.js`;
        } else {
          modulePath = moduleToLoad;
        }
      } else if (typeof moduleToLoad === 'function') {
        moduleFunc = moduleToLoad;
      } else {
        // considering F7-Plugin object
        moduleObj = moduleToLoad;
      }

      if (moduleFunc) {
        const module = moduleFunc(Framework7, false);
        if (!module) {
          reject(new Error('Framework7: Can\'t find Framework7 component in specified component function'));
          return;
        }
        // Check if it was added
        if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {
          resolve();
          return;
        }
        // Install It
        install(module);

        resolve();
      }
      if (moduleObj) {
        const module = moduleObj;
        if (!module) {
          reject(new Error('Framework7: Can\'t find Framework7 component in specified component'));
          return;
        }
        // Check if it was added
        if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {
          resolve();
          return;
        }
        // Install It
        install(module);

        resolve();
      }
      if (modulePath) {
        if (fetchedModules.indexOf(modulePath) >= 0) {
          resolve();
          return;
        }
        fetchedModules.push(modulePath);
        const scriptLoad = new Promise((resolveScript, rejectScript) => {
          Framework7.request.get(
            modulePath,
            (scriptContent) => {
              const id = Utils.id();
              const callbackLoadName = `f7_component_loader_callback_${id}`;

              const scriptEl = doc.createElement('script');
              scriptEl.innerHTML = `window.${callbackLoadName} = function (Framework7, Framework7AutoInstallComponent) {return ${scriptContent.trim()}}`;
              $('head').append(scriptEl);

              const componentLoader = win[callbackLoadName];
              delete win[callbackLoadName];
              $(scriptEl).remove();

              const module = componentLoader(Framework7, false);

              if (!module) {
                rejectScript(new Error(`Framework7: Can't find Framework7 component in ${modulePath} file`));
                return;
              }

              // Check if it was added
              if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {
                resolveScript();
                return;
              }

              // Install It
              install(module);

              resolveScript();
            },
            (xhr, status) => {
              rejectScript(xhr, status);
            }
          );
        });
        const styleLoad = new Promise((resolveStyle) => {
          Framework7.request.get(
            modulePath.replace('.js', app.rtl ? '.rtl.css' : '.css'),
            (styleContent) => {
              const styleEl = doc.createElement('style');
              styleEl.innerHTML = styleContent;
              $('head').append(styleEl);

              resolveStyle();
            },
            () => {
              resolveStyle();
            }
          );
        });

        Promise.all([scriptLoad, styleLoad]).then(() => {
          resolve();
        }).catch((err) => {
          reject(err);
        });
      }
    });
  }

  class Framework7 extends Framework7Class {
    constructor(params) {
      super(params);
      if (Framework7.instance) {
        throw new Error('Framework7 is already initialized and can\'t be initialized more than once');
      }

      const passedParams = Utils.extend({}, params);

      // App Instance
      const app = this;

      Framework7.instance = app;

      // Default
      const defaults = {
        version: '1.0.0',
        id: 'io.framework7.testapp',
        root: 'body',
        theme: 'auto',
        language: win.navigator.language,
        routes: [],
        name: 'Framework7',
        lazyModulesPath: null,
        initOnDeviceReady: true,
        init: true,
        autoDarkTheme: false,
        iosTranslucentBars: true,
        iosTranslucentModals: true,
        component: undefined,
        componentUrl: undefined,
      };

      // Extend defaults with modules params
      app.useModulesParams(defaults);

      // Extend defaults with passed params
      app.params = Utils.extend(defaults, params);

      const $rootEl = $(app.params.root);

      Utils.extend(app, {
        // App Id
        id: app.params.id,
        // App Name
        name: app.params.name,
        // App version
        version: app.params.version,
        // Routes
        routes: app.params.routes,
        // Lang
        language: app.params.language,
        // Root
        root: $rootEl,
        // RTL
        rtl: $rootEl.css('direction') === 'rtl',
        // Theme
        theme: (function getTheme() {
          if (app.params.theme === 'auto') {
            if (Device.ios) return 'ios';
            if (Device.desktop && Device.electron) return 'aurora';
            return 'md';
          }
          return app.params.theme;
        }()),
        // Initially passed parameters
        passedParams,
        online: win.navigator.onLine,
      });

      // Save Root
      if (app.root && app.root[0]) {
        app.root[0].f7 = app;
      }

      // Install Modules
      app.useModules();

      // Init Data & Methods
      app.initData();

      // Auto Dark Theme
      const DARK = '(prefers-color-scheme: dark)';
      const LIGHT = '(prefers-color-scheme: light)';
      app.mq = {};
      if (win.matchMedia) {
        app.mq.dark = win.matchMedia(DARK);
        app.mq.light = win.matchMedia(LIGHT);
      }
      app.colorSchemeListener = function colorSchemeListener({ matches, media }) {
        if (!matches) {
          return;
        }
        const html = doc.querySelector('html');
        if (media === DARK) {
          html.classList.add('theme-dark');
          app.darkTheme = true;
          app.emit('darkThemeChange', true);
        } else if (media === LIGHT) {
          html.classList.remove('theme-dark');
          app.darkTheme = false;
          app.emit('darkThemeChange', false);
        }
      };

      // Init
      if (app.params.init) {
        if (Device.cordova && app.params.initOnDeviceReady) {
          $(doc).on('deviceready', () => {
            app.init();
          });
        } else {
          app.init();
        }
      }

      // Return app instance
      return app;
    }

    initData() {
      const app = this;

      // Data
      app.data = {};
      if (app.params.data && typeof app.params.data === 'function') {
        Utils.extend(app.data, app.params.data.bind(app)());
      } else if (app.params.data) {
        Utils.extend(app.data, app.params.data);
      }
      // Methods
      app.methods = {};
      if (app.params.methods) {
        Object.keys(app.params.methods).forEach((methodName) => {
          if (typeof app.params.methods[methodName] === 'function') {
            app.methods[methodName] = app.params.methods[methodName].bind(app);
          } else {
            app.methods[methodName] = app.params.methods[methodName];
          }
        });
      }
    }

    enableAutoDarkTheme() {
      if (!win.matchMedia) return;
      const app = this;
      const html = doc.querySelector('html');
      if (app.mq.dark && app.mq.light) {
        app.mq.dark.addListener(app.colorSchemeListener);
        app.mq.light.addListener(app.colorSchemeListener);
      }
      if (app.mq.dark && app.mq.dark.matches) {
        html.classList.add('theme-dark');
        app.darkTheme = true;
        app.emit('darkThemeChange', true);
      } else if (app.mq.light && app.mq.light.matches) {
        html.classList.remove('theme-dark');
        app.darkTheme = false;
        app.emit('darkThemeChange', false);
      }
    }

    disableAutoDarkTheme() {
      if (!win.matchMedia) return;
      const app = this;
      if (app.mq.dark) app.mq.dark.removeListener(app.colorSchemeListener);
      if (app.mq.light) app.mq.light.removeListener(app.colorSchemeListener);
    }

    initAppComponent(callback) {
      const app = this;
      app.router.componentLoader(
        app.params.component,
        app.params.componentUrl,
        { componentOptions: { el: app.root[0], root: true } },
        (el) => {
          app.root = $(el);
          app.root[0].f7 = app;
          app.rootComponent = el.f7Component;
          if (callback) callback();
        },
        () => {}
      );
    }

    // eslint-disable-next-line
    _init() {
      const app = this;
      if (app.initialized) return app;

      app.root.addClass('framework7-initializing');

      // RTL attr
      if (app.rtl) {
        $('html').attr('dir', 'rtl');
      }

      // Auto Dark Theme
      if (app.params.autoDarkTheme) {
        app.enableAutoDarkTheme();
      }

      // Watch for online/offline state
      win.addEventListener('offline', () => {
        app.online = false;
        app.emit('offline');
        app.emit('connection', false);
      });
      win.addEventListener('online', () => {
        app.online = true;
        app.emit('online');
        app.emit('connection', true);
      });

      // Root class
      app.root.addClass('framework7-root');

      // Theme class
      $('html').removeClass('ios md aurora').addClass(app.theme);

      // iOS Translucent
      if (app.params.iosTranslucentBars && app.theme === 'ios' && Device.ios) {
        $('html').addClass('ios-translucent-bars');
      }
      if (app.params.iosTranslucentModals && app.theme === 'ios' && Device.ios) {
        $('html').addClass('ios-translucent-modals');
      }

      // Init class
      Utils.nextFrame(() => {
        app.root.removeClass('framework7-initializing');
      });
      // Emit, init other modules
      app.initialized = true;
      app.emit('init');

      return app;
    }

    init() {
      const app = this;
      if (app.params.component || app.params.componentUrl) {
        app.initAppComponent(() => {
          app._init(); // eslint-disable-line
        });
      } else {
        app._init(); // eslint-disable-line
      }
    }

    // eslint-disable-next-line
    loadModule(...args) {
      return Framework7.loadModule(...args);
    }

    // eslint-disable-next-line
    loadModules(...args) {
      return Framework7.loadModules(...args);
    }

    getVnodeHooks(hook, id) {
      const app = this;
      if (!app.vnodeHooks || !app.vnodeHooks[hook]) return [];
      return app.vnodeHooks[hook][id] || [];
    }

    // eslint-disable-next-line
    get $() {
      return $;
    }
    // eslint-disable-next-line
    get t7() {
      return Template7;
    }

    static get Dom7() {
      return $;
    }

    static get $() {
      return $;
    }

    static get Template7() {
      return Template7;
    }

    static get Class() {
      return Framework7Class;
    }

    static get Events() {
      return EventsClass;
    }
  }

  Framework7.ModalMethods = ModalMethods;
  Framework7.ConstructorMethods = ConstructorMethods;

  Framework7.loadModule = loadModule;
  Framework7.loadModules = function loadModules(modules) {
    return Promise.all(modules.map(module => Framework7.loadModule(module)));
  };

  const globals = {};
  let jsonpRequests = 0;

  function Request(requestOptions) {
    const globalsNoCallbacks = Utils.extend({}, globals);
    ('beforeCreate beforeOpen beforeSend error complete success statusCode').split(' ').forEach((callbackName) => {
      delete globalsNoCallbacks[callbackName];
    });
    const defaults = Utils.extend({
      url: win.location.toString(),
      method: 'GET',
      data: false,
      async: true,
      cache: true,
      user: '',
      password: '',
      headers: {},
      xhrFields: {},
      statusCode: {},
      processData: true,
      dataType: 'text',
      contentType: 'application/x-www-form-urlencoded',
      timeout: 0,
    }, globalsNoCallbacks);

    const options = Utils.extend({}, defaults, requestOptions);
    let proceedRequest;

    // Function to run XHR callbacks and events
    function fireCallback(callbackName, ...data) {
      /*
        Callbacks:
        beforeCreate (options),
        beforeOpen (xhr, options),
        beforeSend (xhr, options),
        error (xhr, status, message),
        complete (xhr, stautus),
        success (response, status, xhr),
        statusCode ()
      */
      let globalCallbackValue;
      let optionCallbackValue;
      if (globals[callbackName]) {
        globalCallbackValue = globals[callbackName](...data);
      }
      if (options[callbackName]) {
        optionCallbackValue = options[callbackName](...data);
      }
      if (typeof globalCallbackValue !== 'boolean') globalCallbackValue = true;
      if (typeof optionCallbackValue !== 'boolean') optionCallbackValue = true;
      return (globalCallbackValue && optionCallbackValue);
    }

    // Before create callback
    proceedRequest = fireCallback('beforeCreate', options);
    if (proceedRequest === false) return undefined;

    // For jQuery guys
    if (options.type) options.method = options.type;

    // Parameters Prefix
    let paramsPrefix = options.url.indexOf('?') >= 0 ? '&' : '?';

    // UC method
    const method = options.method.toUpperCase();

    // Data to modify GET URL
    if ((method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') && options.data) {
      let stringData;
      if (typeof options.data === 'string') {
        // Should be key=value string
        if (options.data.indexOf('?') >= 0) stringData = options.data.split('?')[1];
        else stringData = options.data;
      } else {
        // Should be key=value object
        stringData = Utils.serializeObject(options.data);
      }
      if (stringData.length) {
        options.url += paramsPrefix + stringData;
        if (paramsPrefix === '?') paramsPrefix = '&';
      }
    }

    // JSONP
    if (options.dataType === 'json' && options.url.indexOf('callback=') >= 0) {
      const callbackName = `f7jsonp_${Date.now() + ((jsonpRequests += 1))}`;
      let abortTimeout;
      const callbackSplit = options.url.split('callback=');
      let requestUrl = `${callbackSplit[0]}callback=${callbackName}`;
      if (callbackSplit[1].indexOf('&') >= 0) {
        const addVars = callbackSplit[1].split('&').filter(el => el.indexOf('=') > 0).join('&');
        if (addVars.length > 0) requestUrl += `&${addVars}`;
      }

      // Create script
      let script = doc.createElement('script');
      script.type = 'text/javascript';
      script.onerror = function onerror() {
        clearTimeout(abortTimeout);
        fireCallback('error', null, 'scripterror', 'scripterror');
        fireCallback('complete', null, 'scripterror');
      };
      script.src = requestUrl;

      // Handler
      win[callbackName] = function jsonpCallback(data) {
        clearTimeout(abortTimeout);
        fireCallback('success', data);
        script.parentNode.removeChild(script);
        script = null;
        delete win[callbackName];
      };
      doc.querySelector('head').appendChild(script);

      if (options.timeout > 0) {
        abortTimeout = setTimeout(() => {
          script.parentNode.removeChild(script);
          script = null;
          fireCallback('error', null, 'timeout', 'timeout');
        }, options.timeout);
      }

      return undefined;
    }

    // Cache for GET/HEAD requests
    if (method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') {
      if (options.cache === false) {
        options.url += `${paramsPrefix}_nocache${Date.now()}`;
      }
    }

    // Create XHR
    const xhr = new XMLHttpRequest();

    // Save Request URL
    xhr.requestUrl = options.url;
    xhr.requestParameters = options;

    // Before open callback
    proceedRequest = fireCallback('beforeOpen', xhr, options);
    if (proceedRequest === false) return xhr;

    // Open XHR
    xhr.open(method, options.url, options.async, options.user, options.password);

    // Create POST Data
    let postData = null;

    if ((method === 'POST' || method === 'PUT' || method === 'PATCH') && options.data) {
      if (options.processData) {
        const postDataInstances = [ArrayBuffer, Blob, Document, FormData];
        // Post Data
        if (postDataInstances.indexOf(options.data.constructor) >= 0) {
          postData = options.data;
        } else {
          // POST Headers
          const boundary = `---------------------------${Date.now().toString(16)}`;

          if (options.contentType === 'multipart/form-data') {
            xhr.setRequestHeader('Content-Type', `multipart/form-data; boundary=${boundary}`);
          } else {
            xhr.setRequestHeader('Content-Type', options.contentType);
          }
          postData = '';
          let data = Utils.serializeObject(options.data);
          if (options.contentType === 'multipart/form-data') {
            data = data.split('&');
            const newData = [];
            for (let i = 0; i < data.length; i += 1) {
              newData.push(`Content-Disposition: form-data; name="${data[i].split('=')[0]}"\r\n\r\n${data[i].split('=')[1]}\r\n`);
            }
            postData = `--${boundary}\r\n${newData.join(`--${boundary}\r\n`)}--${boundary}--\r\n`;
          } else if (options.contentType === 'application/json') {
            postData = JSON.stringify(options.data);
          } else {
            postData = data;
          }
        }
      } else {
        postData = options.data;
        xhr.setRequestHeader('Content-Type', options.contentType);
      }
    }
    if (options.dataType === 'json' && (!options.headers || !options.headers.Accept)) {
      xhr.setRequestHeader('Accept', 'application/json');
    }

    // Additional headers
    if (options.headers) {
      Object.keys(options.headers).forEach((headerName) => {
        if (typeof options.headers[headerName] === 'undefined') return;
        xhr.setRequestHeader(headerName, options.headers[headerName]);
      });
    }

    // Check for crossDomain
    if (typeof options.crossDomain === 'undefined') {
      // eslint-disable-next-line
      options.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(options.url) && RegExp.$2 !== win.location.host;
    }

    if (!options.crossDomain) {
      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    }

    if (options.xhrFields) {
      Utils.extend(xhr, options.xhrFields);
    }


    // Handle XHR
    xhr.onload = function onload() {
      if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {
        let responseData;
        if (options.dataType === 'json') {
          let parseError;
          try {
            responseData = JSON.parse(xhr.responseText);
          } catch (err) {
            parseError = true;
          }
          if (!parseError) {
            fireCallback('success', responseData, xhr.status, xhr);
          } else {
            fireCallback('error', xhr, 'parseerror', 'parseerror');
          }
        } else {
          responseData = xhr.responseType === 'text' || xhr.responseType === '' ? xhr.responseText : xhr.response;
          fireCallback('success', responseData, xhr.status, xhr);
        }
      } else {
        fireCallback('error', xhr, xhr.status, xhr.statusText);
      }
      if (options.statusCode) {
        if (globals.statusCode && globals.statusCode[xhr.status]) globals.statusCode[xhr.status](xhr);
        if (options.statusCode[xhr.status]) options.statusCode[xhr.status](xhr);
      }
      fireCallback('complete', xhr, xhr.status);
    };

    xhr.onerror = function onerror() {
      fireCallback('error', xhr, xhr.status, xhr.status);
      fireCallback('complete', xhr, 'error');
    };

    // Timeout
    if (options.timeout > 0) {
      xhr.timeout = options.timeout;
      xhr.ontimeout = () => {
        fireCallback('error', xhr, 'timeout', 'timeout');
        fireCallback('complete', xhr, 'timeout');
      };
    }

    // Ajax start callback
    proceedRequest = fireCallback('beforeSend', xhr, options);
    if (proceedRequest === false) return xhr;

    // Send XHR
    xhr.send(postData);

    // Return XHR object
    return xhr;
  }
  function RequestShortcut(method, ...args) {
    let [url, data, success, error, dataType] = [];
    if (typeof args[1] === 'function') {
      [url, success, error, dataType] = args;
    } else {
      [url, data, success, error, dataType] = args;
    }
    [success, error].forEach((callback) => {
      if (typeof callback === 'string') {
        dataType = callback;
        if (callback === success) success = undefined;
        else error = undefined;
      }
    });
    dataType = dataType || (method === 'json' || method === 'postJSON' ? 'json' : undefined);
    const requestOptions = {
      url,
      method: method === 'post' || method === 'postJSON' ? 'POST' : 'GET',
      data,
      success,
      error,
      dataType,
    };
    if (method === 'postJSON') {
      Utils.extend(requestOptions, {
        contentType: 'application/json',
        processData: false,
        crossDomain: true,
        data: typeof data === 'string' ? data : JSON.stringify(data),
      });
    }
    return Request(requestOptions);
  }
  function RequestShortcutPromise(method, ...args) {
    const [url, data, dataType] = args;
    return new Promise((resolve, reject) => {
      RequestShortcut(
        method,
        url,
        data,
        (responseData, status, xhr) => {
          resolve({ data: responseData, status, xhr });
        },
        (xhr, status, message) => {
          // eslint-disable-next-line
          reject({ xhr, status, message });
        },
        dataType
      );
    });
  }
  Object.assign(Request, {
    get: (...args) => RequestShortcut('get', ...args),
    post: (...args) => RequestShortcut('post', ...args),
    json: (...args) => RequestShortcut('json', ...args),
    getJSON: (...args) => RequestShortcut('json', ...args),
    postJSON: (...args) => RequestShortcut('postJSON', ...args),
  });

  Request.promise = function requestPromise(requestOptions) {
    return new Promise((resolve, reject) => {
      Request(Object.assign(requestOptions, {
        success(data, status, xhr) {
          resolve({ data, status, xhr });
        },
        error(xhr, status, message) {
          // eslint-disable-next-line
          reject({ xhr, status, message });
        },
      }));
    });
  };
  Object.assign(Request.promise, {
    get: (...args) => RequestShortcutPromise('get', ...args),
    post: (...args) => RequestShortcutPromise('post', ...args),
    json: (...args) => RequestShortcutPromise('json', ...args),
    getJSON: (...args) => RequestShortcutPromise('json', ...args),
    postJSON: (...args) => RequestShortcutPromise('postJSON', ...args),
  });

  Request.setup = function setup(options) {
    if (options.type && !options.method) {
      Utils.extend(options, { method: options.type });
    }
    Utils.extend(globals, options);
  };

  var DeviceModule = {
    name: 'device',
    proto: {
      device: Device,
    },
    static: {
      device: Device,
    },
    on: {
      init() {
        const classNames = [];
        const html = doc.querySelector('html');
        const metaStatusbar = doc.querySelector('meta[name="apple-mobile-web-app-status-bar-style"]');
        if (!html) return;
        if (Device.standalone && Device.ios && metaStatusbar && metaStatusbar.content === 'black-translucent') {
          classNames.push('device-full-viewport');
        }

        // Pixel Ratio
        classNames.push(`device-pixel-ratio-${Math.floor(Device.pixelRatio)}`);
        // OS classes
        if (Device.os && !Device.desktop) {
          classNames.push(
            `device-${Device.os}`,
          );
        } else if (Device.desktop) {
          classNames.push('device-desktop');
          if (Device.os) {
            classNames.push(`device-${Device.os}`);
          }
        }
        if (Device.cordova || Device.phonegap) {
          classNames.push('device-cordova');
        }

        // Add html classes
        classNames.forEach((className) => {
          html.classList.add(className);
        });
      },
    },
  };

  var SupportModule = {
    name: 'support',
    proto: {
      support: Support,
    },
    static: {
      support: Support,
    },
  };

  var UtilsModule = {
    name: 'utils',
    proto: {
      utils: Utils,
    },
    static: {
      utils: Utils,
    },
  };

  var ResizeModule = {
    name: 'resize',
    instance: {
      getSize() {
        const app = this;
        if (!app.root[0]) return { width: 0, height: 0, left: 0, top: 0 };
        const offset = app.root.offset();
        const [width, height, left, top] = [app.root[0].offsetWidth, app.root[0].offsetHeight, offset.left, offset.top];
        app.width = width;
        app.height = height;
        app.left = left;
        app.top = top;
        return { width, height, left, top };
      },
    },
    on: {
      init() {
        const app = this;

        // Get Size
        app.getSize();

        // Emit resize
        win.addEventListener('resize', () => {
          app.emit('resize');
        }, false);

        // Emit orientationchange
        win.addEventListener('orientationchange', () => {
          app.emit('orientationchange');
        });
      },
      orientationchange() {
        const app = this;
        // Fix iPad weird body scroll
        if (app.device.ipad) {
          doc.body.scrollLeft = 0;
          setTimeout(() => {
            doc.body.scrollLeft = 0;
          }, 0);
        }
      },
      resize() {
        const app = this;
        app.getSize();
      },
    },
  };

  /* eslint no-param-reassign: "off" */

  var RequestModule = {
    name: 'request',
    proto: {
      request: Request,
    },
    static: {
      request: Request,
    },
  };

  /* eslint-disable no-nested-ternary */

  function initTouch() {
    const app = this;
    const params = app.params.touch;
    const useRipple = params[`${app.theme}TouchRipple`];

    if (Device.ios && Device.webView) {
      // Strange hack required for iOS 8 webview to work on inputs
      win.addEventListener('touchstart', () => {});
    }

    let touchStartX;
    let touchStartY;
    let targetElement;
    let isMoved;
    let tapHoldFired;
    let tapHoldTimeout;
    let preventClick;

    let activableElement;
    let activeTimeout;

    let rippleWave;
    let rippleTarget;
    let rippleTimeout;

    function findActivableElement(el) {
      const target = $(el);
      const parents = target.parents(params.activeStateElements);
      if (target.closest('.no-active-state').length) {
        return null;
      }
      let activable;
      if (target.is(params.activeStateElements)) {
        activable = target;
      }
      if (parents.length > 0) {
        activable = activable ? activable.add(parents) : parents;
      }
      if (activable && activable.length > 1) {
        const newActivable = [];
        let preventPropagation;
        for (let i = 0; i < activable.length; i += 1) {
          if (!preventPropagation) {
            newActivable.push(activable[i]);
            if (activable.eq(i).hasClass('prevent-active-state-propagation')
              || activable.eq(i).hasClass('no-active-state-propagation')
            ) {
              preventPropagation = true;
            }
          }
        }
        activable = $(newActivable);
      }
      return activable || target;
    }

    function isInsideScrollableView(el) {
      const pageContent = el.parents('.page-content');
      return pageContent.length > 0;
    }

    function addActive() {
      if (!activableElement) return;
      activableElement.addClass('active-state');
    }
    function removeActive() {
      if (!activableElement) return;
      activableElement.removeClass('active-state');
      activableElement = null;
    }

    // Ripple handlers
    function findRippleElement(el) {
      const rippleElements = params.touchRippleElements;
      const $el = $(el);
      if ($el.is(rippleElements)) {
        if ($el.hasClass('no-ripple')) {
          return false;
        }
        return $el;
      }
      if ($el.parents(rippleElements).length > 0) {
        const rippleParent = $el.parents(rippleElements).eq(0);
        if (rippleParent.hasClass('no-ripple')) {
          return false;
        }
        return rippleParent;
      }
      return false;
    }
    function createRipple($el, x, y) {
      if (!$el) return;
      rippleWave = app.touchRipple.create($el, x, y);
    }

    function removeRipple() {
      if (!rippleWave) return;
      rippleWave.remove();
      rippleWave = undefined;
      rippleTarget = undefined;
    }
    function rippleTouchStart(el) {
      rippleTarget = findRippleElement(el);
      if (!rippleTarget || rippleTarget.length === 0) {
        rippleTarget = undefined;
        return;
      }
      const inScrollable = isInsideScrollableView(rippleTarget);

      if (!inScrollable) {
        removeRipple();
        createRipple(rippleTarget, touchStartX, touchStartY);
      } else {
        clearTimeout(rippleTimeout);
        rippleTimeout = setTimeout(() => {
          removeRipple();
          createRipple(rippleTarget, touchStartX, touchStartY);
        }, 80);
      }
    }
    function rippleTouchMove() {
      clearTimeout(rippleTimeout);
      removeRipple();
    }
    function rippleTouchEnd() {
      if (!rippleWave && rippleTarget && !isMoved) {
        clearTimeout(rippleTimeout);
        createRipple(rippleTarget, touchStartX, touchStartY);
        setTimeout(removeRipple, 0);
      } else {
        removeRipple();
      }
    }

    // Mouse Handlers
    function handleMouseDown(e) {
      const $activableEl = findActivableElement(e.target);
      if ($activableEl) {
        $activableEl.addClass('active-state');
        if ('which' in e && e.which === 3) {
          setTimeout(() => {
            $('.active-state').removeClass('active-state');
          }, 0);
        }
      }

      if (useRipple) {
        touchStartX = e.pageX;
        touchStartY = e.pageY;
        rippleTouchStart(e.target, e.pageX, e.pageY);
      }
    }
    function handleMouseMove() {
      if (!params.activeStateOnMouseMove) {
        $('.active-state').removeClass('active-state');
      }
      if (useRipple) {
        rippleTouchMove();
      }
    }
    function handleMouseUp() {
      $('.active-state').removeClass('active-state');
      if (useRipple) {
        rippleTouchEnd();
      }
    }

    function handleTouchCancel() {
      targetElement = null;

      // Remove Active State
      clearTimeout(activeTimeout);
      clearTimeout(tapHoldTimeout);
      if (params.activeState) {
        removeActive();
      }

      // Remove Ripple
      if (useRipple) {
        rippleTouchEnd();
      }
    }

    function handleTouchStart(e) {
      isMoved = false;
      tapHoldFired = false;
      preventClick = false;
      if (e.targetTouches.length > 1) {
        if (activableElement) removeActive();
        return true;
      }
      if (e.touches.length > 1 && activableElement) {
        removeActive();
      }
      if (params.tapHold) {
        if (tapHoldTimeout) clearTimeout(tapHoldTimeout);
        tapHoldTimeout = setTimeout(() => {
          if (e && e.touches && e.touches.length > 1) return;
          tapHoldFired = true;
          e.preventDefault();
          preventClick = true;
          $(e.target).trigger('taphold', e);
          app.emit('taphold', e);
        }, params.tapHoldDelay);
      }
      targetElement = e.target;
      touchStartX = e.targetTouches[0].pageX;
      touchStartY = e.targetTouches[0].pageY;

      if (params.activeState) {
        activableElement = findActivableElement(targetElement);
        if (activableElement && !isInsideScrollableView(activableElement)) {
          addActive();
        } else if (activableElement) {
          activeTimeout = setTimeout(addActive, 80);
        }
      }
      if (useRipple) {
        rippleTouchStart(targetElement);
      }
      return true;
    }
    function handleTouchMove(e) {
      let touch;
      let distance;
      if (e.type === 'touchmove') {
        touch = e.targetTouches[0];
        distance = params.touchClicksDistanceThreshold;
      }

      if (distance && touch) {
        const pageX = touch.pageX;
        const pageY = touch.pageY;
        if (Math.abs(pageX - touchStartX) > distance || Math.abs(pageY - touchStartY) > distance) {
          isMoved = true;
        }
      } else {
        isMoved = true;
      }
      if (isMoved) {
        preventClick = true;
        if (params.tapHold) {
          clearTimeout(tapHoldTimeout);
        }
        if (params.activeState) {
          clearTimeout(activeTimeout);
          removeActive();
        }
        if (useRipple) {
          rippleTouchMove();
        }
      }
    }
    function handleTouchEnd(e) {
      clearTimeout(activeTimeout);
      clearTimeout(tapHoldTimeout);
      if (doc.activeElement === e.target) {
        if (params.activeState) removeActive();
        if (useRipple) {
          rippleTouchEnd();
        }
        return true;
      }
      if (params.activeState) {
        addActive();
        setTimeout(removeActive, 0);
      }
      if (useRipple) {
        rippleTouchEnd();
      }
      if ((params.tapHoldPreventClicks && tapHoldFired) || preventClick) {
        if (e.cancelable) e.preventDefault();
        preventClick = true;
        return false;
      }
      return true;
    }
    function handleClick(e) {
      const isOverswipe = e && e.detail && e.detail === 'f7Overswipe';
      let localPreventClick = preventClick;
      if (targetElement && e.target !== targetElement) {
        if (isOverswipe) {
          localPreventClick = false;
        } else {
          localPreventClick = true;
        }
      }
      if (params.tapHold && params.tapHoldPreventClicks && tapHoldFired) {
        localPreventClick = true;
      }
      if (localPreventClick) {
        e.stopImmediatePropagation();
        e.stopPropagation();
        e.preventDefault();
      }

      if (params.tapHold) {
        tapHoldTimeout = setTimeout(
          () => {
            tapHoldFired = false;
          },
          (Device.ios || Device.androidChrome ? 100 : 400)
        );
      }
      preventClick = false;
      targetElement = null;

      return !localPreventClick;
    }

    function emitAppTouchEvent(name, e) {
      app.emit({
        events: name,
        data: [e],
      });
    }
    function appClick(e) {
      emitAppTouchEvent('click', e);
    }
    function appTouchStartActive(e) {
      emitAppTouchEvent('touchstart touchstart:active', e);
    }
    function appTouchMoveActive(e) {
      emitAppTouchEvent('touchmove touchmove:active', e);
    }
    function appTouchEndActive(e) {
      emitAppTouchEvent('touchend touchend:active', e);
    }
    function appTouchStartPassive(e) {
      emitAppTouchEvent('touchstart:passive', e);
    }
    function appTouchMovePassive(e) {
      emitAppTouchEvent('touchmove:passive', e);
    }
    function appTouchEndPassive(e) {
      emitAppTouchEvent('touchend:passive', e);
    }
    function appGestureActive(e) {
      emitAppTouchEvent(`${e.type} ${e.type}:active`, e);
    }
    function appGesturePassive(e) {
      emitAppTouchEvent(`${e.type}:passive`, e);
    }


    const passiveListener = Support.passiveListener ? { passive: true } : false;
    const passiveListenerCapture = Support.passiveListener ? { passive: true, capture: true } : true;
    const activeListener = Support.passiveListener ? { passive: false } : false;
    const activeListenerCapture = Support.passiveListener ? { passive: false, capture: true } : true;

    doc.addEventListener('click', appClick, true);

    if (Support.passiveListener) {
      doc.addEventListener(app.touchEvents.start, appTouchStartActive, activeListenerCapture);
      doc.addEventListener(app.touchEvents.move, appTouchMoveActive, activeListener);
      doc.addEventListener(app.touchEvents.end, appTouchEndActive, activeListener);

      doc.addEventListener(app.touchEvents.start, appTouchStartPassive, passiveListenerCapture);
      doc.addEventListener(app.touchEvents.move, appTouchMovePassive, passiveListener);
      doc.addEventListener(app.touchEvents.end, appTouchEndPassive, passiveListener);
      if (Support.touch && Support.gestures) {
        doc.addEventListener('gesturestart', appGestureActive, activeListener);
        doc.addEventListener('gesturechange', appGestureActive, activeListener);
        doc.addEventListener('gestureend', appGestureActive, activeListener);

        doc.addEventListener('gesturestart', appGesturePassive, passiveListener);
        doc.addEventListener('gesturechange', appGesturePassive, passiveListener);
        doc.addEventListener('gestureend', appGesturePassive, passiveListener);
      }
    } else {
      doc.addEventListener(app.touchEvents.start, (e) => {
        appTouchStartActive(e);
        appTouchStartPassive(e);
      }, true);
      doc.addEventListener(app.touchEvents.move, (e) => {
        appTouchMoveActive(e);
        appTouchMovePassive(e);
      }, false);
      doc.addEventListener(app.touchEvents.end, (e) => {
        appTouchEndActive(e);
        appTouchEndPassive(e);
      }, false);
      if (Support.touch && Support.gestures) {
        doc.addEventListener('gesturestart', (e) => {
          appGestureActive(e);
          appGesturePassive(e);
        }, false);
        doc.addEventListener('gesturechange', (e) => {
          appGestureActive(e);
          appGesturePassive(e);
        }, false);
        doc.addEventListener('gestureend', (e) => {
          appGestureActive(e);
          appGesturePassive(e);
        }, false);
      }
    }

    if (Support.touch) {
      app.on('click', handleClick);
      app.on('touchstart', handleTouchStart);
      app.on('touchmove', handleTouchMove);
      app.on('touchend', handleTouchEnd);
      doc.addEventListener('touchcancel', handleTouchCancel, { passive: true });
    } else if (params.activeState) {
      app.on('touchstart', handleMouseDown);
      app.on('touchmove', handleMouseMove);
      app.on('touchend', handleMouseUp);
      doc.addEventListener('pointercancel', handleMouseUp, { passive: true });
    }
    doc.addEventListener('contextmenu', (e) => {
      if (params.disableContextMenu && (Device.ios || Device.android || Device.cordova)) {
        e.preventDefault();
      }
      if (useRipple) {
        if (activableElement) removeActive();
        rippleTouchEnd();
      }
    });
  }

  var TouchModule = {
    name: 'touch',
    params: {
      touch: {
        // Clicks
        touchClicksDistanceThreshold: 5,
        // ContextMenu
        disableContextMenu: false,
        // Tap Hold
        tapHold: false,
        tapHoldDelay: 750,
        tapHoldPreventClicks: true,
        // Active State
        activeState: true,
        activeStateElements: 'a, button, label, span, .actions-button, .stepper-button, .stepper-button-plus, .stepper-button-minus, .card-expandable, .menu-item, .link, .item-link, .accordion-item-toggle',
        activeStateOnMouseMove: false,
        mdTouchRipple: true,
        iosTouchRipple: false,
        auroraTouchRipple: false,
        touchRippleElements: '.ripple, .link, .item-link, .list-button, .links-list a, .button, button, .input-clear-button, .dialog-button, .tab-link, .item-radio, .item-checkbox, .actions-button, .searchbar-disable-button, .fab a, .checkbox, .radio, .data-table .sortable-cell:not(.input-cell), .notification-close-button, .stepper-button, .stepper-button-minus, .stepper-button-plus, .menu-item-content, .list.accordion-list .accordion-item-toggle',
      },
    },
    instance: {
      touchEvents: {
        start: Support.touch ? 'touchstart' : (Support.pointerEvents ? 'pointerdown' : 'mousedown'),
        move: Support.touch ? 'touchmove' : (Support.pointerEvents ? 'pointermove' : 'mousemove'),
        end: Support.touch ? 'touchend' : (Support.pointerEvents ? 'pointerup' : 'mouseup'),
      },
    },
    on: {
      init: initTouch,
    },
  };

  /**
   * Tokenize input string.
   */
  function lexer(str) {
      var tokens = [];
      var i = 0;
      while (i < str.length) {
          var char = str[i];
          if (char === "*" || char === "+" || char === "?") {
              tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
              continue;
          }
          if (char === "\\") {
              tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
              continue;
          }
          if (char === "{") {
              tokens.push({ type: "OPEN", index: i, value: str[i++] });
              continue;
          }
          if (char === "}") {
              tokens.push({ type: "CLOSE", index: i, value: str[i++] });
              continue;
          }
          if (char === ":") {
              var name = "";
              var j = i + 1;
              while (j < str.length) {
                  var code = str.charCodeAt(j);
                  if (
                  // `0-9`
                  (code >= 48 && code <= 57) ||
                      // `A-Z`
                      (code >= 65 && code <= 90) ||
                      // `a-z`
                      (code >= 97 && code <= 122) ||
                      // `_`
                      code === 95) {
                      name += str[j++];
                      continue;
                  }
                  break;
              }
              if (!name)
                  throw new TypeError("Missing parameter name at " + i);
              tokens.push({ type: "NAME", index: i, value: name });
              i = j;
              continue;
          }
          if (char === "(") {
              var count = 1;
              var pattern = "";
              var j = i + 1;
              if (str[j] === "?") {
                  throw new TypeError("Pattern cannot start with \"?\" at " + j);
              }
              while (j < str.length) {
                  if (str[j] === "\\") {
                      pattern += str[j++] + str[j++];
                      continue;
                  }
                  if (str[j] === ")") {
                      count--;
                      if (count === 0) {
                          j++;
                          break;
                      }
                  }
                  else if (str[j] === "(") {
                      count++;
                      if (str[j + 1] !== "?") {
                          throw new TypeError("Capturing groups are not allowed at " + j);
                      }
                  }
                  pattern += str[j++];
              }
              if (count)
                  throw new TypeError("Unbalanced pattern at " + i);
              if (!pattern)
                  throw new TypeError("Missing pattern at " + i);
              tokens.push({ type: "PATTERN", index: i, value: pattern });
              i = j;
              continue;
          }
          tokens.push({ type: "CHAR", index: i, value: str[i++] });
      }
      tokens.push({ type: "END", index: i, value: "" });
      return tokens;
  }
  /**
   * Parse a string for the raw tokens.
   */
  function parse(str, options) {
      if (options === void 0) { options = {}; }
      var tokens = lexer(str);
      var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
      var defaultPattern = "[^" + escapeString(options.delimiter || "/#?") + "]+?";
      var result = [];
      var key = 0;
      var i = 0;
      var path = "";
      var tryConsume = function (type) {
          if (i < tokens.length && tokens[i].type === type)
              return tokens[i++].value;
      };
      var mustConsume = function (type) {
          var value = tryConsume(type);
          if (value !== undefined)
              return value;
          var _a = tokens[i], nextType = _a.type, index = _a.index;
          throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
      };
      var consumeText = function () {
          var result = "";
          var value;
          // tslint:disable-next-line
          while ((value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"))) {
              result += value;
          }
          return result;
      };
      while (i < tokens.length) {
          var char = tryConsume("CHAR");
          var name = tryConsume("NAME");
          var pattern = tryConsume("PATTERN");
          if (name || pattern) {
              var prefix = char || "";
              if (prefixes.indexOf(prefix) === -1) {
                  path += prefix;
                  prefix = "";
              }
              if (path) {
                  result.push(path);
                  path = "";
              }
              result.push({
                  name: name || key++,
                  prefix: prefix,
                  suffix: "",
                  pattern: pattern || defaultPattern,
                  modifier: tryConsume("MODIFIER") || ""
              });
              continue;
          }
          var value = char || tryConsume("ESCAPED_CHAR");
          if (value) {
              path += value;
              continue;
          }
          if (path) {
              result.push(path);
              path = "";
          }
          var open = tryConsume("OPEN");
          if (open) {
              var prefix = consumeText();
              var name_1 = tryConsume("NAME") || "";
              var pattern_1 = tryConsume("PATTERN") || "";
              var suffix = consumeText();
              mustConsume("CLOSE");
              result.push({
                  name: name_1 || (pattern_1 ? key++ : ""),
                  pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
                  prefix: prefix,
                  suffix: suffix,
                  modifier: tryConsume("MODIFIER") || ""
              });
              continue;
          }
          mustConsume("END");
      }
      return result;
  }
  /**
   * Compile a string to a template function for the path.
   */
  function compile(str, options) {
      return tokensToFunction(parse(str, options), options);
  }
  /**
   * Expose a method for transforming tokens into the path function.
   */
  function tokensToFunction(tokens, options) {
      if (options === void 0) { options = {}; }
      var reFlags = flags(options);
      var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
      // Compile all the tokens into regexps.
      var matches = tokens.map(function (token) {
          if (typeof token === "object") {
              return new RegExp("^(?:" + token.pattern + ")$", reFlags);
          }
      });
      return function (data) {
          var path = "";
          for (var i = 0; i < tokens.length; i++) {
              var token = tokens[i];
              if (typeof token === "string") {
                  path += token;
                  continue;
              }
              var value = data ? data[token.name] : undefined;
              var optional = token.modifier === "?" || token.modifier === "*";
              var repeat = token.modifier === "*" || token.modifier === "+";
              if (Array.isArray(value)) {
                  if (!repeat) {
                      throw new TypeError("Expected \"" + token.name + "\" to not repeat, but got an array");
                  }
                  if (value.length === 0) {
                      if (optional)
                          continue;
                      throw new TypeError("Expected \"" + token.name + "\" to not be empty");
                  }
                  for (var j = 0; j < value.length; j++) {
                      var segment = encode(value[j], token);
                      if (validate && !matches[i].test(segment)) {
                          throw new TypeError("Expected all \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                      }
                      path += token.prefix + segment + token.suffix;
                  }
                  continue;
              }
              if (typeof value === "string" || typeof value === "number") {
                  var segment = encode(String(value), token);
                  if (validate && !matches[i].test(segment)) {
                      throw new TypeError("Expected \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                  }
                  path += token.prefix + segment + token.suffix;
                  continue;
              }
              if (optional)
                  continue;
              var typeOfMessage = repeat ? "an array" : "a string";
              throw new TypeError("Expected \"" + token.name + "\" to be " + typeOfMessage);
          }
          return path;
      };
  }
  /**
   * Escape a regular expression string.
   */
  function escapeString(str) {
      return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
  }
  /**
   * Get the flags for a regexp from the options.
   */
  function flags(options) {
      return options && options.sensitive ? "" : "i";
  }
  /**
   * Pull out keys from a regexp.
   */
  function regexpToRegexp(path, keys) {
      if (!keys)
          return path;
      var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
      var index = 0;
      var execResult = groupsRegex.exec(path.source);
      while (execResult) {
          keys.push({
              // Use parenthesized substring match if available, index otherwise
              name: execResult[1] || index++,
              prefix: "",
              suffix: "",
              modifier: "",
              pattern: ""
          });
          execResult = groupsRegex.exec(path.source);
      }
      return path;
  }
  /**
   * Transform an array into a regexp.
   */
  function arrayToRegexp(paths, keys, options) {
      var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });
      return new RegExp("(?:" + parts.join("|") + ")", flags(options));
  }
  /**
   * Create a path regexp from string input.
   */
  function stringToRegexp(path, keys, options) {
      return tokensToRegexp(parse(path, options), keys, options);
  }
  /**
   * Expose a function for taking tokens and returning a RegExp.
   */
  function tokensToRegexp(tokens, keys, options) {
      if (options === void 0) { options = {}; }
      var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d;
      var endsWith = "[" + escapeString(options.endsWith || "") + "]|$";
      var delimiter = "[" + escapeString(options.delimiter || "/#?") + "]";
      var route = start ? "^" : "";
      // Iterate over the tokens and create our regexp string.
      for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
          var token = tokens_1[_i];
          if (typeof token === "string") {
              route += escapeString(encode(token));
          }
          else {
              var prefix = escapeString(encode(token.prefix));
              var suffix = escapeString(encode(token.suffix));
              if (token.pattern) {
                  if (keys)
                      keys.push(token);
                  if (prefix || suffix) {
                      if (token.modifier === "+" || token.modifier === "*") {
                          var mod = token.modifier === "*" ? "?" : "";
                          route += "(?:" + prefix + "((?:" + token.pattern + ")(?:" + suffix + prefix + "(?:" + token.pattern + "))*)" + suffix + ")" + mod;
                      }
                      else {
                          route += "(?:" + prefix + "(" + token.pattern + ")" + suffix + ")" + token.modifier;
                      }
                  }
                  else {
                      route += "(" + token.pattern + ")" + token.modifier;
                  }
              }
              else {
                  route += "(?:" + prefix + suffix + ")" + token.modifier;
              }
          }
      }
      if (end) {
          if (!strict)
              route += delimiter + "?";
          route += !options.endsWith ? "$" : "(?=" + endsWith + ")";
      }
      else {
          var endToken = tokens[tokens.length - 1];
          var isEndDelimited = typeof endToken === "string"
              ? delimiter.indexOf(endToken[endToken.length - 1]) > -1
              : // tslint:disable-next-line
                  endToken === undefined;
          if (!strict) {
              route += "(?:" + delimiter + "(?=" + endsWith + "))?";
          }
          if (!isEndDelimited) {
              route += "(?=" + delimiter + "|" + endsWith + ")";
          }
      }
      return new RegExp(route, flags(options));
  }
  /**
   * Normalize the given path string, returning a regular expression.
   *
   * An empty array can be passed in for the keys, which will hold the
   * placeholder key descriptions. For example, using `/user/:id`, `keys` will
   * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
   */
  function pathToRegexp(path, keys, options) {
      if (path instanceof RegExp)
          return regexpToRegexp(path, keys);
      if (Array.isArray(path))
          return arrayToRegexp(path, keys, options);
      return stringToRegexp(path, keys, options);
  }

  const History = {
    queue: [],
    clearQueue() {
      if (History.queue.length === 0) return;
      const currentQueue = History.queue.shift();
      currentQueue();
    },
    routerQueue: [],
    clearRouterQueue() {
      if (History.routerQueue.length === 0) return;
      const currentQueue = History.routerQueue.pop();
      const { router, stateUrl, action } = currentQueue;

      let animate = router.params.animate;
      if (router.params.pushStateAnimate === false) animate = false;

      if (action === 'back') {
        router.back({ animate, pushState: false });
      }
      if (action === 'load') {
        router.navigate(stateUrl, { animate, pushState: false });
      }
    },
    handle(e) {
      if (History.blockPopstate) return;
      const app = this;
      // const mainView = app.views.main;
      let state = e.state;
      History.previousState = History.state;
      History.state = state;

      History.allowChange = true;
      History.clearQueue();

      state = History.state;
      if (!state) state = {};

      app.views.forEach((view) => {
        const router = view.router;
        let viewState = state[view.id];
        if (!viewState && view.params.pushState) {
          viewState = {
            url: view.router.history[0],
          };
        }
        if (!viewState) return;
        const stateUrl = viewState.url || undefined;

        let animate = router.params.animate;
        if (router.params.pushStateAnimate === false) animate = false;

        if (stateUrl !== router.url) {
          if (router.history.indexOf(stateUrl) >= 0) {
            // Go Back
            if (router.allowPageChange) {
              router.back({ animate, pushState: false });
            } else {
              History.routerQueue.push({
                action: 'back',
                router,
              });
            }
          } else if (router.allowPageChange) {
            // Load page
            router.navigate(stateUrl, { animate, pushState: false });
          } else {
            History.routerQueue.unshift({
              action: 'load',
              stateUrl,
              router,
            });
          }
        }
      });
    },
    initViewState(viewId, viewState) {
      const newState = Utils.extend({}, (History.state || {}), {
        [viewId]: viewState,
      });
      History.state = newState;
      win.history.replaceState(newState, '');
    },
    push(viewId, viewState, url) {
      if (!History.allowChange) {
        History.queue.push(() => {
          History.push(viewId, viewState, url);
        });
        return;
      }
      History.previousState = History.state;
      const newState = Utils.extend({}, (History.previousState || {}), {
        [viewId]: viewState,
      });
      History.state = newState;
      win.history.pushState(newState, '', url);
    },
    replace(viewId, viewState, url) {
      if (!History.allowChange) {
        History.queue.push(() => {
          History.replace(viewId, viewState, url);
        });
        return;
      }
      History.previousState = History.state;
      const newState = Utils.extend({}, (History.previousState || {}), {
        [viewId]: viewState,
      });
      History.state = newState;
      win.history.replaceState(newState, '', url);
    },
    go(index) {
      History.allowChange = false;
      win.history.go(index);
    },
    back() {
      History.allowChange = false;
      win.history.back();
    },
    allowChange: true,
    previousState: {},
    state: win.history.state,
    blockPopstate: true,
    init(app) {
      $(win).on('load', () => {
        setTimeout(() => {
          History.blockPopstate = false;
        }, 0);
      });

      if (doc.readyState && doc.readyState === 'complete') {
        History.blockPopstate = false;
      }

      $(win).on('popstate', History.handle.bind(app));
    },
  };

  function SwipeBack(r) {
    const router = r;
    const { $el, $navbarsEl, app, params } = router;
    let isTouched = false;
    let isMoved = false;
    const touchesStart = {};
    let isScrolling;
    let $currentPageEl = [];
    let $previousPageEl = [];
    let viewContainerWidth;
    let touchesDiff;
    let allowViewTouchMove = true;
    let touchStartTime;
    let $currentNavbarEl = [];
    let $previousNavbarEl = [];
    let dynamicNavbar;
    let $pageShadowEl;
    let $pageOpacityEl;

    let animatableNavEls;

    const paramsSwipeBackAnimateShadow = params[`${app.theme}SwipeBackAnimateShadow`];
    const paramsSwipeBackAnimateOpacity = params[`${app.theme}SwipeBackAnimateOpacity`];
    const paramsSwipeBackActiveArea = params[`${app.theme}SwipeBackActiveArea`];
    const paramsSwipeBackThreshold = params[`${app.theme}SwipeBackThreshold`];

    const transformOrigin = app.rtl ? 'right center' : 'left center';
    const transformOriginTitleLarge = app.rtl
      ? 'calc(100% - var(--f7-navbar-large-title-padding-left) - var(--f7-safe-area-left)) center'
      : 'calc(var(--f7-navbar-large-title-padding-left) + var(--f7-safe-area-left)) center';


    function animatableNavElements() {
      const els = [];
      const inverter = app.rtl ? -1 : 1;
      const currentNavIsTransparent = $currentNavbarEl.hasClass('navbar-transparent') && !$currentNavbarEl.hasClass('navbar-large') && !$currentNavbarEl.hasClass('navbar-transparent-visible');
      const currentNavIsLarge = $currentNavbarEl.hasClass('navbar-large');
      const currentNavIsCollapsed = $currentNavbarEl.hasClass('navbar-large-collapsed');
      const currentNavIsLargeTransparent = $currentNavbarEl.hasClass('navbar-large-transparent')
        || (
          $currentNavbarEl.hasClass('navbar-large')
          && $currentNavbarEl.hasClass('navbar-transparent')
        );
      const previousNavIsTransparent = $previousNavbarEl.hasClass('navbar-transparent') && !$previousNavbarEl.hasClass('navbar-large') && !$previousNavbarEl.hasClass('navbar-transparent-visible');
      const previousNavIsLarge = $previousNavbarEl.hasClass('navbar-large');
      const previousNavIsCollapsed = $previousNavbarEl.hasClass('navbar-large-collapsed');
      const previousNavIsLargeTransparent = $previousNavbarEl.hasClass('navbar-large-transparent')
        || (
          $previousNavbarEl.hasClass('navbar-large')
          && $previousNavbarEl.hasClass('navbar-transparent')
        );
      const fromLarge = currentNavIsLarge && !currentNavIsCollapsed;
      const toLarge = previousNavIsLarge && !previousNavIsCollapsed;
      const $currentNavElements = $currentNavbarEl.find('.left, .title, .right, .subnavbar, .fading, .title-large, .navbar-bg');
      const $previousNavElements = $previousNavbarEl.find('.left, .title, .right, .subnavbar, .fading, .title-large, .navbar-bg');
      let activeNavBackIconText;
      let previousNavBackIconText;

      if (params.iosAnimateNavbarBackIcon) {
        if ($currentNavbarEl.hasClass('sliding') || $currentNavbarEl.find('.navbar-inner.sliding').length) {
          activeNavBackIconText = $currentNavbarEl.find('.left').find('.back .icon + span').eq(0);
        } else {
          activeNavBackIconText = $currentNavbarEl.find('.left.sliding').find('.back .icon + span').eq(0);
        }
        if ($previousNavbarEl.hasClass('sliding') || $previousNavbarEl.find('.navbar-inner.sliding').length) {
          previousNavBackIconText = $previousNavbarEl.find('.left').find('.back .icon + span').eq(0);
        } else {
          previousNavBackIconText = $previousNavbarEl.find('.left.sliding').find('.back .icon + span').eq(0);
        }
        if (activeNavBackIconText.length) {
          $previousNavElements.each((index, el) => {
            if (!$(el).hasClass('title')) return;
            el.f7NavbarLeftOffset += activeNavBackIconText.prev('.icon')[0].offsetWidth;
          });
        }
      }
      $currentNavElements
        .each((index, navEl) => {
          const $navEl = $(navEl);
          const isSubnavbar = $navEl.hasClass('subnavbar');
          const isLeft = $navEl.hasClass('left');
          const isTitle = $navEl.hasClass('title');
          const isBg = $navEl.hasClass('navbar-bg');
          if ((isTitle || isBg) && currentNavIsTransparent) return;
          if (!fromLarge && $navEl.hasClass('.title-large')) return;
          const el = {
            el: navEl,
          };
          if (fromLarge) {
            if (isTitle) return;
            if ($navEl.hasClass('title-large')) {
              if (els.indexOf(el) < 0) els.push(el);
              el.overflow = 'visible';
              $navEl.find('.title-large-text').each((subIndex, subNavEl) => {
                els.push({
                  el: subNavEl,
                  transform: progress => `translateX(${progress * 100 * inverter}%)`,
                });
              });
              return;
            }
          }
          if (toLarge) {
            if (!fromLarge) {
              if ($navEl.hasClass('title-large')) {
                if (els.indexOf(el) < 0) els.push(el);
                el.opacity = 0;
              }
            }
            if (isLeft) {
              if (els.indexOf(el) < 0) els.push(el);
              el.opacity = progress => (1 - (progress ** 0.33));
              $navEl.find('.back span').each((subIndex, subNavEl) => {
                els.push({
                  el: subNavEl,
                  'transform-origin': transformOrigin,
                  transform: progress => `translateX(calc(${progress} * (var(--f7-navbarTitleLargeOffset) - var(--f7-navbarLeftTextOffset)))) translateY(calc(${progress} * (var(--f7-navbar-large-title-height) - var(--f7-navbar-large-title-padding-vertical) / 2))) scale(${1 + (1 * progress)})`,
                });
              });
              return;
            }
          }
          if (isBg) {
            if (els.indexOf(el) < 0) els.push(el);
            if (!fromLarge && !toLarge) {
              if (currentNavIsCollapsed) {
                if (currentNavIsLargeTransparent) {
                  el.className = 'ios-swipeback-navbar-bg-large';
                }
                el.transform = progress => `translateX(${100 * progress * inverter}%) translateY(calc(-1 * var(--f7-navbar-large-title-height)))`;
              } else {
                el.transform = progress => `translateX(${100 * progress * inverter}%)`;
              }
            }
            if (!fromLarge && toLarge) {
              el.className = 'ios-swipeback-navbar-bg-large';
              el.transform = progress => `translateX(${100 * progress * inverter}%) translateY(calc(-1 * ${1 - progress} * var(--f7-navbar-large-title-height)))`;
            }
            if (fromLarge && toLarge) {
              el.transform = progress => `translateX(${100 * progress * inverter}%)`;
            }
            if (fromLarge && !toLarge) {
              el.transform = progress => `translateX(${100 * progress * inverter}%) translateY(calc(-${progress} * var(--f7-navbar-large-title-height)))`;
            }
            return;
          }
          if ($navEl.hasClass('title-large')) return;
          const isSliding = $navEl.hasClass('sliding') || $navEl.parents('.navbar-inner.sliding').length;
          if (els.indexOf(el) < 0) els.push(el);
          if (!isSubnavbar || (isSubnavbar && !isSliding)) {
            el.opacity = progress => (1 - (progress ** 0.33));
          }
          if (isSliding) {
            let transformTarget = el;
            if (isLeft && activeNavBackIconText.length && params.iosAnimateNavbarBackIcon) {
              const textEl = { el: activeNavBackIconText[0] };
              transformTarget = textEl;
              els.push(textEl);
            }
            transformTarget.transform = (progress) => {
              let activeNavTranslate = progress * transformTarget.el.f7NavbarRightOffset;
              if (Device.pixelRatio === 1) activeNavTranslate = Math.round(activeNavTranslate);
              if (isSubnavbar && currentNavIsLarge) {
                return `translate3d(${activeNavTranslate}px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)`;
              }
              return `translate3d(${activeNavTranslate}px,0,0)`;
            };
          }
        });
      $previousNavElements
        .each((index, navEl) => {
          const $navEl = $(navEl);
          const isSubnavbar = $navEl.hasClass('subnavbar');
          const isLeft = $navEl.hasClass('left');
          const isTitle = $navEl.hasClass('title');
          const isBg = $navEl.hasClass('navbar-bg');
          if ((isTitle || isBg) && previousNavIsTransparent) return;
          const el = {
            el: navEl,
          };
          if (toLarge) {
            if (isTitle) return;
            if (els.indexOf(el) < 0) els.push(el);

            if ($navEl.hasClass('title-large')) {
              el.opacity = 1;
              el.overflow = 'visible';
              $navEl.find('.title-large-text').each((subIndex, subNavEl) => {
                els.push({
                  el: subNavEl,
                  'transform-origin': transformOriginTitleLarge,
                  opacity: progress => (progress ** 3),
                  transform: progress => `translateX(calc(${1 - progress} * (var(--f7-navbarLeftTextOffset) - var(--f7-navbarTitleLargeOffset)))) translateY(calc(${progress - 1} * var(--f7-navbar-large-title-height) + ${1 - progress} * var(--f7-navbar-large-title-padding-vertical))) scale(${0.5 + progress * 0.5})`,
                });
              });
              return;
            }
          }
          if (isBg) {
            if (els.indexOf(el) < 0) els.push(el);
            if (!fromLarge && !toLarge) {
              if (previousNavIsCollapsed) {
                if (previousNavIsLargeTransparent) {
                  el.className = 'ios-swipeback-navbar-bg-large';
                }
                el.transform = progress => `translateX(${(-100 + 100 * progress) * inverter}%) translateY(calc(-1 * var(--f7-navbar-large-title-height)))`;
              } else {
                el.transform = progress => `translateX(${(-100 + 100 * progress) * inverter}%)`;
              }
            }
            if (!fromLarge && toLarge) {
              el.transform = progress => `translateX(${(-100 + 100 * progress) * inverter}%) translateY(calc(-1 * ${1 - progress} * var(--f7-navbar-large-title-height)))`;
            }
            if (fromLarge && !toLarge) {
              el.className = 'ios-swipeback-navbar-bg-large';
              el.transform = progress => `translateX(${(-100 + 100 * progress) * inverter}%) translateY(calc(-${progress} * var(--f7-navbar-large-title-height)))`;
            }
            if (fromLarge && toLarge) {
              el.transform = progress => `translateX(${(-100 + 100 * progress) * inverter}%)`;
            }

            return;
          }
          if ($navEl.hasClass('title-large')) return;
          const isSliding = $navEl.hasClass('sliding') || $previousNavbarEl.children('.navbar-inner.sliding').length;
          if (els.indexOf(el) < 0) els.push(el);
          if (!isSubnavbar || (isSubnavbar && !isSliding)) {
            el.opacity = progress => (progress ** 3);
          }
          if (isSliding) {
            let transformTarget = el;
            if (isLeft && previousNavBackIconText.length && params.iosAnimateNavbarBackIcon) {
              const textEl = { el: previousNavBackIconText[0] };
              transformTarget = textEl;
              els.push(textEl);
            }
            transformTarget.transform = (progress) => {
              let previousNavTranslate = transformTarget.el.f7NavbarLeftOffset * (1 - progress);
              if (Device.pixelRatio === 1) previousNavTranslate = Math.round(previousNavTranslate);
              if (isSubnavbar && previousNavIsLarge) {
                return `translate3d(${previousNavTranslate}px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)`;
              }
              return `translate3d(${previousNavTranslate}px,0,0)`;
            };
          }
        });
      return els;
    }

    function setAnimatableNavElements({ progress, reset, transition, reflow } = {}) {
      const styles = ['overflow', 'transform', 'transform-origin', 'opacity'];
      if (transition === true || transition === false) {
        for (let i = 0; i < animatableNavEls.length; i += 1) {
          const el = animatableNavEls[i];
          if (el && el.el) {
            if (transition === true) el.el.classList.add('navbar-page-transitioning');
            if (transition === false) el.el.classList.remove('navbar-page-transitioning');
          }
        }
      }
      if (reflow && animatableNavEls.length && animatableNavEls[0] && animatableNavEls[0].el) {
        // eslint-disable-next-line
        animatableNavEls[0].el._clientLeft = animatableNavEls[0].el.clientLeft;
      }
      for (let i = 0; i < animatableNavEls.length; i += 1) {
        const el = animatableNavEls[i];
        if (el && el.el) {
          if (el.className && !el.classNameSet && !reset) {
            el.el.classList.add(el.className);
            el.classNameSet = true;
          }
          if (el.className && reset) {
            el.el.classList.remove(el.className);
          }
          for (let j = 0; j < styles.length; j += 1) {
            const styleProp = styles[j];
            if (el[styleProp]) {
              if (reset) {
                el.el.style[styleProp] = '';
              } else if (typeof el[styleProp] === 'function') {
                el.el.style[styleProp] = el[styleProp](progress);
              } else {
                el.el.style[styleProp] = el[styleProp];
              }
            }
          }
        }
      }
    }

    function handleTouchStart(e) {
      const swipeBackEnabled = params[`${app.theme}SwipeBack`];
      if (!allowViewTouchMove || !swipeBackEnabled || isTouched || (app.swipeout && app.swipeout.el) || !router.allowPageChange) return;
      if ($(e.target).closest('.range-slider, .calendar-months').length > 0) return;
      if ($(e.target).closest('.page-master, .page-master-detail').length > 0 && params.masterDetailBreakpoint > 0 && app.width >= params.masterDetailBreakpoint) return;
      isMoved = false;
      isTouched = true;
      isScrolling = undefined;
      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
      touchStartTime = Utils.now();
      dynamicNavbar = router.dynamicNavbar;
    }
    function handleTouchMove(e) {
      if (!isTouched) return;
      const pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
      const pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
      if (typeof isScrolling === 'undefined') {
        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x)) || (pageX < touchesStart.x && !app.rtl) || (pageX > touchesStart.x && app.rtl);
      }
      if (isScrolling || e.f7PreventSwipeBack || app.preventSwipeBack) {
        isTouched = false;
        return;
      }
      if (!isMoved) {
        // Calc values during first move fired
        let cancel = false;
        const target = $(e.target);

        const swipeout = target.closest('.swipeout');
        if (swipeout.length > 0) {
          if (!app.rtl && swipeout.find('.swipeout-actions-left').length > 0) cancel = true;
          if (app.rtl && swipeout.find('.swipeout-actions-right').length > 0) cancel = true;
        }

        $currentPageEl = target.closest('.page');
        if ($currentPageEl.hasClass('no-swipeback') || target.closest('.no-swipeback, .card-opened').length > 0) cancel = true;
        $previousPageEl = $el.find('.page-previous:not(.stacked)');
        if ($previousPageEl.length > 1) {
          $previousPageEl = $previousPageEl.eq($previousPageEl.length - 1);
        }
        let notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;
        viewContainerWidth = $el.width();
        if (app.rtl) {
          notFromBorder = touchesStart.x < ($el.offset().left - $el[0].scrollLeft) + (viewContainerWidth - paramsSwipeBackActiveArea);
        } else {
          notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;
        }
        if (notFromBorder) cancel = true;
        if ($previousPageEl.length === 0 || $currentPageEl.length === 0) cancel = true;
        if (cancel) {
          isTouched = false;
          return;
        }

        if (paramsSwipeBackAnimateShadow) {
          $pageShadowEl = $currentPageEl.find('.page-shadow-effect');
          if ($pageShadowEl.length === 0) {
            $pageShadowEl = $('<div class="page-shadow-effect"></div>');
            $currentPageEl.append($pageShadowEl);
          }
        }
        if (paramsSwipeBackAnimateOpacity) {
          $pageOpacityEl = $previousPageEl.find('.page-opacity-effect');
          if ($pageOpacityEl.length === 0) {
            $pageOpacityEl = $('<div class="page-opacity-effect"></div>');
            $previousPageEl.append($pageOpacityEl);
          }
        }

        if (dynamicNavbar) {
          $currentNavbarEl = $navbarsEl.find('.navbar-current:not(.stacked)');
          $previousNavbarEl = $navbarsEl.find('.navbar-previous:not(.stacked)');
          if ($previousNavbarEl.length > 1) {
            $previousNavbarEl = $previousNavbarEl.eq($previousNavbarEl.length - 1);
          }

          animatableNavEls = animatableNavElements();
        }

        // Close/Hide Any Picker
        if ($('.sheet.modal-in').length > 0 && app.sheet) {
          app.sheet.close($('.sheet.modal-in'));
        }
      }
      e.f7PreventSwipePanel = true;
      isMoved = true;
      app.preventSwipePanelBySwipeBack = true;
      e.preventDefault();

      // RTL inverter
      const inverter = app.rtl ? -1 : 1;

      // Touches diff
      touchesDiff = (pageX - touchesStart.x - paramsSwipeBackThreshold) * inverter;
      if (touchesDiff < 0) touchesDiff = 0;
      const percentage = Math.min(Math.max(touchesDiff / viewContainerWidth, 0), 1);

      // Swipe Back Callback
      const callbackData = {
        percentage,
        progress: percentage,
        currentPageEl: $currentPageEl[0],
        previousPageEl: $previousPageEl[0],
        currentNavbarEl: $currentNavbarEl[0],
        previousNavbarEl: $previousNavbarEl[0],
      };
      $el.trigger('swipeback:move', callbackData);
      router.emit('swipebackMove', callbackData);

      // Transform pages
      let currentPageTranslate = touchesDiff * inverter;
      let previousPageTranslate = ((touchesDiff / 5) - (viewContainerWidth / 5)) * inverter;
      if (!app.rtl) {
        currentPageTranslate = Math.min(currentPageTranslate, viewContainerWidth);
        previousPageTranslate = Math.min(previousPageTranslate, 0);
      } else {
        currentPageTranslate = Math.max(currentPageTranslate, -viewContainerWidth);
        previousPageTranslate = Math.max(previousPageTranslate, 0);
      }
      if (Device.pixelRatio === 1) {
        currentPageTranslate = Math.round(currentPageTranslate);
        previousPageTranslate = Math.round(previousPageTranslate);
      }

      router.swipeBackActive = true;
      $([$currentPageEl[0], $previousPageEl[0]]).addClass('page-swipeback-active');

      $currentPageEl.transform(`translate3d(${currentPageTranslate}px,0,0)`);
      if (paramsSwipeBackAnimateShadow) $pageShadowEl[0].style.opacity = 1 - (1 * percentage);

      if (app.theme === 'ios') {
        $previousPageEl.transform(`translate3d(${previousPageTranslate}px,0,0)`);
      }
      if (paramsSwipeBackAnimateOpacity) $pageOpacityEl[0].style.opacity = 1 - (1 * percentage);

      // Dynamic Navbars Animation
      if (!dynamicNavbar) return;

      setAnimatableNavElements({ progress: percentage });
    }
    function handleTouchEnd() {
      app.preventSwipePanelBySwipeBack = false;
      if (!isTouched || !isMoved) {
        isTouched = false;
        isMoved = false;
        return;
      }
      isTouched = false;
      isMoved = false;
      router.swipeBackActive = false;
      const $pages = $([$currentPageEl[0], $previousPageEl[0]]);
      $pages.removeClass('page-swipeback-active');
      if (touchesDiff === 0) {
        $pages.transform('');
        if ($pageShadowEl && $pageShadowEl.length > 0) $pageShadowEl.remove();
        if ($pageOpacityEl && $pageOpacityEl.length > 0) $pageOpacityEl.remove();
        if (dynamicNavbar) {
          setAnimatableNavElements({ reset: true });
        }
        return;
      }
      const timeDiff = Utils.now() - touchStartTime;
      let pageChanged = false;
      // Swipe back to previous page
      if (
        (timeDiff < 300 && touchesDiff > 10)
        || (timeDiff >= 300 && touchesDiff > viewContainerWidth / 2)
      ) {
        $currentPageEl.removeClass('page-current').addClass(`page-next${app.theme !== 'ios' ? ' page-next-on-right' : ''}`);
        $previousPageEl.removeClass('page-previous').addClass('page-current').removeAttr('aria-hidden');
        if ($pageShadowEl) $pageShadowEl[0].style.opacity = '';
        if ($pageOpacityEl) $pageOpacityEl[0].style.opacity = '';
        if (dynamicNavbar) {
          router.setNavbarPosition($currentNavbarEl, 'next');
          router.setNavbarPosition($previousNavbarEl, 'current', false);
        }
        pageChanged = true;
      }
      // Reset custom styles
      // Add transitioning class for transition-duration
      $pages.addClass('page-transitioning page-transitioning-swipeback');
      if (!pageChanged) {
        // eslint-disable-next-line
        $currentPageEl[0]._clientLeft = $currentPageEl[0].clientLeft;
      }
      $pages.transform('');

      if (dynamicNavbar) {
        setAnimatableNavElements({ progress: pageChanged ? 1 : 0, transition: true, reflow: !pageChanged });
      }
      allowViewTouchMove = false;
      router.allowPageChange = false;

      // Swipe Back Callback
      const callbackData = {
        currentPageEl: $currentPageEl[0],
        previousPageEl: $previousPageEl[0],
        currentNavbarEl: $currentNavbarEl[0],
        previousNavbarEl: $previousNavbarEl[0],
      };

      if (pageChanged) {
        // Update Route
        router.currentRoute = $previousPageEl[0].f7Page.route;
        router.currentPage = $previousPageEl[0];

        // Page before animation callback
        router.pageCallback('beforeOut', $currentPageEl, $currentNavbarEl, 'current', 'next', { route: $currentPageEl[0].f7Page.route, swipeBack: true });
        router.pageCallback('beforeIn', $previousPageEl, $previousNavbarEl, 'previous', 'current', { route: $previousPageEl[0].f7Page.route, swipeBack: true }, $currentPageEl[0]);

        $el.trigger('swipeback:beforechange', callbackData);
        router.emit('swipebackBeforeChange', callbackData);
      } else {
        $el.trigger('swipeback:beforereset', callbackData);
        router.emit('swipebackBeforeReset', callbackData);
      }

      $currentPageEl.transitionEnd(() => {
        $pages.removeClass('page-transitioning page-transitioning-swipeback');
        if (dynamicNavbar) {
          setAnimatableNavElements({ reset: true, transition: false });
        }
        allowViewTouchMove = true;
        router.allowPageChange = true;
        if (pageChanged) {
          // Update History
          if (router.history.length === 1) {
            router.history.unshift(router.url);
          }
          router.history.pop();
          router.saveHistory();

          // Update push state
          if (params.pushState) {
            History.back();
          }

          // Page after animation callback
          router.pageCallback('afterOut', $currentPageEl, $currentNavbarEl, 'current', 'next', { route: $currentPageEl[0].f7Page.route, swipeBack: true });
          router.pageCallback('afterIn', $previousPageEl, $previousNavbarEl, 'previous', 'current', { route: $previousPageEl[0].f7Page.route, swipeBack: true });

          // Remove Old Page
          if (params.stackPages && router.initialPages.indexOf($currentPageEl[0]) >= 0) {
            $currentPageEl.addClass('stacked');
            if (dynamicNavbar) {
              $currentNavbarEl.addClass('stacked');
            }
          } else {
            router.pageCallback('beforeRemove', $currentPageEl, $currentNavbarEl, 'next', { swipeBack: true });
            router.removePage($currentPageEl);
            if (dynamicNavbar) {
              router.removeNavbar($currentNavbarEl);
            }
          }

          $el.trigger('swipeback:afterchange', callbackData);
          router.emit('swipebackAfterChange', callbackData);

          router.emit('routeChanged', router.currentRoute, router.previousRoute, router);

          if (params.preloadPreviousPage) {
            router.back(router.history[router.history.length - 2], { preload: true });
          }
        } else {
          $el.trigger('swipeback:afterreset', callbackData);
          router.emit('swipebackAfterReset', callbackData);
        }
        if ($pageShadowEl && $pageShadowEl.length > 0) $pageShadowEl.remove();
        if ($pageOpacityEl && $pageOpacityEl.length > 0) $pageOpacityEl.remove();
      });
    }

    function attachEvents() {
      const passiveListener = (app.touchEvents.start === 'touchstart' && Support.passiveListener) ? { passive: true, capture: false } : false;
      $el.on(app.touchEvents.start, handleTouchStart, passiveListener);
      app.on('touchmove:active', handleTouchMove);
      app.on('touchend:passive', handleTouchEnd);
    }
    function detachEvents() {
      const passiveListener = (app.touchEvents.start === 'touchstart' && Support.passiveListener) ? { passive: true, capture: false } : false;
      $el.off(app.touchEvents.start, handleTouchStart, passiveListener);
      app.off('touchmove:active', handleTouchMove);
      app.off('touchend:passive', handleTouchEnd);
    }

    attachEvents();

    router.on('routerDestroy', detachEvents);
  }

  function redirect (direction, route, options) {
    const router = this;
    const redirect = route.route.redirect;
    if (options.initial && router.params.pushState) {
      options.replaceState = true; // eslint-disable-line
      options.history = true; // eslint-disable-line
    }
    function redirectResolve(redirectUrl, redirectOptions = {}) {
      router.allowPageChange = true;
      router[direction](redirectUrl, Utils.extend({}, options, redirectOptions));
    }
    function redirectReject() {
      router.allowPageChange = true;
    }
    if (typeof redirect === 'function') {
      router.allowPageChange = false;
      const redirectUrl = redirect.call(router, route, redirectResolve, redirectReject);
      if (redirectUrl && typeof redirectUrl === 'string') {
        router.allowPageChange = true;
        return router[direction](redirectUrl, options);
      }
      return router;
    }
    return router[direction](redirect, options);
  }

  function processQueue(router, routerQueue, routeQueue, to, from, resolve, reject) {
    const queue = [];

    if (Array.isArray(routeQueue)) {
      queue.push(...routeQueue);
    } else if (routeQueue && typeof routeQueue === 'function') {
      queue.push(routeQueue);
    }
    if (routerQueue) {
      if (Array.isArray(routerQueue)) {
        queue.push(...routerQueue);
      } else {
        queue.push(routerQueue);
      }
    }

    function next() {
      if (queue.length === 0) {
        resolve();
        return;
      }
      const queueItem = queue.shift();

      queueItem.call(
        router,
        to,
        from,
        () => {
          next();
        },
        () => {
          reject();
        }
      );
    }
    next();
  }

  function processRouteQueue (to, from, resolve, reject) {
    const router = this;
    function enterNextRoute() {
      if (to && to.route && (router.params.routesBeforeEnter || to.route.beforeEnter)) {
        router.allowPageChange = false;
        processQueue(
          router,
          router.params.routesBeforeEnter,
          to.route.beforeEnter,
          to,
          from,
          () => {
            router.allowPageChange = true;
            resolve();
          },
          () => {
            reject();
          },
        );
      } else {
        resolve();
      }
    }
    function leaveCurrentRoute() {
      if (from && from.route && (router.params.routesBeforeLeave || from.route.beforeLeave)) {
        router.allowPageChange = false;
        processQueue(
          router,
          router.params.routesBeforeLeave,
          from.route.beforeLeave,
          to,
          from,
          () => {
            router.allowPageChange = true;
            enterNextRoute();
          },
          () => {
            reject();
          },
        );
      } else {
        enterNextRoute();
      }
    }
    leaveCurrentRoute();
  }

  function appRouterCheck (router, method) {
    if (!router.view) {
      throw new Error(`Framework7: it is not allowed to use router methods on global app router. Use router methods only on related View, e.g. app.views.main.router.${method}(...)`);
    }
  }

  function asyncComponent (router, asyncComponent, resolve, reject) {
    function resolvePromise(componentPromise) {
      componentPromise
        .then((c) => {
          // eslint-disable-next-line
          resolve({ component: c.default || c._default || c });
        })
        .catch((err) => {
          reject();
          throw new Error(err);
        });
    }
    if (asyncComponent instanceof Promise) {
      resolvePromise(asyncComponent);
      return;
    }
    const asyncComponentResult = asyncComponent.call(router);
    if (asyncComponentResult instanceof Promise) {
      resolvePromise(asyncComponentResult);
    } else {
      resolve({ component: asyncComponentResult });
    }
  }

  function refreshPage() {
    const router = this;
    appRouterCheck(router, 'refreshPage');
    return router.navigate(router.currentRoute.url, {
      ignoreCache: true,
      reloadCurrent: true,
    });
  }

  function forward(el, forwardOptions = {}) {
    const router = this;
    const $el = $(el);
    const app = router.app;
    const view = router.view;
    const options = Utils.extend(false, {
      animate: router.params.animate,
      pushState: true,
      replaceState: false,
      history: true,
      reloadCurrent: router.params.reloadPages,
      reloadPrevious: false,
      reloadAll: false,
      clearPreviousHistory: false,
      reloadDetail: router.params.reloadDetail,
      on: {},
    }, forwardOptions);

    const masterDetailEnabled = router.params.masterDetailBreakpoint > 0;
    const isMaster = masterDetailEnabled && options.route && options.route.route && options.route.route.master === true;
    let masterPageEl;
    let otherDetailPageEl;

    let currentRouteIsModal = router.currentRoute.modal;
    let modalType;
    if (!currentRouteIsModal) {
      ('popup popover sheet loginScreen actions customModal panel').split(' ').forEach((modalLoadProp) => {
        if (router.currentRoute && router.currentRoute.route && router.currentRoute.route[modalLoadProp]) {
          currentRouteIsModal = true;
          modalType = modalLoadProp;
        }
      });
    }

    if (currentRouteIsModal) {
      const modalToClose = router.currentRoute.modal
                           || router.currentRoute.route.modalInstance
                           || app[modalType].get();
      const previousUrl = router.history[router.history.length - 2];
      let previousRoute = router.findMatchingRoute(previousUrl);
      if (!previousRoute && previousUrl) {
        previousRoute = {
          url: previousUrl,
          path: previousUrl.split('?')[0],
          query: Utils.parseUrlQuery(previousUrl),
          route: {
            path: previousUrl.split('?')[0],
            url: previousUrl,
          },
        };
      }

      router.modalRemove(modalToClose);
    }

    const dynamicNavbar = router.dynamicNavbar;

    const $viewEl = router.$el;
    const $newPage = $el;
    const reload = options.reloadPrevious || options.reloadCurrent || options.reloadAll;
    let $oldPage;

    let $navbarsEl;
    let $newNavbarEl;
    let $oldNavbarEl;

    router.allowPageChange = false;
    if ($newPage.length === 0) {
      router.allowPageChange = true;
      return router;
    }

    if ($newPage.length) {
      // Remove theme elements
      router.removeThemeElements($newPage);
    }

    if (dynamicNavbar) {
      $newNavbarEl = $newPage.children('.navbar');
      $navbarsEl = router.$navbarsEl;
      if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {
        // Try from pageData
        $newNavbarEl = $newPage[0].f7Page.$navbarEl;
      }
    }

    // Save Keep Alive Cache
    if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {
      options.route.route.keepAliveData = {
        pageEl: $el[0],
      };
    }

    // Pages In View
    const $pagesInView = $viewEl
      .children('.page:not(.stacked)')
      .filter((index, pageInView) => pageInView !== $newPage[0]);

    // Navbars In View
    let $navbarsInView;
    if (dynamicNavbar) {
      $navbarsInView = $navbarsEl
        .children('.navbar:not(.stacked)')
        .filter((index, navbarInView) => navbarInView !== $newNavbarEl[0]);
    }

    // Exit when reload previous and only 1 page in view so nothing ro reload
    if (options.reloadPrevious && $pagesInView.length < 2) {
      router.allowPageChange = true;
      return router;
    }

    // Find Detail' master page
    let isDetail;
    let reloadDetail;
    let isDetailRoot;
    if (masterDetailEnabled && !options.reloadAll) {
      for (let i = 0; i < $pagesInView.length; i += 1) {
        if (!masterPageEl
          && $pagesInView[i].classList.contains('page-master')
        ) {
          masterPageEl = $pagesInView[i];
          continue; // eslint-disable-line
        }
      }
      isDetail = !isMaster && masterPageEl;

      if (isDetail) {
        // Find Other Detail
        if (masterPageEl) {
          for (let i = 0; i < $pagesInView.length; i += 1) {
            if ($pagesInView[i].classList.contains('page-master-detail')
            ) {
              otherDetailPageEl = $pagesInView[i];
              continue; // eslint-disable-line
            }
          }
        }
      }
      reloadDetail = isDetail && options.reloadDetail && app.width >= router.params.masterDetailBreakpoint && masterPageEl;
    }
    if (isDetail) {
      isDetailRoot = !otherDetailPageEl || reloadDetail || options.reloadAll || options.reloadCurrent;
    }

    // New Page
    let newPagePosition = 'next';
    if (options.reloadCurrent || options.reloadAll || reloadDetail) {
      newPagePosition = 'current';
    } else if (options.reloadPrevious) {
      newPagePosition = 'previous';
    }
    $newPage
      .removeClass('page-previous page-current page-next')
      .addClass(`page-${newPagePosition}${isMaster ? ' page-master' : ''}${isDetail ? ' page-master-detail' : ''}${isDetailRoot ? ' page-master-detail-root' : ''}`)
      .removeClass('stacked')
      .trigger('page:unstack')
      .trigger('page:position', { position: newPagePosition });
    router.emit('pageUnstack', $newPage[0]);
    router.emit('pagePosition', $newPage[0], newPagePosition);

    if (isMaster || isDetail) {
      $newPage.trigger('page:role', { role: isMaster ? 'master' : 'detail', root: !!isDetailRoot });
      router.emit('pageRole', $newPage[0], { role: isMaster ? 'master' : 'detail', detailRoot: !!isDetailRoot });
    }

    if (dynamicNavbar && $newNavbarEl.length) {
      $newNavbarEl
        .removeClass('navbar-previous navbar-current navbar-next')
        .addClass(`navbar-${newPagePosition}${isMaster ? ' navbar-master' : ''}${isDetail ? ' navbar-master-detail' : ''}${isDetailRoot ? ' navbar-master-detail-root' : ''}`)
        .removeClass('stacked');
      $newNavbarEl.trigger('navbar:position', { position: newPagePosition });
      router.emit('navbarPosition', $newNavbarEl[0], newPagePosition);
      if (isMaster || isDetail) {
        router.emit('navbarRole', $newNavbarEl[0], { role: isMaster ? 'master' : 'detail', detailRoot: !!isDetailRoot });
      }
    }

    // Find Old Page
    if (options.reloadCurrent || reloadDetail) {
      $oldPage = $pagesInView.eq($pagesInView.length - 1);
      if (dynamicNavbar) {
        // $oldNavbarEl = $navbarsInView.eq($pagesInView.length - 1);
        $oldNavbarEl = $(app.navbar.getElByPage($oldPage));
      }
    } else if (options.reloadPrevious) {
      $oldPage = $pagesInView.eq($pagesInView.length - 2);
      if (dynamicNavbar) {
        // $oldNavbarEl = $navbarsInView.eq($pagesInView.length - 2);
        $oldNavbarEl = $(app.navbar.getElByPage($oldPage));
      }
    } else if (options.reloadAll) {
      $oldPage = $pagesInView.filter((index, pageEl) => pageEl !== $newPage[0]);
      if (dynamicNavbar) {
        $oldNavbarEl = $navbarsInView.filter((index, navbarEl) => navbarEl !== $newNavbarEl[0]);
      }
    } else {
      let removedPageEls = [];
      let removedNavbarEls = [];
      if ($pagesInView.length > 1) {
        let i = 0;
        for (i = 0; i < $pagesInView.length - 1; i += 1) {
          if (masterPageEl
            && $pagesInView[i] === masterPageEl
          ) {
            $pagesInView.eq(i).addClass('page-master-stacked');
            $pagesInView.eq(i).trigger('page:masterstack');
            router.emit('pageMasterStack', $pagesInView[i]);
            if (dynamicNavbar) {
              $(app.navbar.getElByPage(masterPageEl)).addClass('navbar-master-stacked');
              router.emit('navbarMasterStack', app.navbar.getElByPage(masterPageEl));
            }
            continue; // eslint-disable-line
          }
          const oldNavbarEl = app.navbar.getElByPage($pagesInView.eq(i));
          if (router.params.stackPages) {
            $pagesInView.eq(i).addClass('stacked');
            $pagesInView.eq(i).trigger('page:stack');
            router.emit('pageStack', $pagesInView[i]);
            if (dynamicNavbar) {
              $(oldNavbarEl).addClass('stacked');
            }
          } else {
            // Page remove event
            removedPageEls.push($pagesInView[i]);
            router.pageCallback('beforeRemove', $pagesInView[i], $navbarsInView && $navbarsInView[i], 'previous', undefined, options);
            router.removePage($pagesInView[i]);
            if (dynamicNavbar && oldNavbarEl) {
              removedNavbarEls.push(oldNavbarEl);
              router.removeNavbar(oldNavbarEl);
            }
          }
        }
      }
      $oldPage = $viewEl
        .children('.page:not(.stacked)')
        .filter((index, pageEl) => pageEl !== $newPage[0] && removedPageEls.indexOf(pageEl) < 0);
      if (dynamicNavbar) {
        $oldNavbarEl = $navbarsEl
          .children('.navbar:not(.stacked)')
          .filter((index, navbarEl) => navbarEl !== $newNavbarEl[0] && removedNavbarEls.indexOf(removedNavbarEls) < 0);
      }
      removedPageEls = [];
      removedNavbarEls = [];
    }

    if (isDetail && !options.reloadAll) {
      if ($oldPage.length > 1 || reloadDetail) {
        $oldPage = $oldPage.filter((pageIndex, pageEl) => !pageEl.classList.contains('page-master'));
      }
      if ($oldNavbarEl && ($oldNavbarEl.length > 1 || reloadDetail)) {
        $oldNavbarEl = $oldNavbarEl.filter((navbarIndex, navbarEl) => !navbarEl.classList.contains('navbar-master'));
      }
    }

    // Push State
    if (router.params.pushState && (options.pushState || options.replaceState) && !options.reloadPrevious) {
      const pushStateRoot = router.params.pushStateRoot || '';
      History[options.reloadCurrent || (reloadDetail && otherDetailPageEl) || options.reloadAll || options.replaceState ? 'replace' : 'push'](
        view.id,
        {
          url: options.route.url,
        },
        pushStateRoot + router.params.pushStateSeparator + options.route.url
      );
    }

    if (!options.reloadPrevious) {
      // Current Page & Navbar
      router.currentPageEl = $newPage[0];
      if (dynamicNavbar && $newNavbarEl.length) {
        router.currentNavbarEl = $newNavbarEl[0];
      } else {
        delete router.currentNavbarEl;
      }

      // Current Route
      router.currentRoute = options.route;
    }

    // Update router history
    const url = options.route.url;

    if (options.history) {
      if (((options.reloadCurrent || (reloadDetail && otherDetailPageEl)) && router.history.length) > 0 || options.replaceState) {
        router.history[router.history.length - (options.reloadPrevious ? 2 : 1)] = url;
      } else if (options.reloadPrevious) {
        router.history[router.history.length - 2] = url;
      } else if (options.reloadAll) {
        router.history = [url];
      } else {
        router.history.push(url);
      }
    }
    router.saveHistory();

    // Insert new page and navbar
    const newPageInDom = $newPage.parents(doc).length > 0;
    const f7Component = $newPage[0].f7Component;
    if (options.reloadPrevious) {
      if (f7Component && !newPageInDom) {
        f7Component.$mount((componentEl) => {
          $(componentEl).insertBefore($oldPage);
        });
      } else {
        $newPage.insertBefore($oldPage);
      }
      if (dynamicNavbar && $newNavbarEl.length) {
        if ($newNavbarEl.find('.title-large').length) {
          $newNavbarEl.addClass('navbar-large');
        }
        if ($oldNavbarEl.length) {
          $newNavbarEl.insertBefore($oldNavbarEl);
        } else {
          if (!router.$navbarsEl.parents(doc).length) {
            router.$el.prepend(router.$navbarsEl);
          }
          $navbarsEl.append($newNavbarEl);
        }
      }
    } else {
      if ($oldPage.next('.page')[0] !== $newPage[0]) {
        if (f7Component && !newPageInDom) {
          f7Component.$mount((componentEl) => {
            $viewEl.append(componentEl);
          });
        } else {
          $viewEl.append($newPage[0]);
        }
      }
      if (dynamicNavbar && $newNavbarEl.length) {
        if ($newNavbarEl.find('.title-large').length) {
          $newNavbarEl.addClass('navbar-large');
        }
        if (!router.$navbarsEl.parents(doc).length) {
          router.$el.prepend(router.$navbarsEl);
        }
        $navbarsEl.append($newNavbarEl[0]);
      }
    }
    if (!newPageInDom) {
      router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, (reload ? newPagePosition : 'current'), options, $oldPage);
    } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {
      $newPage[0].f7PageMounted = true;
      router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, (reload ? newPagePosition : 'current'), options, $oldPage);
    }

    // Remove old page
    if ((options.reloadCurrent || reloadDetail) && $oldPage.length > 0) {
      if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
        $oldPage.addClass('stacked');
        $oldPage.trigger('page:stack');
        router.emit('pageStack', $oldPage[0]);
        if (dynamicNavbar) {
          $oldNavbarEl.addClass('stacked');
        }
      } else {
        // Page remove event
        router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);
        router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);
        router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'current', undefined, options);
        router.removePage($oldPage);
        if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {
          router.removeNavbar($oldNavbarEl);
        }
      }
    } else if (options.reloadAll) {
      $oldPage.each((index, pageEl) => {
        const $oldPageEl = $(pageEl);
        const $oldNavbarElEl = $(app.navbar.getElByPage($oldPageEl));
        if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {
          $oldPageEl.addClass('stacked');
          $oldPageEl.trigger('page:stack');
          router.emit('pageStack', $oldPageEl[0]);
          if (dynamicNavbar) {
            $oldNavbarElEl.addClass('stacked');
          }
        } else {
          // Page remove event
          if ($oldPageEl.hasClass('page-current')) {
            router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);
            router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);
          }
          router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarEl && $oldNavbarEl.eq(index), 'previous', undefined, options);
          router.removePage($oldPageEl);
          if (dynamicNavbar && $oldNavbarElEl.length) {
            router.removeNavbar($oldNavbarElEl);
          }
        }
      });
    } else if (options.reloadPrevious) {
      if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
        $oldPage.addClass('stacked');
        $oldPage.trigger('page:stack');
        router.emit('pageStack', $oldPage[0]);
        if (dynamicNavbar) {
          $oldNavbarEl.addClass('stacked');
        }
      } else {
        // Page remove event
        router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);
        router.removePage($oldPage);
        if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {
          router.removeNavbar($oldNavbarEl);
        }
      }
    }

    // Load Tab
    if (options.route.route.tab) {
      router.tabLoad(options.route.route.tab, Utils.extend({}, options, {
        history: false,
        pushState: false,
      }));
    }

    // Check master detail
    if (masterDetailEnabled) {
      view.checkMasterDetailBreakpoint();
    }

    // Page init and before init events
    router.pageCallback('init', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);

    if (options.reloadCurrent || options.reloadAll || reloadDetail) {
      router.allowPageChange = true;
      router.pageCallback('beforeIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);
      $newPage.removeAttr('aria-hidden');
      if (dynamicNavbar && $newNavbarEl) {
        $newNavbarEl.removeAttr('aria-hidden');
      }
      router.pageCallback('afterIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);
      if (options.reloadCurrent && options.clearPreviousHistory) router.clearPreviousHistory();
      if (reloadDetail) {
        router.setPagePosition($(masterPageEl), 'previous');
        if (masterPageEl.f7Page && masterPageEl.f7Page.navbarEl) {
          router.setNavbarPosition($(masterPageEl.f7Page.navbarEl), 'previous');
        }
      }
      return router;
    }
    if (options.reloadPrevious) {
      router.allowPageChange = true;
      return router;
    }

    // Before animation event
    router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);
    router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'next', 'current', options);

    // Animation
    function afterAnimation() {
      router.setPagePosition($newPage, 'current', false);
      router.setPagePosition($oldPage, 'previous', !$oldPage.hasClass('page-master'));
      if (dynamicNavbar) {
        router.setNavbarPosition($newNavbarEl, 'current', false);
        router.setNavbarPosition($oldNavbarEl, 'previous', !$oldNavbarEl.hasClass('navbar-master'));
      }
      // After animation event
      router.allowPageChange = true;
      router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);
      router.pageCallback('afterIn', $newPage, $newNavbarEl, 'next', 'current', options);

      let keepOldPage = (router.params.preloadPreviousPage || router.params[`${app.theme}SwipeBack`]) && !isMaster;
      if (!keepOldPage) {
        if ($newPage.hasClass('smart-select-page') || $newPage.hasClass('photo-browser-page') || $newPage.hasClass('autocomplete-page') || $newPage.hasClass('color-picker-page')) {
          keepOldPage = true;
        }
      }
      if (!keepOldPage) {
        if (router.params.stackPages) {
          $oldPage.addClass('stacked');
          $oldPage.trigger('page:stack');
          router.emit('pageStack', $oldPage[0]);
          if (dynamicNavbar) {
            $oldNavbarEl.addClass('stacked');
          }
        } else if (!($newPage.attr('data-name') && $newPage.attr('data-name') === 'smart-select-page')) {
          // Remove event
          router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);
          router.removePage($oldPage);
          if (dynamicNavbar && $oldNavbarEl.length) {
            router.removeNavbar($oldNavbarEl);
          }
        }
      }
      if (options.clearPreviousHistory) router.clearPreviousHistory();
      router.emit('routeChanged', router.currentRoute, router.previousRoute, router);

      if (router.params.pushState) {
        History.clearRouterQueue();
      }
    }
    function setPositionClasses() {
      router.setPagePosition($oldPage, 'current', false);
      router.setPagePosition($newPage, 'next', false);
      if (dynamicNavbar) {
        router.setNavbarPosition($oldNavbarEl, 'current', false);
        router.setNavbarPosition($newNavbarEl, 'next', false);
      }
    }
    if (options.animate && !(isMaster && app.width >= router.params.masterDetailBreakpoint)) {
      const delay = router.params[`${router.app.theme}PageLoadDelay`];
      let transition = router.params.transition;
      if (options.transition) transition = options.transition;
      if (!transition && router.currentRoute && router.currentRoute.route) {
        transition = router.currentRoute.route.transition;
      }
      if (!transition && router.currentRoute && router.currentRoute.route.options) {
        transition = router.currentRoute.route.options.transition;
      }
      if (transition) {
        $newPage[0].f7PageTransition = transition;
      }

      if (delay) {
        setTimeout(() => {
          setPositionClasses();
          router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, () => {
            afterAnimation();
          });
        }, delay);
      } else {
        setPositionClasses();
        router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, () => {
          afterAnimation();
        });
      }
    } else {
      afterAnimation();
    }
    return router;
  }
  function load(loadParams = {}, loadOptions = {}, ignorePageChange) {
    const router = this;
    if (!router.allowPageChange && !ignorePageChange) return router;
    const params = loadParams;
    const options = loadOptions;
    const { url, content, el, pageName, template, templateUrl, component, componentUrl } = params;

    if (!options.reloadCurrent
      && options.route
      && options.route.route
      && options.route.route.parentPath
      && router.currentRoute.route
      && router.currentRoute.route.parentPath === options.route.route.parentPath) {
      // Do something nested
      if (options.route.url === router.url) {
        router.allowPageChange = true;
        return false;
      }
      // Check for same params
      let sameParams = Object.keys(options.route.params).length === Object.keys(router.currentRoute.params).length;
      if (sameParams) {
        // Check for equal params name
        Object.keys(options.route.params).forEach((paramName) => {
          if (
            !(paramName in router.currentRoute.params)
            || (router.currentRoute.params[paramName] !== options.route.params[paramName])
          ) {
            sameParams = false;
          }
        });
      }
      if (sameParams) {
        if (options.route.route.tab) {
          return router.tabLoad(options.route.route.tab, options);
        }
        return false;
      }
      if (!sameParams
        && options.route.route.tab
        && router.currentRoute.route.tab
        && router.currentRoute.parentPath === options.route.parentPath
      ) {
        return router.tabLoad(options.route.route.tab, options);
      }
    }

    if (
      options.route
      && options.route.url
      && router.url === options.route.url
      && !(options.reloadCurrent || options.reloadPrevious)
      && !router.params.allowDuplicateUrls
    ) {
      router.allowPageChange = true;
      return false;
    }

    if (!options.route && url) {
      options.route = router.parseRouteUrl(url);
      Utils.extend(options.route, { route: { url, path: url } });
    }

    // Component Callbacks
    function resolve(pageEl, newOptions) {
      return router.forward(pageEl, Utils.extend(options, newOptions));
    }
    function reject() {
      router.allowPageChange = true;
      return router;
    }

    if (url || templateUrl || componentUrl || component) {
      router.allowPageChange = false;
    }

    // Proceed
    if (content) {
      router.forward(router.getPageEl(content), options);
    } else if (template || templateUrl) {
      // Parse template and send page element
      try {
        router.pageTemplateLoader(template, templateUrl, options, resolve, reject);
      } catch (err) {
        router.allowPageChange = true;
        throw err;
      }
    } else if (el) {
      // Load page from specified HTMLElement or by page name in pages container
      router.forward(router.getPageEl(el), options);
    } else if (pageName) {
      // Load page by page name in pages container
      router.forward(router.$el.children(`.page[data-name="${pageName}"]`).eq(0), options);
    } else if (component || componentUrl) {
      // Load from component (F7/Vue/React/...)
      try {
        router.pageComponentLoader(router.el, component, componentUrl, options, resolve, reject);
      } catch (err) {
        router.allowPageChange = true;
        throw err;
      }
    } else if (url) {
      // Load using XHR
      if (router.xhr) {
        router.xhr.abort();
        router.xhr = false;
      }
      router.xhrRequest(url, options)
        .then((pageContent) => {
          router.forward(router.getPageEl(pageContent), options);
        })
        .catch(() => {
          router.allowPageChange = true;
        });
    }
    return router;
  }
  function navigate(navigateParams, navigateOptions = {}) {
    const router = this;
    if (router.swipeBackActive) return router;
    let url;
    let createRoute;
    let name;
    let path;
    let query;
    let params;
    let route;
    if (typeof navigateParams === 'string') {
      url = navigateParams;
    } else {
      url = navigateParams.url;
      createRoute = navigateParams.route;
      name = navigateParams.name;
      path = navigateParams.path;
      query = navigateParams.query;
      params = navigateParams.params;
    }
    if (name || path) {
      url = router.generateUrl({ path, name, params, query });
      if (url) {
        return router.navigate(url, navigateOptions);
      }
      return router;
    }
    const app = router.app;
    appRouterCheck(router, 'navigate');
    if (url === '#' || url === '') {
      return router;
    }

    let navigateUrl = url.replace('./', '');
    if (navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {
      const currentPath = router.currentRoute.parentPath || router.currentRoute.path;
      navigateUrl = ((currentPath ? `${currentPath}/` : '/') + navigateUrl)
        .replace('///', '/')
        .replace('//', '/');
    }
    if (createRoute) {
      route = Utils.extend(router.parseRouteUrl(navigateUrl), {
        route: Utils.extend({}, createRoute),
      });
    } else {
      route = router.findMatchingRoute(navigateUrl);
    }

    if (!route) {
      return router;
    }
    if (route.route && route.route.viewName) {
      const anotherViewName = route.route.viewName;
      const anotherView = app.views[anotherViewName];
      if (!anotherView) {
        throw new Error(`Framework7: There is no View with "${anotherViewName}" name that was specified in this route`);
      }
      if (anotherView !== router.view) {
        return anotherView.router.navigate(navigateParams, navigateOptions);
      }
    }

    if (route.route.redirect) {
      return redirect.call(router, 'navigate', route, navigateOptions);
    }


    const options = {};
    if (route.route.options) {
      Utils.extend(options, route.route.options, navigateOptions);
    } else {
      Utils.extend(options, navigateOptions);
    }
    options.route = route;

    if (options && options.context) {
      route.context = options.context;
      options.route.context = options.context;
    }

    function resolve() {
      let routerLoaded = false;
      ('popup popover sheet loginScreen actions customModal panel').split(' ').forEach((modalLoadProp) => {
        if (route.route[modalLoadProp] && !routerLoaded) {
          routerLoaded = true;
          router.modalLoad(modalLoadProp, route, options);
        }
      });
      if (route.route.keepAlive && route.route.keepAliveData) {
        router.load({ el: route.route.keepAliveData.pageEl }, options, false);
        routerLoaded = true;
      }
      ('url content component pageName el componentUrl template templateUrl').split(' ').forEach((pageLoadProp) => {
        if (route.route[pageLoadProp] && !routerLoaded) {
          routerLoaded = true;
          router.load({ [pageLoadProp]: route.route[pageLoadProp] }, options, false);
        }
      });
      if (routerLoaded) return;
      // Async
      function asyncResolve(resolveParams, resolveOptions) {
        router.allowPageChange = false;
        let resolvedAsModal = false;
        if (resolveOptions && resolveOptions.context) {
          if (!route.context) route.context = resolveOptions.context;
          else route.context = Utils.extend({}, route.context, resolveOptions.context);
          options.route.context = route.context;
        }
        ('popup popover sheet loginScreen actions customModal panel').split(' ').forEach((modalLoadProp) => {
          if (resolveParams[modalLoadProp]) {
            resolvedAsModal = true;
            const modalRoute = Utils.extend({}, route, { route: resolveParams });
            router.allowPageChange = true;
            router.modalLoad(modalLoadProp, modalRoute, Utils.extend(options, resolveOptions));
          }
        });
        if (resolvedAsModal) return;
        router.load(resolveParams, Utils.extend(options, resolveOptions), true);
      }
      function asyncReject() {
        router.allowPageChange = true;
      }
      if (route.route.async) {
        router.allowPageChange = false;
        route.route.async.call(router, options.route, router.currentRoute, asyncResolve, asyncReject);
      }
      if (route.route.asyncComponent) {
        asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);
      }
    }
    function reject() {
      router.allowPageChange = true;
    }

    if (router.params.masterDetailBreakpoint > 0 && route.route.masterRoute) {
      // load detail route
      let preloadMaster = true;
      let masterLoaded = false;
      if (router.currentRoute && router.currentRoute.route) {
        if (
          router.currentRoute.route.master
          && (
            router.currentRoute.route === route.route.masterRoute
            || router.currentRoute.route.path === route.route.masterRoute.path
          )
        ) {
          preloadMaster = false;
        }
        if (
          router.currentRoute.route.masterRoute
          && (router.currentRoute.route.masterRoute === route.route.masterRoute
            || router.currentRoute.route.masterRoute.path === route.route.masterRoute.path
          )
        ) {
          preloadMaster = false;
          masterLoaded = true;
        }
      }
      if (preloadMaster || (masterLoaded && navigateOptions.reloadAll)) {
        router.navigate({ path: route.route.masterRoute.path, params: route.params || {} }, {
          animate: false,
          reloadAll: navigateOptions.reloadAll,
          reloadCurrent: navigateOptions.reloadCurrent,
          reloadPrevious: navigateOptions.reloadPrevious,
          pushState: !navigateOptions.initial,
          history: !navigateOptions.initial,
          once: {
            pageAfterIn() {
              router.navigate(navigateParams, Utils.extend({}, navigateOptions, {
                animate: false,
                reloadAll: false,
                reloadCurrent: false,
                reloadPrevious: false,
                history: !navigateOptions.initial,
                pushState: !navigateOptions.initial,
              }));
            },
          },
        });
        return router;
      }
    }

    processRouteQueue.call(
      router,
      route,
      router.currentRoute,
      () => {
        if (route.route.modules) {
          app
            .loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules])
            .then(() => {
              resolve();
            })
            .catch(() => {
              reject();
            });
        } else {
          resolve();
        }
      },
      () => {
        reject();
      },
    );

    // Return Router
    return router;
  }

  function tabLoad(tabRoute, loadOptions = {}) {
    const router = this;
    const options = Utils.extend({
      animate: router.params.animate,
      pushState: true,
      history: true,
      parentPageEl: null,
      preload: false,
      on: {},
    }, loadOptions);

    let currentRoute;
    let previousRoute;
    if (options.route) {
      // Set Route
      if (!options.preload && options.route !== router.currentRoute) {
        previousRoute = router.previousRoute;
        router.currentRoute = options.route;
      }
      if (options.preload) {
        currentRoute = options.route;
        previousRoute = router.currentRoute;
      } else {
        currentRoute = router.currentRoute;
        if (!previousRoute) previousRoute = router.previousRoute;
      }

      // Update Browser History
      if (router.params.pushState && options.pushState && !options.reloadPrevious) {
        History.replace(
          router.view.id,
          {
            url: options.route.url,
          },
          (router.params.pushStateRoot || '') + router.params.pushStateSeparator + options.route.url
        );
      }

      // Update Router History
      if (options.history) {
        router.history[Math.max(router.history.length - 1, 0)] = options.route.url;
        router.saveHistory();
      }
    }

    // Show Tab
    const $parentPageEl = $(options.parentPageEl || router.currentPageEl);
    let tabEl;
    if ($parentPageEl.length && $parentPageEl.find(`#${tabRoute.id}`).length) {
      tabEl = $parentPageEl.find(`#${tabRoute.id}`).eq(0);
    } else if (router.view.selector) {
      tabEl = `${router.view.selector} #${tabRoute.id}`;
    } else {
      tabEl = `#${tabRoute.id}`;
    }
    const tabShowResult = router.app.tab.show({
      tabEl,
      animate: options.animate,
      tabRoute: options.route,
    });

    const { $newTabEl, $oldTabEl, animated, onTabsChanged } = tabShowResult;

    if ($newTabEl && $newTabEl.parents('.page').length > 0 && options.route) {
      const tabParentPageData = $newTabEl.parents('.page')[0].f7Page;
      if (tabParentPageData && options.route) {
        tabParentPageData.route = options.route;
      }
    }

    // Tab Content Loaded
    function onTabLoaded(contentEl) {
      // Remove theme elements
      router.removeThemeElements($newTabEl);

      let tabEventTarget = $newTabEl;
      if (typeof contentEl !== 'string') tabEventTarget = $(contentEl);

      tabEventTarget.trigger('tab:init tab:mounted', tabRoute);
      router.emit('tabInit tabMounted', $newTabEl[0], tabRoute);

      if ($oldTabEl && $oldTabEl.length) {
        if (animated) {
          onTabsChanged(() => {
            router.emit('routeChanged', router.currentRoute, router.previousRoute, router);
            if (router.params.unloadTabContent) {
              router.tabRemove($oldTabEl, $newTabEl, tabRoute);
            }
          });
        } else {
          router.emit('routeChanged', router.currentRoute, router.previousRoute, router);
          if (router.params.unloadTabContent) {
            router.tabRemove($oldTabEl, $newTabEl, tabRoute);
          }
        }
      }
    }

    if ($newTabEl[0].f7RouterTabLoaded) {
      if (!$oldTabEl || !$oldTabEl.length) return router;
      if (animated) {
        onTabsChanged(() => {
          router.emit('routeChanged', router.currentRoute, router.previousRoute, router);
        });
      } else {
        router.emit('routeChanged', router.currentRoute, router.previousRoute, router);
      }
      return router;
    }

    // Load Tab Content
    function loadTab(loadTabParams, loadTabOptions) {
      // Load Tab Props
      const { url, content, el, template, templateUrl, component, componentUrl } = loadTabParams;
      // Component/Template Callbacks
      function resolve(contentEl) {
        router.allowPageChange = true;
        if (!contentEl) return;
        if (typeof contentEl === 'string') {
          $newTabEl.html(contentEl);
        } else {
          $newTabEl.html('');
          if (contentEl.f7Component) {
            contentEl.f7Component.$mount((componentEl) => {
              $newTabEl.append(componentEl);
            });
          } else {
            $newTabEl.append(contentEl);
          }
        }
        $newTabEl[0].f7RouterTabLoaded = true;
        onTabLoaded(contentEl);
      }
      function reject() {
        router.allowPageChange = true;
        return router;
      }

      if (content) {
        resolve(content);
      } else if (template || templateUrl) {
        try {
          router.tabTemplateLoader(template, templateUrl, loadTabOptions, resolve, reject);
        } catch (err) {
          router.allowPageChange = true;
          throw err;
        }
      } else if (el) {
        resolve(el);
      } else if (component || componentUrl) {
        // Load from component (F7/Vue/React/...)
        try {
          router.tabComponentLoader($newTabEl[0], component, componentUrl, loadTabOptions, resolve, reject);
        } catch (err) {
          router.allowPageChange = true;
          throw err;
        }
      } else if (url) {
        // Load using XHR
        if (router.xhr) {
          router.xhr.abort();
          router.xhr = false;
        }
        router.xhrRequest(url, loadTabOptions)
          .then((tabContent) => {
            resolve(tabContent);
          })
          .catch(() => {
            router.allowPageChange = true;
          });
      }
    }

    let hasContentLoadProp;
    ('url content component el componentUrl template templateUrl').split(' ').forEach((tabLoadProp) => {
      if (tabRoute[tabLoadProp]) {
        hasContentLoadProp = true;
        loadTab({ [tabLoadProp]: tabRoute[tabLoadProp] }, options);
      }
    });

    // Async
    function asyncResolve(resolveParams, resolveOptions) {
      loadTab(resolveParams, Utils.extend(options, resolveOptions));
    }
    function asyncReject() {
      router.allowPageChange = true;
    }
    if (tabRoute.async) {
      tabRoute.async.call(router, currentRoute, previousRoute, asyncResolve, asyncReject);
    } else if (tabRoute.asyncComponent) {
      asyncComponent(router, tabRoute.asyncComponent, asyncResolve, asyncReject);
    } else if (!hasContentLoadProp) {
      router.allowPageChange = true;
    }

    return router;
  }
  function tabRemove($oldTabEl, $newTabEl, tabRoute) {
    const router = this;

    let hasTabComponentChild;
    if ($oldTabEl[0]) {
      $oldTabEl[0].f7RouterTabLoaded = false;
      delete $oldTabEl[0].f7RouterTabLoaded;
    }
    $oldTabEl.children().each((index, tabChild) => {
      if (tabChild.f7Component) {
        hasTabComponentChild = true;
        $(tabChild).trigger('tab:beforeremove', tabRoute);
        tabChild.f7Component.$destroy();
      }
    });
    if (!hasTabComponentChild) {
      $oldTabEl.trigger('tab:beforeremove', tabRoute);
    }
    router.emit('tabBeforeRemove', $oldTabEl[0], $newTabEl[0], tabRoute);
    router.removeTabContent($oldTabEl[0], tabRoute);
  }

  function modalLoad(modalType, route, loadOptions = {}) {
    const router = this;
    const app = router.app;
    const isPanel = modalType === 'panel';
    const modalOrPanel = isPanel ? 'panel' : 'modal';

    const options = Utils.extend({
      animate: router.params.animate,
      pushState: true,
      history: true,
      on: {},
    }, loadOptions);

    const modalParams = Utils.extend({}, route.route[modalType]);
    const modalRoute = route.route;

    function onModalLoaded() {
      // Create Modal
      const modal = app[modalType].create(modalParams);
      modalRoute.modalInstance = modal;

      const hasEl = modal.el;

      function closeOnSwipeBack() {
        modal.close();
      }
      modal.on(`${modalOrPanel}Open`, () => {
        if (!hasEl) {
          // Remove theme elements
          router.removeThemeElements(modal.el);

          // Emit events
          modal.$el.trigger(`${modalType.toLowerCase()}:init ${modalType.toLowerCase()}:mounted`, route, modal);
          router.emit(`${!isPanel ? 'modalInit' : ''} ${modalType}Init ${modalType}Mounted`, modal.el, route, modal);
        }
        router.once('swipeBackMove', closeOnSwipeBack);
      });
      modal.on(`${modalOrPanel}Close`, () => {
        router.off('swipeBackMove', closeOnSwipeBack);
        if (!modal.closeByRouter) {
          router.back();
        }
      });

      modal.on(`${modalOrPanel}Closed`, () => {
        modal.$el.trigger(`${modalType.toLowerCase()}:beforeremove`, route, modal);
        modal.emit(`${!isPanel ? 'modalBeforeRemove ' : ''}${modalType}BeforeRemove`, modal.el, route, modal);
        const modalComponent = modal.el.f7Component;
        if (modalComponent) {
          modalComponent.$destroy();
        }
        Utils.nextTick(() => {
          if (modalComponent || modalParams.component) {
            router.removeModal(modal.el);
          }
          modal.destroy();
          delete modal.route;
          delete modalRoute.modalInstance;
        });
      });

      if (options.route) {
        // Update Browser History
        if (router.params.pushState && options.pushState) {
          History.push(
            router.view.id,
            {
              url: options.route.url,
              modal: modalType,
            },
            (router.params.pushStateRoot || '') + router.params.pushStateSeparator + options.route.url
          );
        }

        // Set Route
        if (options.route !== router.currentRoute) {
          modal.route = Utils.extend(options.route, { modal });
          router.currentRoute = modal.route;
        }

        // Update Router History
        if (options.history) {
          router.history.push(options.route.url);
          router.saveHistory();
        }
      }

      if (hasEl) {
        // Remove theme elements
        router.removeThemeElements(modal.el);

        // Emit events
        modal.$el.trigger(`${modalType.toLowerCase()}:init ${modalType.toLowerCase()}:mounted`, route, modal);
        router.emit(`${modalOrPanel}Init ${modalType}Init ${modalType}Mounted`, modal.el, route, modal);
      }

      // Open
      modal.open();
    }

    // Load Modal Content
    function loadModal(loadModalParams, loadModalOptions) {
      // Load Modal Props
      const { url, content, template, templateUrl, component, componentUrl } = loadModalParams;

      // Component/Template Callbacks
      function resolve(contentEl) {
        if (contentEl) {
          if (typeof contentEl === 'string') {
            modalParams.content = contentEl;
          } else if (contentEl.f7Component) {
            contentEl.f7Component.$mount((componentEl) => {
              modalParams.el = componentEl;
              app.root.append(componentEl);
            });
          } else {
            modalParams.el = contentEl;
          }
          onModalLoaded();
        }
      }
      function reject() {
        router.allowPageChange = true;
        return router;
      }

      if (content) {
        resolve(content);
      } else if (template || templateUrl) {
        try {
          router.modalTemplateLoader(template, templateUrl, loadModalOptions, resolve, reject);
        } catch (err) {
          router.allowPageChange = true;
          throw err;
        }
      } else if (component || componentUrl) {
        // Load from component (F7/Vue/React/...)
        try {
          router.modalComponentLoader(app.root[0], component, componentUrl, loadModalOptions, resolve, reject);
        } catch (err) {
          router.allowPageChange = true;
          throw err;
        }
      } else if (url) {
        // Load using XHR
        if (router.xhr) {
          router.xhr.abort();
          router.xhr = false;
        }
        router.xhrRequest(url, loadModalOptions)
          .then((modalContent) => {
            modalParams.content = modalContent;
            onModalLoaded();
          })
          .catch(() => {
            router.allowPageChange = true;
          });
      } else {
        onModalLoaded();
      }
    }

    let foundLoadProp;
    ('url content component el componentUrl template templateUrl').split(' ').forEach((modalLoadProp) => {
      if (modalParams[modalLoadProp] && !foundLoadProp) {
        foundLoadProp = true;
        loadModal({ [modalLoadProp]: modalParams[modalLoadProp] }, options);
      }
    });
    if (!foundLoadProp && modalType === 'actions') {
      onModalLoaded();
    }

    // Async
    function asyncResolve(resolveParams, resolveOptions) {
      loadModal(resolveParams, Utils.extend(options, resolveOptions));
    }
    function asyncReject() {
      router.allowPageChange = true;
    }
    if (modalParams.async) {
      modalParams.async.call(router, options.route, router.currentRoute, asyncResolve, asyncReject);
    }
    if (modalParams.asyncComponent) {
      asyncComponent(router, modalParams.asyncComponent, asyncResolve, asyncReject);
    }
    return router;
  }
  function modalRemove(modal) {
    Utils.extend(modal, { closeByRouter: true });
    modal.close();
  }

  function backward(el, backwardOptions) {
    const router = this;
    const $el = $(el);
    const app = router.app;
    const view = router.view;

    const options = Utils.extend({
      animate: router.params.animate,
      pushState: true,
      replaceState: false,
    }, backwardOptions);

    const masterDetailEnabled = router.params.masterDetailBreakpoint > 0;
    const isMaster = masterDetailEnabled && options.route && options.route.route && options.route.route.master === true;
    let masterPageEl;
    let masterPageRemoved;

    const dynamicNavbar = router.dynamicNavbar;

    const $newPage = $el;
    const $oldPage = router.$el.children('.page-current');
    const currentIsMaster = masterDetailEnabled && $oldPage.hasClass('page-master');

    if ($newPage.length) {
      // Remove theme elements
      router.removeThemeElements($newPage);
    }

    let $navbarsEl;
    let $newNavbarEl;
    let $oldNavbarEl;

    if (dynamicNavbar) {
      $newNavbarEl = $newPage.children('.navbar');
      $navbarsEl = router.$navbarsEl;
      if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {
        // Try from pageData
        $newNavbarEl = $newPage[0].f7Page.$navbarEl;
      }
      $oldNavbarEl = $navbarsEl.find('.navbar-current');
    }

    router.allowPageChange = false;
    if ($newPage.length === 0 || $oldPage.length === 0) {
      router.allowPageChange = true;
      return router;
    }

    // Remove theme elements
    router.removeThemeElements($newPage);

    // Save Keep Alive Cache
    if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {
      options.route.route.keepAliveData = {
        pageEl: $el[0],
      };
    }

    // Pages In View
    let isDetail;
    let isDetailRoot;
    if (masterDetailEnabled) {
      const $pagesInView = router.$el
        .children('.page:not(.stacked)')
        .filter((index, pageInView) => pageInView !== $newPage[0]);

      // Find Detail' master page
      for (let i = 0; i < $pagesInView.length; i += 1) {
        if (!masterPageEl
          && $pagesInView[i].classList.contains('page-master')
        ) {
          masterPageEl = $pagesInView[i];
          continue; // eslint-disable-line
        }
      }

      isDetail = !isMaster
        && masterPageEl
        && (router.history.indexOf(options.route.url) > router.history.indexOf(masterPageEl.f7Page.route.url));

      if (!isDetail && !isMaster && masterPageEl && masterPageEl.f7Page && options.route.route.masterRoute) {
        isDetail = options.route.route.masterRoute.path === masterPageEl.f7Page.route.route.path;
      }
    }
    if (isDetail && masterPageEl && masterPageEl.f7Page) {
      isDetailRoot = router.history.indexOf(options.route.url) - router.history.indexOf(masterPageEl.f7Page.route.url) === 1;
    }

    // New Page
    $newPage
      .addClass(`page-previous${isMaster ? ' page-master' : ''}${isDetail ? ' page-master-detail' : ''}${isDetailRoot ? ' page-master-detail-root' : ''}`)
      .removeClass('stacked')
      .removeAttr('aria-hidden')
      .trigger('page:unstack')
      .trigger('page:position', { position: 'previous' });
    router.emit('pageUnstack', $newPage[0]);
    router.emit('pagePosition', $newPage[0], 'previous');
    if (isMaster || isDetail) {
      $newPage.trigger('page:role', { role: isMaster ? 'master' : 'detail', root: !!isDetailRoot });
      router.emit('pageRole', $newPage[0], { role: isMaster ? 'master' : 'detail', detailRoot: !!isDetailRoot });
    }

    if (dynamicNavbar && $newNavbarEl.length > 0) {
      $newNavbarEl
        .addClass(`navbar-previous${isMaster ? ' navbar-master' : ''}${isDetail ? ' navbar-master-detail' : ''}${isDetailRoot ? ' navbar-master-detail-root' : ''}`)
        .removeClass('stacked')
        .removeAttr('aria-hidden');
      $newNavbarEl.trigger('navbar:position', { position: 'previous' });
      router.emit('navbarPosition', $newNavbarEl[0], 'previous');
      if (isMaster || isDetailRoot) {
        router.emit('navbarRole', $newNavbarEl[0], { role: isMaster ? 'master' : 'detail', detailRoot: !!isDetailRoot });
      }
    }

    // Remove previous page in case of "forced"
    let backIndex;
    if (options.force) {
      if ($oldPage.prev('.page-previous:not(.stacked)').length > 0 || $oldPage.prev('.page-previous').length === 0) {
        if (router.history.indexOf(options.route.url) >= 0) {
          backIndex = router.history.length - router.history.indexOf(options.route.url) - 1;
          router.history = router.history.slice(0, router.history.indexOf(options.route.url) + 2);
          view.history = router.history;
        } else if (router.history[[router.history.length - 2]]) {
          router.history[router.history.length - 2] = options.route.url;
        } else {
          router.history.unshift(router.url);
        }

        if (backIndex && router.params.stackPages) {
          $oldPage.prevAll('.page-previous').each((index, pageToRemove) => {
            const $pageToRemove = $(pageToRemove);
            let $navbarToRemove;
            if (dynamicNavbar) {
              // $navbarToRemove = $oldNavbarEl.prevAll('.navbar-previous').eq(index);
              $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));
            }
            if ($pageToRemove[0] !== $newPage[0] && $pageToRemove.index() > $newPage.index()) {
              if (router.initialPages.indexOf($pageToRemove[0]) >= 0) {
                $pageToRemove.addClass('stacked');
                $pageToRemove.trigger('page:stack');
                router.emit('pageStack', $pageToRemove[0]);
                if (dynamicNavbar) {
                  $navbarToRemove.addClass('stacked');
                }
              } else {
                router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);
                if ($pageToRemove[0] === masterPageEl) {
                  masterPageRemoved = true;
                }
                router.removePage($pageToRemove);
                if (dynamicNavbar && $navbarToRemove.length > 0) {
                  router.removeNavbar($navbarToRemove);
                }
              }
            }
          });
        } else {
          const $pageToRemove = $oldPage.prev('.page-previous:not(.stacked)');
          let $navbarToRemove;
          if (dynamicNavbar) {
            // $navbarToRemove = $oldNavbarEl.prev('.navbar-inner:not(.stacked)');
            $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));
          }
          if (router.params.stackPages && router.initialPages.indexOf($pageToRemove[0]) >= 0) {
            $pageToRemove.addClass('stacked');
            $pageToRemove.trigger('page:stack');
            router.emit('pageStack', $pageToRemove[0]);
            $navbarToRemove.addClass('stacked');
          } else if ($pageToRemove.length > 0) {
            router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);
            if ($pageToRemove[0] === masterPageEl) {
              masterPageRemoved = true;
            }
            router.removePage($pageToRemove);
            if (dynamicNavbar && $navbarToRemove.length) {
              router.removeNavbar($navbarToRemove);
            }
          }
        }
      }
    }

    // Insert new page
    const newPageInDom = $newPage.parents(doc).length > 0;
    const f7Component = $newPage[0].f7Component;

    function insertPage() {
      if ($newPage.next($oldPage).length === 0) {
        if (!newPageInDom && f7Component) {
          f7Component.$mount((componentEl) => {
            $(componentEl).insertBefore($oldPage);
          });
        } else {
          $newPage.insertBefore($oldPage);
        }
      }
      if (dynamicNavbar && $newNavbarEl.length) {
        if ($newNavbarEl.find('.title-large').length) {
          $newNavbarEl.addClass('navbar-large');
        }
        $newNavbarEl.insertBefore($oldNavbarEl);
        if ($oldNavbarEl.length > 0) {
          $newNavbarEl.insertBefore($oldNavbarEl);
        } else {
          if (!router.$navbarsEl.parents(doc).length) {
            router.$el.prepend(router.$navbarsEl);
          }
          $navbarsEl.append($newNavbarEl);
        }
      }
      if (!newPageInDom) {
        router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);
      } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {
        $newPage[0].f7PageMounted = true;
        router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);
      }
    }

    if (options.preload) {
      // Insert Page
      insertPage();
      // Tab route
      if (options.route.route.tab) {
        router.tabLoad(options.route.route.tab, Utils.extend({}, options, {
          history: false,
          pushState: false,
          preload: true,
        }));
      }
      if (isMaster) {
        $newPage
          .removeClass('page-master-stacked')
          .trigger('page:masterunstack');
        router.emit('pageMasterUnstack', $newPage[0]);
        if (dynamicNavbar) {
          $(app.navbar.getElByPage($newPage)).removeClass('navbar-master-stacked');
          router.emit('navbarMasterUnstack', app.navbar.getElByPage($newPage));
        }
      }
      // Page init and before init events
      router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);
      const $previousPages = $newPage.prevAll('.page-previous:not(.stacked):not(.page-master)');
      if ($previousPages.length > 0) {
        $previousPages.each((index, pageToRemove) => {
          const $pageToRemove = $(pageToRemove);
          let $navbarToRemove;
          if (dynamicNavbar) {
            // $navbarToRemove = $newNavbarEl.prevAll('.navbar-previous:not(.stacked)').eq(index);
            $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));
          }
          if (router.params.stackPages && router.initialPages.indexOf(pageToRemove) >= 0) {
            $pageToRemove.addClass('stacked');
            $pageToRemove.trigger('page:stack');
            router.emit('pageStack', $pageToRemove[0]);
            if (dynamicNavbar) {
              $navbarToRemove.addClass('stacked');
            }
          } else {
            router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined);
            router.removePage($pageToRemove);
            if (dynamicNavbar && $navbarToRemove.length) {
              router.removeNavbar($navbarToRemove);
            }
          }
        });
      }
      router.allowPageChange = true;
      return router;
    }

    // History State
    if (!(Device.ie || Device.edge || (Device.firefox && !Device.ios))) {
      if (router.params.pushState && options.pushState) {
        if (options.replaceState) {
          const pushStateRoot = router.params.pushStateRoot || '';
          History.replace(
            view.id,
            {
              url: options.route.url,
            },
            pushStateRoot + router.params.pushStateSeparator + options.route.url
          );
        } else if (backIndex) {
          History.go(-backIndex);
        } else {
          History.back();
        }
      }
    }

    // Update History
    if (options.replaceState) {
      router.history[router.history.length - 1] = options.route.url;
    } else {
      if (router.history.length === 1) {
        router.history.unshift(router.url);
      }
      router.history.pop();
    }
    router.saveHistory();

    // Current Page & Navbar
    router.currentPageEl = $newPage[0];
    if (dynamicNavbar && $newNavbarEl.length) {
      router.currentNavbarEl = $newNavbarEl[0];
    } else {
      delete router.currentNavbarEl;
    }

    // Current Route
    router.currentRoute = options.route;

    // History State
    if (Device.ie || Device.edge || (Device.firefox && !Device.ios)) {
      if (router.params.pushState && options.pushState) {
        if (options.replaceState) {
          const pushStateRoot = router.params.pushStateRoot || '';
          History.replace(
            view.id,
            {
              url: options.route.url,
            },
            pushStateRoot + router.params.pushStateSeparator + options.route.url
          );
        } else if (backIndex) {
          History.go(-backIndex);
        } else {
          History.back();
        }
      }
    }

    // Insert Page
    insertPage();

    // Load Tab
    if (options.route.route.tab) {
      router.tabLoad(options.route.route.tab, Utils.extend({}, options, {
        history: false,
        pushState: false,
      }));
    }

    // Check master detail

    if (masterDetailEnabled && (currentIsMaster || masterPageRemoved)) {
      view.checkMasterDetailBreakpoint(false);
    }

    // Page init and before init events
    router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);

    // Before animation callback
    router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'next', options);
    router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'previous', 'current', options);

    // Animation
    function afterAnimation() {
      // Set classes
      router.setPagePosition($newPage, 'current', false);
      router.setPagePosition($oldPage, 'next', true);
      if (dynamicNavbar) {
        router.setNavbarPosition($newNavbarEl, 'current', false);
        router.setNavbarPosition($oldNavbarEl, 'next', true);
      }

      // After animation event
      router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'next', options);
      router.pageCallback('afterIn', $newPage, $newNavbarEl, 'previous', 'current', options);

      // Remove Old Page
      if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
        $oldPage.addClass('stacked');
        $oldPage.trigger('page:stack');
        router.emit('pageStack', $oldPage[0]);
        if (dynamicNavbar) {
          $oldNavbarEl.addClass('stacked');
        }
      } else {
        router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'next', undefined, options);
        router.removePage($oldPage);
        if (dynamicNavbar && $oldNavbarEl.length) {
          router.removeNavbar($oldNavbarEl);
        }
      }

      router.allowPageChange = true;
      router.emit('routeChanged', router.currentRoute, router.previousRoute, router);

      // Preload previous page
      const preloadPreviousPage = router.params.preloadPreviousPage || router.params[`${app.theme}SwipeBack`];
      if (preloadPreviousPage && router.history[router.history.length - 2] && !isMaster) {
        router.back(router.history[router.history.length - 2], { preload: true });
      }
      if (router.params.pushState) {
        History.clearRouterQueue();
      }
    }

    function setPositionClasses() {
      router.setPagePosition($oldPage, 'current');
      router.setPagePosition($newPage, 'previous', false);
      if (dynamicNavbar) {
        router.setNavbarPosition($oldNavbarEl, 'current');
        router.setNavbarPosition($newNavbarEl, 'previous', false);
      }
    }

    if (options.animate && !(currentIsMaster && app.width >= router.params.masterDetailBreakpoint)) {
      let transition = router.params.transition;
      if ($oldPage[0] && $oldPage[0].f7PageTransition) {
        transition = $oldPage[0].f7PageTransition;
        delete $oldPage[0].f7PageTransition;
      }
      if (options.transition) transition = options.transition;
      if (!transition && router.previousRoute && router.previousRoute.route) {
        transition = router.previousRoute.route.transition;
      }
      if (!transition && router.previousRoute && router.previousRoute.route && router.previousRoute.route.options) {
        transition = router.previousRoute.route.options.transition;
      }
      setPositionClasses();
      router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'backward', transition, () => {
        afterAnimation();
      });
    } else {
      afterAnimation();
    }

    return router;
  }
  function loadBack(backParams, backOptions, ignorePageChange) {
    const router = this;

    if (!router.allowPageChange && !ignorePageChange) return router;
    const params = backParams;
    const options = backOptions;
    const { url, content, el, pageName, template, templateUrl, component, componentUrl } = params;

    if (
      options.route.url
      && router.url === options.route.url
      && !(options.reloadCurrent || options.reloadPrevious)
      && !router.params.allowDuplicateUrls
    ) {
      return false;
    }

    if (!options.route && url) {
      options.route = router.parseRouteUrl(url);
    }

    // Component Callbacks
    function resolve(pageEl, newOptions) {
      return router.backward(pageEl, Utils.extend(options, newOptions));
    }
    function reject() {
      router.allowPageChange = true;
      return router;
    }

    if (url || templateUrl || componentUrl || component) {
      router.allowPageChange = false;
    }

    // Proceed
    if (content) {
      router.backward(router.getPageEl(content), options);
    } else if (template || templateUrl) {
      // Parse template and send page element
      try {
        router.pageTemplateLoader(template, templateUrl, options, resolve, reject);
      } catch (err) {
        router.allowPageChange = true;
        throw err;
      }
    } else if (el) {
      // Load page from specified HTMLElement or by page name in pages container
      router.backward(router.getPageEl(el), options);
    } else if (pageName) {
      // Load page by page name in pages container
      router.backward(router.$el.children(`.page[data-name="${pageName}"]`).eq(0), options);
    } else if (component || componentUrl) {
      // Load from component (F7/Vue/React/...)
      try {
        router.pageComponentLoader(router.el, component, componentUrl, options, resolve, reject);
      } catch (err) {
        router.allowPageChange = true;
        throw err;
      }
    } else if (url) {
      // Load using XHR
      if (router.xhr) {
        router.xhr.abort();
        router.xhr = false;
      }
      router.xhrRequest(url, options)
        .then((pageContent) => {
          router.backward(router.getPageEl(pageContent), options);
        })
        .catch(() => {
          router.allowPageChange = true;
        });
    }
    return router;
  }
  function back(...args) {
    const router = this;
    if (router.swipeBackActive) return router;
    let navigateUrl;
    let navigateOptions;
    let route;
    if (typeof args[0] === 'object') {
      navigateOptions = args[0] || {};
    } else {
      navigateUrl = args[0];
      navigateOptions = args[1] || {};
    }

    const { name, params, query } = navigateOptions;
    if (name) {
      navigateUrl = router.generateUrl({ name, params, query });
      if (navigateUrl) {
        return router.back(navigateUrl, Utils.extend({}, navigateOptions, {
          name: null,
          params: null,
          query: null,
        }));
      }
      return router;
    }

    const app = router.app;
    appRouterCheck(router, 'back');

    let currentRouteIsModal = router.currentRoute.modal;
    let modalType;
    if (!currentRouteIsModal) {
      ('popup popover sheet loginScreen actions customModal panel').split(' ').forEach((modalLoadProp) => {
        if (router.currentRoute.route[modalLoadProp]) {
          currentRouteIsModal = true;
          modalType = modalLoadProp;
        }
      });
    }
    if (currentRouteIsModal) {
      const modalToClose = router.currentRoute.modal
                           || router.currentRoute.route.modalInstance
                           || app[modalType].get();
      const previousUrl = router.history[router.history.length - 2];
      let previousRoute;
      // check if previous route is modal too
      if (modalToClose && modalToClose.$el) {
        const prevOpenedModals = modalToClose.$el.prevAll('.modal-in');
        if (prevOpenedModals.length && prevOpenedModals[0].f7Modal) {
          const modalEl = prevOpenedModals[0];
          // check if current router not inside of the modalEl
          if (!router.$el.parents(modalEl).length) {
            previousRoute = modalEl.f7Modal.route;
          }
        }
      }
      if (!previousRoute) {
        previousRoute = router.findMatchingRoute(previousUrl);
      }

      if (!previousRoute && previousUrl) {
        previousRoute = {
          url: previousUrl,
          path: previousUrl.split('?')[0],
          query: Utils.parseUrlQuery(previousUrl),
          route: {
            path: previousUrl.split('?')[0],
            url: previousUrl,
          },
        };
      }
      if (!navigateUrl || navigateUrl.replace(/[# ]/g, '').trim().length === 0) {
        if (!previousRoute || !modalToClose) {
          return router;
        }
      }
      const forceOtherUrl = navigateOptions.force && previousRoute && navigateUrl;
      if (previousRoute && modalToClose) {
        const isBrokenPushState = Device.ie || Device.edge || (Device.firefox && !Device.ios);
        const needHistoryBack = router.params.pushState && navigateOptions.pushState !== false;
        const currentRouteWithoutPushState = router.currentRoute && router.currentRoute.route && router.currentRoute.route.options && router.currentRoute.route.options.pushState === false;
        if (needHistoryBack && !isBrokenPushState && !currentRouteWithoutPushState) {
          History.back();
        }
        router.currentRoute = previousRoute;
        router.history.pop();
        router.saveHistory();

        if (needHistoryBack && isBrokenPushState && !currentRouteWithoutPushState) {
          History.back();
        }

        router.modalRemove(modalToClose);
        if (forceOtherUrl) {
          router.navigate(navigateUrl, { reloadCurrent: true });
        }
      } else if (modalToClose) {
        router.modalRemove(modalToClose);
        if (navigateUrl) {
          router.navigate(navigateUrl, { reloadCurrent: true });
        }
      }
      return router;
    }
    let $previousPage = router.$el.children('.page-current').prevAll('.page-previous:not(.page-master)').eq(0);

    let skipMaster;
    if (router.params.masterDetailBreakpoint > 0) {
      const classes = [];
      router.$el.children('.page').each((index, pageEl) => {
        classes.push(pageEl.className);
      });

      const $previousMaster = router.$el.children('.page-current').prevAll('.page-master').eq(0);
      if ($previousMaster.length) {
        const expectedPreviousPageUrl = router.history[router.history.length - 2];
        const expectedPreviousPageRoute = router.findMatchingRoute(expectedPreviousPageUrl);
        if (expectedPreviousPageRoute && $previousMaster[0].f7Page && expectedPreviousPageRoute.route === $previousMaster[0].f7Page.route.route) {
          $previousPage = $previousMaster;
          if (!navigateOptions.preload) {
            skipMaster = app.width >= router.params.masterDetailBreakpoint;
          }
        }
      }
    }

    if (!navigateOptions.force && $previousPage.length && !skipMaster) {
      if (router.params.pushState
        && $previousPage[0].f7Page
        && router.history[router.history.length - 2] !== $previousPage[0].f7Page.route.url
      ) {
        router.back(
          router.history[router.history.length - 2],
          Utils.extend(navigateOptions, { force: true })
        );
        return router;
      }
      const previousPageRoute = $previousPage[0].f7Page.route;

      processRouteQueue.call(
        router,
        previousPageRoute,
        router.currentRoute,
        () => {
          router.loadBack({ el: $previousPage }, Utils.extend(navigateOptions, {
            route: previousPageRoute,
          }));
        },
        () => {}
      );

      return router;
    }

    // Navigate URL
    if (navigateUrl === '#') {
      navigateUrl = undefined;
    }
    if (navigateUrl && navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {
      navigateUrl = ((router.path || '/') + navigateUrl).replace('//', '/');
    }
    if (!navigateUrl && router.history.length > 1) {
      navigateUrl = router.history[router.history.length - 2];
    }
    if (skipMaster && !navigateOptions.force && router.history[router.history.length - 3]) {
      return router.back(router.history[router.history.length - 3], Utils.extend({}, navigateOptions || {}, {
        force: true,
        animate: false,
      }));
    }
    if (skipMaster && !navigateOptions.force) {
      return router;
    }

    // Find route to load
    route = router.findMatchingRoute(navigateUrl);
    if (!route) {
      if (navigateUrl) {
        route = {
          url: navigateUrl,
          path: navigateUrl.split('?')[0],
          query: Utils.parseUrlQuery(navigateUrl),
          route: {
            path: navigateUrl.split('?')[0],
            url: navigateUrl,
          },
        };
      }
    }
    if (!route) {
      return router;
    }

    if (route.route.redirect) {
      return redirect.call(router, 'back', route, navigateOptions);
    }

    const options = {};
    if (route.route.options) {
      Utils.extend(options, route.route.options, navigateOptions);
    } else {
      Utils.extend(options, navigateOptions);
    }
    options.route = route;

    if (options && options.context) {
      route.context = options.context;
      options.route.context = options.context;
    }

    let backForceLoaded;
    if (options.force && router.params.stackPages) {
      router.$el.children('.page-previous.stacked').each((index, pageEl) => {
        if (pageEl.f7Page && pageEl.f7Page.route && pageEl.f7Page.route.url === route.url) {
          backForceLoaded = true;
          router.loadBack({ el: pageEl }, options);
        }
      });
      if (backForceLoaded) {
        return router;
      }
    }
    function resolve() {
      let routerLoaded = false;
      if (route.route.keepAlive && route.route.keepAliveData) {
        router.loadBack({ el: route.route.keepAliveData.pageEl }, options);
        routerLoaded = true;
      }
      ('url content component pageName el componentUrl template templateUrl').split(' ').forEach((pageLoadProp) => {
        if (route.route[pageLoadProp] && !routerLoaded) {
          routerLoaded = true;
          router.loadBack({ [pageLoadProp]: route.route[pageLoadProp] }, options);
        }
      });
      if (routerLoaded) return;
      // Async
      function asyncResolve(resolveParams, resolveOptions) {
        router.allowPageChange = false;
        if (resolveOptions && resolveOptions.context) {
          if (!route.context) route.context = resolveOptions.context;
          else route.context = Utils.extend({}, route.context, resolveOptions.context);
          options.route.context = route.context;
        }
        router.loadBack(resolveParams, Utils.extend(options, resolveOptions), true);
      }
      function asyncReject() {
        router.allowPageChange = true;
      }
      if (route.route.async) {
        router.allowPageChange = false;
        route.route.async.call(router, route, router.currentRoute, asyncResolve, asyncReject);
      }
      if (route.route.asyncComponent) {
        asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);
      }
    }
    function reject() {
      router.allowPageChange = true;
    }

    if (options.preload) {
      resolve();
    } else {
      processRouteQueue.call(
        router,
        route,
        router.currentRoute,
        () => {
          if (route.route.modules) {
            app
              .loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules])
              .then(() => {
                resolve();
              })
              .catch(() => {
                reject();
              });
          } else {
            resolve();
          }
        },
        () => {
          reject();
        },
      );
    }

    // Return Router
    return router;
  }

  function clearPreviousPages(router) {
    appRouterCheck(router, 'clearPreviousPages');
    const app = router.app;
    const dynamicNavbar = router.dynamicNavbar;

    const $pagesToRemove = router.$el
      .children('.page')
      .filter((index, pageInView) => {
        if (router.currentRoute && (router.currentRoute.modal || router.currentRoute.panel)) return true;
        return pageInView !== router.currentPageEl;
      });

    $pagesToRemove.each((index, pageEl) => {
      const $oldPageEl = $(pageEl);
      const $oldNavbarEl = $(app.navbar.getElByPage($oldPageEl));
      if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {
        $oldPageEl.addClass('stacked');
        if (dynamicNavbar) {
          $oldNavbarEl.addClass('stacked');
        }
      } else {
        // Page remove event
        router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarEl, 'previous', undefined, {});
        router.removePage($oldPageEl);
        if (dynamicNavbar && $oldNavbarEl.length) {
          router.removeNavbar($oldNavbarEl);
        }
      }
    });
  }

  function clearPreviousHistory() {
    const router = this;
    appRouterCheck(router, 'clearPreviousHistory');
    const url = router.history[router.history.length - 1];

    clearPreviousPages(router);

    router.history = [url];
    router.view.history = [url];
    router.saveHistory();
  }

  class Router extends Framework7Class {
    constructor(app, view) {
      super({}, [typeof view === 'undefined' ? app : view]);
      const router = this;

      // Is App Router
      router.isAppRouter = typeof view === 'undefined';

      if (router.isAppRouter) {
        // App Router
        Utils.extend(false, router, {
          app,
          params: app.params.view,
          routes: app.routes || [],
          cache: app.cache,
        });
      } else {
        // View Router
        Utils.extend(false, router, {
          app,
          view,
          viewId: view.id,
          params: view.params,
          routes: view.routes,
          $el: view.$el,
          el: view.el,
          $navbarsEl: view.$navbarsEl,
          navbarsEl: view.navbarsEl,
          history: view.history,
          scrollHistory: view.scrollHistory,
          cache: app.cache,
          dynamicNavbar: app.theme === 'ios' && view.params.iosDynamicNavbar,
          initialPages: [],
          initialNavbars: [],
        });
      }

      // Install Modules
      router.useModules();

      // Temporary Dom
      router.tempDom = doc.createElement('div');

      // AllowPageChage
      router.allowPageChange = true;

      // Current Route
      let currentRoute = {};
      let previousRoute = {};
      Object.defineProperty(router, 'currentRoute', {
        enumerable: true,
        configurable: true,
        set(newRoute = {}) {
          previousRoute = Utils.extend({}, currentRoute);
          currentRoute = newRoute;
          if (!currentRoute) return;
          router.url = currentRoute.url;
          router.emit('routeChange', newRoute, previousRoute, router);
        },
        get() {
          return currentRoute;
        },
      });
      Object.defineProperty(router, 'previousRoute', {
        enumerable: true,
        configurable: true,
        get() {
          return previousRoute;
        },
        set(newRoute) {
          previousRoute = newRoute;
        },
      });

      return router;
    }

    animatableNavElements($newNavbarEl, $oldNavbarEl, toLarge, fromLarge, direction) {
      const router = this;
      const dynamicNavbar = router.dynamicNavbar;
      const animateIcon = router.params.iosAnimateNavbarBackIcon;

      let newNavEls;
      let oldNavEls;
      function animatableNavEl($el, $navbarInner) {
        const isSliding = $el.hasClass('sliding') || $navbarInner.hasClass('sliding');
        const isSubnavbar = $el.hasClass('subnavbar');
        const needsOpacityTransition = isSliding ? !isSubnavbar : true;
        const $iconEl = $el.find('.back .icon');
        let isIconLabel;
        if (isSliding && animateIcon && $el.hasClass('left') && $iconEl.length > 0 && $iconEl.next('span').length) {
          $el = $iconEl.next('span'); // eslint-disable-line
          isIconLabel = true;
        }
        return {
          $el,
          isIconLabel,
          leftOffset: $el[0].f7NavbarLeftOffset,
          rightOffset: $el[0].f7NavbarRightOffset,
          isSliding,
          isSubnavbar,
          needsOpacityTransition,
        };
      }
      if (dynamicNavbar) {
        newNavEls = [];
        oldNavEls = [];
        $newNavbarEl.children('.navbar-inner').children('.left, .right, .title, .subnavbar').each((index, navEl) => {
          const $navEl = $(navEl);
          if ($navEl.hasClass('left') && fromLarge && direction === 'forward') return;
          if ($navEl.hasClass('title') && toLarge) return;
          newNavEls.push(animatableNavEl($navEl, $newNavbarEl.children('.navbar-inner')));
        });
        if (!($oldNavbarEl.hasClass('navbar-master') && router.params.masterDetailBreakpoint > 0 && router.app.width >= router.params.masterDetailBreakpoint)) {
          $oldNavbarEl.children('.navbar-inner').children('.left, .right, .title, .subnavbar').each((index, navEl) => {
            const $navEl = $(navEl);
            if ($navEl.hasClass('left') && toLarge && !fromLarge && direction === 'forward') return;
            if ($navEl.hasClass('left') && toLarge && direction === 'backward') return;
            if ($navEl.hasClass('title') && fromLarge) {
              return;
            }
            oldNavEls.push(animatableNavEl($navEl, $oldNavbarEl.children('.navbar-inner')));
          });
        }
        [oldNavEls, newNavEls].forEach((navEls) => {
          navEls.forEach((navEl) => {
            const n = navEl;
            const { isSliding, $el } = navEl;
            const otherEls = navEls === oldNavEls ? newNavEls : oldNavEls;
            if (!(isSliding && $el.hasClass('title') && otherEls)) return;
            otherEls.forEach((otherNavEl) => {
              if (otherNavEl.isIconLabel) {
                const iconTextEl = otherNavEl.$el[0];
                n.leftOffset += iconTextEl ? (iconTextEl.offsetLeft || 0) : 0;
              }
            });
          });
        });
      }

      return { newNavEls, oldNavEls };
    }

    animate($oldPageEl, $newPageEl, $oldNavbarEl, $newNavbarEl, direction, transition, callback) {
      const router = this;
      if (router.params.animateCustom) {
        router.params.animateCustom.apply(router, [$oldPageEl, $newPageEl, $oldNavbarEl, $newNavbarEl, direction, callback]);
        return;
      }
      const dynamicNavbar = router.dynamicNavbar;
      const ios = router.app.theme === 'ios';
      if (transition) {
        const routerCustomTransitionClass = `router-transition-custom router-transition-${transition}-${direction}`;
        // Animate
        const onCustomTransitionDone = () => {
          router.$el.removeClass(routerCustomTransitionClass);
          if (dynamicNavbar && router.$navbarsEl.length) {
            if ($newNavbarEl) {
              router.$navbarsEl.prepend($newNavbarEl);
            }
            if ($oldNavbarEl) {
              router.$navbarsEl.prepend($oldNavbarEl);
            }
          }
          if (callback) callback();
        };

        (direction === 'forward' ? $newPageEl : $oldPageEl).animationEnd(onCustomTransitionDone);
        if (dynamicNavbar) {
          if ($newNavbarEl && $newPageEl) {
            router.setNavbarPosition($newNavbarEl, '');
            $newNavbarEl.removeClass('navbar-next navbar-previous navbar-current');
            $newPageEl.prepend($newNavbarEl);
          }
          if ($oldNavbarEl && $oldPageEl) {
            router.setNavbarPosition($oldNavbarEl, '');
            $oldNavbarEl.removeClass('navbar-next navbar-previous navbar-current');
            $oldPageEl.prepend($oldNavbarEl);
          }
        }

        router.$el.addClass(routerCustomTransitionClass);
        return;
      }


      // Router Animation class
      const routerTransitionClass = `router-transition-${direction} router-transition`;

      let newNavEls;
      let oldNavEls;

      let fromLarge;
      let toLarge;

      let oldIsLarge;
      let newIsLarge;

      if (ios && dynamicNavbar) {
        const betweenMasterAndDetail = router.params.masterDetailBreakpoint > 0 && router.app.width >= router.params.masterDetailBreakpoint
          && (
            ($oldNavbarEl.hasClass('navbar-master') && $newNavbarEl.hasClass('navbar-master-detail'))
            || ($oldNavbarEl.hasClass('navbar-master-detail') && $newNavbarEl.hasClass('navbar-master'))
          );
        if (!betweenMasterAndDetail) {
          oldIsLarge = $oldNavbarEl && $oldNavbarEl.hasClass('navbar-large');
          newIsLarge = $newNavbarEl && $newNavbarEl.hasClass('navbar-large');
          fromLarge = oldIsLarge && !$oldNavbarEl.hasClass('navbar-large-collapsed');
          toLarge = newIsLarge && !$newNavbarEl.hasClass('navbar-large-collapsed');
        }
        const navEls = router.animatableNavElements($newNavbarEl, $oldNavbarEl, toLarge, fromLarge, direction);
        newNavEls = navEls.newNavEls;
        oldNavEls = navEls.oldNavEls;
      }

      function animateNavbars(progress) {
        if (!(ios && dynamicNavbar)) return;
        if (progress === 1) {
          if (toLarge) {
            $newNavbarEl.addClass('router-navbar-transition-to-large');
            $oldNavbarEl.addClass('router-navbar-transition-to-large');
          }
          if (fromLarge) {
            $newNavbarEl.addClass('router-navbar-transition-from-large');
            $oldNavbarEl.addClass('router-navbar-transition-from-large');
          }
        }
        newNavEls.forEach((navEl) => {
          const $el = navEl.$el;
          const offset = direction === 'forward' ? navEl.rightOffset : navEl.leftOffset;
          if (navEl.isSliding) {
            if (navEl.isSubnavbar && newIsLarge) {
              $el[0].style.setProperty('transform', `translate3d(${offset * (1 - progress)}px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)`, 'important');
            } else {
              $el.transform(`translate3d(${offset * (1 - progress)}px,0,0)`);
            }
          }
        });
        oldNavEls.forEach((navEl) => {
          const $el = navEl.$el;
          const offset = direction === 'forward' ? navEl.leftOffset : navEl.rightOffset;
          if (navEl.isSliding) {
            if (navEl.isSubnavbar && oldIsLarge) {
              $el.transform(`translate3d(${offset * (progress)}px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)`);
            } else {
              $el.transform(`translate3d(${offset * (progress)}px,0,0)`);
            }
          }
        });
      }

      // AnimationEnd Callback
      function onDone() {
        if (router.dynamicNavbar) {
          if ($newNavbarEl) {
            $newNavbarEl.removeClass('router-navbar-transition-to-large router-navbar-transition-from-large');
            $newNavbarEl.addClass('navbar-no-title-large-transition');
            Utils.nextFrame(() => {
              $newNavbarEl.removeClass('navbar-no-title-large-transition');
            });
          }
          if ($oldNavbarEl) {
            $oldNavbarEl.removeClass('router-navbar-transition-to-large router-navbar-transition-from-large');
          }
          if ($newNavbarEl.hasClass('sliding') || $newNavbarEl.children('.navbar-inner.sliding').length) {
            $newNavbarEl.find('.title, .left, .right, .left .icon, .subnavbar').transform('');
          } else {
            $newNavbarEl.find('.sliding').transform('');
          }
          if ($oldNavbarEl.hasClass('sliding') || $oldNavbarEl.children('.navbar-inner.sliding').length) {
            $oldNavbarEl.find('.title, .left, .right, .left .icon, .subnavbar').transform('');
          } else {
            $oldNavbarEl.find('.sliding').transform('');
          }
        }
        router.$el.removeClass(routerTransitionClass);
        if (callback) callback();
      }

      (direction === 'forward' ? $newPageEl : $oldPageEl).animationEnd(() => {
        onDone();
      });

      // Animate
      if (dynamicNavbar) {
        // Prepare Navbars
        animateNavbars(0);
        Utils.nextFrame(() => {
          // Add class, start animation
          animateNavbars(1);
          router.$el.addClass(routerTransitionClass);
        });
      } else {
        // Add class, start animation
        router.$el.addClass(routerTransitionClass);
      }
    }

    removeModal(modalEl) {
      const router = this;
      router.removeEl(modalEl);
    }
    // eslint-disable-next-line
    removeTabContent(tabEl) {
      const $tabEl = $(tabEl);
      $tabEl.html('');
    }

    removeNavbar(el) {
      const router = this;
      router.removeEl(el);
    }

    removePage(el) {
      const $el = $(el);
      const f7Page = $el && $el[0] && $el[0].f7Page;
      const router = this;
      if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {
        $el.remove();
        return;
      }
      router.removeEl(el);
    }

    removeEl(el) {
      if (!el) return;
      const router = this;
      const $el = $(el);
      if ($el.length === 0) return;
      $el.find('.tab').each((tabIndex, tabEl) => {
        $(tabEl).children().each((index, tabChild) => {
          if (tabChild.f7Component) {
            $(tabChild).trigger('tab:beforeremove');
            tabChild.f7Component.$destroy();
          }
        });
      });
      if ($el[0].f7Component && $el[0].f7Component.$destroy) {
        $el[0].f7Component.$destroy();
      }
      if (!router.params.removeElements) {
        return;
      }
      if (router.params.removeElementsWithTimeout) {
        setTimeout(() => {
          $el.remove();
        }, router.params.removeElementsTimeout);
      } else {
        $el.remove();
      }
    }

    getPageEl(content) {
      const router = this;
      if (typeof content === 'string') {
        router.tempDom.innerHTML = content;
      } else {
        if ($(content).hasClass('page')) {
          return content;
        }
        router.tempDom.innerHTML = '';
        $(router.tempDom).append(content);
      }

      return router.findElement('.page', router.tempDom);
    }

    findElement(stringSelector, container, notStacked) {
      const router = this;
      const view = router.view;
      const app = router.app;

      // Modals Selector
      const modalsSelector = '.popup, .dialog, .popover, .actions-modal, .sheet-modal, .login-screen, .page';

      const $container = $(container);
      let selector = stringSelector;
      if (notStacked) selector += ':not(.stacked)';

      let found = $container
        .find(selector)
        .filter((index, el) => $(el).parents(modalsSelector).length === 0);

      if (found.length > 1) {
        if (typeof view.selector === 'string') {
          // Search in related view
          found = $container.find(`${view.selector} ${selector}`);
        }
        if (found.length > 1) {
          // Search in main view
          found = $container.find(`.${app.params.viewMainClass} ${selector}`);
        }
      }
      if (found.length === 1) return found;

      // Try to find not stacked
      if (!notStacked) found = router.findElement(selector, $container, true);
      if (found && found.length === 1) return found;
      if (found && found.length > 1) return $(found[0]);
      return undefined;
    }

    flattenRoutes(routes = this.routes) {
      const router = this;
      let flattenedRoutes = [];
      routes.forEach((route) => {
        let hasTabRoutes = false;
        if ('tabs' in route && route.tabs) {
          const mergedPathsRoutes = route.tabs.map((tabRoute) => {
            const tRoute = Utils.extend({}, route, {
              path: (`${route.path}/${tabRoute.path}`).replace('///', '/').replace('//', '/'),
              parentPath: route.path,
              tab: tabRoute,
            });
            delete tRoute.tabs;
            delete tRoute.routes;
            return tRoute;
          });
          hasTabRoutes = true;
          flattenedRoutes = flattenedRoutes.concat(router.flattenRoutes(mergedPathsRoutes));
        }
        if ('detailRoutes' in route) {
          const mergedPathsRoutes = route.detailRoutes.map((detailRoute) => {
            const dRoute = Utils.extend({}, detailRoute);
            dRoute.masterRoute = route;
            dRoute.masterRoutePath = route.path;
            return dRoute;
          });
          flattenedRoutes = flattenedRoutes.concat(route, router.flattenRoutes(mergedPathsRoutes));
        }
        if ('routes' in route) {
          const mergedPathsRoutes = route.routes.map((childRoute) => {
            const cRoute = Utils.extend({}, childRoute);
            cRoute.path = (`${route.path}/${cRoute.path}`).replace('///', '/').replace('//', '/');
            return cRoute;
          });
          if (hasTabRoutes) {
            flattenedRoutes = flattenedRoutes.concat(router.flattenRoutes(mergedPathsRoutes));
          } else {
            flattenedRoutes = flattenedRoutes.concat(route, router.flattenRoutes(mergedPathsRoutes));
          }
        }
        if (!('routes' in route) && !('tabs' in route && route.tabs) && !('detailRoutes' in route)) {
          flattenedRoutes.push(route);
        }
      });
      return flattenedRoutes;
    }

    // eslint-disable-next-line
    parseRouteUrl(url) {
      if (!url) return {};
      const query = Utils.parseUrlQuery(url);
      const hash = url.split('#')[1];
      const params = {};
      const path = url.split('#')[0].split('?')[0];
      return {
        query,
        hash,
        params,
        url,
        path,
      };
    }

    generateUrl(parameters = {}) {
      if (typeof parameters === 'string') {
        return parameters;
      }
      const { name, path, params, query } = parameters;
      if (!name && !path) {
        throw new Error('Framework7: "name" or "path" parameter is required');
      }
      const router = this;
      const route = name
        ? router.findRouteByKey('name', name)
        : router.findRouteByKey('path', path);

      if (!route) {
        if (name) {
          throw new Error(`Framework7: route with name "${name}" not found`);
        } else {
          throw new Error(`Framework7: route with path "${path}" not found`);
        }
      }
      const url = router.constructRouteUrl(route, { params, query });
      if (!url) {
        throw new Error(`Framework7: can't construct URL for route with name "${name}"`);
      }
      return url;
    }

    // eslint-disable-next-line
    constructRouteUrl(route, { params, query } = {}) {
      const { path } = route;
      const toUrl = compile(path);
      let url;
      try {
        url = toUrl(params || {});
      } catch (error) {
        throw new Error(`Framework7: error constructing route URL from passed params:\nRoute: ${path}\n${error.toString()}`);
      }

      if (query) {
        if (typeof query === 'string') url += `?${query}`;
        else url += `?${Utils.serializeObject(query)}`;
      }

      return url;
    }

    findTabRoute(tabEl) {
      const router = this;
      const $tabEl = $(tabEl);
      const parentPath = router.currentRoute.route.parentPath;
      const tabId = $tabEl.attr('id');
      const flattenedRoutes = router.flattenRoutes(router.routes);
      let foundTabRoute;
      flattenedRoutes.forEach((route) => {
        if (
          route.parentPath === parentPath
          && route.tab
          && route.tab.id === tabId
        ) {
          foundTabRoute = route;
        }
      });
      return foundTabRoute;
    }

    findRouteByKey(key, value) {
      const router = this;
      const routes = router.routes;
      const flattenedRoutes = router.flattenRoutes(routes);
      let matchingRoute;

      flattenedRoutes.forEach((route) => {
        if (matchingRoute) return;
        if (route[key] === value) {
          matchingRoute = route;
        }
      });
      return matchingRoute;
    }

    findMatchingRoute(url) {
      if (!url) return undefined;
      const router = this;
      const routes = router.routes;
      const flattenedRoutes = router.flattenRoutes(routes);
      const { path, query, hash, params } = router.parseRouteUrl(url);
      let matchingRoute;
      flattenedRoutes.forEach((route) => {
        if (matchingRoute) return;
        const keys = [];

        const pathsToMatch = [route.path];
        if (route.alias) {
          if (typeof route.alias === 'string') pathsToMatch.push(route.alias);
          else if (Array.isArray(route.alias)) {
            route.alias.forEach((aliasPath) => {
              pathsToMatch.push(aliasPath);
            });
          }
        }

        let matched;
        pathsToMatch.forEach((pathToMatch) => {
          if (matched) return;
          matched = pathToRegexp(pathToMatch, keys).exec(path);
        });

        if (matched) {
          keys.forEach((keyObj, index) => {
            if (typeof keyObj.name === 'number') return;
            const paramValue = matched[index + 1];
            if (typeof paramValue === 'undefined' || paramValue === null) {
              params[keyObj.name] = paramValue;
            } else {
              params[keyObj.name] = decodeURIComponent(paramValue);
            }
          });

          let parentPath;
          if (route.parentPath) {
            parentPath = path.split('/').slice(0, route.parentPath.split('/').length - 1).join('/');
          }

          matchingRoute = {
            query,
            hash,
            params,
            url,
            path,
            parentPath,
            route,
            name: route.name,
          };
        }
      });
      return matchingRoute;
    }

    // eslint-disable-next-line
    replaceRequestUrlParams(url = '', options = {}) {
      let compiledUrl = url;
      if (typeof compiledUrl === 'string'
        && compiledUrl.indexOf('{{') >= 0
        && options
        && options.route
        && options.route.params
        && Object.keys(options.route.params).length
      ) {
        Object.keys(options.route.params).forEach((paramName) => {
          const regExp = new RegExp(`{{${paramName}}}`, 'g');
          compiledUrl = compiledUrl.replace(regExp, options.route.params[paramName] || '');
        });
      }
      return compiledUrl;
    }

    removeFromXhrCache(url) {
      const router = this;
      const xhrCache = router.cache.xhr;
      let index = false;
      for (let i = 0; i < xhrCache.length; i += 1) {
        if (xhrCache[i].url === url) index = i;
      }
      if (index !== false) xhrCache.splice(index, 1);
    }

    xhrRequest(requestUrl, options) {
      const router = this;
      const params = router.params;
      const { ignoreCache } = options;
      let url = requestUrl;

      let hasQuery = url.indexOf('?') >= 0;
      if (params.passRouteQueryToRequest
        && options
        && options.route
        && options.route.query
        && Object.keys(options.route.query).length
      ) {
        url += `${hasQuery ? '&' : '?'}${Utils.serializeObject(options.route.query)}`;
        hasQuery = true;
      }

      if (params.passRouteParamsToRequest
        && options
        && options.route
        && options.route.params
        && Object.keys(options.route.params).length
      ) {
        url += `${hasQuery ? '&' : '?'}${Utils.serializeObject(options.route.params)}`;
        hasQuery = true;
      }

      if (url.indexOf('{{') >= 0) {
        url = router.replaceRequestUrlParams(url, options);
      }
      // should we ignore get params or not
      if (params.xhrCacheIgnoreGetParameters && url.indexOf('?') >= 0) {
        url = url.split('?')[0];
      }
      return new Promise((resolve, reject) => {
        if (params.xhrCache && !ignoreCache && url.indexOf('nocache') < 0 && params.xhrCacheIgnore.indexOf(url) < 0) {
          for (let i = 0; i < router.cache.xhr.length; i += 1) {
            const cachedUrl = router.cache.xhr[i];
            if (cachedUrl.url === url) {
              // Check expiration
              if (Utils.now() - cachedUrl.time < params.xhrCacheDuration) {
                // Load from cache
                resolve(cachedUrl.content);
                return;
              }
            }
          }
        }
        router.xhr = router.app.request({
          url,
          method: 'GET',
          beforeSend(xhr) {
            router.emit('routerAjaxStart', xhr, options);
          },
          complete(xhr, status) {
            router.emit('routerAjaxComplete', xhr);
            if ((status !== 'error' && status !== 'timeout' && (xhr.status >= 200 && xhr.status < 300)) || xhr.status === 0) {
              if (params.xhrCache && xhr.responseText !== '') {
                router.removeFromXhrCache(url);
                router.cache.xhr.push({
                  url,
                  time: Utils.now(),
                  content: xhr.responseText,
                });
              }
              router.emit('routerAjaxSuccess', xhr, options);
              resolve(xhr.responseText);
            } else {
              router.emit('routerAjaxError', xhr, options);
              reject(xhr);
            }
          },
          error(xhr) {
            router.emit('routerAjaxError', xhr, options);
            reject(xhr);
          },
        });
      });
    }

    setNavbarPosition($el, position, ariaHidden) {
      const router = this;
      $el.removeClass('navbar-previous navbar-current navbar-next');
      if (position) {
        $el.addClass(`navbar-${position}`);
      }

      if (ariaHidden === false) {
        $el.removeAttr('aria-hidden');
      } else if (ariaHidden === true) {
        $el.attr('aria-hidden', 'true');
      }
      $el.trigger('navbar:position', { position });
      router.emit('navbarPosition', $el[0], position);
    }

    setPagePosition($el, position, ariaHidden) {
      const router = this;
      $el.removeClass('page-previous page-current page-next');
      $el.addClass(`page-${position}`);
      if (ariaHidden === false) {
        $el.removeAttr('aria-hidden');
      } else if (ariaHidden === true) {
        $el.attr('aria-hidden', 'true');
      }
      $el.trigger('page:position', { position });
      router.emit('pagePosition', $el[0], position);
    }

    // Remove theme elements
    removeThemeElements(el) {
      const router = this;
      const theme = router.app.theme;
      let toRemove;
      if (theme === 'ios') {
        toRemove = '.md-only, .aurora-only, .if-md, .if-aurora, .if-not-ios, .not-ios';
      } else if (theme === 'md') {
        toRemove = '.ios-only, .aurora-only, .if-ios, .if-aurora, .if-not-md, .not-md';
      } else if (theme === 'aurora') {
        toRemove = '.ios-only, .md-only, .if-ios, .if-md, .if-not-aurora, .not-aurora';
      }
      $(el).find(toRemove).remove();
    }

    getPageData(pageEl, navbarEl, from, to, route = {}, pageFromEl) {
      const router = this;
      const $pageEl = $(pageEl).eq(0);
      const $navbarEl = $(navbarEl).eq(0);
      const currentPage = $pageEl[0].f7Page || {};
      let direction;
      let pageFrom;
      if ((from === 'next' && to === 'current') || (from === 'current' && to === 'previous')) direction = 'forward';
      if ((from === 'current' && to === 'next') || (from === 'previous' && to === 'current')) direction = 'backward';
      if (currentPage && !currentPage.fromPage) {
        const $pageFromEl = $(pageFromEl);
        if ($pageFromEl.length) {
          pageFrom = $pageFromEl[0].f7Page;
        }
      }
      pageFrom = currentPage.pageFrom || pageFrom;
      if (pageFrom && pageFrom.pageFrom) {
        pageFrom.pageFrom = null;
      }
      const page = {
        app: router.app,
        view: router.view,
        router,
        $el: $pageEl,
        el: $pageEl[0],
        $pageEl,
        pageEl: $pageEl[0],
        $navbarEl,
        navbarEl: $navbarEl[0],
        name: $pageEl.attr('data-name'),
        position: from,
        from,
        to,
        direction,
        route: currentPage.route ? currentPage.route : route,
        pageFrom,
      };

      $pageEl[0].f7Page = page;
      return page;
    }

    // Callbacks
    pageCallback(callback, pageEl, navbarEl, from, to, options = {}, pageFromEl) {
      if (!pageEl) return;
      const router = this;
      const $pageEl = $(pageEl);
      if (!$pageEl.length) return;
      const $navbarEl = $(navbarEl);
      const { route } = options;
      const restoreScrollTopOnBack = router.params.restoreScrollTopOnBack
        && !(
          router.params.masterDetailBreakpoint > 0
          && $pageEl.hasClass('page-master')
          && router.app.width >= router.params.masterDetailBreakpoint
        );
      const keepAlive = $pageEl[0].f7Page && $pageEl[0].f7Page.route && $pageEl[0].f7Page.route.route && $pageEl[0].f7Page.route.route.keepAlive;

      if (callback === 'beforeRemove' && keepAlive) {
        callback = 'beforeUnmount'; // eslint-disable-line
      }

      const camelName = `page${callback[0].toUpperCase() + callback.slice(1, callback.length)}`;
      const colonName = `page:${callback.toLowerCase()}`;

      let page = {};
      if (callback === 'beforeRemove' && $pageEl[0].f7Page) {
        page = Utils.extend($pageEl[0].f7Page, { from, to, position: from });
      } else {
        page = router.getPageData($pageEl[0], $navbarEl[0], from, to, route, pageFromEl);
      }
      page.swipeBack = !!options.swipeBack;

      const { on = {}, once = {} } = options.route ? options.route.route : {};
      if (options.on) {
        Utils.extend(on, options.on);
      }
      if (options.once) {
        Utils.extend(once, options.once);
      }

      function attachEvents() {
        if ($pageEl[0].f7RouteEventsAttached) return;
        $pageEl[0].f7RouteEventsAttached = true;
        if (on && Object.keys(on).length > 0) {
          $pageEl[0].f7RouteEventsOn = on;
          Object.keys(on).forEach((eventName) => {
            on[eventName] = on[eventName].bind(router);
            $pageEl.on(Utils.eventNameToColonCase(eventName), on[eventName]);
          });
        }
        if (once && Object.keys(once).length > 0) {
          $pageEl[0].f7RouteEventsOnce = once;
          Object.keys(once).forEach((eventName) => {
            once[eventName] = once[eventName].bind(router);
            $pageEl.once(Utils.eventNameToColonCase(eventName), once[eventName]);
          });
        }
      }

      function detachEvents() {
        if (!$pageEl[0].f7RouteEventsAttached) return;
        if ($pageEl[0].f7RouteEventsOn) {
          Object.keys($pageEl[0].f7RouteEventsOn).forEach((eventName) => {
            $pageEl.off(Utils.eventNameToColonCase(eventName), $pageEl[0].f7RouteEventsOn[eventName]);
          });
        }
        if ($pageEl[0].f7RouteEventsOnce) {
          Object.keys($pageEl[0].f7RouteEventsOnce).forEach((eventName) => {
            $pageEl.off(Utils.eventNameToColonCase(eventName), $pageEl[0].f7RouteEventsOnce[eventName]);
          });
        }
        $pageEl[0].f7RouteEventsAttached = null;
        $pageEl[0].f7RouteEventsOn = null;
        $pageEl[0].f7RouteEventsOnce = null;
        delete $pageEl[0].f7RouteEventsAttached;
        delete $pageEl[0].f7RouteEventsOn;
        delete $pageEl[0].f7RouteEventsOnce;
      }

      if (callback === 'mounted') {
        attachEvents();
      }
      if (callback === 'init') {
        if (restoreScrollTopOnBack && (from === 'previous' || !from) && to === 'current' && router.scrollHistory[page.route.url] && !$pageEl.hasClass('no-restore-scroll')) {
          let $pageContent = $pageEl.find('.page-content');
          if ($pageContent.length > 0) {
            // eslint-disable-next-line
            $pageContent = $pageContent.filter((pageContentIndex, pageContentEl) => {
              return (
                $(pageContentEl).parents('.tab:not(.tab-active)').length === 0
                && !$(pageContentEl).is('.tab:not(.tab-active)')
              );
            });
          }
          $pageContent.scrollTop(router.scrollHistory[page.route.url]);
        }
        attachEvents();
        if ($pageEl[0].f7PageInitialized) {
          $pageEl.trigger('page:reinit', page);
          router.emit('pageReinit', page);
          return;
        }
        $pageEl[0].f7PageInitialized = true;
      }
      if (restoreScrollTopOnBack && callback === 'beforeOut' && from === 'current' && to === 'previous') {
        // Save scroll position
        let $pageContent = $pageEl.find('.page-content');
        if ($pageContent.length > 0) {
          // eslint-disable-next-line
          $pageContent = $pageContent.filter((pageContentIndex, pageContentEl) => {
            return (
              $(pageContentEl).parents('.tab:not(.tab-active)').length === 0
              && !$(pageContentEl).is('.tab:not(.tab-active)')
            );
          });
        }
        router.scrollHistory[page.route.url] = $pageContent.scrollTop();
      }
      if (restoreScrollTopOnBack && callback === 'beforeOut' && from === 'current' && to === 'next') {
        // Delete scroll position
        delete router.scrollHistory[page.route.url];
      }

      $pageEl.trigger(colonName, page);
      router.emit(camelName, page);

      if (callback === 'beforeRemove' || callback === 'beforeUnmount') {
        detachEvents();
        if (!keepAlive) {
          if ($pageEl[0].f7Page && $pageEl[0].f7Page.navbarEl) {
            delete $pageEl[0].f7Page.navbarEl.f7Page;
          }
          $pageEl[0].f7Page = null;
        }
      }
    }

    saveHistory() {
      const router = this;
      router.view.history = router.history;
      if (router.params.pushState) {
        win.localStorage[`f7router-${router.view.id}-history`] = JSON.stringify(router.history);
      }
    }

    restoreHistory() {
      const router = this;
      if (router.params.pushState && win.localStorage[`f7router-${router.view.id}-history`]) {
        router.history = JSON.parse(win.localStorage[`f7router-${router.view.id}-history`]);
        router.view.history = router.history;
      }
    }

    clearHistory() {
      const router = this;
      router.history = [];
      if (router.view) router.view.history = [];
      router.saveHistory();
    }

    updateCurrentUrl(newUrl) {
      const router = this;
      appRouterCheck(router, 'updateCurrentUrl');
      // Update history
      if (router.history.length) {
        router.history[router.history.length - 1] = newUrl;
      } else {
        router.history.push(newUrl);
      }

      // Update current route params
      const { query, hash, params, url, path } = router.parseRouteUrl(newUrl);
      if (router.currentRoute) {
        Utils.extend(router.currentRoute, {
          query,
          hash,
          params,
          url,
          path,
        });
      }

      if (router.params.pushState) {
        const pushStateRoot = router.params.pushStateRoot || '';
        History.replace(
          router.view.id,
          {
            url: newUrl,
          },
          pushStateRoot + router.params.pushStateSeparator + newUrl
        );
      }

      // Save History
      router.saveHistory();

      router.emit('routeUrlUpdate', router.currentRoute, router);
    }

    init() {
      const router = this;
      const { app, view } = router;

      // Init Swipeback
      if (
        (view && router.params.iosSwipeBack && app.theme === 'ios')
        || (view && router.params.mdSwipeBack && app.theme === 'md')
        || (view && router.params.auroraSwipeBack && app.theme === 'aurora')
      ) {
        SwipeBack(router);
      }

      let initUrl = router.params.url;
      let documentUrl = doc.location.href.split(doc.location.origin)[1];
      let historyRestored;
      const { pushState, pushStateOnLoad, pushStateSeparator, pushStateAnimateOnLoad } = router.params;
      let { pushStateRoot } = router.params;
      if (win.cordova && pushState && !pushStateSeparator && !pushStateRoot && doc.location.pathname.indexOf('index.html')) {
        // eslint-disable-next-line
        console.warn('Framework7: wrong or not complete pushState configuration, trying to guess pushStateRoot');
        pushStateRoot = doc.location.pathname.split('index.html')[0];
      }
      if (!pushState || !pushStateOnLoad) {
        if (!initUrl) {
          initUrl = documentUrl;
        }
        if (doc.location.search && initUrl.indexOf('?') < 0) {
          initUrl += doc.location.search;
        }
        if (doc.location.hash && initUrl.indexOf('#') < 0) {
          initUrl += doc.location.hash;
        }
      } else {
        if (pushStateRoot && documentUrl.indexOf(pushStateRoot) >= 0) {
          documentUrl = documentUrl.split(pushStateRoot)[1];
          if (documentUrl === '') documentUrl = '/';
        }
        if (pushStateSeparator.length > 0 && documentUrl.indexOf(pushStateSeparator) >= 0) {
          initUrl = documentUrl.split(pushStateSeparator)[1];
        } else {
          initUrl = documentUrl;
        }
        router.restoreHistory();
        if (router.history.indexOf(initUrl) >= 0) {
          router.history = router.history.slice(0, router.history.indexOf(initUrl) + 1);
        } else if (router.params.url === initUrl) {
          router.history = [initUrl];
        } else if (History.state && History.state[view.id] && History.state[view.id].url === router.history[router.history.length - 1]) {
          initUrl = router.history[router.history.length - 1];
        } else {
          router.history = [documentUrl.split(pushStateSeparator)[0] || '/', initUrl];
        }
        if (router.history.length > 1) {
          historyRestored = true;
        } else {
          router.history = [];
        }
        router.saveHistory();
      }
      let currentRoute;
      if (router.history.length > 1) {
        // Will load page
        currentRoute = router.findMatchingRoute(router.history[0]);
        if (!currentRoute) {
          currentRoute = Utils.extend(router.parseRouteUrl(router.history[0]), {
            route: {
              url: router.history[0],
              path: router.history[0].split('?')[0],
            },
          });
        }
      } else {
        // Don't load page
        currentRoute = router.findMatchingRoute(initUrl);
        if (!currentRoute) {
          currentRoute = Utils.extend(router.parseRouteUrl(initUrl), {
            route: {
              url: initUrl,
              path: initUrl.split('?')[0],
            },
          });
        }
      }

      if (router.params.stackPages) {
        router.$el.children('.page').each((index, pageEl) => {
          const $pageEl = $(pageEl);
          router.initialPages.push($pageEl[0]);
          if (router.dynamicNavbar && $pageEl.children('.navbar').length > 0) {
            router.initialNavbars.push($pageEl.children('.navbar')[0]);
          }
        });
      }

      if (router.$el.children('.page:not(.stacked)').length === 0 && initUrl && router.params.loadInitialPage) {
        // No pages presented in DOM, reload new page
        router.navigate(initUrl, {
          initial: true,
          reloadCurrent: true,
          pushState: false,
        });
      } else if (router.$el.children('.page:not(.stacked)').length) {
        // Init current DOM page
        let hasTabRoute;
        router.currentRoute = currentRoute;
        router.$el.children('.page:not(.stacked)').each((index, pageEl) => {
          const $pageEl = $(pageEl);
          let $navbarEl;
          router.setPagePosition($pageEl, 'current');
          if (router.dynamicNavbar) {
            $navbarEl = $pageEl.children('.navbar');
            if ($navbarEl.length > 0) {
              if (!router.$navbarsEl.parents(doc).length) {
                router.$el.prepend(router.$navbarsEl);
              }
              router.setNavbarPosition($navbarEl, 'current');
              router.$navbarsEl.append($navbarEl);
              if ($navbarEl.children('.title-large').length) {
                $navbarEl.addClass('navbar-large');
              }
              $pageEl.children('.navbar').remove();
            } else {
              router.$navbarsEl.addClass('navbar-hidden');
              if ($navbarEl.children('.title-large').length) {
                router.$navbarsEl.addClass('navbar-hidden navbar-large-hidden');
              }
            }
          }
          if (router.currentRoute && router.currentRoute.route && router.currentRoute.route.master && router.params.masterDetailBreakpoint > 0) {
            $pageEl.addClass('page-master');
            $pageEl.trigger('page:role', { role: 'master' });
            if ($navbarEl && $navbarEl.length) {
              $navbarEl.addClass('navbar-master');
            }
            view.checkMasterDetailBreakpoint();
          }
          const initOptions = {
            route: router.currentRoute,
          };
          if (router.currentRoute && router.currentRoute.route && router.currentRoute.route.options) {
            Utils.extend(initOptions, router.currentRoute.route.options);
          }
          router.currentPageEl = $pageEl[0];
          if (router.dynamicNavbar && $navbarEl.length) {
            router.currentNavbarEl = $navbarEl[0];
          }
          router.removeThemeElements($pageEl);
          if (router.dynamicNavbar && $navbarEl.length) {
            router.removeThemeElements($navbarEl);
          }
          if (initOptions.route.route.tab) {
            hasTabRoute = true;
            router.tabLoad(initOptions.route.route.tab, Utils.extend({}, initOptions));
          }
          router.pageCallback('init', $pageEl, $navbarEl, 'current', undefined, initOptions);
        });
        if (historyRestored) {
          router.navigate(initUrl, {
            initial: true,
            pushState: false,
            history: false,
            animate: pushStateAnimateOnLoad,
            once: {
              pageAfterIn() {
                const preloadPreviousPage = router.params.preloadPreviousPage || router.params[`${app.theme}SwipeBack`];
                if (preloadPreviousPage && router.history.length > 2) {
                  router.back({ preload: true });
                }
              },
            },
          });
        }
        if (!historyRestored && !hasTabRoute) {
          router.history.push(initUrl);
          router.saveHistory();
        }
      }
      if (initUrl && pushState && pushStateOnLoad && (!History.state || !History.state[view.id])) {
        History.initViewState(view.id, {
          url: initUrl,
        });
      }
      router.emit('local::init routerInit', router);
    }

    destroy() {
      let router = this;

      router.emit('local::destroy routerDestroy', router);

      // Delete props & methods
      Object.keys(router).forEach((routerProp) => {
        router[routerProp] = null;
        delete router[routerProp];
      });

      router = null;
    }
  }

  // Load
  Router.prototype.forward = forward;
  Router.prototype.load = load;
  Router.prototype.navigate = navigate;
  Router.prototype.refreshPage = refreshPage;
  // Tab
  Router.prototype.tabLoad = tabLoad;
  Router.prototype.tabRemove = tabRemove;
  // Modal
  Router.prototype.modalLoad = modalLoad;
  Router.prototype.modalRemove = modalRemove;
  // Back
  Router.prototype.backward = backward;
  Router.prototype.loadBack = loadBack;
  Router.prototype.back = back;
  // Clear history
  Router.prototype.clearPreviousHistory = clearPreviousHistory;

  var RouterModule = {
    name: 'router',
    static: {
      Router,
    },
    instance: {
      cache: {
        xhr: [],
        templates: [],
        components: [],
      },
    },
    create() {
      const instance = this;
      if (instance.app) {
        // View Router
        if (instance.params.router) {
          instance.router = new Router(instance.app, instance);
        }
      } else {
        // App Router
        instance.router = new Router(instance);
      }
    },
  };

  function resizableView(view) {
    const app = view.app;
    if (view.resizableInitialized) return;
    Utils.extend(view, {
      resizable: true,
      resizableWidth: null,
      resizableInitialized: true,
    });
    const $htmlEl = $('html');
    const { $el } = view;
    if (!$el) return;

    let $resizeHandlerEl;

    let isTouched;
    let isMoved;
    const touchesStart = {};
    let touchesDiff;
    let width;

    let minWidth;
    let maxWidth;

    function transformCSSWidth(v) {
      if (!v) return null;
      if (v.indexOf('%') >= 0 || v.indexOf('vw') >= 0) {
        return parseInt(v, 10) / 100 * app.width;
      }
      const newV = parseInt(v, 10);
      if (Number.isNaN(newV)) return null;
      return newV;
    }

    function isResizable() {
      return view.resizable && $el.hasClass('view-resizable') && $el.hasClass('view-master-detail');
    }

    function handleTouchStart(e) {
      if (!isResizable()) return;
      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
      isMoved = false;
      isTouched = true;
      const $pageMasterEl = $el.children('.page-master');
      minWidth = transformCSSWidth($pageMasterEl.css('min-width'));
      maxWidth = transformCSSWidth($pageMasterEl.css('max-width'));
    }
    function handleTouchMove(e) {
      if (!isTouched) return;
      e.f7PreventSwipePanel = true;
      const pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;

      if (!isMoved) {
        width = $resizeHandlerEl[0].offsetLeft + $resizeHandlerEl[0].offsetWidth;
        $el.addClass('view-resizing');
        $htmlEl.css('cursor', 'col-resize');
      }

      isMoved = true;

      e.preventDefault();

      touchesDiff = (pageX - touchesStart.x);

      let newWidth = width + touchesDiff;
      if (minWidth && !Number.isNaN(minWidth)) {
        newWidth = Math.max(newWidth, minWidth);
      }
      if (maxWidth && !Number.isNaN(maxWidth)) {
        newWidth = Math.min(newWidth, maxWidth);
      }
      newWidth = Math.min(Math.max(newWidth, 0), app.width);

      view.resizableWidth = newWidth;
      $htmlEl[0].style.setProperty('--f7-page-master-width', `${newWidth}px`);

      $el.trigger('view:resize', newWidth);
      view.emit('local::resize viewResize', view, newWidth);
    }
    function handleTouchEnd() {
      $('html').css('cursor', '');
      if (!isTouched || !isMoved) {
        isTouched = false;
        isMoved = false;
        return;
      }
      isTouched = false;
      isMoved = false;

      $htmlEl[0].style.setProperty('--f7-page-master-width', `${view.resizableWidth}px`);
      $el.removeClass('view-resizing');
    }

    function handleResize() {
      if (!view.resizableWidth) return;
      minWidth = transformCSSWidth($resizeHandlerEl.css('min-width'));
      maxWidth = transformCSSWidth($resizeHandlerEl.css('max-width'));

      if (minWidth && !Number.isNaN(minWidth) && view.resizableWidth < minWidth) {
        view.resizableWidth = Math.max(view.resizableWidth, minWidth);
      }
      if (maxWidth && !Number.isNaN(maxWidth) && view.resizableWidth > maxWidth) {
        view.resizableWidth = Math.min(view.resizableWidth, maxWidth);
      }
      view.resizableWidth = Math.min(Math.max(view.resizableWidth, 0), app.width);

      $htmlEl[0].style.setProperty('--f7-page-master-width', `${view.resizableWidth}px`);
    }

    $resizeHandlerEl = view.$el.children('.view-resize-handler');
    if (!$resizeHandlerEl.length) {
      view.$el.append('<div class="view-resize-handler"></div>');
      $resizeHandlerEl = view.$el.children('.view-resize-handler');
    }
    view.$resizeHandlerEl = $resizeHandlerEl;

    $el.addClass('view-resizable');

    // Add Events
    const passive = Support.passiveListener ? { passive: true } : false;

    view.$el.on(app.touchEvents.start, '.view-resize-handler', handleTouchStart, passive);
    app.on('touchmove:active', handleTouchMove);
    app.on('touchend:passive', handleTouchEnd);
    app.on('resize', handleResize);
    view.on('beforeOpen', handleResize);

    view.once('viewDestroy', () => {
      $el.removeClass('view-resizable');
      view.$resizeHandlerEl.remove();
      view.$el.off(app.touchEvents.start, '.view-resize-handler', handleTouchStart, passive);
      app.off('touchmove:active', handleTouchMove);
      app.off('touchend:passive', handleTouchEnd);
      app.off('resize', handleResize);
      view.off('beforeOpen', handleResize);
    });
  }

  class View extends Framework7Class {
    constructor(appInstance, el, viewParams = {}) {
      super(viewParams, [appInstance]);

      const app = appInstance;
      const $el = $(el);
      const view = this;

      const defaults = {
        routes: [],
        routesAdd: [],
      };

      if ($el.length === 0) {
        let message = 'Framework7: can\'t create a View instance because ';
        message += (typeof el === 'string')
          ? `the selector "${el}" didn't match any element`
          : 'el must be an HTMLElement or Dom7 object';

        throw new Error(message);
      }

      // Default View params
      view.params = Utils.extend(defaults, app.params.view, viewParams);

      // Routes
      if (view.params.routes.length > 0) {
        view.routes = view.params.routes;
      } else {
        view.routes = [].concat(app.routes, view.params.routesAdd);
      }

      // Selector
      let selector;
      if (typeof el === 'string') selector = el;
      else {
        // Supposed to be HTMLElement or Dom7
        selector = ($el.attr('id') ? `#${$el.attr('id')}` : '') + ($el.attr('class') ? `.${$el.attr('class').replace(/ /g, '.').replace('.active', '')}` : '');
      }

      // DynamicNavbar
      let $navbarsEl;
      if (app.theme === 'ios' && view.params.iosDynamicNavbar) {
        $navbarsEl = $el.children('.navbars').eq(0);
        if ($navbarsEl.length === 0) {
          $navbarsEl = $('<div class="navbars"></div>');
        }
      }

      // View Props
      Utils.extend(false, view, {
        app,
        $el,
        el: $el[0],
        name: view.params.name,
        main: view.params.main || $el.hasClass('view-main'),
        $navbarsEl,
        navbarsEl: $navbarsEl ? $navbarsEl[0] : undefined,
        selector,
        history: [],
        scrollHistory: {},
      });

      // Save in DOM
      $el[0].f7View = view;

      // Install Modules
      view.useModules();

      // Add to app
      app.views.push(view);
      if (view.main) {
        app.views.main = view;
      }
      if (view.name) {
        app.views[view.name] = view;
      }

      // Index
      view.index = app.views.indexOf(view);

      // View ID
      let viewId;
      if (view.name) {
        viewId = `view_${view.name}`;
      } else if (view.main) {
        viewId = 'view_main';
      } else {
        viewId = `view_${view.index}`;
      }
      view.id = viewId;

      // Init View
      if (app.initialized) {
        view.init();
      } else {
        app.on('init', () => {
          view.init();
        });
      }

      return view;
    }

    destroy() {
      let view = this;
      const app = view.app;

      view.$el.trigger('view:beforedestroy');
      view.emit('local::beforeDestroy viewBeforeDestroy', view);

      app.off('resize', view.checkMasterDetailBreakpoint);

      if (view.main) {
        app.views.main = null;
        delete app.views.main;
      } else if (view.name) {
        app.views[view.name] = null;
        delete app.views[view.name];
      }
      view.$el[0].f7View = null;
      delete view.$el[0].f7View;

      app.views.splice(app.views.indexOf(view), 1);

      // Destroy Router
      if (view.params.router && view.router) {
        view.router.destroy();
      }

      view.emit('local::destroy viewDestroy', view);

      // Delete props & methods
      Object.keys(view).forEach((viewProp) => {
        view[viewProp] = null;
        delete view[viewProp];
      });

      view = null;
    }

    checkMasterDetailBreakpoint(force) {
      const view = this;
      const app = view.app;
      const wasMasterDetail = view.$el.hasClass('view-master-detail');
      const isMasterDetail = app.width >= view.params.masterDetailBreakpoint && view.$el.children('.page-master').length;
      if ((typeof force === 'undefined' && isMasterDetail) || force === true) {
        view.$el.addClass('view-master-detail');
        if (!wasMasterDetail) {
          view.emit('local::masterDetailBreakpoint viewMasterDetailBreakpoint', view);
          view.$el.trigger('view:masterDetailBreakpoint');
        }
      } else {
        view.$el.removeClass('view-master-detail');
        if (wasMasterDetail) {
          view.emit('local::masterDetailBreakpoint viewMasterDetailBreakpoint', view);
          view.$el.trigger('view:masterDetailBreakpoint');
        }
      }
    }

    initMasterDetail() {
      const view = this;
      const app = view.app;
      view.checkMasterDetailBreakpoint = view.checkMasterDetailBreakpoint.bind(view);
      view.checkMasterDetailBreakpoint();
      if (view.params.masterDetailResizable) {
        resizableView(view);
      }
      app.on('resize', view.checkMasterDetailBreakpoint);
    }

    init() {
      const view = this;
      if (view.params.router) {
        if (view.params.masterDetailBreakpoint > 0) {
          view.initMasterDetail();
        }
        view.router.init();
        view.$el.trigger('view:init');
        view.emit('local::init viewInit', view);
      }
    }
  }

  // Use Router
  View.use(RouterModule);

  function initClicks(app) {
    function handleClicks(e) {
      const $clickedEl = $(e.target);
      const $clickedLinkEl = $clickedEl.closest('a');
      const isLink = $clickedLinkEl.length > 0;
      const url = isLink && $clickedLinkEl.attr('href');
      // const isTabLink = isLink && $clickedLinkEl.hasClass('tab-link') && ($clickedLinkEl.attr('data-tab') || (url && url.indexOf('#') === 0));

      // Check if link is external
      if (isLink) {
        // eslint-disable-next-line
        if ($clickedLinkEl.is(app.params.clicks.externalLinks) || (url && url.indexOf('javascript:') >= 0)) {
          const target = $clickedLinkEl.attr('target');
          if (
            url
            && win.cordova
            && win.cordova.InAppBrowser
            && (target === '_system' || target === '_blank')
          ) {
            e.preventDefault();
            win.cordova.InAppBrowser.open(url, target);
          }
          return;
        }
      }

      // Modules Clicks
      Object.keys(app.modules).forEach((moduleName) => {
        const moduleClicks = app.modules[moduleName].clicks;
        if (!moduleClicks) return;
        if (e.preventF7Router) return;
        Object.keys(moduleClicks).forEach((clickSelector) => {
          const matchingClickedElement = $clickedEl.closest(clickSelector).eq(0);
          if (matchingClickedElement.length > 0) {
            moduleClicks[clickSelector].call(app, matchingClickedElement, matchingClickedElement.dataset(), e);
          }
        });
      });

      // Load Page
      let clickedLinkData = {};
      if (isLink) {
        e.preventDefault();
        clickedLinkData = $clickedLinkEl.dataset();
      }

      // Prevent Router
      if (e.preventF7Router) return;
      if ($clickedLinkEl.hasClass('prevent-router') || $clickedLinkEl.hasClass('router-prevent')) return;

      const validUrl = url && url.length > 0 && url[0] !== '#';
      if (validUrl || $clickedLinkEl.hasClass('back')) {
        let view;
        if (clickedLinkData.view && clickedLinkData.view === 'current') {
          view = app.views.current;
        } else if (clickedLinkData.view) {
          view = $(clickedLinkData.view)[0].f7View;
        } else {
          view = $clickedEl.parents('.view')[0] && $clickedEl.parents('.view')[0].f7View;
          if (!$clickedLinkEl.hasClass('back') && view && view.params.linksView) {
            if (typeof view.params.linksView === 'string') view = $(view.params.linksView)[0].f7View;
            else if (view.params.linksView instanceof View) view = view.params.linksView;
          }
        }
        if (!view) {
          if (app.views.main) view = app.views.main;
        }
        if (!view || !view.router) return;
        if (clickedLinkData.context && typeof clickedLinkData.context === 'string') {
          try {
            clickedLinkData.context = JSON.parse(clickedLinkData.context);
          } catch (err) {
            // something wrong there
          }
        }
        if ($clickedLinkEl[0].f7RouteProps) {
          clickedLinkData.props = $clickedLinkEl[0].f7RouteProps;
        }
        if ($clickedLinkEl.hasClass('back')) view.router.back(url, clickedLinkData);
        else view.router.navigate(url, clickedLinkData);
      }
    }

    app.on('click', handleClicks);
  }
  var ClicksModule = {
    name: 'clicks',
    params: {
      clicks: {
        // External Links
        externalLinks: '.external',
      },
    },
    on: {
      init() {
        const app = this;
        initClicks(app);
      },
    },
  };

  var HistoryModule = {
    name: 'history',
    static: {
      history: History,
    },
    on: {
      init() {
        History.init(this);
      },
    },
  };

  const SW = {
    registrations: [],
    register(path, scope) {
      const app = this;
      if (!('serviceWorker' in win.navigator) || !app.serviceWorker.container) {
        return new Promise((resolve, reject) => {
          reject(new Error('Service worker is not supported'));
        });
      }
      return new Promise((resolve, reject) => {
        app.serviceWorker.container.register(path, (scope ? { scope } : {}))
          .then((reg) => {
            SW.registrations.push(reg);
            app.emit('serviceWorkerRegisterSuccess', reg);
            resolve(reg);
          }).catch((error) => {
            app.emit('serviceWorkerRegisterError', error);
            reject(error);
          });
      });
    },
    unregister(registration) {
      const app = this;
      if (!('serviceWorker' in win.navigator) || !app.serviceWorker.container) {
        return new Promise((resolve, reject) => {
          reject(new Error('Service worker is not supported'));
        });
      }
      let registrations;
      if (!registration) registrations = SW.registrations;
      else if (Array.isArray(registration)) registrations = registration;
      else registrations = [registration];
      return Promise.all(registrations.map(reg => new Promise((resolve, reject) => {
        reg.unregister()
          .then(() => {
            if (SW.registrations.indexOf(reg) >= 0) {
              SW.registrations.splice(SW.registrations.indexOf(reg), 1);
            }
            app.emit('serviceWorkerUnregisterSuccess', reg);
            resolve();
          })
          .catch((error) => {
            app.emit('serviceWorkerUnregisterError', reg, error);
            reject(error);
          });
      })));
    },
  };

  var ServiceWorkerModule = {
    name: 'sw',
    params: {
      serviceWorker: {
        path: undefined,
        scope: undefined,
      },
    },
    create() {
      const app = this;
      Utils.extend(app, {
        serviceWorker: {
          container: ('serviceWorker' in win.navigator) ? win.navigator.serviceWorker : undefined,
          registrations: SW.registrations,
          register: SW.register.bind(app),
          unregister: SW.unregister.bind(app),
        },
      });
    },
    on: {
      init() {
        if (!('serviceWorker' in win.navigator)) return;
        const app = this;
        if (!app.serviceWorker.container) return;
        const paths = app.params.serviceWorker.path;
        const scope = app.params.serviceWorker.scope;
        if (!paths || (Array.isArray(paths) && !paths.length)) return;
        const toRegister = Array.isArray(paths) ? paths : [paths];
        toRegister.forEach((path) => {
          app.serviceWorker.register(path, scope);
        });
      },
    },
  };

  const Statusbar = {
    hide() {
      if (Device.cordova && win.StatusBar) {
        win.StatusBar.hide();
      }
    },
    show() {
      if (Device.cordova && win.StatusBar) {
        win.StatusBar.show();
      }
    },
    onClick() {
      const app = this;
      let pageContent;
      if ($('.popup.modal-in').length > 0) {
        // Check for opened popup
        pageContent = $('.popup.modal-in').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
      } else if ($('.panel.panel-in').length > 0) {
        // Check for opened panel
        pageContent = $('.panel.panel-in').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
      } else if ($('.views > .view.tab-active').length > 0) {
        // View in tab bar app layout
        pageContent = $('.views > .view.tab-active').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
      } else if ($('.views').length > 0) {
        pageContent = $('.views').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
      } else {
        pageContent = app.root.children('.view').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');
      }

      if (pageContent && pageContent.length > 0) {
        // Check for tab
        if (pageContent.hasClass('tab')) {
          pageContent = pageContent.parent('.tabs').children('.page-content.tab-active');
        }
        if (pageContent.length > 0) pageContent.scrollTop(0, 300);
      }
    },
    setTextColor(color) {
      if (Device.cordova && win.StatusBar) {
        if (color === 'white') {
          win.StatusBar.styleLightContent();
        } else {
          win.StatusBar.styleDefault();
        }
      }
    },
    setBackgroundColor(color) {
      if (Device.cordova && win.StatusBar) {
        win.StatusBar.backgroundColorByHexString(color);
      }
    },
    isVisible() {
      if (Device.cordova && win.StatusBar) {
        return win.StatusBar.isVisible;
      }
      return false;
    },
    overlaysWebView(overlays = true) {
      if (Device.cordova && win.StatusBar) {
        win.StatusBar.overlaysWebView(overlays);
      }
    },
    init() {
      const app = this;
      const params = app.params.statusbar;
      if (!params.enabled) return;

      if (Device.cordova && win.StatusBar) {
        if (params.scrollTopOnClick) {
          $(win).on('statusTap', Statusbar.onClick.bind(app));
        }
        if (Device.ios) {
          if (params.iosOverlaysWebView) {
            win.StatusBar.overlaysWebView(true);
          } else {
            win.StatusBar.overlaysWebView(false);
          }
          if (params.iosTextColor === 'white') {
            win.StatusBar.styleLightContent();
          } else {
            win.StatusBar.styleDefault();
          }
        }
        if (Device.android) {
          if (params.androidOverlaysWebView) {
            win.StatusBar.overlaysWebView(true);
          } else {
            win.StatusBar.overlaysWebView(false);
          }
          if (params.androidTextColor === 'white') {
            win.StatusBar.styleLightContent();
          } else {
            win.StatusBar.styleDefault();
          }
        }
      }
      if (params.iosBackgroundColor && Device.ios) {
        Statusbar.setBackgroundColor(params.iosBackgroundColor);
      }
      if (params.androidBackgroundColor && Device.android) {
        Statusbar.setBackgroundColor(params.androidBackgroundColor);
      }
    },
  };

  var Statusbar$1 = {
    name: 'statusbar',
    params: {
      statusbar: {
        enabled: true,

        scrollTopOnClick: true,

        iosOverlaysWebView: true,
        iosTextColor: 'black',
        iosBackgroundColor: null,

        androidOverlaysWebView: false,
        androidTextColor: 'black',
        androidBackgroundColor: null,
      },
    },
    create() {
      const app = this;
      Utils.extend(app, {
        statusbar: {
          hide: Statusbar.hide,
          show: Statusbar.show,
          overlaysWebView: Statusbar.overlaysWebView,
          setTextColor: Statusbar.setTextColor,
          setBackgroundColor: Statusbar.setBackgroundColor,
          isVisible: Statusbar.isVisible,
          init: Statusbar.init.bind(app),
        },
      });
    },
    on: {
      init() {
        const app = this;
        Statusbar.init.call(app);
      },
    },
  };

  function getCurrentView(app) {
    const $popoverView = $('.popover.modal-in .view');
    const $popupView = $('.popup.modal-in .view');
    const $panelView = $('.panel.panel-in .view');
    let $viewsEl = $('.views');
    if ($viewsEl.length === 0) $viewsEl = app.root;
    // Find active view as tab
    let $viewEl = $viewsEl.children('.view');
    if ($viewEl.length === 0) {
      $viewEl = $viewsEl.children('.tabs').children('.view');
    }
    // Propably in tabs or split view
    if ($viewEl.length > 1) {
      if ($viewEl.hasClass('tab')) {
        // Tabs
        $viewEl = $viewsEl.children('.view.tab-active');
        if ($viewEl.length === 0) {
          $viewEl = $viewsEl.children('.tabs').children('.view.tab-active');
        }
      }
    }
    if ($popoverView.length > 0 && $popoverView[0].f7View) return $popoverView[0].f7View;
    if ($popupView.length > 0 && $popupView[0].f7View) return $popupView[0].f7View;
    if ($panelView.length > 0 && $panelView[0].f7View) return $panelView[0].f7View;
    if ($viewEl.length > 0) {
      if ($viewEl.length === 1 && $viewEl[0].f7View) return $viewEl[0].f7View;
      if ($viewEl.length > 1) {
        return app.views.main;
      }
    }
    return undefined;
  }

  var View$1 = {
    name: 'view',
    params: {
      view: {
        name: undefined,
        main: false,
        router: true,
        linksView: null,
        stackPages: false,
        xhrCache: true,
        xhrCacheIgnore: [],
        xhrCacheIgnoreGetParameters: false,
        xhrCacheDuration: 1000 * 60 * 10, // Ten minutes
        componentCache: true,
        preloadPreviousPage: true,
        allowDuplicateUrls: false,
        reloadPages: false,
        reloadDetail: false,
        masterDetailBreakpoint: 0,
        masterDetailResizable: false,
        removeElements: true,
        removeElementsWithTimeout: false,
        removeElementsTimeout: 0,
        restoreScrollTopOnBack: true,
        unloadTabContent: true,
        passRouteQueryToRequest: true,
        passRouteParamsToRequest: false,
        loadInitialPage: true,
        // Swipe Back
        iosSwipeBack: true,
        iosSwipeBackAnimateShadow: true,
        iosSwipeBackAnimateOpacity: true,
        iosSwipeBackActiveArea: 30,
        iosSwipeBackThreshold: 0,
        mdSwipeBack: false,
        mdSwipeBackAnimateShadow: true,
        mdSwipeBackAnimateOpacity: false,
        mdSwipeBackActiveArea: 30,
        mdSwipeBackThreshold: 0,
        auroraSwipeBack: false,
        auroraSwipeBackAnimateShadow: false,
        auroraSwipeBackAnimateOpacity: true,
        auroraSwipeBackActiveArea: 30,
        auroraSwipeBackThreshold: 0,
        // Push State
        pushState: false,
        pushStateRoot: undefined,
        pushStateAnimate: true,
        pushStateAnimateOnLoad: false,
        pushStateSeparator: '#!',
        pushStateOnLoad: true,
        // Animate Pages
        animate: true,
        // iOS Dynamic Navbar
        iosDynamicNavbar: true,
        // Animate iOS Navbar Back Icon
        iosAnimateNavbarBackIcon: true,
        // Delays
        iosPageLoadDelay: 0,
        mdPageLoadDelay: 0,
        auroraPageLoadDelay: 0,
        // Routes hooks
        routesBeforeEnter: null,
        routesBeforeLeave: null,
      },
    },
    static: {
      View,
    },
    create() {
      const app = this;
      Utils.extend(app, {
        views: Utils.extend([], {
          create(el, params) {
            return new View(app, el, params);
          },
          get(viewEl) {
            const $viewEl = $(viewEl);
            if ($viewEl.length && $viewEl[0].f7View) return $viewEl[0].f7View;
            return undefined;
          },
        }),
      });
      Object.defineProperty(app.views, 'current', {
        enumerable: true,
        configurable: true,
        get() {
          return getCurrentView(app);
        },
      });
      // Alias
      app.view = app.views;
    },
    on: {
      init() {
        const app = this;
        $('.view-init').each((index, viewEl) => {
          if (viewEl.f7View) return;
          const viewParams = $(viewEl).dataset();
          app.views.create(viewEl, viewParams);
        });
      },
      'modalOpen panelOpen': function onOpen(instance) {
        const app = this;
        instance.$el.find('.view-init').each((index, viewEl) => {
          if (viewEl.f7View) return;
          const viewParams = $(viewEl).dataset();
          app.views.create(viewEl, viewParams);
        });
      },
      'modalBeforeDestroy panelBeforeDestroy': function onClose(instance) {
        if (!instance || !instance.$el) return;
        instance.$el.find('.view-init').each((index, viewEl) => {
          const view = viewEl.f7View;
          if (!view) return;
          view.destroy();
        });
      },
    },
    vnode: {
      'view-init': {
        insert(vnode) {
          const app = this;
          const viewEl = vnode.elm;
          if (viewEl.f7View) return;
          const viewParams = $(viewEl).dataset();
          app.views.create(viewEl, viewParams);
        },
        destroy(vnode) {
          const viewEl = vnode.elm;
          const view = viewEl.f7View;
          if (!view) return;
          view.destroy();
        },
      },
    },
  };

  const Navbar = {
    size(el) {
      const app = this;

      let $el = $(el);

      if ($el.hasClass('navbars')) {
        $el = $el.children('.navbar').each((index, navbarEl) => {
          app.navbar.size(navbarEl);
        });
        return;
      }

      const $innerEl = $el.children('.navbar-inner');
      if (!$innerEl.length) return;

      const needCenterTitle = (
        $innerEl.hasClass('navbar-inner-centered-title')
        || app.params.navbar[`${app.theme}CenterTitle`]
      );
      const needLeftTitle = app.theme === 'ios' && !app.params.navbar[`${app.theme}CenterTitle`];

      if (!needCenterTitle && !needLeftTitle) return;

      if (
        $el.hasClass('stacked')
        || $el.parents('.stacked').length > 0
        || $el.parents('.tab:not(.tab-active)').length > 0
        || $el.parents('.popup:not(.modal-in)').length > 0
      ) {
        return;
      }

      if (app.theme !== 'ios' && app.params.navbar[`${app.theme}CenterTitle`]) {
        $innerEl.addClass('navbar-inner-centered-title');
      }
      if (app.theme === 'ios' && !app.params.navbar.iosCenterTitle) {
        $innerEl.addClass('navbar-inner-left-title');
      }

      const $viewEl = $el.parents('.view').eq(0);
      const left = app.rtl ? $innerEl.children('.right') : $innerEl.children('.left');
      const right = app.rtl ? $innerEl.children('.left') : $innerEl.children('.right');
      const title = $innerEl.children('.title');
      const subnavbar = $innerEl.children('.subnavbar');
      const noLeft = left.length === 0;
      const noRight = right.length === 0;
      const leftWidth = noLeft ? 0 : left.outerWidth(true);
      const rightWidth = noRight ? 0 : right.outerWidth(true);
      const titleWidth = title.outerWidth(true);
      const navbarStyles = $innerEl.styles();
      const navbarWidth = $innerEl[0].offsetWidth;
      const navbarInnerWidth = navbarWidth - parseInt(navbarStyles.paddingLeft, 10) - parseInt(navbarStyles.paddingRight, 10);
      const isPrevious = $el.hasClass('navbar-previous');
      const sliding = $innerEl.hasClass('sliding');

      let router;
      let dynamicNavbar;

      if ($viewEl.length > 0 && $viewEl[0].f7View) {
        router = $viewEl[0].f7View.router;
        dynamicNavbar = router && router.dynamicNavbar;
      }

      let currLeft;
      let diff;
      if (noRight) {
        currLeft = navbarInnerWidth - titleWidth;
      }
      if (noLeft) {
        currLeft = 0;
      }
      if (!noLeft && !noRight) {
        currLeft = ((navbarInnerWidth - rightWidth - titleWidth) + leftWidth) / 2;
      }
      let requiredLeft = (navbarInnerWidth - titleWidth) / 2;
      if (navbarInnerWidth - leftWidth - rightWidth > titleWidth) {
        if (requiredLeft < leftWidth) {
          requiredLeft = leftWidth;
        }
        if (requiredLeft + titleWidth > navbarInnerWidth - rightWidth) {
          requiredLeft = navbarInnerWidth - rightWidth - titleWidth;
        }
        diff = requiredLeft - currLeft;
      } else {
        diff = 0;
      }

      // RTL inverter
      const inverter = app.rtl ? -1 : 1;

      if (dynamicNavbar && app.theme === 'ios') {
        if (title.hasClass('sliding') || (title.length > 0 && sliding)) {
          let titleLeftOffset = -(currLeft + diff) * inverter;
          const titleRightOffset = (navbarInnerWidth - currLeft - diff - titleWidth) * inverter;

          if (isPrevious) {
            if (router && router.params.iosAnimateNavbarBackIcon) {
              const activeNavbarBackLink = $el.parent().find('.navbar-current').children('.left.sliding').find('.back .icon ~ span');
              if (activeNavbarBackLink.length > 0) {
                titleLeftOffset += activeNavbarBackLink[0].offsetLeft;
              }
            }
          }
          title[0].f7NavbarLeftOffset = titleLeftOffset;
          title[0].f7NavbarRightOffset = titleRightOffset;
        }
        if (!noLeft && (left.hasClass('sliding') || sliding)) {
          if (app.rtl) {
            left[0].f7NavbarLeftOffset = (-(navbarInnerWidth - left[0].offsetWidth) / 2) * inverter;
            left[0].f7NavbarRightOffset = leftWidth * inverter;
          } else {
            left[0].f7NavbarLeftOffset = -leftWidth;
            left[0].f7NavbarRightOffset = ((navbarInnerWidth - left[0].offsetWidth) / 2);
            if (router && router.params.iosAnimateNavbarBackIcon && left.find('.back .icon').length > 0) {
              if (left.find('.back .icon ~ span').length) {
                const leftOffset = left[0].f7NavbarLeftOffset;
                const rightOffset = left[0].f7NavbarRightOffset;
                left[0].f7NavbarLeftOffset = 0;
                left[0].f7NavbarRightOffset = 0;
                left.find('.back .icon ~ span')[0].f7NavbarLeftOffset = leftOffset;
                left.find('.back .icon ~ span')[0].f7NavbarRightOffset = rightOffset - left.find('.back .icon')[0].offsetWidth;
              }
            }
          }
        }
        if (!noRight && (right.hasClass('sliding') || sliding)) {
          if (app.rtl) {
            right[0].f7NavbarLeftOffset = -rightWidth * inverter;
            right[0].f7NavbarRightOffset = ((navbarInnerWidth - right[0].offsetWidth) / 2) * inverter;
          } else {
            right[0].f7NavbarLeftOffset = -(navbarInnerWidth - right[0].offsetWidth) / 2;
            right[0].f7NavbarRightOffset = rightWidth;
          }
        }
        if (subnavbar.length && (subnavbar.hasClass('sliding') || sliding)) {
          subnavbar[0].f7NavbarLeftOffset = app.rtl ? subnavbar[0].offsetWidth : -subnavbar[0].offsetWidth;
          subnavbar[0].f7NavbarRightOffset = -subnavbar[0].f7NavbarLeftOffset;
        }
      }

      // Center title
      if (needCenterTitle) {
        let titleLeft = diff;
        if (app.rtl && noLeft && noRight && title.length > 0) titleLeft = -titleLeft;
        title.css({ left: `${titleLeft}px` });
      }
    },
    hide(el, animate = true, hideStatusbar = false) {
      const app = this;
      let $el = $(el);
      const isDynamic = $el.hasClass('navbar') && $el.parent('.navbars').length;
      if (isDynamic) $el = $el.parents('.navbars');
      if (!$el.length) return;
      if ($el.hasClass('navbar-hidden')) return;
      let className = `navbar-hidden${animate ? ' navbar-transitioning' : ''}`;
      const currentIsLarge = isDynamic
        ? $el.find('.navbar-current .title-large').length
        : $el.find('.title-large').length;
      if (currentIsLarge) {
        className += ' navbar-large-hidden';
      }
      if (hideStatusbar) {
        className += ' navbar-hidden-statusbar';
      }
      $el.transitionEnd(() => {
        $el.removeClass('navbar-transitioning');
      });
      $el.addClass(className);
      if (isDynamic) {
        $el.children('.navbar').each((index, subEl) => {
          $(subEl).trigger('navbar:hide');
          app.emit('navbarHide', subEl);
        });
      } else {
        $el.trigger('navbar:hide');
        app.emit('navbarHide', $el[0]);
      }
    },
    show(el = '.navbar-hidden', animate = true) {
      const app = this;
      let $el = $(el);
      const isDynamic = $el.hasClass('navbar') && $el.parent('.navbars').length;
      if (isDynamic) $el = $el.parents('.navbars');
      if (!$el.length) return;
      if (!$el.hasClass('navbar-hidden')) return;
      if (animate) {
        $el.addClass('navbar-transitioning');
        $el.transitionEnd(() => {
          $el.removeClass('navbar-transitioning');
        });
      }
      $el.removeClass('navbar-hidden navbar-large-hidden navbar-hidden-statusbar');
      if (isDynamic) {
        $el.children('.navbar').each((index, subEl) => {
          $(subEl).trigger('navbar:show');
          app.emit('navbarShow', subEl);
        });
      } else {
        $el.trigger('navbar:show');
        app.emit('navbarShow', $el[0]);
      }
    },
    getElByPage(page) {
      let $pageEl;
      let $navbarEl;
      let pageData;
      if (page.$navbarEl || page.$el) {
        pageData = page;
        $pageEl = page.$el;
      } else {
        $pageEl = $(page);
        if ($pageEl.length > 0) pageData = $pageEl[0].f7Page;
      }
      if (pageData && pageData.$navbarEl && pageData.$navbarEl.length > 0) {
        $navbarEl = pageData.$navbarEl;
      } else if ($pageEl) {
        $navbarEl = $pageEl.children('.navbar');
      }
      if (!$navbarEl || ($navbarEl && $navbarEl.length === 0)) return undefined;
      return $navbarEl[0];
    },
    getPageByEl(navbarEl) {
      const $navbarEl = $(navbarEl);
      if ($navbarEl.parents('.page').length) {
        return $navbarEl.parents('.page')[0];
      }
      let pageEl;
      $navbarEl.parents('.view').find('.page').each((index, el) => {
        if (el && el.f7Page && el.f7Page.navbarEl && $navbarEl[0] === el.f7Page.navbarEl) {
          pageEl = el;
        }
      });
      return pageEl;
    },

    collapseLargeTitle(navbarEl) {
      const app = this;
      let $navbarEl = $(navbarEl);
      if ($navbarEl.hasClass('navbars')) {
        $navbarEl = $navbarEl.find('.navbar');
        if ($navbarEl.length > 1) {
          $navbarEl = $(navbarEl).find('.navbar-large.navbar-current');
        }
        if ($navbarEl.length > 1 || !$navbarEl.length) {
          return;
        }
      }
      const $pageEl = $(app.navbar.getPageByEl($navbarEl));
      $navbarEl.addClass('navbar-large-collapsed');
      $pageEl.eq(0).addClass('page-with-navbar-large-collapsed').trigger('page:navbarlargecollapsed');
      app.emit('pageNavbarLargeCollapsed', $pageEl[0]);
      $navbarEl.trigger('navbar:collapse');
      app.emit('navbarCollapse', $navbarEl[0]);
    },
    expandLargeTitle(navbarEl) {
      const app = this;
      let $navbarEl = $(navbarEl);
      if ($navbarEl.hasClass('navbars')) {
        $navbarEl = $navbarEl.find('.navbar-large');
        if ($navbarEl.length > 1) {
          $navbarEl = $(navbarEl).find('.navbar-large.navbar-current');
        }
        if ($navbarEl.length > 1 || !$navbarEl.length) {
          return;
        }
      }
      const $pageEl = $(app.navbar.getPageByEl($navbarEl));
      $navbarEl.removeClass('navbar-large-collapsed');
      $pageEl.eq(0).removeClass('page-with-navbar-large-collapsed').trigger('page:navbarlargeexpanded');
      app.emit('pageNavbarLargeExpanded', $pageEl[0]);
      $navbarEl.trigger('navbar:expand');
      app.emit('navbarExpand', $navbarEl[0]);
    },
    toggleLargeTitle(navbarEl) {
      const app = this;
      let $navbarEl = $(navbarEl);
      if ($navbarEl.hasClass('navbars')) {
        $navbarEl = $navbarEl.find('.navbar-large');
        if ($navbarEl.length > 1) {
          $navbarEl = $(navbarEl).find('.navbar-large.navbar-current');
        }
        if ($navbarEl.length > 1 || !$navbarEl.length) {
          return;
        }
      }
      if ($navbarEl.hasClass('navbar-large-collapsed')) {
        app.navbar.expandLargeTitle($navbarEl);
      } else {
        app.navbar.collapseLargeTitle($navbarEl);
      }
    },
    initNavbarOnScroll(pageEl, navbarEl, needHide, needCollapse, needTransparent) {
      const app = this;
      const $pageEl = $(pageEl);
      const $navbarEl = $(navbarEl);
      const $titleLargeEl = $navbarEl.find('.title-large');
      const isLarge = $titleLargeEl.length || $navbarEl.hasClass('.navbar-large');
      let navbarHideHeight = 44;
      const snapPageScrollToLargeTitle = app.params.navbar.snapPageScrollToLargeTitle;
      const snapPageScrollToTransparentNavbar = app.params.navbar.snapPageScrollToTransparentNavbar;

      let previousScrollTop;
      let currentScrollTop;

      let scrollHeight;
      let offsetHeight;
      let reachEnd;
      let action;
      let navbarHidden;

      let navbarCollapsed;
      let navbarTitleLargeHeight;

      let navbarOffsetHeight;

      if (needCollapse || (needHide && isLarge)) {
        navbarTitleLargeHeight = $navbarEl.css('--f7-navbar-large-title-height');

        if (navbarTitleLargeHeight && navbarTitleLargeHeight.indexOf('px') >= 0) {
          navbarTitleLargeHeight = parseInt(navbarTitleLargeHeight, 10);
          if (Number.isNaN(navbarTitleLargeHeight) && $titleLargeEl.length) {
            navbarTitleLargeHeight = $titleLargeEl[0].offsetHeight;
          } else if (Number.isNaN(navbarTitleLargeHeight)) {
            if (app.theme === 'ios') navbarTitleLargeHeight = 52;
            else if (app.theme === 'md') navbarTitleLargeHeight = 48;
            else if (app.theme === 'aurora') navbarTitleLargeHeight = 38;
          }
        } else if ($titleLargeEl.length) {
          navbarTitleLargeHeight = $titleLargeEl[0].offsetHeight;
        } else { // eslint-disable-next-line
          if (app.theme === 'ios') navbarTitleLargeHeight = 52;
          else if (app.theme === 'md') navbarTitleLargeHeight = 48;
          else if (app.theme === 'aurora') navbarTitleLargeHeight = 38;
        }
      }

      if (needHide && isLarge) {
        navbarHideHeight += navbarTitleLargeHeight;
      }

      let scrollChanged;
      let scrollContent;
      let scrollTimeoutId;
      let touchEndTimeoutId;
      const touchSnapTimeout = 70;
      const desktopSnapTimeout = 300;

      function snapLargeNavbar() {
        const inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');
        if (inSearchbarExpanded) return;
        if (!scrollContent || currentScrollTop < 0) return;
        if (currentScrollTop >= navbarTitleLargeHeight / 2 && currentScrollTop < navbarTitleLargeHeight) {
          $(scrollContent).scrollTop(navbarTitleLargeHeight, 100);
        } else if (currentScrollTop < navbarTitleLargeHeight) {
          $(scrollContent).scrollTop(0, 200);
        }
      }

      function snapTransparentNavbar() {
        const inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');
        if (inSearchbarExpanded) return;
        if (!scrollContent || currentScrollTop < 0) return;
        if (currentScrollTop >= navbarOffsetHeight / 2 && currentScrollTop < navbarOffsetHeight) {
          $(scrollContent).scrollTop(navbarOffsetHeight, 100);
        } else if (currentScrollTop < navbarOffsetHeight) {
          $(scrollContent).scrollTop(0, 200);
        }
      }

      function handleNavbarTransparent() {
        const isHidden = $navbarEl.hasClass('navbar-hidden') || $navbarEl.parent('.navbars').hasClass('navbar-hidden');
        const inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');
        if (inSearchbarExpanded || isHidden) return;
        if (!navbarOffsetHeight) {
          navbarOffsetHeight = navbarEl.offsetHeight;
        }
        let opacity = currentScrollTop / navbarOffsetHeight;
        const notTransparent = $navbarEl.hasClass('navbar-transparent-visible');
        opacity = Math.max(Math.min(opacity, 1), 0);

        if ((notTransparent && opacity === 1) || (!notTransparent && opacity === 0)) {
          $navbarEl.find('.navbar-bg, .title').css('opacity', '');
          return;
        }
        if (notTransparent && opacity === 0) {
          $navbarEl.trigger('navbar:transparenthide');
          app.emit('navbarTransparentHide', $navbarEl[0]);
          $navbarEl.removeClass('navbar-transparent-visible');
          $navbarEl.find('.navbar-bg, .title').css('opacity', '');
          return;
        }
        if (!notTransparent && opacity === 1) {
          $navbarEl.trigger('navbar:transparentshow');
          app.emit('navbarTransparentShow', $navbarEl[0]);
          $navbarEl.addClass('navbar-transparent-visible');
          $navbarEl.find('.navbar-bg, .title').css('opacity', '');
          return;
        }

        $navbarEl.find('.navbar-bg, .title').css('opacity', opacity);

        if (snapPageScrollToTransparentNavbar) {
          if (!Support.touch) {
            clearTimeout(scrollTimeoutId);
            scrollTimeoutId = setTimeout(() => {
              snapTransparentNavbar();
            }, desktopSnapTimeout);
          } else if (touchEndTimeoutId) {
            clearTimeout(touchEndTimeoutId);
            touchEndTimeoutId = null;
            touchEndTimeoutId = setTimeout(() => {
              snapTransparentNavbar();
              clearTimeout(touchEndTimeoutId);
              touchEndTimeoutId = null;
            }, touchSnapTimeout);
          }
        }
      }

      let previousCollapseProgress = null;
      let collapseProgress = null;
      function handleLargeNavbarCollapse() {
        const isHidden = $navbarEl.hasClass('navbar-hidden') || $navbarEl.parent('.navbars').hasClass('navbar-hidden');
        if (isHidden) return;
        const isLargeTransparent = $navbarEl.hasClass('navbar-large-transparent')
          || (
            $navbarEl.hasClass('navbar-large')
            && $navbarEl.hasClass('navbar-transparent')
          );
        previousCollapseProgress = collapseProgress;
        collapseProgress = Math.min(Math.max((currentScrollTop / navbarTitleLargeHeight), 0), 1);
        const previousCollapseWasInMiddle = previousCollapseProgress > 0 && previousCollapseProgress < 1;
        const inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');
        if (inSearchbarExpanded) return;
        navbarCollapsed = $navbarEl.hasClass('navbar-large-collapsed');
        if (collapseProgress === 0 && navbarCollapsed) {
          app.navbar.expandLargeTitle($navbarEl[0]);
        } else if (collapseProgress === 1 && !navbarCollapsed) {
          app.navbar.collapseLargeTitle($navbarEl[0]);
        }
        if (
          (collapseProgress === 0 && navbarCollapsed)
          || (collapseProgress === 0 && previousCollapseWasInMiddle)
          || (collapseProgress === 1 && !navbarCollapsed)
          || (collapseProgress === 1 && previousCollapseWasInMiddle)
        ) {
          if (app.theme === 'md') {
            $navbarEl.find('.navbar-inner').css('overflow', '');
          }
          $navbarEl.find('.title').css('opacity', '');
          $navbarEl.find('.title-large-text, .subnavbar').css('transform', '');
          if (isLargeTransparent) {
            $navbarEl.find('.navbar-bg').css('opacity', '');
          } else {
            $navbarEl.find('.navbar-bg').css('transform', '');
          }
        } else if (collapseProgress > 0 && collapseProgress < 1) {
          if (app.theme === 'md') {
            $navbarEl.find('.navbar-inner').css('overflow', 'visible');
          }
          $navbarEl.find('.title').css('opacity', collapseProgress);
          $navbarEl.find('.title-large-text, .subnavbar').css('transform', `translate3d(0px, ${-1 * collapseProgress * navbarTitleLargeHeight}px, 0)`);
          if (isLargeTransparent) {
            $navbarEl.find('.navbar-bg').css('opacity', collapseProgress);
          } else {
            $navbarEl.find('.navbar-bg').css('transform', `translate3d(0px, ${-1 * collapseProgress * navbarTitleLargeHeight}px, 0)`);
          }
        }

        if (snapPageScrollToLargeTitle) {
          if (!Support.touch) {
            clearTimeout(scrollTimeoutId);
            scrollTimeoutId = setTimeout(() => {
              snapLargeNavbar();
            }, desktopSnapTimeout);
          } else if (touchEndTimeoutId) {
            clearTimeout(touchEndTimeoutId);
            touchEndTimeoutId = null;
            touchEndTimeoutId = setTimeout(() => {
              snapLargeNavbar();
              clearTimeout(touchEndTimeoutId);
              touchEndTimeoutId = null;
            }, touchSnapTimeout);
          }
        }
      }

      function handleTitleHideShow() {
        if ($pageEl.hasClass('page-with-card-opened')) return;
        scrollHeight = scrollContent.scrollHeight;
        offsetHeight = scrollContent.offsetHeight;
        reachEnd = currentScrollTop + offsetHeight >= scrollHeight;
        navbarHidden = $navbarEl.hasClass('navbar-hidden') || $navbarEl.parent('.navbars').hasClass('navbar-hidden');
        if (reachEnd) {
          if (app.params.navbar.showOnPageScrollEnd) {
            action = 'show';
          }
        } else if (previousScrollTop > currentScrollTop) {
          if (app.params.navbar.showOnPageScrollTop || currentScrollTop <= navbarHideHeight) {
            action = 'show';
          } else {
            action = 'hide';
          }
        } else if (currentScrollTop > navbarHideHeight) {
          action = 'hide';
        } else {
          action = 'show';
        }

        if (action === 'show' && navbarHidden) {
          app.navbar.show($navbarEl);
          navbarHidden = false;
        } else if (action === 'hide' && !navbarHidden) {
          app.navbar.hide($navbarEl);
          navbarHidden = true;
        }
        previousScrollTop = currentScrollTop;
      }

      function handleScroll(e) {
        scrollContent = this;
        if (e && e.target && e.target !== scrollContent) {
          return;
        }
        currentScrollTop = scrollContent.scrollTop;
        scrollChanged = currentScrollTop;
        if (needCollapse) {
          handleLargeNavbarCollapse();
        } else if (needTransparent) {
          handleNavbarTransparent();
        }
        if ($pageEl.hasClass('page-previous')) return;
        if (needHide) {
          handleTitleHideShow();
        }
      }
      function handeTouchStart() {
        scrollChanged = false;
      }
      function handleTouchEnd() {
        clearTimeout(touchEndTimeoutId);
        touchEndTimeoutId = null;
        touchEndTimeoutId = setTimeout(() => {
          if (scrollChanged !== false) {
            if (needTransparent && !needCollapse) {
              snapTransparentNavbar();
            } else {
              snapLargeNavbar();
            }
            clearTimeout(touchEndTimeoutId);
            touchEndTimeoutId = null;
          }
        }, touchSnapTimeout);
      }
      $pageEl.on('scroll', '.page-content', handleScroll, true);
      if (Support.touch && ((needCollapse && snapPageScrollToLargeTitle) || (needTransparent && snapPageScrollToTransparentNavbar))) {
        app.on('touchstart:passive', handeTouchStart);
        app.on('touchend:passive', handleTouchEnd);
      }
      if (needCollapse) {
        $pageEl.find('.page-content').each((pageContentIndex, pageContentEl) => {
          if (pageContentEl.scrollTop > 0) handleScroll.call(pageContentEl);
        });
      } else if (needTransparent) {
        $pageEl.find('.page-content').each((pageContentIndex, pageContentEl) => {
          if (pageContentEl.scrollTop > 0) handleScroll.call(pageContentEl);
        });
      }
      $pageEl[0].f7DetachNavbarScrollHandlers = function f7DetachNavbarScrollHandlers() {
        delete $pageEl[0].f7DetachNavbarScrollHandlers;
        $pageEl.off('scroll', '.page-content', handleScroll, true);
        if (Support.touch && ((needCollapse && snapPageScrollToLargeTitle) || (needTransparent && snapPageScrollToTransparentNavbar))) {
          app.off('touchstart:passive', handeTouchStart);
          app.off('touchend:passive', handleTouchEnd);
        }
      };
    },
  };
  var Navbar$1 = {
    name: 'navbar',
    create() {
      const app = this;
      Utils.extend(app, {
        navbar: {
          size: Navbar.size.bind(app),
          hide: Navbar.hide.bind(app),
          show: Navbar.show.bind(app),
          getElByPage: Navbar.getElByPage.bind(app),
          getPageByEl: Navbar.getPageByEl.bind(app),
          collapseLargeTitle: Navbar.collapseLargeTitle.bind(app),
          expandLargeTitle: Navbar.expandLargeTitle.bind(app),
          toggleLargeTitle: Navbar.toggleLargeTitle.bind(app),
          initNavbarOnScroll: Navbar.initNavbarOnScroll.bind(app),
        },
      });
    },
    params: {
      navbar: {
        scrollTopOnTitleClick: true,
        iosCenterTitle: true,
        mdCenterTitle: false,
        auroraCenterTitle: true,
        hideOnPageScroll: false,
        showOnPageScrollEnd: true,
        showOnPageScrollTop: true,
        collapseLargeTitleOnScroll: true,
        snapPageScrollToLargeTitle: true,
        snapPageScrollToTransparentNavbar: true,
      },
    },
    on: {
      'panelBreakpoint panelCollapsedBreakpoint panelResize viewResize resize viewMasterDetailBreakpoint': function onPanelResize() {
        const app = this;
        $('.navbar').each((index, navbarEl) => {
          app.navbar.size(navbarEl);
        });
      },
      pageBeforeRemove(page) {
        if (page.$el[0].f7DetachNavbarScrollHandlers) {
          page.$el[0].f7DetachNavbarScrollHandlers();
        }
      },
      pageBeforeIn(page) {
        const app = this;
        if (app.theme !== 'ios') return;
        let $navbarsEl;
        const view = page.$el.parents('.view')[0].f7View;
        const navbarEl = app.navbar.getElByPage(page);
        if (!navbarEl) {
          $navbarsEl = page.$el.parents('.view').children('.navbars');
        } else {
          $navbarsEl = $(navbarEl).parents('.navbars');
        }
        if (page.$el.hasClass('no-navbar') || (view.router.dynamicNavbar && !navbarEl)) {
          const animate = !!(page.pageFrom && page.router.history.length > 0);
          app.navbar.hide($navbarsEl, animate);
        } else {
          app.navbar.show($navbarsEl);
        }
      },
      pageReinit(page) {
        const app = this;
        const $navbarEl = $(app.navbar.getElByPage(page));
        if (!$navbarEl || $navbarEl.length === 0) return;
        app.navbar.size($navbarEl);
      },
      pageInit(page) {
        const app = this;
        const $navbarEl = $(app.navbar.getElByPage(page));
        if (!$navbarEl || $navbarEl.length === 0) return;

        // Size
        app.navbar.size($navbarEl);

        // Need Collapse On Scroll
        let needCollapseOnScrollHandler;
        if ($navbarEl.find('.title-large').length > 0) {
          $navbarEl.addClass('navbar-large');
        }
        if ($navbarEl.hasClass('navbar-large')) {
          if (app.params.navbar.collapseLargeTitleOnScroll) needCollapseOnScrollHandler = true;
          page.$el.addClass('page-with-navbar-large');
        }

        // Need transparent on scroll
        let needTransparentOnScroll;
        if (!needCollapseOnScrollHandler && $navbarEl.hasClass('navbar-transparent')) {
          needTransparentOnScroll = true;
        }

        // Need Hide On Scroll
        let needHideOnScrollHandler;
        if (
          app.params.navbar.hideOnPageScroll
          || page.$el.find('.hide-navbar-on-scroll').length
          || page.$el.hasClass('hide-navbar-on-scroll')
          || page.$el.find('.hide-bars-on-scroll').length
          || page.$el.hasClass('hide-bars-on-scroll')
        ) {
          if (
            page.$el.find('.keep-navbar-on-scroll').length
            || page.$el.hasClass('keep-navbar-on-scroll')
            || page.$el.find('.keep-bars-on-scroll').length
            || page.$el.hasClass('keep-bars-on-scroll')
          ) {
            needHideOnScrollHandler = false;
          } else {
            needHideOnScrollHandler = true;
          }
        }

        if (needCollapseOnScrollHandler || needHideOnScrollHandler || needTransparentOnScroll) {
          app.navbar.initNavbarOnScroll(page.el, $navbarEl[0], needHideOnScrollHandler, needCollapseOnScrollHandler, needTransparentOnScroll);
        }
      },
      'panelOpen panelSwipeOpen modalOpen': function onPanelModalOpen(instance) {
        const app = this;
        instance.$el.find('.navbar:not(.navbar-previous):not(.stacked)').each((index, navbarEl) => {
          app.navbar.size(navbarEl);
        });
      },
      tabShow(tabEl) {
        const app = this;
        $(tabEl).find('.navbar:not(.navbar-previous):not(.stacked)').each((index, navbarEl) => {
          app.navbar.size(navbarEl);
        });
      },
    },
    clicks: {
      '.navbar .title': function onTitleClick($clickedEl) {
        const app = this;
        if (!app.params.navbar.scrollTopOnTitleClick) return;
        if ($clickedEl.closest('a').length > 0) {
          return;
        }
        let $pageContentEl;

        // Find active page
        const $navbarEl = $clickedEl.parents('.navbar');
        const $navbarsEl = $navbarEl.parents('.navbars');

        // Static Layout
        $pageContentEl = $navbarEl.parents('.page-content');

        if ($pageContentEl.length === 0) {
          // Fixed Layout
          if ($navbarEl.parents('.page').length > 0) {
            $pageContentEl = $navbarEl.parents('.page').find('.page-content');
          }
          // Through Layout iOS
          if ($pageContentEl.length === 0 && $navbarsEl.length) {
            if ($navbarsEl.nextAll('.page-current:not(.stacked)').length > 0) {
              $pageContentEl = $navbarsEl.nextAll('.page-current:not(.stacked)').find('.page-content');
            }
          }
          // Through Layout
          if ($pageContentEl.length === 0) {
            if ($navbarEl.nextAll('.page-current:not(.stacked)').length > 0) {
              $pageContentEl = $navbarEl.nextAll('.page-current:not(.stacked)').find('.page-content');
            }
          }
        }
        if ($pageContentEl && $pageContentEl.length > 0) {
          // Check for tab
          if ($pageContentEl.hasClass('tab')) {
            $pageContentEl = $pageContentEl.parent('.tabs').children('.page-content.tab-active');
          }
          if ($pageContentEl.length > 0) $pageContentEl.scrollTop(0, 300);
        }
      },
    },
    vnode: {
      navbar: {
        postpatch(vnode) {
          const app = this;
          app.navbar.size(vnode.elm);
        },
      },
    },
  };

  const Toolbar = {
    setHighlight(tabbarEl) {
      const app = this;
      if (app.theme !== 'md') return;

      const $tabbarEl = $(tabbarEl);

      if ($tabbarEl.length === 0 || !($tabbarEl.hasClass('tabbar') || $tabbarEl.hasClass('tabbar-labels'))) return;

      let $highlightEl = $tabbarEl.find('.tab-link-highlight');
      const tabLinksCount = $tabbarEl.find('.tab-link').length;
      if (tabLinksCount === 0) {
        $highlightEl.remove();
        return;
      }

      if ($highlightEl.length === 0) {
        $tabbarEl.children('.toolbar-inner').append('<span class="tab-link-highlight"></span>');
        $highlightEl = $tabbarEl.find('.tab-link-highlight');
      } else if ($highlightEl.next().length) {
        $tabbarEl.children('.toolbar-inner').append($highlightEl);
      }

      const $activeLink = $tabbarEl.find('.tab-link-active');
      let highlightWidth;
      let highlightTranslate;

      if ($tabbarEl.hasClass('tabbar-scrollable') && $activeLink && $activeLink[0]) {
        highlightWidth = `${$activeLink[0].offsetWidth}px`;
        highlightTranslate = `${$activeLink[0].offsetLeft}px`;
      } else {
        const activeIndex = $activeLink.index();
        highlightWidth = `${100 / tabLinksCount}%`;
        highlightTranslate = `${(app.rtl ? -activeIndex : activeIndex) * 100}%`;
      }

      Utils.nextFrame(() => {
        $highlightEl
          .css('width', highlightWidth)
          .transform(`translate3d(${highlightTranslate},0,0)`);
      });
    },
    init(tabbarEl) {
      const app = this;
      app.toolbar.setHighlight(tabbarEl);
    },
    hide(el, animate = true) {
      const app = this;
      const $el = $(el);
      if ($el.hasClass('toolbar-hidden')) return;
      const className = `toolbar-hidden${animate ? ' toolbar-transitioning' : ''}`;
      $el.transitionEnd(() => {
        $el.removeClass('toolbar-transitioning');
      });
      $el.addClass(className);
      $el.trigger('toolbar:hide');
      app.emit('toolbarHide', $el[0]);
    },
    show(el, animate = true) {
      const app = this;
      const $el = $(el);
      if (!$el.hasClass('toolbar-hidden')) return;
      if (animate) {
        $el.addClass('toolbar-transitioning');
        $el.transitionEnd(() => {
          $el.removeClass('toolbar-transitioning');
        });
      }
      $el.removeClass('toolbar-hidden');
      $el.trigger('toolbar:show');
      app.emit('toolbarShow', $el[0]);
    },
    initToolbarOnScroll(pageEl) {
      const app = this;
      const $pageEl = $(pageEl);
      let $toolbarEl = $pageEl.parents('.view').children('.toolbar');
      if ($toolbarEl.length === 0) {
        $toolbarEl = $pageEl.find('.toolbar');
      }
      if ($toolbarEl.length === 0) {
        $toolbarEl = $pageEl.parents('.views').children('.tabbar, .tabbar-labels');
      }
      if ($toolbarEl.length === 0) {
        return;
      }

      let previousScrollTop;
      let currentScrollTop;

      let scrollHeight;
      let offsetHeight;
      let reachEnd;
      let action;
      let toolbarHidden;
      function handleScroll(e) {
        if ($pageEl.hasClass('page-with-card-opened')) return;
        if ($pageEl.hasClass('page-previous')) return;
        const scrollContent = this;
        if (e && e.target && e.target !== scrollContent) {
          return;
        }
        currentScrollTop = scrollContent.scrollTop;
        scrollHeight = scrollContent.scrollHeight;
        offsetHeight = scrollContent.offsetHeight;
        reachEnd = currentScrollTop + offsetHeight >= scrollHeight;
        toolbarHidden = $toolbarEl.hasClass('toolbar-hidden');

        if (reachEnd) {
          if (app.params.toolbar.showOnPageScrollEnd) {
            action = 'show';
          }
        } else if (previousScrollTop > currentScrollTop) {
          if (app.params.toolbar.showOnPageScrollTop || currentScrollTop <= 44) {
            action = 'show';
          } else {
            action = 'hide';
          }
        } else if (currentScrollTop > 44) {
          action = 'hide';
        } else {
          action = 'show';
        }

        if (action === 'show' && toolbarHidden) {
          app.toolbar.show($toolbarEl);
          toolbarHidden = false;
        } else if (action === 'hide' && !toolbarHidden) {
          app.toolbar.hide($toolbarEl);
          toolbarHidden = true;
        }

        previousScrollTop = currentScrollTop;
      }
      $pageEl.on('scroll', '.page-content', handleScroll, true);
      $pageEl[0].f7ScrollToolbarHandler = handleScroll;
    },
  };
  var Toolbar$1 = {
    name: 'toolbar',
    create() {
      const app = this;
      Utils.extend(app, {
        toolbar: {
          hide: Toolbar.hide.bind(app),
          show: Toolbar.show.bind(app),
          setHighlight: Toolbar.setHighlight.bind(app),
          initToolbarOnScroll: Toolbar.initToolbarOnScroll.bind(app),
          init: Toolbar.init.bind(app),
        },
      });
    },
    params: {
      toolbar: {
        hideOnPageScroll: false,
        showOnPageScrollEnd: true,
        showOnPageScrollTop: true,
      },
    },
    on: {
      pageBeforeRemove(page) {
        if (page.$el[0].f7ScrollToolbarHandler) {
          page.$el.off('scroll', '.page-content', page.$el[0].f7ScrollToolbarHandler, true);
        }
      },
      pageBeforeIn(page) {
        const app = this;
        let $toolbarEl = page.$el.parents('.view').children('.toolbar');
        if ($toolbarEl.length === 0) {
          $toolbarEl = page.$el.parents('.views').children('.tabbar, .tabbar-labels');
        }
        if ($toolbarEl.length === 0) {
          $toolbarEl = page.$el.find('.toolbar');
        }
        if ($toolbarEl.length === 0) {
          return;
        }
        if (page.$el.hasClass('no-toolbar')) {
          app.toolbar.hide($toolbarEl);
        } else {
          app.toolbar.show($toolbarEl);
        }
      },
      pageInit(page) {
        const app = this;
        page.$el.find('.tabbar, .tabbar-labels').each((index, tabbarEl) => {
          app.toolbar.init(tabbarEl);
        });
        if (
          app.params.toolbar.hideOnPageScroll
          || page.$el.find('.hide-toolbar-on-scroll').length
          || page.$el.hasClass('hide-toolbar-on-scroll')
          || page.$el.find('.hide-bars-on-scroll').length
          || page.$el.hasClass('hide-bars-on-scroll')
        ) {
          if (
            page.$el.find('.keep-toolbar-on-scroll').length
            || page.$el.hasClass('keep-toolbar-on-scroll')
            || page.$el.find('.keep-bars-on-scroll').length
            || page.$el.hasClass('keep-bars-on-scroll')
          ) {
            return;
          }
          app.toolbar.initToolbarOnScroll(page.el);
        }
      },
      init() {
        const app = this;
        app.root.find('.tabbar, .tabbar-labels').each((index, tabbarEl) => {
          app.toolbar.init(tabbarEl);
        });
      },
    },
    vnode: {
      tabbar: {
        insert(vnode) {
          const app = this;
          app.toolbar.init(vnode.elm);
        },
      },
    },
  };

  var Subnavbar = {
    name: 'subnavbar',
    on: {
      pageInit(page) {
        if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find('.subnavbar').length) {
          page.$el.addClass('page-with-subnavbar');
        }
        if (page.$el.find('.subnavbar').length) {
          page.$el.addClass('page-with-subnavbar');
        }
      },
    },
  };

  class TouchRipple {
    constructor($el, x, y) {
      const ripple = this;
      if (!$el) return undefined;
      const box = $el[0].getBoundingClientRect();
      const center = {
        x: x - box.left,
        y: y - box.top,
      };
      const width = box.width;
      const height = box.height;
      const diameter = Math.max((((height ** 2) + (width ** 2)) ** 0.5), 48);

      ripple.$rippleWaveEl = $(`<div class="ripple-wave" style="width: ${diameter}px; height: ${diameter}px; margin-top:-${diameter / 2}px; margin-left:-${diameter / 2}px; left:${center.x}px; top:${center.y}px;"></div>`);

      $el.prepend(ripple.$rippleWaveEl);

      ripple.rippleTransform = `translate3d(${-center.x + (width / 2)}px, ${-center.y + (height / 2)}px, 0) scale(1)`;

      Utils.nextFrame(() => {
        if (!ripple || !ripple.$rippleWaveEl) return;
        ripple.$rippleWaveEl.transform(ripple.rippleTransform);
      });

      return ripple;
    }

    destroy() {
      let ripple = this;
      if (ripple.$rippleWaveEl) {
        ripple.$rippleWaveEl.remove();
      }
      Object.keys(ripple).forEach((key) => {
        ripple[key] = null;
        delete ripple[key];
      });
      ripple = null;
    }

    remove() {
      const ripple = this;
      if (ripple.removing) return;
      const $rippleWaveEl = this.$rippleWaveEl;
      const rippleTransform = this.rippleTransform;
      let removeTimeout = Utils.nextTick(() => {
        ripple.destroy();
      }, 400);
      ripple.removing = true;
      $rippleWaveEl
        .addClass('ripple-wave-fill')
        .transform(rippleTransform.replace('scale(1)', 'scale(1.01)'))
        .transitionEnd(() => {
          clearTimeout(removeTimeout);
          Utils.nextFrame(() => {
            $rippleWaveEl
              .addClass('ripple-wave-out')
              .transform(rippleTransform.replace('scale(1)', 'scale(1.01)'));

            removeTimeout = Utils.nextTick(() => {
              ripple.destroy();
            }, 700);

            $rippleWaveEl.transitionEnd(() => {
              clearTimeout(removeTimeout);
              ripple.destroy();
            });
          });
        });
    }
  }

  var TouchRipple$1 = {
    name: 'touch-ripple',
    static: {
      TouchRipple,
    },
    create() {
      const app = this;
      app.touchRipple = {
        create(...args) {
          return new TouchRipple(...args);
        },
      };
    },
  };

  const openedModals = [];
  const dialogsQueue = [];
  function clearDialogsQueue() {
    if (dialogsQueue.length === 0) return;
    const dialog = dialogsQueue.shift();
    dialog.open();
  }
  class Modal extends Framework7Class {
    constructor(app, params) {
      super(params, [app]);

      const modal = this;

      const defaults = {};

      // Extend defaults with modules params
      modal.useModulesParams(defaults);

      modal.params = Utils.extend(defaults, params);
      modal.opened = false;

      // Install Modules
      modal.useModules();

      return this;
    }

    onOpen() {
      const modal = this;
      modal.opened = true;
      openedModals.push(modal);
      $('html').addClass(`with-modal-${modal.type.toLowerCase()}`);
      modal.$el.trigger(`modal:open ${modal.type.toLowerCase()}:open`);
      modal.emit(`local::open modalOpen ${modal.type}Open`, modal);
    }

    onOpened() {
      const modal = this;
      modal.$el.trigger(`modal:opened ${modal.type.toLowerCase()}:opened`);
      modal.emit(`local::opened modalOpened ${modal.type}Opened`, modal);
    }

    onClose() {
      const modal = this;
      modal.opened = false;
      if (!modal.type || !modal.$el) return;
      openedModals.splice(openedModals.indexOf(modal), 1);
      $('html').removeClass(`with-modal-${modal.type.toLowerCase()}`);
      modal.$el.trigger(`modal:close ${modal.type.toLowerCase()}:close`);
      modal.emit(`local::close modalClose ${modal.type}Close`, modal);
    }

    onClosed() {
      const modal = this;
      if (!modal.type || !modal.$el) return;
      modal.$el.removeClass('modal-out');
      modal.$el.hide();
      modal.$el.trigger(`modal:closed ${modal.type.toLowerCase()}:closed`);
      modal.emit(`local::closed modalClosed ${modal.type}Closed`, modal);
    }

    open(animateModal) {
      const modal = this;
      const app = modal.app;
      const $el = modal.$el;
      const $backdropEl = modal.$backdropEl;
      const type = modal.type;
      let animate = true;
      if (typeof animateModal !== 'undefined') animate = animateModal;
      else if (typeof modal.params.animate !== 'undefined') {
        animate = modal.params.animate;
      }

      if (!$el || $el.hasClass('modal-in')) {
        return modal;
      }

      if (type === 'dialog' && app.params.modal.queueDialogs) {
        let pushToQueue;
        if ($('.dialog.modal-in').length > 0) {
          pushToQueue = true;
        } else if (openedModals.length > 0) {
          openedModals.forEach((openedModal) => {
            if (openedModal.type === 'dialog') pushToQueue = true;
          });
        }
        if (pushToQueue) {
          dialogsQueue.push(modal);
          return modal;
        }
      }

      const $modalParentEl = $el.parent();
      const wasInDom = $el.parents(doc).length > 0;
      if (app.params.modal.moveToRoot && !$modalParentEl.is(app.root)) {
        app.root.append($el);
        modal.once(`${type}Closed`, () => {
          if (wasInDom) {
            $modalParentEl.append($el);
          } else {
            $el.remove();
          }
        });
      }
      // Show Modal
      $el.show();

      /* eslint no-underscore-dangle: ["error", { "allow": ["_clientLeft"] }] */
      modal._clientLeft = $el[0].clientLeft;

      // Modal
      function transitionEnd() {
        if ($el.hasClass('modal-out')) {
          modal.onClosed();
        } else if ($el.hasClass('modal-in')) {
          modal.onOpened();
        }
      }
      if (animate) {
        if ($backdropEl) {
          $backdropEl.removeClass('not-animated');
          $backdropEl.addClass('backdrop-in');
        }
        $el
          .animationEnd(() => {
            transitionEnd();
          });
        $el
          .transitionEnd(() => {
            transitionEnd();
          });
        $el
          .removeClass('modal-out not-animated')
          .addClass('modal-in');
        modal.onOpen();
      } else {
        if ($backdropEl) {
          $backdropEl.addClass('backdrop-in not-animated');
        }
        $el.removeClass('modal-out').addClass('modal-in not-animated');
        modal.onOpen();
        modal.onOpened();
      }

      return modal;
    }

    close(animateModal) {
      const modal = this;
      const $el = modal.$el;
      const $backdropEl = modal.$backdropEl;

      let animate = true;
      if (typeof animateModal !== 'undefined') animate = animateModal;
      else if (typeof modal.params.animate !== 'undefined') {
        animate = modal.params.animate;
      }

      if (!$el || !$el.hasClass('modal-in')) {
        if (dialogsQueue.indexOf(modal) >= 0) {
          dialogsQueue.splice(dialogsQueue.indexOf(modal), 1);
        }
        return modal;
      }

      // backdrop
      if ($backdropEl) {
        let needToHideBackdrop = true;
        if (modal.type === 'popup') {
          modal.$el.prevAll('.popup.modal-in').each((index, popupEl) => {
            const popupInstance = popupEl.f7Modal;
            if (!popupInstance) return;
            if (
              popupInstance.params.closeByBackdropClick
              && popupInstance.params.backdrop
              && popupInstance.backdropEl === modal.backdropEl
            ) {
              needToHideBackdrop = false;
            }
          });
        }
        if (needToHideBackdrop) {
          $backdropEl[animate ? 'removeClass' : 'addClass']('not-animated');
          $backdropEl.removeClass('backdrop-in');
        }
      }

      // Modal
      $el[animate ? 'removeClass' : 'addClass']('not-animated');
      function transitionEnd() {
        if ($el.hasClass('modal-out')) {
          modal.onClosed();
        } else if ($el.hasClass('modal-in')) {
          modal.onOpened();
        }
      }
      if (animate) {
        $el
          .animationEnd(() => {
            transitionEnd();
          });
        $el
          .transitionEnd(() => {
            transitionEnd();
          });
        $el
          .removeClass('modal-in')
          .addClass('modal-out');
        // Emit close
        modal.onClose();
      } else {
        $el
          .addClass('not-animated')
          .removeClass('modal-in')
          .addClass('modal-out');
        // Emit close
        modal.onClose();
        modal.onClosed();
      }

      if (modal.type === 'dialog') {
        clearDialogsQueue();
      }

      return modal;
    }

    destroy() {
      const modal = this;
      if (modal.destroyed) return;
      modal.emit(`local::beforeDestroy modalBeforeDestroy ${modal.type}BeforeDestroy`, modal);
      if (modal.$el) {
        modal.$el.trigger(`modal:beforedestroy ${modal.type.toLowerCase()}:beforedestroy`);
        if (modal.$el.length && modal.$el[0].f7Modal) {
          delete modal.$el[0].f7Modal;
        }
      }
      Utils.deleteProps(modal);
      modal.destroyed = true;
    }
  }

  class CustomModal extends Modal {
    constructor(app, params) {
      const extendedParams = Utils.extend({
        backdrop: true,
        closeByBackdropClick: true,
        on: {},
      }, params);

      // Extends with open/close Modal methods;
      super(app, extendedParams);

      const customModal = this;

      customModal.params = extendedParams;

      // Find Element
      let $el;
      if (!customModal.params.el) {
        $el = $(customModal.params.content);
      } else {
        $el = $(customModal.params.el);
      }

      if ($el && $el.length > 0 && $el[0].f7Modal) {
        return $el[0].f7Modal;
      }

      if ($el.length === 0) {
        return customModal.destroy();
      }
      let $backdropEl;
      if (customModal.params.backdrop) {
        $backdropEl = app.root.children('.custom-modal-backdrop');
        if ($backdropEl.length === 0) {
          $backdropEl = $('<div class="custom-modal-backdrop"></div>');
          app.root.append($backdropEl);
        }
      }

      function handleClick(e) {
        if (!customModal || customModal.destroyed) return;
        if ($backdropEl && e.target === $backdropEl[0]) {
          customModal.close();
        }
      }

      customModal.on('customModalOpened', () => {
        if (customModal.params.closeByBackdropClick && customModal.params.backdrop) {
          app.on('click', handleClick);
        }
      });
      customModal.on('customModalClose', () => {
        if (customModal.params.closeByBackdropClick && customModal.params.backdrop) {
          app.off('click', handleClick);
        }
      });

      Utils.extend(customModal, {
        app,
        $el,
        el: $el[0],
        $backdropEl,
        backdropEl: $backdropEl && $backdropEl[0],
        type: 'customModal',
      });

      $el[0].f7Modal = customModal;

      return customModal;
    }
  }

  var Modal$1 = {
    name: 'modal',
    static: {
      Modal,
      CustomModal,
    },
    create() {
      const app = this;
      app.customModal = {
        create(params) {
          return new CustomModal(app, params);
        },
      };
    },
    params: {
      modal: {
        moveToRoot: true,
        queueDialogs: true,
      },
    },
  };

  /**
   * Framework7 5.7.13
   * Full featured mobile HTML framework for building iOS & Android apps
   * https://framework7.io/
   *
   * Copyright 2014-2020 Vladimir Kharlampidi
   *
   * Released under the MIT License
   *
   * Released on: October 9, 2020
   */

  // Install Core Modules & Components

  Framework7.use([
    DeviceModule,
    SupportModule,
    UtilsModule,
    ResizeModule,
    RequestModule,
    TouchModule,
    ClicksModule,
    RouterModule,
    HistoryModule,
    ServiceWorkerModule,
    Statusbar$1,
    View$1,
    Navbar$1,
    Toolbar$1,
    Subnavbar,
    TouchRipple$1,
    Modal$1,
    ]);

  /* eslint no-param-reassign: "off" */

  const CardExpandable = {
    open(cardEl = '.card-expandable', animate = true) {
      const app = this;

      const $cardEl = $(cardEl).eq(0);
      if (!$cardEl || !$cardEl.length) return;
      if ($cardEl.hasClass('card-opened') || $cardEl.hasClass('card-opening') || $cardEl.hasClass('card-closing')) return;

      const $pageEl = $cardEl.parents('.page').eq(0);
      if (!$pageEl.length) return;

      if ($pageEl.find('.card-opened').length) {
        return;
      }

      let prevented;

      function prevent() {
        prevented = true;
      }

      $cardEl.trigger('card:beforeopen', { prevent });
      app.emit('cardBeforeOpen', $cardEl[0], prevent);

      if (prevented) return;

      const cardParams = Object.assign({ animate }, app.params.card, $cardEl.dataset());

      const $pageContentEl = $cardEl.parents('.page-content');

      let $backdropEl;
      if ($cardEl.attr('data-backdrop-el')) {
        $backdropEl = $($cardEl.attr('data-backdrop-el'));
      }
      if (!$backdropEl && cardParams.backdrop) {
        $backdropEl = $pageContentEl.find('.card-backdrop');
        if (!$backdropEl.length) {
          $backdropEl = $('<div class="card-backdrop"></div>');
          $pageContentEl.append($backdropEl);
        }
      }

      let $navbarEl;
      let $toolbarEl;
      if (cardParams.hideNavbarOnOpen) {
        $navbarEl = $pageEl.children('.navbar');
        if (!$navbarEl.length) {
          if ($pageEl[0].f7Page) $navbarEl = $pageEl[0].f7Page.$navbarEl;
        }
      }
      if (cardParams.hideToolbarOnOpen) {
        $toolbarEl = $pageEl.children('.toolbar');
        if (!$toolbarEl.length) {
          $toolbarEl = $pageEl.parents('.view').children('.toolbar');
        }
        if (!$toolbarEl.length) {
          $toolbarEl = $pageEl.parents('.views').children('.toolbar');
        }
      }

      const currTransform = $cardEl.css('transform');
      let hasTransform;
      if (currTransform && currTransform.match(/[2-9]/)) {
        hasTransform = true;
      }
      const $cardContentEl = $cardEl.children('.card-content');

      const $cardSizeEl = $(document.createElement('div')).addClass('card-expandable-size');
      $cardEl.append($cardSizeEl);

      let cardWidth = $cardEl[0].offsetWidth;
      let cardHeight = $cardEl[0].offsetHeight;
      let pageWidth = $pageEl[0].offsetWidth;
      let pageHeight = $pageEl[0].offsetHeight;

      let maxWidth = $cardSizeEl[0].offsetWidth || pageWidth;
      let maxHeight = $cardSizeEl[0].offsetHeight || pageHeight;

      let statusbarHeight;
      if ($navbarEl && !cardParams.hideStatusbarOnOpen && maxHeight === pageHeight) {
        statusbarHeight = parseInt($navbarEl.css('--f7-safe-area-top'), 10);
        if (Number.isNaN(statusbarHeight)) statusbarHeight = 0;
      }
      if (statusbarHeight) {
        maxHeight -= statusbarHeight;
      }

      let scaleX = maxWidth / cardWidth;
      let scaleY = maxHeight / cardHeight;

      let offset = $cardEl.offset();
      let pageOffset = $pageEl.offset();
      if (statusbarHeight) {
        pageOffset.top += statusbarHeight / 2;
      }
      offset.left -= pageOffset.left;

      let cardLeftOffset;
      let cardTopOffset;

      if (hasTransform) {
        const transformValues = currTransform
          .replace(/matrix\(|\)/g, '')
          .split(',')
          .map(el => el.trim());
        if (transformValues && transformValues.length > 1) {
          const scale = parseFloat(transformValues[0]);
          cardLeftOffset = offset.left - cardWidth * (1 - scale) / 2;
          cardTopOffset = offset.top - pageOffset.top - cardHeight * (1 - scale) / 2;
          if (app.rtl) cardLeftOffset -= $cardEl[0].scrollLeft;
        } else {
          cardLeftOffset = $cardEl[0].offsetLeft;
          cardTopOffset = $cardEl[0].offsetTop - ($pageContentEl.length ? $pageContentEl[0].scrollTop : 0);
        }
      } else {
        cardLeftOffset = offset.left;
        cardTopOffset = offset.top - pageOffset.top;
        if (app.rtl) cardLeftOffset -= $cardEl[0].scrollLeft;
      }

      cardLeftOffset -= (pageWidth - maxWidth) / 2;
      cardTopOffset -= (pageHeight - maxHeight) / 2;

      let cardRightOffset = maxWidth - cardWidth - cardLeftOffset;
      if (app.rtl) {
        [cardLeftOffset, cardRightOffset] = [cardRightOffset, cardLeftOffset];
      }
      let cardBottomOffset = maxHeight - cardHeight - cardTopOffset;
      let translateX = (cardRightOffset - cardLeftOffset) / 2;
      let translateY = (cardBottomOffset - cardTopOffset) / 2;
      if (cardParams.hideNavbarOnOpen && $navbarEl && $navbarEl.length) {
        if ($navbarEl.closest('.navbar-hidden').length) {
          // Was hidden
          $cardEl[0].f7KeepNavbarOnClose = true;
        } else {
          delete $cardEl[0].f7KeepNavbarOnClose;
          app.navbar.hide($navbarEl, cardParams.animate, cardParams.hideStatusbarOnOpen);
        }
      }
      if (cardParams.hideToolbarOnOpen && $toolbarEl && $toolbarEl.length) {
        if ($toolbarEl.closest('.toolbar-hidden').length) {
          // Was hidden
          $cardEl[0].f7KeepToolbarOnClose = true;
        } else {
          delete $cardEl[0].f7KeepToolbarOnClose;
          app.toolbar.hide($toolbarEl, cardParams.animate);
        }
      }
      if ($backdropEl) {
        $backdropEl.removeClass('card-backdrop-out').addClass('card-backdrop-in');
      }
      $cardEl.removeClass('card-transitioning');
      if (cardParams.animate) {
        $cardEl.addClass('card-opening');
      }
      $cardEl.trigger('card:open');
      app.emit('cardOpen', $cardEl[0]);
      function transitionEnd() {
        $pageEl.addClass('page-with-card-opened');
        if (app.device.ios && $pageContentEl.length) {
          $pageContentEl.css('height', `${$pageContentEl[0].offsetHeight + 1}px`);
          setTimeout(() => {
            $pageContentEl.css('height', '');
          });
        }
        $cardEl.addClass('card-opened');
        $cardEl.removeClass('card-opening');
        $cardEl.trigger('card:opened');
        app.emit('cardOpened', $cardEl[0], $pageEl[0]);
      }
      $cardContentEl
        .css({
          width: `${maxWidth}px`,
          height: `${maxHeight}px`,
        })
        .transform(`translate3d(${app.rtl ? (cardLeftOffset + translateX) : (-cardLeftOffset - translateX)}px, 0px, 0) scale(${1 / scaleX}, ${1 / scaleY})`);

      $cardEl
        .transform(`translate3d(${app.rtl ? -translateX : translateX}px, ${translateY}px, 0) scale(${scaleX}, ${scaleY})`);
      if (cardParams.animate) {
        $cardEl.transitionEnd(() => {
          transitionEnd();
        });
      } else {
        transitionEnd();
      }

      function onResize() {
        $cardEl.removeClass('card-transitioning');
        cardWidth = $cardEl[0].offsetWidth;
        cardHeight = $cardEl[0].offsetHeight;
        pageWidth = $pageEl[0].offsetWidth;
        pageHeight = $pageEl[0].offsetHeight;
        maxWidth = $cardSizeEl[0].offsetWidth || pageWidth;
        maxHeight = $cardSizeEl[0].offsetHeight || pageHeight;

        statusbarHeight = 0;
        if ($navbarEl && !cardParams.hideStatusbarOnOpen && maxHeight === pageHeight) {
          statusbarHeight = parseInt($navbarEl.css('--f7-safe-area-top'), 10);
          if (Number.isNaN(statusbarHeight)) statusbarHeight = 0;
        }
        if (statusbarHeight) {
          maxHeight -= statusbarHeight;
        }


        scaleX = maxWidth / cardWidth;
        scaleY = maxHeight / cardHeight;

        $cardEl.transform('translate3d(0px, 0px, 0) scale(1)');
        offset = $cardEl.offset();
        pageOffset = $pageEl.offset();
        if (statusbarHeight) {
          pageOffset.top += statusbarHeight / 2;
        }
        offset.left -= pageOffset.left;
        offset.top -= pageOffset.top;

        cardLeftOffset = offset.left - (pageWidth - maxWidth) / 2;
        if (app.rtl) cardLeftOffset -= $cardEl[0].scrollLeft;
        cardTopOffset = offset.top - (pageHeight - maxHeight) / 2;

        cardRightOffset = maxWidth - cardWidth - cardLeftOffset;
        cardBottomOffset = maxHeight - cardHeight - cardTopOffset;
        if (app.rtl) {
          [cardLeftOffset, cardRightOffset] = [cardRightOffset, cardLeftOffset];
        }
        translateX = (cardRightOffset - cardLeftOffset) / 2;
        translateY = (cardBottomOffset - cardTopOffset) / 2;

        $cardEl.transform(`translate3d(${app.rtl ? -translateX : translateX}px, ${translateY}px, 0) scale(${scaleX}, ${scaleY})`);
        $cardContentEl
          .css({
            width: `${maxWidth}px`,
            height: `${maxHeight}px`,
          })
          .transform(`translate3d(${app.rtl ? (cardLeftOffset + translateX) : (-cardLeftOffset - translateX)}px, 0px, 0) scale(${1 / scaleX}, ${1 / scaleY})`);
      }

      let cardScrollTop;
      let isTouched;
      let isMoved;
      let touchStartX;
      let touchStartY;
      let touchEndX;
      let touchEndY;
      let isScrolling;
      let progress;
      let isV;
      let isH;
      let $cardScrollableEl;
      function onTouchStart(e) {
        if (!$(e.target).closest($cardEl).length) return;
        if (!$cardEl.hasClass('card-opened')) return;
        $cardScrollableEl = $cardEl.find(cardParams.scrollableEl);

        if ($cardScrollableEl[0]
          && $cardScrollableEl[0] !== $cardContentEl[0]
          && !$cardScrollableEl[0].contains(e.target)
        ) {
          cardScrollTop = 0;
        } else {
          cardScrollTop = $cardScrollableEl.scrollTop();
        }
        isTouched = true;
        touchStartX = e.targetTouches[0].pageX;
        touchStartY = e.targetTouches[0].pageY;
        isScrolling = undefined;
        isV = false;
        isH = false;
      }
      function onTouchMove(e) {
        if (!isTouched) return;
        touchEndX = e.targetTouches[0].pageX;
        touchEndY = e.targetTouches[0].pageY;
        if (typeof isScrolling === 'undefined') {
          isScrolling = !!(isScrolling || Math.abs(touchEndY - touchStartY) > Math.abs(touchEndX - touchStartX));
        }
        if (!isH && !isV) {
          if (!isScrolling && e.targetTouches[0].clientX <= 50) {
            isH = true;
          } else {
            isV = true;
          }
        }

        if (!(isH || isV) || (isV && cardScrollTop !== 0)) {
          isTouched = true;
          isMoved = true;
          return;
        }
        if (!isMoved) {
          $cardEl.removeClass('card-transitioning');
        }

        isMoved = true;
        progress = isV ? Math.max((touchEndY - touchStartY) / 150, 0) : Math.max((touchEndX - touchStartX) / (cardWidth / 2), 0);
        if ((progress > 0 && isV) || isH) {
          if (isV && app.device.ios && $cardScrollableEl[0] === $cardContentEl[0]) {
            $cardScrollableEl.css('-webkit-overflow-scrolling', 'auto');
            $cardScrollableEl.scrollTop(0);
          }
          e.preventDefault();
        }

        if (progress > 1) progress **= 0.3;
        if (progress > (isV ? 1.3 : 1.1)) {
          isTouched = false;
          isMoved = false;
          app.card.close($cardEl);
        } else {
          $cardEl.transform(`translate3d(${app.rtl ? -translateX : translateX}px, ${translateY}px, 0) scale(${scaleX * (1 - progress * 0.2)}, ${scaleY * (1 - progress * 0.2)})`);
        }
      }
      function onTouchEnd() {
        if (!isTouched || !isMoved) return;
        isTouched = false;
        isMoved = false;
        if (app.device.ios) {
          $cardScrollableEl.css('-webkit-overflow-scrolling', '');
        }
        if (progress >= 0.8) {
          app.card.close($cardEl);
        } else {
          $cardEl
            .addClass('card-transitioning')
            .transform(`translate3d(${app.rtl ? -translateX : translateX}px, ${translateY}px, 0) scale(${scaleX}, ${scaleY})`);
        }
      }

      $cardEl[0].detachEventHandlers = function detachEventHandlers() {
        app.off('resize', onResize);
        if (Support.touch && cardParams.swipeToClose) {
          app.off('touchstart:passive', onTouchStart);
          app.off('touchmove:active', onTouchMove);
          app.off('touchend:passive', onTouchEnd);
        }
      };

      app.on('resize', onResize);
      if (Support.touch && cardParams.swipeToClose) {
        app.on('touchstart:passive', onTouchStart);
        app.on('touchmove:active', onTouchMove);
        app.on('touchend:passive', onTouchEnd);
      }
    },
    close(cardEl = '.card-expandable.card-opened', animate = true) {
      const app = this;
      const $cardEl = $(cardEl).eq(0);
      if (!$cardEl || !$cardEl.length) return;
      if (!$cardEl.hasClass('card-opened') || $cardEl.hasClass('card-opening') || $cardEl.hasClass('card-closing')) return;

      const $cardContentEl = $cardEl.children('.card-content');
      const $pageContentEl = $cardEl.parents('.page-content');

      const $pageEl = $cardEl.parents('.page').eq(0);
      if (!$pageEl.length) return;

      const cardParams = Object.assign({ animate }, app.params.card, $cardEl.dataset());
      const $cardScrollableEl = $cardEl.find(cardParams.scrollableEl);

      let $navbarEl;
      let $toolbarEl;

      let $backdropEl;
      if ($cardEl.attr('data-backdrop-el')) {
        $backdropEl = $($cardEl.attr('data-backdrop-el'));
      }
      if (cardParams.backdrop) {
        $backdropEl = $cardEl.parents('.page-content').find('.card-backdrop');
      }

      if (cardParams.hideNavbarOnOpen) {
        $navbarEl = $pageEl.children('.navbar');
        if (!$navbarEl.length) {
          if ($pageEl[0].f7Page) $navbarEl = $pageEl[0].f7Page.$navbarEl;
        }
        if ($navbarEl && $navbarEl.length && !$cardEl[0].f7KeepNavbarOnClose) {
          app.navbar.show($navbarEl, cardParams.animate);
        }
      }
      if (cardParams.hideToolbarOnOpen) {
        $toolbarEl = $pageEl.children('.toolbar');
        if (!$toolbarEl.length) {
          $toolbarEl = $pageEl.parents('.view').children('.toolbar');
        }
        if (!$toolbarEl.length) {
          $toolbarEl = $pageEl.parents('.views').children('.toolbar');
        }
        if ($toolbarEl && $toolbarEl.length && !$cardEl[0].f7KeepToolbarOnClose) {
          app.toolbar.show($toolbarEl, cardParams.animate);
        }
      }

      $pageEl.removeClass('page-with-card-opened');

      if (app.device.ios && $pageContentEl.length) {
        $pageContentEl.css('height', `${$pageContentEl[0].offsetHeight + 1}px`);
        setTimeout(() => {
          $pageContentEl.css('height', '');
        });
      }

      if ($backdropEl && $backdropEl.length) {
        $backdropEl.removeClass('card-backdrop-in').addClass('card-backdrop-out');
      }

      $cardEl.removeClass('card-opened card-transitioning');
      if (cardParams.animate) {
        $cardEl.addClass('card-closing');
      } else {
        $cardEl.addClass('card-no-transition');
      }
      $cardEl.transform('');
      $cardEl.trigger('card:close');
      app.emit('cardClose', $cardEl[0], $pageEl[0]);

      const animateWidth = $cardEl.hasClass('card-expandable-animate-width');

      function transitionEnd() {
        if (!animateWidth) {
          $cardContentEl
            .css({
              width: '',
              height: '',
            });
        }
        if ($backdropEl && $backdropEl.length) {
          $backdropEl.removeClass('card-backdrop-in card-backdrop-out');
        }
        $cardEl.removeClass('card-closing card-no-transition');
        $cardEl.trigger('card:closed');
        $cardEl.find('.card-expandable-size').remove();
        app.emit('cardClosed', $cardEl[0], $pageEl[0]);
      }
      if (animateWidth) {
        $cardContentEl
          .css({
            width: '',
            height: '',
          });
      }

      $cardContentEl
        .transform('')
        .scrollTop(0, animate ? 300 : 0);
      if ($cardScrollableEl.length && $cardScrollableEl[0] !== $cardContentEl[0]) {
        $cardScrollableEl.scrollTop(0, animate ? 300 : 0);
      }
      if (animate) {
        $cardContentEl.transitionEnd(() => {
          transitionEnd();
        });
      } else {
        transitionEnd();
      }

      if ($cardEl[0].detachEventHandlers) {
        $cardEl[0].detachEventHandlers();
        delete $cardEl[0].detachEventHandlers;
      }
    },
    toggle(cardEl = '.card-expandable', animate) {
      const app = this;
      const $cardEl = $(cardEl).eq(0);
      if (!$cardEl.length) return;
      if ($cardEl.hasClass('card-opened')) {
        app.card.close($cardEl, animate);
      } else {
        app.card.open($cardEl, animate);
      }
    },
  };

  var Card = {
    name: 'card',
    params: {
      card: {
        hideNavbarOnOpen: true,
        hideStatusbarOnOpen: true,
        hideToolbarOnOpen: true,
        scrollableEl: '.card-content',
        swipeToClose: true,
        closeByBackdropClick: true,
        backdrop: true,
      },
    },
    create() {
      const app = this;
      Utils.extend(app, {
        card: {
          open: CardExpandable.open.bind(app),
          close: CardExpandable.close.bind(app),
          toggle: CardExpandable.toggle.bind(app),
        },
      });
    },
    on: {
      pageBeforeIn(page) {
        const app = this;
        if (app.params.card.hideNavbarOnOpen && page.navbarEl && page.$el.find('.card-opened.card-expandable').length) {
          app.navbar.hide(page.navbarEl, true, app.params.card.hideStatusbarOnOpen);
        }

        if (app.params.card.hideToolbarOnOpen && page.$el.find('.card-opened.card-expandable').length) {
          let $toolbarEl = page.$el.children('.toolbar');
          if (!$toolbarEl.length) {
            $toolbarEl = page.$el.parents('.view').children('.toolbar');
          }
          if (!$toolbarEl.length) {
            $toolbarEl = page.$el.parents('.views').children('.toolbar');
          }
          if ($toolbarEl && $toolbarEl.length) {
            app.toolbar.hide($toolbarEl);
          }
        }
      },
    },
    clicks: {
      '.card-close': function closeCard($clickedEl, data) {
        const app = this;
        app.card.close(data.card, data.animate);
      },
      '.card-open': function closeCard($clickedEl, data) {
        const app = this;
        app.card.open(data.card, data.animate);
      },
      '.card-expandable': function toggleExpandableCard($clickedEl, data, e) {
        const app = this;
        if ($clickedEl.hasClass('card-opened') || $clickedEl.hasClass('card-opening') || $clickedEl.hasClass('card-closing')) return;
        if ($(e.target).closest('.card-prevent-open, .card-close').length) return;
        app.card.open($clickedEl);
      },
      '.card-backdrop-in': function onBackdropClick() {
        const app = this;
        let needToClose = false;
        if (app.params.card.closeByBackdropClick) needToClose = true;
        const $openedCardEl = $('.card-opened');
        if (!$openedCardEl.length) return;
        if ($openedCardEl.attr('data-close-by-backdrop-click') === 'true') {
          needToClose = true;
        } else if ($openedCardEl.attr('data-close-by-backdrop-click') === 'false') {
          needToClose = false;
        }
        if (needToClose) app.card.close($openedCardEl);
      },
    },
  };

  function updateSize () {
    const swiper = this;
    let width;
    let height;
    const $el = swiper.$el;
    if (typeof swiper.params.width !== 'undefined') {
      width = swiper.params.width;
    } else {
      width = $el[0].clientWidth;
    }
    if (typeof swiper.params.height !== 'undefined') {
      height = swiper.params.height;
    } else {
      height = $el[0].clientHeight;
    }
    if ((width === 0 && swiper.isHorizontal()) || (height === 0 && swiper.isVertical())) {
      return;
    }

    // Subtract paddings
    width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);
    height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);

    Utils.extend(swiper, {
      width,
      height,
      size: swiper.isHorizontal() ? width : height,
    });
  }

  function updateSlides () {
    const swiper = this;
    const params = swiper.params;

    const {
      $wrapperEl, size: swiperSize, rtlTranslate: rtl, wrongRTL,
    } = swiper;
    const isVirtual = swiper.virtual && params.virtual.enabled;
    const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
    const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);
    const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
    let snapGrid = [];
    const slidesGrid = [];
    const slidesSizesGrid = [];

    function slidesForMargin(slideIndex) {
      if (!params.cssMode) return true;
      if (slideIndex === slides.length - 1) {
        return false;
      }
      return true;
    }

    let offsetBefore = params.slidesOffsetBefore;
    if (typeof offsetBefore === 'function') {
      offsetBefore = params.slidesOffsetBefore.call(swiper);
    }

    let offsetAfter = params.slidesOffsetAfter;
    if (typeof offsetAfter === 'function') {
      offsetAfter = params.slidesOffsetAfter.call(swiper);
    }

    const previousSnapGridLength = swiper.snapGrid.length;
    const previousSlidesGridLength = swiper.snapGrid.length;

    let spaceBetween = params.spaceBetween;
    let slidePosition = -offsetBefore;
    let prevSlideSize = 0;
    let index = 0;
    if (typeof swiperSize === 'undefined') {
      return;
    }
    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
      spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;
    }

    swiper.virtualSize = -spaceBetween;

    // reset margins
    if (rtl) slides.css({ marginLeft: '', marginTop: '' });
    else slides.css({ marginRight: '', marginBottom: '' });

    let slidesNumberEvenToRows;
    if (params.slidesPerColumn > 1) {
      if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
        slidesNumberEvenToRows = slidesLength;
      } else {
        slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
      }
      if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
        slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
      }
    }

    // Calc slides
    let slideSize;
    const slidesPerColumn = params.slidesPerColumn;
    const slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
    const numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);
    for (let i = 0; i < slidesLength; i += 1) {
      slideSize = 0;
      const slide = slides.eq(i);
      if (params.slidesPerColumn > 1) {
        // Set slides order
        let newSlideOrderIndex;
        let column;
        let row;
        if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {
          const groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
          const slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
          const columnsInGroup = groupIndex === 0
            ? params.slidesPerGroup
            : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
          row = Math.floor(slideIndexInGroup / columnsInGroup);
          column = (slideIndexInGroup - row * columnsInGroup) + groupIndex * params.slidesPerGroup;

          newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);
          slide
            .css({
              '-webkit-box-ordinal-group': newSlideOrderIndex,
              '-moz-box-ordinal-group': newSlideOrderIndex,
              '-ms-flex-order': newSlideOrderIndex,
              '-webkit-order': newSlideOrderIndex,
              order: newSlideOrderIndex,
            });
        } else if (params.slidesPerColumnFill === 'column') {
          column = Math.floor(i / slidesPerColumn);
          row = i - (column * slidesPerColumn);
          if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {
            row += 1;
            if (row >= slidesPerColumn) {
              row = 0;
              column += 1;
            }
          }
        } else {
          row = Math.floor(i / slidesPerRow);
          column = i - (row * slidesPerRow);
        }
        slide.css(
          `margin-${swiper.isHorizontal() ? 'top' : 'left'}`,
          (row !== 0 && params.spaceBetween) && (`${params.spaceBetween}px`)
        );
      }
      if (slide.css('display') === 'none') continue; // eslint-disable-line

      if (params.slidesPerView === 'auto') {
        const slideStyles = win.getComputedStyle(slide[0], null);
        const currentTransform = slide[0].style.transform;
        const currentWebKitTransform = slide[0].style.webkitTransform;
        if (currentTransform) {
          slide[0].style.transform = 'none';
        }
        if (currentWebKitTransform) {
          slide[0].style.webkitTransform = 'none';
        }
        if (params.roundLengths) {
          slideSize = swiper.isHorizontal()
            ? slide.outerWidth(true)
            : slide.outerHeight(true);
        } else {
          // eslint-disable-next-line
          if (swiper.isHorizontal()) {
            const width = parseFloat(slideStyles.getPropertyValue('width'));
            const paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));
            const paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));
            const marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));
            const marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));
            const boxSizing = slideStyles.getPropertyValue('box-sizing');
            if (boxSizing && boxSizing === 'border-box') {
              slideSize = width + marginLeft + marginRight;
            } else {
              slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;
            }
          } else {
            const height = parseFloat(slideStyles.getPropertyValue('height'));
            const paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));
            const paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));
            const marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));
            const marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));
            const boxSizing = slideStyles.getPropertyValue('box-sizing');
            if (boxSizing && boxSizing === 'border-box') {
              slideSize = height + marginTop + marginBottom;
            } else {
              slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;
            }
          }
        }
        if (currentTransform) {
          slide[0].style.transform = currentTransform;
        }
        if (currentWebKitTransform) {
          slide[0].style.webkitTransform = currentWebKitTransform;
        }
        if (params.roundLengths) slideSize = Math.floor(slideSize);
      } else {
        slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;
        if (params.roundLengths) slideSize = Math.floor(slideSize);

        if (slides[i]) {
          if (swiper.isHorizontal()) {
            slides[i].style.width = `${slideSize}px`;
          } else {
            slides[i].style.height = `${slideSize}px`;
          }
        }
      }
      if (slides[i]) {
        slides[i].swiperSlideSize = slideSize;
      }
      slidesSizesGrid.push(slideSize);


      if (params.centeredSlides) {
        slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;
        if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;
        if (i === 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;
        if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
        if (params.roundLengths) slidePosition = Math.floor(slidePosition);
        if ((index) % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
        slidesGrid.push(slidePosition);
      } else {
        if (params.roundLengths) slidePosition = Math.floor(slidePosition);
        if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
        slidesGrid.push(slidePosition);
        slidePosition = slidePosition + slideSize + spaceBetween;
      }

      swiper.virtualSize += slideSize + spaceBetween;

      prevSlideSize = slideSize;

      index += 1;
    }
    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
    let newSlidesGrid;

    if (
      rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
      $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });
    }
    if (params.setWrapperSize) {
      if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });
      else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });
    }

    if (params.slidesPerColumn > 1) {
      swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
      swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
      if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });
      else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });
      if (params.centeredSlides) {
        newSlidesGrid = [];
        for (let i = 0; i < snapGrid.length; i += 1) {
          let slidesGridItem = snapGrid[i];
          if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
          if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
        }
        snapGrid = newSlidesGrid;
      }
    }

    // Remove last grid elements depending on width
    if (!params.centeredSlides) {
      newSlidesGrid = [];
      for (let i = 0; i < snapGrid.length; i += 1) {
        let slidesGridItem = snapGrid[i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[i] <= swiper.virtualSize - swiperSize) {
          newSlidesGrid.push(slidesGridItem);
        }
      }
      snapGrid = newSlidesGrid;
      if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
        snapGrid.push(swiper.virtualSize - swiperSize);
      }
    }
    if (snapGrid.length === 0) snapGrid = [0];

    if (params.spaceBetween !== 0) {
      if (swiper.isHorizontal()) {
        if (rtl) slides.filter(slidesForMargin).css({ marginLeft: `${spaceBetween}px` });
        else slides.filter(slidesForMargin).css({ marginRight: `${spaceBetween}px` });
      } else slides.filter(slidesForMargin).css({ marginBottom: `${spaceBetween}px` });
    }

    if (params.centeredSlides && params.centeredSlidesBounds) {
      let allSlidesSize = 0;
      slidesSizesGrid.forEach((slideSizeValue) => {
        allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
      });
      allSlidesSize -= params.spaceBetween;
      const maxSnap = allSlidesSize - swiperSize;
      snapGrid = snapGrid.map((snap) => {
        if (snap < 0) return -offsetBefore;
        if (snap > maxSnap) return maxSnap + offsetAfter;
        return snap;
      });
    }

    if (params.centerInsufficientSlides) {
      let allSlidesSize = 0;
      slidesSizesGrid.forEach((slideSizeValue) => {
        allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
      });
      allSlidesSize -= params.spaceBetween;
      if (allSlidesSize < swiperSize) {
        const allSlidesOffset = (swiperSize - allSlidesSize) / 2;
        snapGrid.forEach((snap, snapIndex) => {
          snapGrid[snapIndex] = snap - allSlidesOffset;
        });
        slidesGrid.forEach((snap, snapIndex) => {
          slidesGrid[snapIndex] = snap + allSlidesOffset;
        });
      }
    }

    Utils.extend(swiper, {
      slides,
      snapGrid,
      slidesGrid,
      slidesSizesGrid,
    });

    if (slidesLength !== previousSlidesLength) {
      swiper.emit('slidesLengthChange');
    }
    if (snapGrid.length !== previousSnapGridLength) {
      if (swiper.params.watchOverflow) swiper.checkOverflow();
      swiper.emit('snapGridLengthChange');
    }
    if (slidesGrid.length !== previousSlidesGridLength) {
      swiper.emit('slidesGridLengthChange');
    }

    if (params.watchSlidesProgress || params.watchSlidesVisibility) {
      swiper.updateSlidesOffset();
    }
  }

  function updateAutoHeight (speed) {
    const swiper = this;
    const activeSlides = [];
    let newHeight = 0;
    let i;
    if (typeof speed === 'number') {
      swiper.setTransition(speed);
    } else if (speed === true) {
      swiper.setTransition(swiper.params.speed);
    }
    // Find slides currently in view
    if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
      if (swiper.params.centeredSlides) {
        swiper.visibleSlides.each((index, slide) => {
          activeSlides.push(slide);
        });
      } else {
        for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
          const index = swiper.activeIndex + i;
          if (index > swiper.slides.length) break;
          activeSlides.push(swiper.slides.eq(index)[0]);
        }
      }
    } else {
      activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);
    }

    // Find new height from highest slide in view
    for (i = 0; i < activeSlides.length; i += 1) {
      if (typeof activeSlides[i] !== 'undefined') {
        const height = activeSlides[i].offsetHeight;
        newHeight = height > newHeight ? height : newHeight;
      }
    }

    // Update Height
    if (newHeight) swiper.$wrapperEl.css('height', `${newHeight}px`);
  }

  function updateSlidesOffset () {
    const swiper = this;
    const slides = swiper.slides;
    for (let i = 0; i < slides.length; i += 1) {
      slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
    }
  }

  function updateSlidesProgress (translate = (this && this.translate) || 0) {
    const swiper = this;
    const params = swiper.params;

    const { slides, rtlTranslate: rtl } = swiper;

    if (slides.length === 0) return;
    if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();

    let offsetCenter = -translate;
    if (rtl) offsetCenter = translate;

    // Visible Slides
    slides.removeClass(params.slideVisibleClass);

    swiper.visibleSlidesIndexes = [];
    swiper.visibleSlides = [];

    for (let i = 0; i < slides.length; i += 1) {
      const slide = slides[i];
      const slideProgress = (
        (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0)) - slide.swiperSlideOffset
      ) / (slide.swiperSlideSize + params.spaceBetween);
      if (params.watchSlidesVisibility || (params.centeredSlides && params.autoHeight)) {
        const slideBefore = -(offsetCenter - slide.swiperSlideOffset);
        const slideAfter = slideBefore + swiper.slidesSizesGrid[i];
        const isVisible = (slideBefore >= 0 && slideBefore < swiper.size - 1)
                  || (slideAfter > 1 && slideAfter <= swiper.size)
                  || (slideBefore <= 0 && slideAfter >= swiper.size);
        if (isVisible) {
          swiper.visibleSlides.push(slide);
          swiper.visibleSlidesIndexes.push(i);
          slides.eq(i).addClass(params.slideVisibleClass);
        }
      }
      slide.progress = rtl ? -slideProgress : slideProgress;
    }
    swiper.visibleSlides = $(swiper.visibleSlides);
  }

  function updateProgress (translate) {
    const swiper = this;
    if (typeof translate === 'undefined') {
      const multiplier = swiper.rtlTranslate ? -1 : 1;
      // eslint-disable-next-line
      translate = (swiper && swiper.translate && (swiper.translate * multiplier)) || 0;
    }
    const params = swiper.params;
    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    let { progress, isBeginning, isEnd } = swiper;
    const wasBeginning = isBeginning;
    const wasEnd = isEnd;
    if (translatesDiff === 0) {
      progress = 0;
      isBeginning = true;
      isEnd = true;
    } else {
      progress = (translate - swiper.minTranslate()) / (translatesDiff);
      isBeginning = progress <= 0;
      isEnd = progress >= 1;
    }
    Utils.extend(swiper, {
      progress,
      isBeginning,
      isEnd,
    });

    if (params.watchSlidesProgress || params.watchSlidesVisibility || (params.centeredSlides && params.autoHeight)) swiper.updateSlidesProgress(translate);

    if (isBeginning && !wasBeginning) {
      swiper.emit('reachBeginning toEdge');
    }
    if (isEnd && !wasEnd) {
      swiper.emit('reachEnd toEdge');
    }
    if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {
      swiper.emit('fromEdge');
    }

    swiper.emit('progress', progress);
  }

  function updateSlidesClasses () {
    const swiper = this;

    const {
      slides, params, $wrapperEl, activeIndex, realIndex,
    } = swiper;
    const isVirtual = swiper.virtual && params.virtual.enabled;

    slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);

    let activeSlide;
    if (isVirtual) {
      activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index="${activeIndex}"]`);
    } else {
      activeSlide = slides.eq(activeIndex);
    }

    // Active classes
    activeSlide.addClass(params.slideActiveClass);

    if (params.loop) {
      // Duplicate to all looped slides
      if (activeSlide.hasClass(params.slideDuplicateClass)) {
        $wrapperEl
          .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${realIndex}"]`)
          .addClass(params.slideDuplicateActiveClass);
      } else {
        $wrapperEl
          .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${realIndex}"]`)
          .addClass(params.slideDuplicateActiveClass);
      }
    }
    // Next Slide
    let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);
    if (params.loop && nextSlide.length === 0) {
      nextSlide = slides.eq(0);
      nextSlide.addClass(params.slideNextClass);
    }
    // Prev Slide
    let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);
    if (params.loop && prevSlide.length === 0) {
      prevSlide = slides.eq(-1);
      prevSlide.addClass(params.slidePrevClass);
    }
    if (params.loop) {
      // Duplicate to all looped slides
      if (nextSlide.hasClass(params.slideDuplicateClass)) {
        $wrapperEl
          .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${nextSlide.attr('data-swiper-slide-index')}"]`)
          .addClass(params.slideDuplicateNextClass);
      } else {
        $wrapperEl
          .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${nextSlide.attr('data-swiper-slide-index')}"]`)
          .addClass(params.slideDuplicateNextClass);
      }
      if (prevSlide.hasClass(params.slideDuplicateClass)) {
        $wrapperEl
          .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index="${prevSlide.attr('data-swiper-slide-index')}"]`)
          .addClass(params.slideDuplicatePrevClass);
      } else {
        $wrapperEl
          .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index="${prevSlide.attr('data-swiper-slide-index')}"]`)
          .addClass(params.slideDuplicatePrevClass);
      }
    }
  }

  function updateActiveIndex (newActiveIndex) {
    const swiper = this;
    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
    const {
      slidesGrid, snapGrid, params, activeIndex: previousIndex, realIndex: previousRealIndex, snapIndex: previousSnapIndex,
    } = swiper;
    let activeIndex = newActiveIndex;
    let snapIndex;
    if (typeof activeIndex === 'undefined') {
      for (let i = 0; i < slidesGrid.length; i += 1) {
        if (typeof slidesGrid[i + 1] !== 'undefined') {
          if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - ((slidesGrid[i + 1] - slidesGrid[i]) / 2)) {
            activeIndex = i;
          } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
            activeIndex = i + 1;
          }
        } else if (translate >= slidesGrid[i]) {
          activeIndex = i;
        }
      }
      // Normalize slideIndex
      if (params.normalizeSlideIndex) {
        if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
      }
    }
    if (snapGrid.indexOf(translate) >= 0) {
      snapIndex = snapGrid.indexOf(translate);
    } else {
      const skip = Math.min(params.slidesPerGroupSkip, activeIndex);
      snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
    }
    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;
    if (activeIndex === previousIndex) {
      if (snapIndex !== previousSnapIndex) {
        swiper.snapIndex = snapIndex;
        swiper.emit('snapIndexChange');
      }
      return;
    }

    // Get real index
    const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);

    Utils.extend(swiper, {
      snapIndex,
      realIndex,
      previousIndex,
      activeIndex,
    });
    swiper.emit('activeIndexChange');
    swiper.emit('snapIndexChange');
    if (previousRealIndex !== realIndex) {
      swiper.emit('realIndexChange');
    }
    if (swiper.initialized || swiper.params.runCallbacksOnInit) {
      swiper.emit('slideChange');
    }
  }

  function updateClickedSlide (e) {
    const swiper = this;
    const params = swiper.params;
    const slide = $(e.target).closest(`.${params.slideClass}`)[0];
    let slideFound = false;
    if (slide) {
      for (let i = 0; i < swiper.slides.length; i += 1) {
        if (swiper.slides[i] === slide) slideFound = true;
      }
    }

    if (slide && slideFound) {
      swiper.clickedSlide = slide;
      if (swiper.virtual && swiper.params.virtual.enabled) {
        swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);
      } else {
        swiper.clickedIndex = $(slide).index();
      }
    } else {
      swiper.clickedSlide = undefined;
      swiper.clickedIndex = undefined;
      return;
    }
    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
      swiper.slideToClickedSlide();
    }
  }

  var update = {
    updateSize,
    updateSlides,
    updateAutoHeight,
    updateSlidesOffset,
    updateSlidesProgress,
    updateProgress,
    updateSlidesClasses,
    updateActiveIndex,
    updateClickedSlide,
  };

  function getTranslate (axis = this.isHorizontal() ? 'x' : 'y') {
    const swiper = this;

    const {
      params, rtlTranslate: rtl, translate, $wrapperEl,
    } = swiper;

    if (params.virtualTranslate) {
      return rtl ? -translate : translate;
    }
    if (params.cssMode) {
      return translate;
    }

    let currentTranslate = Utils.getTranslate($wrapperEl[0], axis);
    if (rtl) currentTranslate = -currentTranslate;

    return currentTranslate || 0;
  }

  function setTranslate (translate, byController) {
    const swiper = this;
    const {
      rtlTranslate: rtl, params, $wrapperEl, wrapperEl, progress,
    } = swiper;
    let x = 0;
    let y = 0;
    const z = 0;

    if (swiper.isHorizontal()) {
      x = rtl ? -translate : translate;
    } else {
      y = translate;
    }

    if (params.roundLengths) {
      x = Math.floor(x);
      y = Math.floor(y);
    }

    if (params.cssMode) {
      wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
    } else if (!params.virtualTranslate) {
      $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);
    }
    swiper.previousTranslate = swiper.translate;
    swiper.translate = swiper.isHorizontal() ? x : y;

    // Check if we need to update progress
    let newProgress;
    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    if (translatesDiff === 0) {
      newProgress = 0;
    } else {
      newProgress = (translate - swiper.minTranslate()) / (translatesDiff);
    }
    if (newProgress !== progress) {
      swiper.updateProgress(translate);
    }

    swiper.emit('setTranslate', swiper.translate, byController);
  }

  function minTranslate () {
    return (-this.snapGrid[0]);
  }

  function maxTranslate () {
    return (-this.snapGrid[this.snapGrid.length - 1]);
  }

  function translateTo (translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {
    const swiper = this;

    const {
      params,
      wrapperEl,
    } = swiper;

    if (swiper.animating && params.preventInteractionOnTransition) {
      return false;
    }

    const minTranslate = swiper.minTranslate();
    const maxTranslate = swiper.maxTranslate();
    let newTranslate;
    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;
    else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;
    else newTranslate = translate;

    // Update progress
    swiper.updateProgress(newTranslate);

    if (params.cssMode) {
      const isH = swiper.isHorizontal();
      if (speed === 0) {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
      } else {
        // eslint-disable-next-line
        if (wrapperEl.scrollTo) {
          wrapperEl.scrollTo({
            [isH ? 'left' : 'top']: -newTranslate,
            behavior: 'smooth',
          });
        } else {
          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
        }
      }
      return true;
    }

    if (speed === 0) {
      swiper.setTransition(0);
      swiper.setTranslate(newTranslate);
      if (runCallbacks) {
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.emit('transitionEnd');
      }
    } else {
      swiper.setTransition(speed);
      swiper.setTranslate(newTranslate);
      if (runCallbacks) {
        swiper.emit('beforeTransitionStart', speed, internal);
        swiper.emit('transitionStart');
      }
      if (!swiper.animating) {
        swiper.animating = true;
        if (!swiper.onTranslateToWrapperTransitionEnd) {
          swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
            if (!swiper || swiper.destroyed) return;
            if (e.target !== this) return;
            swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
            swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
            swiper.onTranslateToWrapperTransitionEnd = null;
            delete swiper.onTranslateToWrapperTransitionEnd;
            if (runCallbacks) {
              swiper.emit('transitionEnd');
            }
          };
        }
        swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
        swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
      }
    }

    return true;
  }

  var translate = {
    getTranslate,
    setTranslate,
    minTranslate,
    maxTranslate,
    translateTo,
  };

  function setTransition (duration, byController) {
    const swiper = this;

    if (!swiper.params.cssMode) {
      swiper.$wrapperEl.transition(duration);
    }

    swiper.emit('setTransition', duration, byController);
  }

  function transitionStart (runCallbacks = true, direction) {
    const swiper = this;
    const { activeIndex, params, previousIndex } = swiper;
    if (params.cssMode) return;
    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }

    let dir = direction;
    if (!dir) {
      if (activeIndex > previousIndex) dir = 'next';
      else if (activeIndex < previousIndex) dir = 'prev';
      else dir = 'reset';
    }

    swiper.emit('transitionStart');

    if (runCallbacks && activeIndex !== previousIndex) {
      if (dir === 'reset') {
        swiper.emit('slideResetTransitionStart');
        return;
      }
      swiper.emit('slideChangeTransitionStart');
      if (dir === 'next') {
        swiper.emit('slideNextTransitionStart');
      } else {
        swiper.emit('slidePrevTransitionStart');
      }
    }
  }

  function transitionEnd$1 (runCallbacks = true, direction) {
    const swiper = this;
    const { activeIndex, previousIndex, params } = swiper;
    swiper.animating = false;
    if (params.cssMode) return;
    swiper.setTransition(0);

    let dir = direction;
    if (!dir) {
      if (activeIndex > previousIndex) dir = 'next';
      else if (activeIndex < previousIndex) dir = 'prev';
      else dir = 'reset';
    }

    swiper.emit('transitionEnd');

    if (runCallbacks && activeIndex !== previousIndex) {
      if (dir === 'reset') {
        swiper.emit('slideResetTransitionEnd');
        return;
      }
      swiper.emit('slideChangeTransitionEnd');
      if (dir === 'next') {
        swiper.emit('slideNextTransitionEnd');
      } else {
        swiper.emit('slidePrevTransitionEnd');
      }
    }
  }

  var transition$1 = {
    setTransition,
    transitionStart,
    transitionEnd: transitionEnd$1,
  };

  function slideTo (index = 0, speed = this.params.speed, runCallbacks = true, internal) {
    const swiper = this;
    let slideIndex = index;
    if (slideIndex < 0) slideIndex = 0;

    const {
      params, snapGrid, slidesGrid, previousIndex, activeIndex, rtlTranslate: rtl, wrapperEl,
    } = swiper;
    if (swiper.animating && params.preventInteractionOnTransition) {
      return false;
    }

    const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
    let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

    if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
      swiper.emit('beforeSlideChangeStart');
    }

    const translate = -snapGrid[snapIndex];

    // Update progress
    swiper.updateProgress(translate);

    // Normalize slideIndex
    if (params.normalizeSlideIndex) {
      for (let i = 0; i < slidesGrid.length; i += 1) {
        if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {
          slideIndex = i;
        }
      }
    }
    // Directions locks
    if (swiper.initialized && slideIndex !== activeIndex) {
      if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
        return false;
      }
      if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
        if ((activeIndex || 0) !== slideIndex) return false;
      }
    }

    let direction;
    if (slideIndex > activeIndex) direction = 'next';
    else if (slideIndex < activeIndex) direction = 'prev';
    else direction = 'reset';


    // Update Index
    if ((rtl && -translate === swiper.translate) || (!rtl && translate === swiper.translate)) {
      swiper.updateActiveIndex(slideIndex);
      // Update Height
      if (params.autoHeight) {
        swiper.updateAutoHeight();
      }
      swiper.updateSlidesClasses();
      if (params.effect !== 'slide') {
        swiper.setTranslate(translate);
      }
      if (direction !== 'reset') {
        swiper.transitionStart(runCallbacks, direction);
        swiper.transitionEnd(runCallbacks, direction);
      }
      return false;
    }
    if (params.cssMode) {
      const isH = swiper.isHorizontal();
      let t = -translate;
      if (rtl) {
        t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
      }
      if (speed === 0) {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
      } else {
        // eslint-disable-next-line
        if (wrapperEl.scrollTo) {
          wrapperEl.scrollTo({
            [isH ? 'left' : 'top']: t,
            behavior: 'smooth',
          });
        } else {
          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
        }
      }
      return true;
    }

    if (speed === 0) {
      swiper.setTransition(0);
      swiper.setTranslate(translate);
      swiper.updateActiveIndex(slideIndex);
      swiper.updateSlidesClasses();
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    } else {
      swiper.setTransition(speed);
      swiper.setTranslate(translate);
      swiper.updateActiveIndex(slideIndex);
      swiper.updateSlidesClasses();
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.transitionStart(runCallbacks, direction);
      if (!swiper.animating) {
        swiper.animating = true;
        if (!swiper.onSlideToWrapperTransitionEnd) {
          swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
            if (!swiper || swiper.destroyed) return;
            if (e.target !== this) return;
            swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
            swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
            swiper.onSlideToWrapperTransitionEnd = null;
            delete swiper.onSlideToWrapperTransitionEnd;
            swiper.transitionEnd(runCallbacks, direction);
          };
        }
        swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
        swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
      }
    }

    return true;
  }

  function slideToLoop (index = 0, speed = this.params.speed, runCallbacks = true, internal) {
    const swiper = this;
    let newIndex = index;
    if (swiper.params.loop) {
      newIndex += swiper.loopedSlides;
    }

    return swiper.slideTo(newIndex, speed, runCallbacks, internal);
  }

  /* eslint no-unused-vars: "off" */
  function slideNext (speed = this.params.speed, runCallbacks = true, internal) {
    const swiper = this;
    const { params, animating } = swiper;
    const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;
    if (params.loop) {
      if (animating) return false;
      swiper.loopFix();
      // eslint-disable-next-line
      swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
    }
    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
  }

  /* eslint no-unused-vars: "off" */
  function slidePrev (speed = this.params.speed, runCallbacks = true, internal) {
    const swiper = this;
    const {
      params, animating, snapGrid, slidesGrid, rtlTranslate,
    } = swiper;

    if (params.loop) {
      if (animating) return false;
      swiper.loopFix();
      // eslint-disable-next-line
      swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
    }
    const translate = rtlTranslate ? swiper.translate : -swiper.translate;
    function normalize(val) {
      if (val < 0) return -Math.floor(Math.abs(val));
      return Math.floor(val);
    }
    const normalizedTranslate = normalize(translate);
    const normalizedSnapGrid = snapGrid.map((val) => normalize(val));
    const normalizedSlidesGrid = slidesGrid.map((val) => normalize(val));

    const currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
    if (typeof prevSnap === 'undefined' && params.cssMode) {
      snapGrid.forEach((snap) => {
        if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;
      });
    }
    let prevIndex;
    if (typeof prevSnap !== 'undefined') {
      prevIndex = slidesGrid.indexOf(prevSnap);
      if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
    }
    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
  }

  /* eslint no-unused-vars: "off" */
  function slideReset (speed = this.params.speed, runCallbacks = true, internal) {
    const swiper = this;
    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
  }

  /* eslint no-unused-vars: "off" */
  function slideToClosest (speed = this.params.speed, runCallbacks = true, internal, threshold = 0.5) {
    const swiper = this;
    let index = swiper.activeIndex;
    const skip = Math.min(swiper.params.slidesPerGroupSkip, index);
    const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);

    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

    if (translate >= swiper.snapGrid[snapIndex]) {
      // The current translate is on or after the current snap index, so the choice
      // is between the current index and the one after it.
      const currentSnap = swiper.snapGrid[snapIndex];
      const nextSnap = swiper.snapGrid[snapIndex + 1];
      if ((translate - currentSnap) > (nextSnap - currentSnap) * threshold) {
        index += swiper.params.slidesPerGroup;
      }
    } else {
      // The current translate is before the current snap index, so the choice
      // is between the current index and the one before it.
      const prevSnap = swiper.snapGrid[snapIndex - 1];
      const currentSnap = swiper.snapGrid[snapIndex];
      if ((translate - prevSnap) <= (currentSnap - prevSnap) * threshold) {
        index -= swiper.params.slidesPerGroup;
      }
    }
    index = Math.max(index, 0);
    index = Math.min(index, swiper.slidesGrid.length - 1);

    return swiper.slideTo(index, speed, runCallbacks, internal);
  }

  function slideToClickedSlide () {
    const swiper = this;
    const { params, $wrapperEl } = swiper;

    const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
    let slideToIndex = swiper.clickedIndex;
    let realIndex;
    if (params.loop) {
      if (swiper.animating) return;
      realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);
      if (params.centeredSlides) {
        if (
          (slideToIndex < swiper.loopedSlides - (slidesPerView / 2))
          || (slideToIndex > (swiper.slides.length - swiper.loopedSlides) + (slidesPerView / 2))
        ) {
          swiper.loopFix();
          slideToIndex = $wrapperEl
            .children(`.${params.slideClass}[data-swiper-slide-index="${realIndex}"]:not(.${params.slideDuplicateClass})`)
            .eq(0)
            .index();

          Utils.nextTick(() => {
            swiper.slideTo(slideToIndex);
          });
        } else {
          swiper.slideTo(slideToIndex);
        }
      } else if (slideToIndex > swiper.slides.length - slidesPerView) {
        swiper.loopFix();
        slideToIndex = $wrapperEl
          .children(`.${params.slideClass}[data-swiper-slide-index="${realIndex}"]:not(.${params.slideDuplicateClass})`)
          .eq(0)
          .index();

        Utils.nextTick(() => {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else {
      swiper.slideTo(slideToIndex);
    }
  }

  var slide = {
    slideTo,
    slideToLoop,
    slideNext,
    slidePrev,
    slideReset,
    slideToClosest,
    slideToClickedSlide,
  };

  function loopCreate () {
    const swiper = this;
    const { params, $wrapperEl } = swiper;
    // Remove duplicated slides
    $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();

    let slides = $wrapperEl.children(`.${params.slideClass}`);

    if (params.loopFillGroupWithBlank) {
      const blankSlidesNum = params.slidesPerGroup - (slides.length % params.slidesPerGroup);
      if (blankSlidesNum !== params.slidesPerGroup) {
        for (let i = 0; i < blankSlidesNum; i += 1) {
          const blankNode = $(doc.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);
          $wrapperEl.append(blankNode);
        }
        slides = $wrapperEl.children(`.${params.slideClass}`);
      }
    }

    if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;

    swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
    swiper.loopedSlides += params.loopAdditionalSlides;
    if (swiper.loopedSlides > slides.length) {
      swiper.loopedSlides = slides.length;
    }

    const prependSlides = [];
    const appendSlides = [];
    slides.each((index, el) => {
      const slide = $(el);
      if (index < swiper.loopedSlides) appendSlides.push(el);
      if (index < slides.length && index >= slides.length - swiper.loopedSlides) prependSlides.push(el);
      slide.attr('data-swiper-slide-index', index);
    });
    for (let i = 0; i < appendSlides.length; i += 1) {
      $wrapperEl.append($(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));
    }
    for (let i = prependSlides.length - 1; i >= 0; i -= 1) {
      $wrapperEl.prepend($(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));
    }
  }

  function loopFix () {
    const swiper = this;

    swiper.emit('beforeLoopFix');

    const {
      activeIndex, slides, loopedSlides, allowSlidePrev, allowSlideNext, snapGrid, rtlTranslate: rtl,
    } = swiper;
    let newIndex;
    swiper.allowSlidePrev = true;
    swiper.allowSlideNext = true;

    const snapTranslate = -snapGrid[activeIndex];
    const diff = snapTranslate - swiper.getTranslate();

    // Fix For Negative Oversliding
    if (activeIndex < loopedSlides) {
      newIndex = (slides.length - (loopedSlides * 3)) + activeIndex;
      newIndex += loopedSlides;
      const slideChanged = swiper.slideTo(newIndex, 0, false, true);
      if (slideChanged && diff !== 0) {
        swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
      }
    } else if (activeIndex >= slides.length - loopedSlides) {
      // Fix For Positive Oversliding
      newIndex = -slides.length + activeIndex + loopedSlides;
      newIndex += loopedSlides;
      const slideChanged = swiper.slideTo(newIndex, 0, false, true);
      if (slideChanged && diff !== 0) {
        swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
      }
    }
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;

    swiper.emit('loopFix');
  }

  function loopDestroy () {
    const swiper = this;
    const { $wrapperEl, params, slides } = swiper;
    $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();
    slides.removeAttr('data-swiper-slide-index');
  }

  var loop = {
    loopCreate,
    loopFix,
    loopDestroy,
  };

  function setGrabCursor (moving) {
    const swiper = this;
    if (Support.touch || !swiper.params.simulateTouch || (swiper.params.watchOverflow && swiper.isLocked) || swiper.params.cssMode) return;
    const el = swiper.el;
    el.style.cursor = 'move';
    el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
    el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
    el.style.cursor = moving ? 'grabbing' : 'grab';
  }

  function unsetGrabCursor () {
    const swiper = this;
    if (Support.touch || (swiper.params.watchOverflow && swiper.isLocked) || swiper.params.cssMode) return;
    swiper.el.style.cursor = '';
  }

  var grabCursor = {
    setGrabCursor,
    unsetGrabCursor,
  };

  function appendSlide (slides) {
    const swiper = this;
    const { $wrapperEl, params } = swiper;
    if (params.loop) {
      swiper.loopDestroy();
    }
    if (typeof slides === 'object' && 'length' in slides) {
      for (let i = 0; i < slides.length; i += 1) {
        if (slides[i]) $wrapperEl.append(slides[i]);
      }
    } else {
      $wrapperEl.append(slides);
    }
    if (params.loop) {
      swiper.loopCreate();
    }
    if (!(params.observer && Support.observer)) {
      swiper.update();
    }
  }

  function prependSlide (slides) {
    const swiper = this;
    const { params, $wrapperEl, activeIndex } = swiper;

    if (params.loop) {
      swiper.loopDestroy();
    }
    let newActiveIndex = activeIndex + 1;
    if (typeof slides === 'object' && 'length' in slides) {
      for (let i = 0; i < slides.length; i += 1) {
        if (slides[i]) $wrapperEl.prepend(slides[i]);
      }
      newActiveIndex = activeIndex + slides.length;
    } else {
      $wrapperEl.prepend(slides);
    }
    if (params.loop) {
      swiper.loopCreate();
    }
    if (!(params.observer && Support.observer)) {
      swiper.update();
    }
    swiper.slideTo(newActiveIndex, 0, false);
  }

  function addSlide (index, slides) {
    const swiper = this;
    const { $wrapperEl, params, activeIndex } = swiper;
    let activeIndexBuffer = activeIndex;
    if (params.loop) {
      activeIndexBuffer -= swiper.loopedSlides;
      swiper.loopDestroy();
      swiper.slides = $wrapperEl.children(`.${params.slideClass}`);
    }
    const baseLength = swiper.slides.length;
    if (index <= 0) {
      swiper.prependSlide(slides);
      return;
    }
    if (index >= baseLength) {
      swiper.appendSlide(slides);
      return;
    }
    let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;

    const slidesBuffer = [];
    for (let i = baseLength - 1; i >= index; i -= 1) {
      const currentSlide = swiper.slides.eq(i);
      currentSlide.remove();
      slidesBuffer.unshift(currentSlide);
    }

    if (typeof slides === 'object' && 'length' in slides) {
      for (let i = 0; i < slides.length; i += 1) {
        if (slides[i]) $wrapperEl.append(slides[i]);
      }
      newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
    } else {
      $wrapperEl.append(slides);
    }

    for (let i = 0; i < slidesBuffer.length; i += 1) {
      $wrapperEl.append(slidesBuffer[i]);
    }

    if (params.loop) {
      swiper.loopCreate();
    }
    if (!(params.observer && Support.observer)) {
      swiper.update();
    }
    if (params.loop) {
      swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
    } else {
      swiper.slideTo(newActiveIndex, 0, false);
    }
  }

  function removeSlide (slidesIndexes) {
    const swiper = this;
    const { params, $wrapperEl, activeIndex } = swiper;

    let activeIndexBuffer = activeIndex;
    if (params.loop) {
      activeIndexBuffer -= swiper.loopedSlides;
      swiper.loopDestroy();
      swiper.slides = $wrapperEl.children(`.${params.slideClass}`);
    }
    let newActiveIndex = activeIndexBuffer;
    let indexToRemove;

    if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
      for (let i = 0; i < slidesIndexes.length; i += 1) {
        indexToRemove = slidesIndexes[i];
        if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
        if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
      }
      newActiveIndex = Math.max(newActiveIndex, 0);
    } else {
      indexToRemove = slidesIndexes;
      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
      newActiveIndex = Math.max(newActiveIndex, 0);
    }

    if (params.loop) {
      swiper.loopCreate();
    }

    if (!(params.observer && Support.observer)) {
      swiper.update();
    }
    if (params.loop) {
      swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
    } else {
      swiper.slideTo(newActiveIndex, 0, false);
    }
  }

  function removeAllSlides () {
    const swiper = this;

    const slidesIndexes = [];
    for (let i = 0; i < swiper.slides.length; i += 1) {
      slidesIndexes.push(i);
    }
    swiper.removeSlide(slidesIndexes);
  }

  var manipulation = {
    appendSlide,
    prependSlide,
    addSlide,
    removeSlide,
    removeAllSlides,
  };

  function onTouchStart (event) {
    const swiper = this;
    const data = swiper.touchEventsData;
    const { params, touches } = swiper;

    if (swiper.animating && params.preventInteractionOnTransition) {
      return;
    }
    let e = event;
    if (e.originalEvent) e = e.originalEvent;
    const $targetEl = $(e.target);

    if (params.touchEventsTarget === 'wrapper') {
      if (!$targetEl.closest(swiper.wrapperEl).length) return;
    }
    data.isTouchEvent = e.type === 'touchstart';
    if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
    if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
    if (data.isTouched && data.isMoved) return;
    if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`)[0]) {
      swiper.allowClick = true;
      return;
    }
    if (params.swipeHandler) {
      if (!$targetEl.closest(params.swipeHandler)[0]) return;
    }

    touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
    touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
    const startX = touches.currentX;
    const startY = touches.currentY;

    // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore

    const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
    const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;
    if (
      edgeSwipeDetection
      && ((startX <= edgeSwipeThreshold)
      || (startX >= win.screen.width - edgeSwipeThreshold))
    ) {
      return;
    }

    Utils.extend(data, {
      isTouched: true,
      isMoved: false,
      allowTouchCallbacks: true,
      isScrolling: undefined,
      startMoving: undefined,
    });

    touches.startX = startX;
    touches.startY = startY;
    data.touchStartTime = Utils.now();
    swiper.allowClick = true;
    swiper.updateSize();
    swiper.swipeDirection = undefined;
    if (params.threshold > 0) data.allowThresholdMove = false;
    if (e.type !== 'touchstart') {
      let preventDefault = true;
      if ($targetEl.is(data.formElements)) preventDefault = false;
      if (
        doc.activeElement
        && $(doc.activeElement).is(data.formElements)
        && doc.activeElement !== $targetEl[0]
      ) {
        doc.activeElement.blur();
      }

      const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;
      if (params.touchStartForcePreventDefault || shouldPreventDefault) {
        e.preventDefault();
      }
    }
    swiper.emit('touchStart', e);
  }

  function onTouchMove (event) {
    const swiper = this;
    const data = swiper.touchEventsData;
    const { params, touches, rtlTranslate: rtl } = swiper;
    let e = event;
    if (e.originalEvent) e = e.originalEvent;
    if (!data.isTouched) {
      if (data.startMoving && data.isScrolling) {
        swiper.emit('touchMoveOpposite', e);
      }
      return;
    }
    if (data.isTouchEvent && e.type !== 'touchmove') return;
    const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
    const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
    const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;
    if (e.preventedByNestedSwiper) {
      touches.startX = pageX;
      touches.startY = pageY;
      return;
    }
    if (!swiper.allowTouchMove) {
      // isMoved = true;
      swiper.allowClick = false;
      if (data.isTouched) {
        Utils.extend(touches, {
          startX: pageX,
          startY: pageY,
          currentX: pageX,
          currentY: pageY,
        });
        data.touchStartTime = Utils.now();
      }
      return;
    }
    if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
      if (swiper.isVertical()) {
        // Vertical
        if (
          (pageY < touches.startY && swiper.translate <= swiper.maxTranslate())
          || (pageY > touches.startY && swiper.translate >= swiper.minTranslate())
        ) {
          data.isTouched = false;
          data.isMoved = false;
          return;
        }
      } else if (
        (pageX < touches.startX && swiper.translate <= swiper.maxTranslate())
        || (pageX > touches.startX && swiper.translate >= swiper.minTranslate())
      ) {
        return;
      }
    }
    if (data.isTouchEvent && doc.activeElement) {
      if (e.target === doc.activeElement && $(e.target).is(data.formElements)) {
        data.isMoved = true;
        swiper.allowClick = false;
        return;
      }
    }
    if (data.allowTouchCallbacks) {
      swiper.emit('touchMove', e);
    }
    if (e.targetTouches && e.targetTouches.length > 1) return;

    touches.currentX = pageX;
    touches.currentY = pageY;

    const diffX = touches.currentX - touches.startX;
    const diffY = touches.currentY - touches.startY;
    if (swiper.params.threshold && Math.sqrt((diffX ** 2) + (diffY ** 2)) < swiper.params.threshold) return;

    if (typeof data.isScrolling === 'undefined') {
      let touchAngle;
      if ((swiper.isHorizontal() && touches.currentY === touches.startY) || (swiper.isVertical() && touches.currentX === touches.startX)) {
        data.isScrolling = false;
      } else {
        // eslint-disable-next-line
        if ((diffX * diffX) + (diffY * diffY) >= 25) {
          touchAngle = (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) / Math.PI;
          data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : (90 - touchAngle > params.touchAngle);
        }
      }
    }
    if (data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }
    if (typeof data.startMoving === 'undefined') {
      if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
        data.startMoving = true;
      }
    }
    if (data.isScrolling) {
      data.isTouched = false;
      return;
    }
    if (!data.startMoving) {
      return;
    }
    swiper.allowClick = false;
    if (!params.cssMode && e.cancelable) {
      e.preventDefault();
    }
    if (params.touchMoveStopPropagation && !params.nested) {
      e.stopPropagation();
    }

    if (!data.isMoved) {
      if (params.loop) {
        swiper.loopFix();
      }
      data.startTranslate = swiper.getTranslate();
      swiper.setTransition(0);
      if (swiper.animating) {
        swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
      }
      data.allowMomentumBounce = false;
      // Grab Cursor
      if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
        swiper.setGrabCursor(true);
      }
      swiper.emit('sliderFirstMove', e);
    }
    swiper.emit('sliderMove', e);
    data.isMoved = true;

    let diff = swiper.isHorizontal() ? diffX : diffY;
    touches.diff = diff;

    diff *= params.touchRatio;
    if (rtl) diff = -diff;

    swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
    data.currentTranslate = diff + data.startTranslate;

    let disableParentSwiper = true;
    let resistanceRatio = params.resistanceRatio;
    if (params.touchReleaseOnEdges) {
      resistanceRatio = 0;
    }
    if ((diff > 0 && data.currentTranslate > swiper.minTranslate())) {
      disableParentSwiper = false;
      if (params.resistance) data.currentTranslate = (swiper.minTranslate() - 1) + ((-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio);
    } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
      disableParentSwiper = false;
      if (params.resistance) data.currentTranslate = (swiper.maxTranslate() + 1) - ((swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio);
    }

    if (disableParentSwiper) {
      e.preventedByNestedSwiper = true;
    }

    // Directions locks
    if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
      data.currentTranslate = data.startTranslate;
    }
    if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
      data.currentTranslate = data.startTranslate;
    }


    // Threshold
    if (params.threshold > 0) {
      if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
        if (!data.allowThresholdMove) {
          data.allowThresholdMove = true;
          touches.startX = touches.currentX;
          touches.startY = touches.currentY;
          data.currentTranslate = data.startTranslate;
          touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
          return;
        }
      } else {
        data.currentTranslate = data.startTranslate;
        return;
      }
    }

    if (!params.followFinger || params.cssMode) return;

    // Update active index in free mode
    if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
    if (params.freeMode) {
      // Velocity
      if (data.velocities.length === 0) {
        data.velocities.push({
          position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
          time: data.touchStartTime,
        });
      }
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
        time: Utils.now(),
      });
    }
    // Update progress
    swiper.updateProgress(data.currentTranslate);
    // Update translate
    swiper.setTranslate(data.currentTranslate);
  }

  function onTouchEnd (event) {
    const swiper = this;
    const data = swiper.touchEventsData;

    const {
      params, touches, rtlTranslate: rtl, $wrapperEl, slidesGrid, snapGrid,
    } = swiper;
    let e = event;
    if (e.originalEvent) e = e.originalEvent;
    if (data.allowTouchCallbacks) {
      swiper.emit('touchEnd', e);
    }
    data.allowTouchCallbacks = false;
    if (!data.isTouched) {
      if (data.isMoved && params.grabCursor) {
        swiper.setGrabCursor(false);
      }
      data.isMoved = false;
      data.startMoving = false;
      return;
    }
    // Return Grab Cursor
    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(false);
    }

    // Time diff
    const touchEndTime = Utils.now();
    const timeDiff = touchEndTime - data.touchStartTime;

    // Tap, doubleTap, Click
    if (swiper.allowClick) {
      swiper.updateClickedSlide(e);
      swiper.emit('tap click', e);
      if (timeDiff < 300 && (touchEndTime - data.lastClickTime) < 300) {
        swiper.emit('doubleTap doubleClick', e);
      }
    }

    data.lastClickTime = Utils.now();
    Utils.nextTick(() => {
      if (!swiper.destroyed) swiper.allowClick = true;
    });

    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
      data.isTouched = false;
      data.isMoved = false;
      data.startMoving = false;
      return;
    }
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;

    let currentPos;
    if (params.followFinger) {
      currentPos = rtl ? swiper.translate : -swiper.translate;
    } else {
      currentPos = -data.currentTranslate;
    }

    if (params.cssMode) {
      return;
    }

    if (params.freeMode) {
      if (currentPos < -swiper.minTranslate()) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      if (currentPos > -swiper.maxTranslate()) {
        if (swiper.slides.length < snapGrid.length) {
          swiper.slideTo(snapGrid.length - 1);
        } else {
          swiper.slideTo(swiper.slides.length - 1);
        }
        return;
      }

      if (params.freeModeMomentum) {
        if (data.velocities.length > 1) {
          const lastMoveEvent = data.velocities.pop();
          const velocityEvent = data.velocities.pop();

          const distance = lastMoveEvent.position - velocityEvent.position;
          const time = lastMoveEvent.time - velocityEvent.time;
          swiper.velocity = distance / time;
          swiper.velocity /= 2;
          if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
            swiper.velocity = 0;
          }
          // this implies that the user stopped moving a finger then released.
          // There would be no events with distance zero, so the last event is stale.
          if (time > 150 || (Utils.now() - lastMoveEvent.time) > 300) {
            swiper.velocity = 0;
          }
        } else {
          swiper.velocity = 0;
        }
        swiper.velocity *= params.freeModeMomentumVelocityRatio;

        data.velocities.length = 0;
        let momentumDuration = 1000 * params.freeModeMomentumRatio;
        const momentumDistance = swiper.velocity * momentumDuration;

        let newPosition = swiper.translate + momentumDistance;
        if (rtl) newPosition = -newPosition;

        let doBounce = false;
        let afterBouncePosition;
        const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
        let needsLoopFix;
        if (newPosition < swiper.maxTranslate()) {
          if (params.freeModeMomentumBounce) {
            if (newPosition + swiper.maxTranslate() < -bounceAmount) {
              newPosition = swiper.maxTranslate() - bounceAmount;
            }
            afterBouncePosition = swiper.maxTranslate();
            doBounce = true;
            data.allowMomentumBounce = true;
          } else {
            newPosition = swiper.maxTranslate();
          }
          if (params.loop && params.centeredSlides) needsLoopFix = true;
        } else if (newPosition > swiper.minTranslate()) {
          if (params.freeModeMomentumBounce) {
            if (newPosition - swiper.minTranslate() > bounceAmount) {
              newPosition = swiper.minTranslate() + bounceAmount;
            }
            afterBouncePosition = swiper.minTranslate();
            doBounce = true;
            data.allowMomentumBounce = true;
          } else {
            newPosition = swiper.minTranslate();
          }
          if (params.loop && params.centeredSlides) needsLoopFix = true;
        } else if (params.freeModeSticky) {
          let nextSlide;
          for (let j = 0; j < snapGrid.length; j += 1) {
            if (snapGrid[j] > -newPosition) {
              nextSlide = j;
              break;
            }
          }

          if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
            newPosition = snapGrid[nextSlide];
          } else {
            newPosition = snapGrid[nextSlide - 1];
          }
          newPosition = -newPosition;
        }
        if (needsLoopFix) {
          swiper.once('transitionEnd', () => {
            swiper.loopFix();
          });
        }
        // Fix duration
        if (swiper.velocity !== 0) {
          if (rtl) {
            momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
          } else {
            momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
          }
          if (params.freeModeSticky) {
            // If freeModeSticky is active and the user ends a swipe with a slow-velocity
            // event, then durations can be 20+ seconds to slide one (or zero!) slides.
            // It's easy to see this when simulating touch with mouse events. To fix this,
            // limit single-slide swipes to the default slide duration. This also has the
            // nice side effect of matching slide speed if the user stopped moving before
            // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
            // For faster swipes, also apply limits (albeit higher ones).
            const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
            const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];
            if (moveDistance < currentSlideSize) {
              momentumDuration = params.speed;
            } else if (moveDistance < 2 * currentSlideSize) {
              momentumDuration = params.speed * 1.5;
            } else {
              momentumDuration = params.speed * 2.5;
            }
          }
        } else if (params.freeModeSticky) {
          swiper.slideToClosest();
          return;
        }

        if (params.freeModeMomentumBounce && doBounce) {
          swiper.updateProgress(afterBouncePosition);
          swiper.setTransition(momentumDuration);
          swiper.setTranslate(newPosition);
          swiper.transitionStart(true, swiper.swipeDirection);
          swiper.animating = true;
          $wrapperEl.transitionEnd(() => {
            if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
            swiper.emit('momentumBounce');
            swiper.setTransition(params.speed);
            setTimeout(() => {
              swiper.setTranslate(afterBouncePosition);
              $wrapperEl.transitionEnd(() => {
                if (!swiper || swiper.destroyed) return;
                swiper.transitionEnd();
              });
            }, 0);
          });
        } else if (swiper.velocity) {
          swiper.updateProgress(newPosition);
          swiper.setTransition(momentumDuration);
          swiper.setTranslate(newPosition);
          swiper.transitionStart(true, swiper.swipeDirection);
          if (!swiper.animating) {
            swiper.animating = true;
            $wrapperEl.transitionEnd(() => {
              if (!swiper || swiper.destroyed) return;
              swiper.transitionEnd();
            });
          }
        } else {
          swiper.updateProgress(newPosition);
        }

        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      } else if (params.freeModeSticky) {
        swiper.slideToClosest();
        return;
      }

      if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
        swiper.updateProgress();
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }
      return;
    }

    // Find current slide
    let stopIndex = 0;
    let groupSize = swiper.slidesSizesGrid[0];
    for (let i = 0; i < slidesGrid.length; i += (i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup)) {
      const increment = (i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup);
      if (typeof slidesGrid[i + increment] !== 'undefined') {
        if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {
          stopIndex = i;
          groupSize = slidesGrid[i + increment] - slidesGrid[i];
        }
      } else if (currentPos >= slidesGrid[i]) {
        stopIndex = i;
        groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
      }
    }

    // Find current slide size
    const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
    const increment = (stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup);

    if (timeDiff > params.longSwipesMs) {
      // Long touches
      if (!params.longSwipes) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      if (swiper.swipeDirection === 'next') {
        if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);
        else swiper.slideTo(stopIndex);
      }
      if (swiper.swipeDirection === 'prev') {
        if (ratio > (1 - params.longSwipesRatio)) swiper.slideTo(stopIndex + increment);
        else swiper.slideTo(stopIndex);
      }
    } else {
      // Short swipes
      if (!params.shortSwipes) {
        swiper.slideTo(swiper.activeIndex);
        return;
      }
      const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);
      if (!isNavButtonTarget) {
        if (swiper.swipeDirection === 'next') {
          swiper.slideTo(stopIndex + increment);
        }
        if (swiper.swipeDirection === 'prev') {
          swiper.slideTo(stopIndex);
        }
      } else if (e.target === swiper.navigation.nextEl) {
        swiper.slideTo(stopIndex + increment);
      } else {
        swiper.slideTo(stopIndex);
      }
    }
  }

  function onResize () {
    const swiper = this;

    const { params, el } = swiper;

    if (el && el.offsetWidth === 0) return;

    // Breakpoints
    if (params.breakpoints) {
      swiper.setBreakpoint();
    }

    // Save locks
    const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;

    // Disable locks on resize
    swiper.allowSlideNext = true;
    swiper.allowSlidePrev = true;

    swiper.updateSize();
    swiper.updateSlides();

    swiper.updateSlidesClasses();
    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
      swiper.slideTo(swiper.slides.length - 1, 0, false, true);
    } else {
      swiper.slideTo(swiper.activeIndex, 0, false, true);
    }

    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
      swiper.autoplay.run();
    }
    // Return locks after resize
    swiper.allowSlidePrev = allowSlidePrev;
    swiper.allowSlideNext = allowSlideNext;

    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }
  }

  function onClick (e) {
    const swiper = this;
    if (!swiper.allowClick) {
      if (swiper.params.preventClicks) e.preventDefault();
      if (swiper.params.preventClicksPropagation && swiper.animating) {
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }
  }

  function onScroll () {
    const swiper = this;
    const { wrapperEl, rtlTranslate } = swiper;
    swiper.previousTranslate = swiper.translate;
    if (swiper.isHorizontal()) {
      if (rtlTranslate) {
        swiper.translate = ((wrapperEl.scrollWidth - wrapperEl.offsetWidth) - wrapperEl.scrollLeft);
      } else {
        swiper.translate = -wrapperEl.scrollLeft;
      }
    } else {
      swiper.translate = -wrapperEl.scrollTop;
    }
    // eslint-disable-next-line
    if (swiper.translate === -0) swiper.translate = 0;

    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();

    let newProgress;
    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    if (translatesDiff === 0) {
      newProgress = 0;
    } else {
      newProgress = (swiper.translate - swiper.minTranslate()) / (translatesDiff);
    }
    if (newProgress !== swiper.progress) {
      swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
    }

    swiper.emit('setTranslate', swiper.translate, false);
  }

  let dummyEventAttached = false;
  function dummyEventListener() {}

  function attachEvents() {
    const swiper = this;
    const {
      params, touchEvents, el, wrapperEl,
    } = swiper;

    swiper.onTouchStart = onTouchStart.bind(swiper);
    swiper.onTouchMove = onTouchMove.bind(swiper);
    swiper.onTouchEnd = onTouchEnd.bind(swiper);
    if (params.cssMode) {
      swiper.onScroll = onScroll.bind(swiper);
    }

    swiper.onClick = onClick.bind(swiper);

    const capture = !!params.nested;

    // Touch Events
    if (!Support.touch && Support.pointerEvents) {
      el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
      doc.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
      doc.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support.touch) {
        const passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        el.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? { passive: false, capture } : capture);
        el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
        if (touchEvents.cancel) {
          el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
        }
        if (!dummyEventAttached) {
          doc.addEventListener('touchstart', dummyEventListener);
          dummyEventAttached = true;
        }
      }
      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
        el.addEventListener('mousedown', swiper.onTouchStart, false);
        doc.addEventListener('mousemove', swiper.onTouchMove, capture);
        doc.addEventListener('mouseup', swiper.onTouchEnd, false);
      }
    }
    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      el.addEventListener('click', swiper.onClick, true);
    }
    if (params.cssMode) {
      wrapperEl.addEventListener('scroll', swiper.onScroll);
    }

    // Resize handler
    if (params.updateOnWindowResize) {
      swiper.on((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize, true);
    } else {
      swiper.on('observerUpdate', onResize, true);
    }
  }

  function detachEvents() {
    const swiper = this;

    const {
      params, touchEvents, el, wrapperEl,
    } = swiper;

    const capture = !!params.nested;

    // Touch Events
    if (!Support.touch && Support.pointerEvents) {
      el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
      doc.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      doc.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
    } else {
      if (Support.touch) {
        const passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
        el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
        el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
        el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);
        if (touchEvents.cancel) {
          el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
        }
      }
      if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {
        el.removeEventListener('mousedown', swiper.onTouchStart, false);
        doc.removeEventListener('mousemove', swiper.onTouchMove, capture);
        doc.removeEventListener('mouseup', swiper.onTouchEnd, false);
      }
    }
    // Prevent Links Clicks
    if (params.preventClicks || params.preventClicksPropagation) {
      el.removeEventListener('click', swiper.onClick, true);
    }

    if (params.cssMode) {
      wrapperEl.removeEventListener('scroll', swiper.onScroll);
    }

    // Resize handler
    swiper.off((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize);
  }

  var events = {
    attachEvents,
    detachEvents,
  };

  function setBreakpoint () {
    const swiper = this;
    const {
      activeIndex, initialized, loopedSlides = 0, params, $el,
    } = swiper;
    const breakpoints = params.breakpoints;
    if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) return;

    // Get breakpoint for window width and update parameters
    const breakpoint = swiper.getBreakpoint(breakpoints);

    if (breakpoint && swiper.currentBreakpoint !== breakpoint) {
      const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;
      if (breakpointOnlyParams) {
        ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach((param) => {
          const paramValue = breakpointOnlyParams[param];
          if (typeof paramValue === 'undefined') return;
          if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
            breakpointOnlyParams[param] = 'auto';
          } else if (param === 'slidesPerView') {
            breakpointOnlyParams[param] = parseFloat(paramValue);
          } else {
            breakpointOnlyParams[param] = parseInt(paramValue, 10);
          }
        });
      }

      const breakpointParams = breakpointOnlyParams || swiper.originalParams;
      const wasMultiRow = params.slidesPerColumn > 1;
      const isMultiRow = breakpointParams.slidesPerColumn > 1;
      if (wasMultiRow && !isMultiRow) {
        $el.removeClass(`${params.containerModifierClass}multirow ${params.containerModifierClass}multirow-column`);
      } else if (!wasMultiRow && isMultiRow) {
        $el.addClass(`${params.containerModifierClass}multirow`);
        if (breakpointParams.slidesPerColumnFill === 'column') {
          $el.addClass(`${params.containerModifierClass}multirow-column`);
        }
      }

      const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
      const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

      if (directionChanged && initialized) {
        swiper.changeDirection();
      }

      Utils.extend(swiper.params, breakpointParams);

      Utils.extend(swiper, {
        allowTouchMove: swiper.params.allowTouchMove,
        allowSlideNext: swiper.params.allowSlideNext,
        allowSlidePrev: swiper.params.allowSlidePrev,
      });

      swiper.currentBreakpoint = breakpoint;

      if (needsReLoop && initialized) {
        swiper.loopDestroy();
        swiper.loopCreate();
        swiper.updateSlides();
        swiper.slideTo((activeIndex - loopedSlides) + swiper.loopedSlides, 0, false);
      }

      swiper.emit('breakpoint', breakpointParams);
    }
  }

  function getBreakpoint (breakpoints) {
    // Get breakpoint for window width
    if (!breakpoints) return undefined;
    let breakpoint = false;

    const points = Object.keys(breakpoints).map((point) => {
      if (typeof point === 'string' && point.indexOf('@') === 0) {
        const minRatio = parseFloat(point.substr(1));
        const value = win.innerHeight * minRatio;
        return { value, point };
      }
      return { value: point, point };
    });

    points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));
    for (let i = 0; i < points.length; i += 1) {
      const { point, value } = points[i];
      if (value <= win.innerWidth) {
        breakpoint = point;
      }
    }
    return breakpoint || 'max';
  }

  var breakpoints = { setBreakpoint, getBreakpoint };

  function addClasses () {
    const swiper = this;
    const {
      classNames, params, rtl, $el,
    } = swiper;
    const suffixes = [];

    suffixes.push('initialized');
    suffixes.push(params.direction);

    if (params.freeMode) {
      suffixes.push('free-mode');
    }
    if (params.autoHeight) {
      suffixes.push('autoheight');
    }
    if (rtl) {
      suffixes.push('rtl');
    }
    if (params.slidesPerColumn > 1) {
      suffixes.push('multirow');
      if (params.slidesPerColumnFill === 'column') {
        suffixes.push('multirow-column');
      }
    }
    if (Device.android) {
      suffixes.push('android');
    }
    if (Device.ios) {
      suffixes.push('ios');
    }

    if (params.cssMode) {
      suffixes.push('css-mode');
    }

    suffixes.forEach((suffix) => {
      classNames.push(params.containerModifierClass + suffix);
    });

    $el.addClass(classNames.join(' '));
  }

  function removeClasses () {
    const swiper = this;
    const { $el, classNames } = swiper;

    $el.removeClass(classNames.join(' '));
  }

  var classes = { addClasses, removeClasses };

  function loadImage (imageEl, src, srcset, sizes, checkForComplete, callback) {
    let image;
    function onReady() {
      if (callback) callback();
    }
    const isPicture = $(imageEl).parent('picture')[0];

    if (!isPicture && (!imageEl.complete || !checkForComplete)) {
      if (src) {
        image = new win.Image();
        image.onload = onReady;
        image.onerror = onReady;
        if (sizes) {
          image.sizes = sizes;
        }
        if (srcset) {
          image.srcset = srcset;
        }
        if (src) {
          image.src = src;
        }
      } else {
        onReady();
      }
    } else {
      // image already loaded...
      onReady();
    }
  }

  function preloadImages () {
    const swiper = this;
    swiper.imagesToLoad = swiper.$el.find('img');
    function onReady() {
      if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
      if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;
      if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
        if (swiper.params.updateOnImagesReady) swiper.update();
        swiper.emit('imagesReady');
      }
    }
    for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {
      const imageEl = swiper.imagesToLoad[i];
      swiper.loadImage(
        imageEl,
        imageEl.currentSrc || imageEl.getAttribute('src'),
        imageEl.srcset || imageEl.getAttribute('srcset'),
        imageEl.sizes || imageEl.getAttribute('sizes'),
        true,
        onReady
      );
    }
  }

  var images = {
    loadImage,
    preloadImages,
  };

  function checkOverflow() {
    const swiper = this;
    const params = swiper.params;
    const wasLocked = swiper.isLocked;
    const lastSlidePosition = swiper.slides.length > 0 && (params.slidesOffsetBefore + (params.spaceBetween * (swiper.slides.length - 1)) + ((swiper.slides[0]).offsetWidth) * swiper.slides.length);

    if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {
      swiper.isLocked = lastSlidePosition <= swiper.size;
    } else {
      swiper.isLocked = swiper.snapGrid.length === 1;
    }

    swiper.allowSlideNext = !swiper.isLocked;
    swiper.allowSlidePrev = !swiper.isLocked;

    // events
    if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

    if (wasLocked && wasLocked !== swiper.isLocked) {
      swiper.isEnd = false;
      swiper.navigation.update();
    }
  }

  var checkOverflow$1 = { checkOverflow };

  var defaults = {
    init: true,
    direction: 'horizontal',
    touchEventsTarget: 'container',
    initialSlide: 0,
    speed: 300,
    cssMode: false,
    updateOnWindowResize: true,
    //
    preventInteractionOnTransition: false,

    // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
    edgeSwipeDetection: false,
    edgeSwipeThreshold: 20,

    // Free mode
    freeMode: false,
    freeModeMomentum: true,
    freeModeMomentumRatio: 1,
    freeModeMomentumBounce: true,
    freeModeMomentumBounceRatio: 1,
    freeModeMomentumVelocityRatio: 1,
    freeModeSticky: false,
    freeModeMinimumVelocity: 0.02,

    // Autoheight
    autoHeight: false,

    // Set wrapper width
    setWrapperSize: false,

    // Virtual Translate
    virtualTranslate: false,

    // Effects
    effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

    // Breakpoints
    breakpoints: undefined,

    // Slides grid
    spaceBetween: 0,
    slidesPerView: 1,
    slidesPerColumn: 1,
    slidesPerColumnFill: 'column',
    slidesPerGroup: 1,
    slidesPerGroupSkip: 0,
    centeredSlides: false,
    centeredSlidesBounds: false,
    slidesOffsetBefore: 0, // in px
    slidesOffsetAfter: 0, // in px
    normalizeSlideIndex: true,
    centerInsufficientSlides: false,

    // Disable swiper and hide navigation when container not overflow
    watchOverflow: false,

    // Round length
    roundLengths: false,

    // Touches
    touchRatio: 1,
    touchAngle: 45,
    simulateTouch: true,
    shortSwipes: true,
    longSwipes: true,
    longSwipesRatio: 0.5,
    longSwipesMs: 300,
    followFinger: true,
    allowTouchMove: true,
    threshold: 0,
    touchMoveStopPropagation: false,
    touchStartPreventDefault: true,
    touchStartForcePreventDefault: false,
    touchReleaseOnEdges: false,

    // Unique Navigation Elements
    uniqueNavElements: true,

    // Resistance
    resistance: true,
    resistanceRatio: 0.85,

    // Progress
    watchSlidesProgress: false,
    watchSlidesVisibility: false,

    // Cursor
    grabCursor: false,

    // Clicks
    preventClicks: true,
    preventClicksPropagation: true,
    slideToClickedSlide: false,

    // Images
    preloadImages: true,
    updateOnImagesReady: true,

    // loop
    loop: false,
    loopAdditionalSlides: 0,
    loopedSlides: null,
    loopFillGroupWithBlank: false,

    // Swiping/no swiping
    allowSlidePrev: true,
    allowSlideNext: true,
    swipeHandler: null, // '.swipe-handler',
    noSwiping: true,
    noSwipingClass: 'swiper-no-swiping',
    noSwipingSelector: null,

    // Passive Listeners
    passiveListeners: true,

    // NS
    containerModifierClass: 'swiper-container-', // NEW
    slideClass: 'swiper-slide',
    slideBlankClass: 'swiper-slide-invisible-blank',
    slideActiveClass: 'swiper-slide-active',
    slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
    slideVisibleClass: 'swiper-slide-visible',
    slideDuplicateClass: 'swiper-slide-duplicate',
    slideNextClass: 'swiper-slide-next',
    slideDuplicateNextClass: 'swiper-slide-duplicate-next',
    slidePrevClass: 'swiper-slide-prev',
    slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
    wrapperClass: 'swiper-wrapper',

    // Callbacks
    runCallbacksOnInit: true,
  };

  /* eslint no-param-reassign: "off" */

  const prototypes = {
    update,
    translate,
    transition: transition$1,
    slide,
    loop,
    grabCursor,
    manipulation,
    events,
    breakpoints,
    checkOverflow: checkOverflow$1,
    classes,
    images,
  };

  const extendedDefaults = {};

  class Swiper extends Framework7Class {
    constructor(...args) {
      let el;
      let params;
      if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {
        params = args[0];
      } else {
        [el, params] = args;
      }
      if (!params) params = {};

      params = Utils.extend({}, params);
      if (el && !params.el) params.el = el;

      super(params);

      Object.keys(prototypes).forEach((prototypeGroup) => {
        Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {
          if (!Swiper.prototype[protoMethod]) {
            Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
          }
        });
      });

      // Swiper Instance
      const swiper = this;
      if (typeof swiper.modules === 'undefined') {
        swiper.modules = {};
      }
      Object.keys(swiper.modules).forEach((moduleName) => {
        const module = swiper.modules[moduleName];
        if (module.params) {
          const moduleParamName = Object.keys(module.params)[0];
          const moduleParams = module.params[moduleParamName];
          if (typeof moduleParams !== 'object' || moduleParams === null) return;
          if (!(moduleParamName in params && 'enabled' in moduleParams)) return;
          if (params[moduleParamName] === true) {
            params[moduleParamName] = { enabled: true };
          }
          if (
            typeof params[moduleParamName] === 'object'
            && !('enabled' in params[moduleParamName])
          ) {
            params[moduleParamName].enabled = true;
          }
          if (!params[moduleParamName]) params[moduleParamName] = { enabled: false };
        }
      });

      // Extend defaults with modules params
      const swiperParams = Utils.extend({}, defaults);
      swiper.useModulesParams(swiperParams);

      // Extend defaults with passed params
      swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);
      swiper.originalParams = Utils.extend({}, swiper.params);
      swiper.passedParams = Utils.extend({}, params);

      // Save Dom lib
      swiper.$ = $;

      // Find el
      const $el = $(swiper.params.el);
      el = $el[0];

      if (!el) {
        return undefined;
      }

      if ($el.length > 1) {
        const swipers = [];
        $el.each((index, containerEl) => {
          const newParams = Utils.extend({}, params, { el: containerEl });
          swipers.push(new Swiper(newParams));
        });
        return swipers;
      }

      el.swiper = swiper;
      $el.data('swiper', swiper);

      // Find Wrapper
      let $wrapperEl;
      if (el && el.shadowRoot && el.shadowRoot.querySelector) {
        $wrapperEl = $(el.shadowRoot.querySelector(`.${swiper.params.wrapperClass}`));
        // Children needs to return slot items
        $wrapperEl.children = (options) => $el.children(options);
      } else {
        $wrapperEl = $el.children(`.${swiper.params.wrapperClass}`);
      }
      // Extend Swiper
      Utils.extend(swiper, {
        $el,
        el,
        $wrapperEl,
        wrapperEl: $wrapperEl[0],

        // Classes
        classNames: [],

        // Slides
        slides: $(),
        slidesGrid: [],
        snapGrid: [],
        slidesSizesGrid: [],

        // isDirection
        isHorizontal() {
          return swiper.params.direction === 'horizontal';
        },
        isVertical() {
          return swiper.params.direction === 'vertical';
        },
        // RTL
        rtl: (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
        rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
        wrongRTL: $wrapperEl.css('display') === '-webkit-box',

        // Indexes
        activeIndex: 0,
        realIndex: 0,

        //
        isBeginning: true,
        isEnd: false,

        // Props
        translate: 0,
        previousTranslate: 0,
        progress: 0,
        velocity: 0,
        animating: false,

        // Locks
        allowSlideNext: swiper.params.allowSlideNext,
        allowSlidePrev: swiper.params.allowSlidePrev,

        // Touch Events
        touchEvents: (function touchEvents() {
          const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
          let desktop = ['mousedown', 'mousemove', 'mouseup'];
          if (Support.pointerEvents) {
            desktop = ['pointerdown', 'pointermove', 'pointerup'];
          }
          swiper.touchEventsTouch = {
            start: touch[0],
            move: touch[1],
            end: touch[2],
            cancel: touch[3],
          };
          swiper.touchEventsDesktop = {
            start: desktop[0],
            move: desktop[1],
            end: desktop[2],
          };
          return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
        }()),
        touchEventsData: {
          isTouched: undefined,
          isMoved: undefined,
          allowTouchCallbacks: undefined,
          touchStartTime: undefined,
          isScrolling: undefined,
          currentTranslate: undefined,
          startTranslate: undefined,
          allowThresholdMove: undefined,
          // Form elements to match
          formElements: 'input, select, option, textarea, button, video, label',
          // Last click time
          lastClickTime: Utils.now(),
          clickTimeout: undefined,
          // Velocities
          velocities: [],
          allowMomentumBounce: undefined,
          isTouchEvent: undefined,
          startMoving: undefined,
        },

        // Clicks
        allowClick: true,

        // Touches
        allowTouchMove: swiper.params.allowTouchMove,

        touches: {
          startX: 0,
          startY: 0,
          currentX: 0,
          currentY: 0,
          diff: 0,
        },

        // Images
        imagesToLoad: [],
        imagesLoaded: 0,

      });

      // Install Modules
      swiper.useModules();

      // Init
      if (swiper.params.init) {
        swiper.init();
      }

      // Return app instance
      return swiper;
    }

    slidesPerViewDynamic() {
      const swiper = this;
      const {
        params, slides, slidesGrid, size: swiperSize, activeIndex,
      } = swiper;
      let spv = 1;
      if (params.centeredSlides) {
        let slideSize = slides[activeIndex].swiperSlideSize;
        let breakLoop;
        for (let i = activeIndex + 1; i < slides.length; i += 1) {
          if (slides[i] && !breakLoop) {
            slideSize += slides[i].swiperSlideSize;
            spv += 1;
            if (slideSize > swiperSize) breakLoop = true;
          }
        }
        for (let i = activeIndex - 1; i >= 0; i -= 1) {
          if (slides[i] && !breakLoop) {
            slideSize += slides[i].swiperSlideSize;
            spv += 1;
            if (slideSize > swiperSize) breakLoop = true;
          }
        }
      } else {
        for (let i = activeIndex + 1; i < slides.length; i += 1) {
          if (slidesGrid[i] - slidesGrid[activeIndex] < swiperSize) {
            spv += 1;
          }
        }
      }
      return spv;
    }

    update() {
      const swiper = this;
      if (!swiper || swiper.destroyed) return;
      const { snapGrid, params } = swiper;
      // Breakpoints
      if (params.breakpoints) {
        swiper.setBreakpoint();
      }
      swiper.updateSize();
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();

      function setTranslate() {
        const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
        const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
        swiper.setTranslate(newTranslate);
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
      }
      let translated;
      if (swiper.params.freeMode) {
        setTranslate();
        if (swiper.params.autoHeight) {
          swiper.updateAutoHeight();
        }
      } else {
        if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
          translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
        } else {
          translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
        }
        if (!translated) {
          setTranslate();
        }
      }
      if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
        swiper.checkOverflow();
      }
      swiper.emit('update');
    }

    changeDirection(newDirection, needUpdate = true) {
      const swiper = this;
      const currentDirection = swiper.params.direction;
      if (!newDirection) {
        // eslint-disable-next-line
        newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
      }
      if ((newDirection === currentDirection) || (newDirection !== 'horizontal' && newDirection !== 'vertical')) {
        return swiper;
      }

      swiper.$el
        .removeClass(`${swiper.params.containerModifierClass}${currentDirection}`)
        .addClass(`${swiper.params.containerModifierClass}${newDirection}`);

      swiper.params.direction = newDirection;

      swiper.slides.each((slideIndex, slideEl) => {
        if (newDirection === 'vertical') {
          slideEl.style.width = '';
        } else {
          slideEl.style.height = '';
        }
      });

      swiper.emit('changeDirection');
      if (needUpdate) swiper.update();

      return swiper;
    }

    init() {
      const swiper = this;
      if (swiper.initialized) return;

      swiper.emit('beforeInit');

      // Set breakpoint
      if (swiper.params.breakpoints) {
        swiper.setBreakpoint();
      }

      // Add Classes
      swiper.addClasses();

      // Create loop
      if (swiper.params.loop) {
        swiper.loopCreate();
      }

      // Update size
      swiper.updateSize();

      // Update slides
      swiper.updateSlides();

      if (swiper.params.watchOverflow) {
        swiper.checkOverflow();
      }

      // Set Grab Cursor
      if (swiper.params.grabCursor) {
        swiper.setGrabCursor();
      }

      if (swiper.params.preloadImages) {
        swiper.preloadImages();
      }

      // Slide To Initial Slide
      if (swiper.params.loop) {
        swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);
      } else {
        swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);
      }

      // Attach events
      swiper.attachEvents();

      // Init Flag
      swiper.initialized = true;

      // Emit
      swiper.emit('init');
    }

    destroy(deleteInstance = true, cleanStyles = true) {
      const swiper = this;
      const {
        params, $el, $wrapperEl, slides,
      } = swiper;

      if (typeof swiper.params === 'undefined' || swiper.destroyed) {
        return null;
      }

      swiper.emit('beforeDestroy');

      // Init Flag
      swiper.initialized = false;

      // Detach events
      swiper.detachEvents();

      // Destroy loop
      if (params.loop) {
        swiper.loopDestroy();
      }

      // Cleanup styles
      if (cleanStyles) {
        swiper.removeClasses();
        $el.removeAttr('style');
        $wrapperEl.removeAttr('style');
        if (slides && slides.length) {
          slides
            .removeClass([
              params.slideVisibleClass,
              params.slideActiveClass,
              params.slideNextClass,
              params.slidePrevClass,
            ].join(' '))
            .removeAttr('style')
            .removeAttr('data-swiper-slide-index');
        }
      }

      swiper.emit('destroy');

      // Detach emitter events
      Object.keys(swiper.eventsListeners).forEach((eventName) => {
        swiper.off(eventName);
      });

      if (deleteInstance !== false) {
        swiper.$el[0].swiper = null;
        swiper.$el.data('swiper', null);
        Utils.deleteProps(swiper);
      }
      swiper.destroyed = true;

      return null;
    }

    static extendDefaults(newDefaults) {
      Utils.extend(extendedDefaults, newDefaults);
    }

    static get extendedDefaults() {
      return extendedDefaults;
    }

    static get defaults() {
      return defaults;
    }

    static get Class() {
      return Framework7Class;
    }

    static get $() {
      return $;
    }
  }

  var Device$1 = {
    name: 'device',
    proto: {
      device: Device,
    },
    static: {
      device: Device,
    },
  };

  var Support$1 = {
    name: 'support',
    proto: {
      support: Support,
    },
    static: {
      support: Support,
    },
  };

  const Browser = (function Browser() {
    function isSafari() {
      const ua = win.navigator.userAgent.toLowerCase();
      return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);
    }
    return {
      isEdge: !!win.navigator.userAgent.match(/Edge/g),
      isSafari: isSafari(),
      isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(win.navigator.userAgent),
    };
  }());

  var Browser$1 = {
    name: 'browser',
    proto: {
      browser: Browser,
    },
    static: {
      browser: Browser,
    },
  };

  var Resize = {
    name: 'resize',
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        resize: {
          resizeHandler() {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            swiper.emit('beforeResize');
            swiper.emit('resize');
          },
          orientationChangeHandler() {
            if (!swiper || swiper.destroyed || !swiper.initialized) return;
            swiper.emit('orientationchange');
          },
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        // Emit resize
        win.addEventListener('resize', swiper.resize.resizeHandler);

        // Emit orientationchange
        win.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
      },
      destroy() {
        const swiper = this;
        win.removeEventListener('resize', swiper.resize.resizeHandler);
        win.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
      },
    },
  };

  const Observer = {
    func: win.MutationObserver || win.WebkitMutationObserver,
    attach(target, options = {}) {
      const swiper = this;

      const ObserverFunc = Observer.func;
      const observer = new ObserverFunc((mutations) => {
        // The observerUpdate event should only be triggered
        // once despite the number of mutations.  Additional
        // triggers are redundant and are very costly
        if (mutations.length === 1) {
          swiper.emit('observerUpdate', mutations[0]);
          return;
        }
        const observerUpdate = function observerUpdate() {
          swiper.emit('observerUpdate', mutations[0]);
        };

        if (win.requestAnimationFrame) {
          win.requestAnimationFrame(observerUpdate);
        } else {
          win.setTimeout(observerUpdate, 0);
        }
      });

      observer.observe(target, {
        attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
        childList: typeof options.childList === 'undefined' ? true : options.childList,
        characterData: typeof options.characterData === 'undefined' ? true : options.characterData,
      });

      swiper.observer.observers.push(observer);
    },
    init() {
      const swiper = this;
      if (!Support.observer || !swiper.params.observer) return;
      if (swiper.params.observeParents) {
        const containerParents = swiper.$el.parents();
        for (let i = 0; i < containerParents.length; i += 1) {
          swiper.observer.attach(containerParents[i]);
        }
      }
      // Observe container
      swiper.observer.attach(swiper.$el[0], { childList: swiper.params.observeSlideChildren });

      // Observe wrapper
      swiper.observer.attach(swiper.$wrapperEl[0], { attributes: false });
    },
    destroy() {
      const swiper = this;
      swiper.observer.observers.forEach((observer) => {
        observer.disconnect();
      });
      swiper.observer.observers = [];
    },
  };

  var Observer$1 = {
    name: 'observer',
    params: {
      observer: false,
      observeParents: false,
      observeSlideChildren: false,
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        observer: {
          init: Observer.init.bind(swiper),
          attach: Observer.attach.bind(swiper),
          destroy: Observer.destroy.bind(swiper),
          observers: [],
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        swiper.observer.init();
      },
      destroy() {
        const swiper = this;
        swiper.observer.destroy();
      },
    },
  };

  const Virtual = {
    update(force) {
      const swiper = this;
      const { slidesPerView, slidesPerGroup, centeredSlides } = swiper.params;
      const { addSlidesBefore, addSlidesAfter } = swiper.params.virtual;
      const {
        from: previousFrom,
        to: previousTo,
        slides,
        slidesGrid: previousSlidesGrid,
        renderSlide,
        offset: previousOffset,
      } = swiper.virtual;
      swiper.updateActiveIndex();
      const activeIndex = swiper.activeIndex || 0;

      let offsetProp;
      if (swiper.rtlTranslate) offsetProp = 'right';
      else offsetProp = swiper.isHorizontal() ? 'left' : 'top';

      let slidesAfter;
      let slidesBefore;
      if (centeredSlides) {
        slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
        slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
      } else {
        slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesBefore;
        slidesBefore = slidesPerGroup + addSlidesAfter;
      }
      const from = Math.max((activeIndex || 0) - slidesBefore, 0);
      const to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);
      const offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);

      Utils.extend(swiper.virtual, {
        from,
        to,
        offset,
        slidesGrid: swiper.slidesGrid,
      });

      function onRendered() {
        swiper.updateSlides();
        swiper.updateProgress();
        swiper.updateSlidesClasses();
        if (swiper.lazy && swiper.params.lazy.enabled) {
          swiper.lazy.load();
        }
      }

      if (previousFrom === from && previousTo === to && !force) {
        if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
          swiper.slides.css(offsetProp, `${offset}px`);
        }
        swiper.updateProgress();
        return;
      }
      if (swiper.params.virtual.renderExternal) {
        swiper.params.virtual.renderExternal.call(swiper, {
          offset,
          from,
          to,
          slides: (function getSlides() {
            const slidesToRender = [];
            for (let i = from; i <= to; i += 1) {
              slidesToRender.push(slides[i]);
            }
            return slidesToRender;
          }()),
        });
        onRendered();
        return;
      }
      const prependIndexes = [];
      const appendIndexes = [];
      if (force) {
        swiper.$wrapperEl.find(`.${swiper.params.slideClass}`).remove();
      } else {
        for (let i = previousFrom; i <= previousTo; i += 1) {
          if (i < from || i > to) {
            swiper.$wrapperEl.find(`.${swiper.params.slideClass}[data-swiper-slide-index="${i}"]`).remove();
          }
        }
      }
      for (let i = 0; i < slides.length; i += 1) {
        if (i >= from && i <= to) {
          if (typeof previousTo === 'undefined' || force) {
            appendIndexes.push(i);
          } else {
            if (i > previousTo) appendIndexes.push(i);
            if (i < previousFrom) prependIndexes.push(i);
          }
        }
      }
      appendIndexes.forEach((index) => {
        swiper.$wrapperEl.append(renderSlide(slides[index], index));
      });
      prependIndexes.sort((a, b) => b - a).forEach((index) => {
        swiper.$wrapperEl.prepend(renderSlide(slides[index], index));
      });
      swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, `${offset}px`);
      onRendered();
    },
    renderSlide(slide, index) {
      const swiper = this;
      const params = swiper.params.virtual;
      if (params.cache && swiper.virtual.cache[index]) {
        return swiper.virtual.cache[index];
      }
      const $slideEl = params.renderSlide
        ? $(params.renderSlide.call(swiper, slide, index))
        : $(`<div class="${swiper.params.slideClass}" data-swiper-slide-index="${index}">${slide}</div>`);
      if (!$slideEl.attr('data-swiper-slide-index')) $slideEl.attr('data-swiper-slide-index', index);
      if (params.cache) swiper.virtual.cache[index] = $slideEl;
      return $slideEl;
    },
    appendSlide(slides) {
      const swiper = this;
      if (typeof slides === 'object' && 'length' in slides) {
        for (let i = 0; i < slides.length; i += 1) {
          if (slides[i]) swiper.virtual.slides.push(slides[i]);
        }
      } else {
        swiper.virtual.slides.push(slides);
      }
      swiper.virtual.update(true);
    },
    prependSlide(slides) {
      const swiper = this;
      const activeIndex = swiper.activeIndex;
      let newActiveIndex = activeIndex + 1;
      let numberOfNewSlides = 1;

      if (Array.isArray(slides)) {
        for (let i = 0; i < slides.length; i += 1) {
          if (slides[i]) swiper.virtual.slides.unshift(slides[i]);
        }
        newActiveIndex = activeIndex + slides.length;
        numberOfNewSlides = slides.length;
      } else {
        swiper.virtual.slides.unshift(slides);
      }
      if (swiper.params.virtual.cache) {
        const cache = swiper.virtual.cache;
        const newCache = {};
        Object.keys(cache).forEach((cachedIndex) => {
          const $cachedEl = cache[cachedIndex];
          const cachedElIndex = $cachedEl.attr('data-swiper-slide-index');
          if (cachedElIndex) {
            $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + 1);
          }
          newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;
        });
        swiper.virtual.cache = newCache;
      }
      swiper.virtual.update(true);
      swiper.slideTo(newActiveIndex, 0);
    },
    removeSlide(slidesIndexes) {
      const swiper = this;
      if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;
      let activeIndex = swiper.activeIndex;
      if (Array.isArray(slidesIndexes)) {
        for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {
          swiper.virtual.slides.splice(slidesIndexes[i], 1);
          if (swiper.params.virtual.cache) {
            delete swiper.virtual.cache[slidesIndexes[i]];
          }
          if (slidesIndexes[i] < activeIndex) activeIndex -= 1;
          activeIndex = Math.max(activeIndex, 0);
        }
      } else {
        swiper.virtual.slides.splice(slidesIndexes, 1);
        if (swiper.params.virtual.cache) {
          delete swiper.virtual.cache[slidesIndexes];
        }
        if (slidesIndexes < activeIndex) activeIndex -= 1;
        activeIndex = Math.max(activeIndex, 0);
      }
      swiper.virtual.update(true);
      swiper.slideTo(activeIndex, 0);
    },
    removeAllSlides() {
      const swiper = this;
      swiper.virtual.slides = [];
      if (swiper.params.virtual.cache) {
        swiper.virtual.cache = {};
      }
      swiper.virtual.update(true);
      swiper.slideTo(0, 0);
    },
  };

  var Virtual$1 = {
    name: 'virtual',
    params: {
      virtual: {
        enabled: false,
        slides: [],
        cache: true,
        renderSlide: null,
        renderExternal: null,
        addSlidesBefore: 0,
        addSlidesAfter: 0,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        virtual: {
          update: Virtual.update.bind(swiper),
          appendSlide: Virtual.appendSlide.bind(swiper),
          prependSlide: Virtual.prependSlide.bind(swiper),
          removeSlide: Virtual.removeSlide.bind(swiper),
          removeAllSlides: Virtual.removeAllSlides.bind(swiper),
          renderSlide: Virtual.renderSlide.bind(swiper),
          slides: swiper.params.virtual.slides,
          cache: {},
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        if (!swiper.params.virtual.enabled) return;
        swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);
        const overwriteParams = {
          watchSlidesProgress: true,
        };
        Utils.extend(swiper.params, overwriteParams);
        Utils.extend(swiper.originalParams, overwriteParams);

        if (!swiper.params.initialSlide) {
          swiper.virtual.update();
        }
      },
      setTranslate() {
        const swiper = this;
        if (!swiper.params.virtual.enabled) return;
        swiper.virtual.update();
      },
    },
  };

  const Keyboard = {
    handle(event) {
      const swiper = this;
      const { rtlTranslate: rtl } = swiper;
      let e = event;
      if (e.originalEvent) e = e.originalEvent; // jquery fix
      const kc = e.keyCode || e.charCode;
      // Directions locks
      if (!swiper.allowSlideNext && ((swiper.isHorizontal() && kc === 39) || (swiper.isVertical() && kc === 40) || kc === 34)) {
        return false;
      }
      if (!swiper.allowSlidePrev && ((swiper.isHorizontal() && kc === 37) || (swiper.isVertical() && kc === 38) || kc === 33)) {
        return false;
      }
      if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {
        return undefined;
      }
      if (doc.activeElement && doc.activeElement.nodeName && (doc.activeElement.nodeName.toLowerCase() === 'input' || doc.activeElement.nodeName.toLowerCase() === 'textarea')) {
        return undefined;
      }
      if (swiper.params.keyboard.onlyInViewport && (kc === 33 || kc === 34 || kc === 37 || kc === 39 || kc === 38 || kc === 40)) {
        let inView = false;
        // Check that swiper should be inside of visible area of window
        if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {
          return undefined;
        }
        const windowWidth = win.innerWidth;
        const windowHeight = win.innerHeight;
        const swiperOffset = swiper.$el.offset();
        if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
        const swiperCoord = [
          [swiperOffset.left, swiperOffset.top],
          [swiperOffset.left + swiper.width, swiperOffset.top],
          [swiperOffset.left, swiperOffset.top + swiper.height],
          [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height],
        ];
        for (let i = 0; i < swiperCoord.length; i += 1) {
          const point = swiperCoord[i];
          if (
            point[0] >= 0 && point[0] <= windowWidth
            && point[1] >= 0 && point[1] <= windowHeight
          ) {
            inView = true;
          }
        }
        if (!inView) return undefined;
      }
      if (swiper.isHorizontal()) {
        if (kc === 33 || kc === 34 || kc === 37 || kc === 39) {
          if (e.preventDefault) e.preventDefault();
          else e.returnValue = false;
        }
        if (((kc === 34 || kc === 39) && !rtl) || ((kc === 33 || kc === 37) && rtl)) swiper.slideNext();
        if (((kc === 33 || kc === 37) && !rtl) || ((kc === 34 || kc === 39) && rtl)) swiper.slidePrev();
      } else {
        if (kc === 33 || kc === 34 || kc === 38 || kc === 40) {
          if (e.preventDefault) e.preventDefault();
          else e.returnValue = false;
        }
        if (kc === 34 || kc === 40) swiper.slideNext();
        if (kc === 33 || kc === 38) swiper.slidePrev();
      }
      swiper.emit('keyPress', kc);
      return undefined;
    },
    enable() {
      const swiper = this;
      if (swiper.keyboard.enabled) return;
      $(doc).on('keydown', swiper.keyboard.handle);
      swiper.keyboard.enabled = true;
    },
    disable() {
      const swiper = this;
      if (!swiper.keyboard.enabled) return;
      $(doc).off('keydown', swiper.keyboard.handle);
      swiper.keyboard.enabled = false;
    },
  };

  var Keyboard$1 = {
    name: 'keyboard',
    params: {
      keyboard: {
        enabled: false,
        onlyInViewport: true,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        keyboard: {
          enabled: false,
          enable: Keyboard.enable.bind(swiper),
          disable: Keyboard.disable.bind(swiper),
          handle: Keyboard.handle.bind(swiper),
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        if (swiper.params.keyboard.enabled) {
          swiper.keyboard.enable();
        }
      },
      destroy() {
        const swiper = this;
        if (swiper.keyboard.enabled) {
          swiper.keyboard.disable();
        }
      },
    },
  };

  function isEventSupported() {
    const eventName = 'onwheel';
    let isSupported = eventName in doc;

    if (!isSupported) {
      const element = doc.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }

    if (!isSupported
      && doc.implementation
      && doc.implementation.hasFeature
      // always returns true in newer browsers as per the standard.
      // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
      && doc.implementation.hasFeature('', '') !== true
    ) {
      // This is the only way to test support for the `wheel` event in IE9+.
      isSupported = doc.implementation.hasFeature('Events.wheel', '3.0');
    }

    return isSupported;
  }
  const Mousewheel = {
    lastScrollTime: Utils.now(),
    lastEventBeforeSnap: undefined,
    recentWheelEvents: [],
    event() {
      if (win.navigator.userAgent.indexOf('firefox') > -1) return 'DOMMouseScroll';
      return isEventSupported() ? 'wheel' : 'mousewheel';
    },
    normalize(e) {
      // Reasonable defaults
      const PIXEL_STEP = 10;
      const LINE_HEIGHT = 40;
      const PAGE_HEIGHT = 800;

      let sX = 0;
      let sY = 0; // spinX, spinY
      let pX = 0;
      let pY = 0; // pixelX, pixelY

      // Legacy
      if ('detail' in e) {
        sY = e.detail;
      }
      if ('wheelDelta' in e) {
        sY = -e.wheelDelta / 120;
      }
      if ('wheelDeltaY' in e) {
        sY = -e.wheelDeltaY / 120;
      }
      if ('wheelDeltaX' in e) {
        sX = -e.wheelDeltaX / 120;
      }

      // side scrolling on FF with DOMMouseScroll
      if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
        sX = sY;
        sY = 0;
      }

      pX = sX * PIXEL_STEP;
      pY = sY * PIXEL_STEP;

      if ('deltaY' in e) {
        pY = e.deltaY;
      }
      if ('deltaX' in e) {
        pX = e.deltaX;
      }

      if (e.shiftKey && !pX) { // if user scrolls with shift he wants horizontal scroll
        pX = pY;
        pY = 0;
      }

      if ((pX || pY) && e.deltaMode) {
        if (e.deltaMode === 1) { // delta in LINE units
          pX *= LINE_HEIGHT;
          pY *= LINE_HEIGHT;
        } else { // delta in PAGE units
          pX *= PAGE_HEIGHT;
          pY *= PAGE_HEIGHT;
        }
      }

      // Fall-back if spin cannot be determined
      if (pX && !sX) {
        sX = (pX < 1) ? -1 : 1;
      }
      if (pY && !sY) {
        sY = (pY < 1) ? -1 : 1;
      }

      return {
        spinX: sX,
        spinY: sY,
        pixelX: pX,
        pixelY: pY,
      };
    },
    handleMouseEnter() {
      const swiper = this;
      swiper.mouseEntered = true;
    },
    handleMouseLeave() {
      const swiper = this;
      swiper.mouseEntered = false;
    },
    handle(event) {
      let e = event;
      const swiper = this;
      const params = swiper.params.mousewheel;

      if (swiper.params.cssMode) {
        e.preventDefault();
      }

      let target = swiper.$el;
      if (swiper.params.mousewheel.eventsTarged !== 'container') {
        target = $(swiper.params.mousewheel.eventsTarged);
      }
      if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;

      if (e.originalEvent) e = e.originalEvent; // jquery fix
      let delta = 0;
      const rtlFactor = swiper.rtlTranslate ? -1 : 1;

      const data = Mousewheel.normalize(e);

      if (params.forceToAxis) {
        if (swiper.isHorizontal()) {
          if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = data.pixelX * rtlFactor;
          else return true;
        } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = data.pixelY;
        else return true;
      } else {
        delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
      }

      if (delta === 0) return true;

      if (params.invert) delta = -delta;

      if (!swiper.params.freeMode) {
        // Register the new event in a variable which stores the relevant data
        const newEvent = {
          time: Utils.now(),
          delta: Math.abs(delta),
          direction: Math.sign(delta),
          raw: event,
        };

        // Keep the most recent events
        const recentWheelEvents = swiper.mousewheel.recentWheelEvents;
        if (recentWheelEvents.length >= 2) {
          recentWheelEvents.shift(); // only store the last N events
        }
        const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
        recentWheelEvents.push(newEvent);

        // If there is at least one previous recorded event:
        //   If direction has changed or
        //   if the scroll is quicker than the previous one:
        //     Animate the slider.
        // Else (this is the first time the wheel is moved):
        //     Animate the slider.
        if (prevEvent) {
          if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {
            swiper.mousewheel.animateSlider(newEvent);
          }
        } else {
          swiper.mousewheel.animateSlider(newEvent);
        }

        // If it's time to release the scroll:
        //   Return now so you don't hit the preventDefault.
        if (swiper.mousewheel.releaseScroll(newEvent)) {
          return true;
        }
      } else {
        // Freemode or scrollContainer:

        // If we recently snapped after a momentum scroll, then ignore wheel events
        // to give time for the deceleration to finish. Stop ignoring after 500 msecs
        // or if it's a new scroll (larger delta or inverse sign as last event before
        // an end-of-momentum snap).
        const newEvent = { time: Utils.now(), delta: Math.abs(delta), direction: Math.sign(delta) };
        const { lastEventBeforeSnap } = swiper.mousewheel;
        const ignoreWheelEvents = lastEventBeforeSnap
          && newEvent.time < lastEventBeforeSnap.time + 500
          && newEvent.delta <= lastEventBeforeSnap.delta
          && newEvent.direction === lastEventBeforeSnap.direction;
        if (!ignoreWheelEvents) {
          swiper.mousewheel.lastEventBeforeSnap = undefined;

          if (swiper.params.loop) {
            swiper.loopFix();
          }
          let position = swiper.getTranslate() + (delta * params.sensitivity);
          const wasBeginning = swiper.isBeginning;
          const wasEnd = swiper.isEnd;

          if (position >= swiper.minTranslate()) position = swiper.minTranslate();
          if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();

          swiper.setTransition(0);
          swiper.setTranslate(position);
          swiper.updateProgress();
          swiper.updateActiveIndex();
          swiper.updateSlidesClasses();

          if ((!wasBeginning && swiper.isBeginning) || (!wasEnd && swiper.isEnd)) {
            swiper.updateSlidesClasses();
          }

          if (swiper.params.freeModeSticky) {
            // When wheel scrolling starts with sticky (aka snap) enabled, then detect
            // the end of a momentum scroll by storing recent (N=15?) wheel events.
            // 1. do all N events have decreasing or same (absolute value) delta?
            // 2. did all N events arrive in the last M (M=500?) msecs?
            // 3. does the earliest event have an (absolute value) delta that's
            //    at least P (P=1?) larger than the most recent event's delta?
            // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?
            // If 1-4 are "yes" then we're near the end of a momuntum scroll deceleration.
            // Snap immediately and ignore remaining wheel events in this scroll.
            // See comment above for "remaining wheel events in this scroll" determination.
            // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.
            clearTimeout(swiper.mousewheel.timeout);
            swiper.mousewheel.timeout = undefined;
            const recentWheelEvents = swiper.mousewheel.recentWheelEvents;
            if (recentWheelEvents.length >= 15) {
              recentWheelEvents.shift(); // only store the last N events
            }
            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;
            const firstEvent = recentWheelEvents[0];
            recentWheelEvents.push(newEvent);
            if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {
              // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.
              recentWheelEvents.splice(0);
            } else if (recentWheelEvents.length >= 15
                && newEvent.time - firstEvent.time < 500
                && firstEvent.delta - newEvent.delta >= 1
                && newEvent.delta <= 6
            ) {
              // We're at the end of the deceleration of a momentum scroll, so there's no need
              // to wait for more events. Snap ASAP on the next tick.
              // Also, because there's some remaining momentum we'll bias the snap in the
              // direction of the ongoing scroll because it's better UX for the scroll to snap
              // in the same direction as the scroll instead of reversing to snap.  Therefore,
              // if it's already scrolled more than 20% in the current direction, keep going.
              const snapToThreshold = delta > 0 ? 0.8 : 0.2;
              swiper.mousewheel.lastEventBeforeSnap = newEvent;
              recentWheelEvents.splice(0);
              swiper.mousewheel.timeout = Utils.nextTick(() => {
                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
              }, 0); // no delay; move on next tick
            }
            if (!swiper.mousewheel.timeout) {
              // if we get here, then we haven't detected the end of a momentum scroll, so
              // we'll consider a scroll "complete" when there haven't been any wheel events
              // for 500ms.
              swiper.mousewheel.timeout = Utils.nextTick(() => {
                const snapToThreshold = 0.5;
                swiper.mousewheel.lastEventBeforeSnap = newEvent;
                recentWheelEvents.splice(0);
                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);
              }, 500);
            }
          }

          // Emit event
          if (!ignoreWheelEvents) swiper.emit('scroll', e);

          // Stop autoplay
          if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();
          // Return page scroll on edge positions
          if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;
        }
      }

      if (e.preventDefault) e.preventDefault();
      else e.returnValue = false;
      return false;
    },
    animateSlider(newEvent) {
      const swiper = this;
      // If the movement is NOT big enough and
      // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):
      //   Don't go any further (avoid insignificant scroll movement).
      if (newEvent.delta >= 6 && Utils.now() - swiper.mousewheel.lastScrollTime < 60) {
        // Return false as a default
        return true;
      }
      // If user is scrolling towards the end:
      //   If the slider hasn't hit the latest slide or
      //   if the slider is a loop and
      //   if the slider isn't moving right now:
      //     Go to next slide and
      //     emit a scroll event.
      // Else (the user is scrolling towards the beginning) and
      // if the slider hasn't hit the first slide or
      // if the slider is a loop and
      // if the slider isn't moving right now:
      //   Go to prev slide and
      //   emit a scroll event.
      if (newEvent.direction < 0) {
        if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
          swiper.slideNext();
          swiper.emit('scroll', newEvent.raw);
        }
      } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
        swiper.slidePrev();
        swiper.emit('scroll', newEvent.raw);
      }
      // If you got here is because an animation has been triggered so store the current time
      swiper.mousewheel.lastScrollTime = (new win.Date()).getTime();
      // Return false as a default
      return false;
    },
    releaseScroll(newEvent) {
      const swiper = this;
      const params = swiper.params.mousewheel;
      if (newEvent.direction < 0) {
        if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {
          // Return true to animate scroll on edges
          return true;
        }
      } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {
        // Return true to animate scroll on edges
        return true;
      }
      return false;
    },
    enable() {
      const swiper = this;
      const event = Mousewheel.event();
      if (swiper.params.cssMode) {
        swiper.wrapperEl.removeEventListener(event, swiper.mousewheel.handle);
        return true;
      }
      if (!event) return false;
      if (swiper.mousewheel.enabled) return false;
      let target = swiper.$el;
      if (swiper.params.mousewheel.eventsTarged !== 'container') {
        target = $(swiper.params.mousewheel.eventsTarged);
      }
      target.on('mouseenter', swiper.mousewheel.handleMouseEnter);
      target.on('mouseleave', swiper.mousewheel.handleMouseLeave);
      target.on(event, swiper.mousewheel.handle);
      swiper.mousewheel.enabled = true;
      return true;
    },
    disable() {
      const swiper = this;
      const event = Mousewheel.event();
      if (swiper.params.cssMode) {
        swiper.wrapperEl.addEventListener(event, swiper.mousewheel.handle);
        return true;
      }
      if (!event) return false;
      if (!swiper.mousewheel.enabled) return false;
      let target = swiper.$el;
      if (swiper.params.mousewheel.eventsTarged !== 'container') {
        target = $(swiper.params.mousewheel.eventsTarged);
      }
      target.off(event, swiper.mousewheel.handle);
      swiper.mousewheel.enabled = false;
      return true;
    },
  };

  var Mousewheel$1 = {
    name: 'mousewheel',
    params: {
      mousewheel: {
        enabled: false,
        releaseOnEdges: false,
        invert: false,
        forceToAxis: false,
        sensitivity: 1,
        eventsTarged: 'container',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        mousewheel: {
          enabled: false,
          enable: Mousewheel.enable.bind(swiper),
          disable: Mousewheel.disable.bind(swiper),
          handle: Mousewheel.handle.bind(swiper),
          handleMouseEnter: Mousewheel.handleMouseEnter.bind(swiper),
          handleMouseLeave: Mousewheel.handleMouseLeave.bind(swiper),
          animateSlider: Mousewheel.animateSlider.bind(swiper),
          releaseScroll: Mousewheel.releaseScroll.bind(swiper),
          lastScrollTime: Utils.now(),
          lastEventBeforeSnap: undefined,
          recentWheelEvents: [],
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
          swiper.mousewheel.disable();
        }
        if (swiper.params.mousewheel.enabled) swiper.mousewheel.enable();
      },
      destroy() {
        const swiper = this;
        if (swiper.params.cssMode) {
          swiper.mousewheel.enable();
        }
        if (swiper.mousewheel.enabled) swiper.mousewheel.disable();
      },
    },
  };

  const Navigation = {
    update() {
      // Update Navigation Buttons
      const swiper = this;
      const params = swiper.params.navigation;

      if (swiper.params.loop) return;
      const { $nextEl, $prevEl } = swiper.navigation;

      if ($prevEl && $prevEl.length > 0) {
        if (swiper.isBeginning) {
          $prevEl.addClass(params.disabledClass);
        } else {
          $prevEl.removeClass(params.disabledClass);
        }
        $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
      if ($nextEl && $nextEl.length > 0) {
        if (swiper.isEnd) {
          $nextEl.addClass(params.disabledClass);
        } else {
          $nextEl.removeClass(params.disabledClass);
        }
        $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
    },
    onPrevClick(e) {
      const swiper = this;
      e.preventDefault();
      if (swiper.isBeginning && !swiper.params.loop) return;
      swiper.slidePrev();
    },
    onNextClick(e) {
      const swiper = this;
      e.preventDefault();
      if (swiper.isEnd && !swiper.params.loop) return;
      swiper.slideNext();
    },
    init() {
      const swiper = this;
      const params = swiper.params.navigation;
      if (!(params.nextEl || params.prevEl)) return;

      let $nextEl;
      let $prevEl;
      if (params.nextEl) {
        $nextEl = $(params.nextEl);
        if (
          swiper.params.uniqueNavElements
          && typeof params.nextEl === 'string'
          && $nextEl.length > 1
          && swiper.$el.find(params.nextEl).length === 1
        ) {
          $nextEl = swiper.$el.find(params.nextEl);
        }
      }
      if (params.prevEl) {
        $prevEl = $(params.prevEl);
        if (
          swiper.params.uniqueNavElements
          && typeof params.prevEl === 'string'
          && $prevEl.length > 1
          && swiper.$el.find(params.prevEl).length === 1
        ) {
          $prevEl = swiper.$el.find(params.prevEl);
        }
      }

      if ($nextEl && $nextEl.length > 0) {
        $nextEl.on('click', swiper.navigation.onNextClick);
      }
      if ($prevEl && $prevEl.length > 0) {
        $prevEl.on('click', swiper.navigation.onPrevClick);
      }

      Utils.extend(swiper.navigation, {
        $nextEl,
        nextEl: $nextEl && $nextEl[0],
        $prevEl,
        prevEl: $prevEl && $prevEl[0],
      });
    },
    destroy() {
      const swiper = this;
      const { $nextEl, $prevEl } = swiper.navigation;
      if ($nextEl && $nextEl.length) {
        $nextEl.off('click', swiper.navigation.onNextClick);
        $nextEl.removeClass(swiper.params.navigation.disabledClass);
      }
      if ($prevEl && $prevEl.length) {
        $prevEl.off('click', swiper.navigation.onPrevClick);
        $prevEl.removeClass(swiper.params.navigation.disabledClass);
      }
    },
  };

  var Navigation$1 = {
    name: 'navigation',
    params: {
      navigation: {
        nextEl: null,
        prevEl: null,

        hideOnClick: false,
        disabledClass: 'swiper-button-disabled',
        hiddenClass: 'swiper-button-hidden',
        lockClass: 'swiper-button-lock',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        navigation: {
          init: Navigation.init.bind(swiper),
          update: Navigation.update.bind(swiper),
          destroy: Navigation.destroy.bind(swiper),
          onNextClick: Navigation.onNextClick.bind(swiper),
          onPrevClick: Navigation.onPrevClick.bind(swiper),
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        swiper.navigation.init();
        swiper.navigation.update();
      },
      toEdge() {
        const swiper = this;
        swiper.navigation.update();
      },
      fromEdge() {
        const swiper = this;
        swiper.navigation.update();
      },
      destroy() {
        const swiper = this;
        swiper.navigation.destroy();
      },
      click(e) {
        const swiper = this;
        const { $nextEl, $prevEl } = swiper.navigation;
        if (
          swiper.params.navigation.hideOnClick
          && !$(e.target).is($prevEl)
          && !$(e.target).is($nextEl)
        ) {
          let isHidden;
          if ($nextEl) {
            isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
          } else if ($prevEl) {
            isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
          }
          if (isHidden === true) {
            swiper.emit('navigationShow', swiper);
          } else {
            swiper.emit('navigationHide', swiper);
          }
          if ($nextEl) {
            $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
          }
          if ($prevEl) {
            $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
          }
        }
      },
    },
  };

  const Pagination = {
    update() {
      // Render || Update Pagination bullets/items
      const swiper = this;
      const rtl = swiper.rtl;
      const params = swiper.params.pagination;
      if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
      const $el = swiper.pagination.$el;
      // Current/Total
      let current;
      const total = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
      if (swiper.params.loop) {
        current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);
        if (current > slidesLength - 1 - (swiper.loopedSlides * 2)) {
          current -= (slidesLength - (swiper.loopedSlides * 2));
        }
        if (current > total - 1) current -= total;
        if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
      } else if (typeof swiper.snapIndex !== 'undefined') {
        current = swiper.snapIndex;
      } else {
        current = swiper.activeIndex || 0;
      }
      // Types
      if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
        const bullets = swiper.pagination.bullets;
        let firstIndex;
        let lastIndex;
        let midIndex;
        if (params.dynamicBullets) {
          swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
          $el.css(swiper.isHorizontal() ? 'width' : 'height', `${swiper.pagination.bulletSize * (params.dynamicMainBullets + 4)}px`);
          if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
            swiper.pagination.dynamicBulletIndex += (current - swiper.previousIndex);
            if (swiper.pagination.dynamicBulletIndex > (params.dynamicMainBullets - 1)) {
              swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
            } else if (swiper.pagination.dynamicBulletIndex < 0) {
              swiper.pagination.dynamicBulletIndex = 0;
            }
          }
          firstIndex = current - swiper.pagination.dynamicBulletIndex;
          lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
          midIndex = (lastIndex + firstIndex) / 2;
        }
        bullets.removeClass(`${params.bulletActiveClass} ${params.bulletActiveClass}-next ${params.bulletActiveClass}-next-next ${params.bulletActiveClass}-prev ${params.bulletActiveClass}-prev-prev ${params.bulletActiveClass}-main`);
        if ($el.length > 1) {
          bullets.each((index, bullet) => {
            const $bullet = $(bullet);
            const bulletIndex = $bullet.index();
            if (bulletIndex === current) {
              $bullet.addClass(params.bulletActiveClass);
            }
            if (params.dynamicBullets) {
              if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
                $bullet.addClass(`${params.bulletActiveClass}-main`);
              }
              if (bulletIndex === firstIndex) {
                $bullet
                  .prev()
                  .addClass(`${params.bulletActiveClass}-prev`)
                  .prev()
                  .addClass(`${params.bulletActiveClass}-prev-prev`);
              }
              if (bulletIndex === lastIndex) {
                $bullet
                  .next()
                  .addClass(`${params.bulletActiveClass}-next`)
                  .next()
                  .addClass(`${params.bulletActiveClass}-next-next`);
              }
            }
          });
        } else {
          const $bullet = bullets.eq(current);
          const bulletIndex = $bullet.index();
          $bullet.addClass(params.bulletActiveClass);
          if (params.dynamicBullets) {
            const $firstDisplayedBullet = bullets.eq(firstIndex);
            const $lastDisplayedBullet = bullets.eq(lastIndex);
            for (let i = firstIndex; i <= lastIndex; i += 1) {
              bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);
            }
            if (swiper.params.loop) {
              if (bulletIndex >= bullets.length - params.dynamicMainBullets) {
                for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {
                  bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);
                }
                bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);
              } else {
                $firstDisplayedBullet
                  .prev()
                  .addClass(`${params.bulletActiveClass}-prev`)
                  .prev()
                  .addClass(`${params.bulletActiveClass}-prev-prev`);
                $lastDisplayedBullet
                  .next()
                  .addClass(`${params.bulletActiveClass}-next`)
                  .next()
                  .addClass(`${params.bulletActiveClass}-next-next`);
              }
            } else {
              $firstDisplayedBullet
                .prev()
                .addClass(`${params.bulletActiveClass}-prev`)
                .prev()
                .addClass(`${params.bulletActiveClass}-prev-prev`);
              $lastDisplayedBullet
                .next()
                .addClass(`${params.bulletActiveClass}-next`)
                .next()
                .addClass(`${params.bulletActiveClass}-next-next`);
            }
          }
        }
        if (params.dynamicBullets) {
          const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
          const bulletsOffset = (((swiper.pagination.bulletSize * dynamicBulletsLength) - (swiper.pagination.bulletSize)) / 2) - (midIndex * swiper.pagination.bulletSize);
          const offsetProp = rtl ? 'right' : 'left';
          bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);
        }
      }
      if (params.type === 'fraction') {
        $el.find(`.${params.currentClass}`).text(params.formatFractionCurrent(current + 1));
        $el.find(`.${params.totalClass}`).text(params.formatFractionTotal(total));
      }
      if (params.type === 'progressbar') {
        let progressbarDirection;
        if (params.progressbarOpposite) {
          progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
        } else {
          progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
        }
        const scale = (current + 1) / total;
        let scaleX = 1;
        let scaleY = 1;
        if (progressbarDirection === 'horizontal') {
          scaleX = scale;
        } else {
          scaleY = scale;
        }
        $el.find(`.${params.progressbarFillClass}`).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);
      }
      if (params.type === 'custom' && params.renderCustom) {
        $el.html(params.renderCustom(swiper, current + 1, total));
        swiper.emit('paginationRender', swiper, $el[0]);
      } else {
        swiper.emit('paginationUpdate', swiper, $el[0]);
      }
      $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    },
    render() {
      // Render Container
      const swiper = this;
      const params = swiper.params.pagination;
      if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;

      const $el = swiper.pagination.$el;
      let paginationHTML = '';
      if (params.type === 'bullets') {
        const numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
        for (let i = 0; i < numberOfBullets; i += 1) {
          if (params.renderBullet) {
            paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
          } else {
            paginationHTML += `<${params.bulletElement} class="${params.bulletClass}"></${params.bulletElement}>`;
          }
        }
        $el.html(paginationHTML);
        swiper.pagination.bullets = $el.find(`.${params.bulletClass}`);
      }
      if (params.type === 'fraction') {
        if (params.renderFraction) {
          paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
        } else {
          paginationHTML = `<span class="${params.currentClass}"></span>`
          + ' / '
          + `<span class="${params.totalClass}"></span>`;
        }
        $el.html(paginationHTML);
      }
      if (params.type === 'progressbar') {
        if (params.renderProgressbar) {
          paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
        } else {
          paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
        }
        $el.html(paginationHTML);
      }
      if (params.type !== 'custom') {
        swiper.emit('paginationRender', swiper.pagination.$el[0]);
      }
    },
    init() {
      const swiper = this;
      const params = swiper.params.pagination;
      if (!params.el) return;

      let $el = $(params.el);
      if ($el.length === 0) return;

      if (
        swiper.params.uniqueNavElements
        && typeof params.el === 'string'
        && $el.length > 1
        && swiper.$el.find(params.el).length === 1
      ) {
        $el = swiper.$el.find(params.el);
      }

      if (params.type === 'bullets' && params.clickable) {
        $el.addClass(params.clickableClass);
      }

      $el.addClass(params.modifierClass + params.type);

      if (params.type === 'bullets' && params.dynamicBullets) {
        $el.addClass(`${params.modifierClass}${params.type}-dynamic`);
        swiper.pagination.dynamicBulletIndex = 0;
        if (params.dynamicMainBullets < 1) {
          params.dynamicMainBullets = 1;
        }
      }
      if (params.type === 'progressbar' && params.progressbarOpposite) {
        $el.addClass(params.progressbarOppositeClass);
      }

      if (params.clickable) {
        $el.on('click', `.${params.bulletClass}`, function onClick(e) {
          e.preventDefault();
          let index = $(this).index() * swiper.params.slidesPerGroup;
          if (swiper.params.loop) index += swiper.loopedSlides;
          swiper.slideTo(index);
        });
      }

      Utils.extend(swiper.pagination, {
        $el,
        el: $el[0],
      });
    },
    destroy() {
      const swiper = this;
      const params = swiper.params.pagination;
      if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
      const $el = swiper.pagination.$el;

      $el.removeClass(params.hiddenClass);
      $el.removeClass(params.modifierClass + params.type);
      if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);
      if (params.clickable) {
        $el.off('click', `.${params.bulletClass}`);
      }
    },
  };

  var Pagination$1 = {
    name: 'pagination',
    params: {
      pagination: {
        el: null,
        bulletElement: 'span',
        clickable: false,
        hideOnClick: false,
        renderBullet: null,
        renderProgressbar: null,
        renderFraction: null,
        renderCustom: null,
        progressbarOpposite: false,
        type: 'bullets', // 'bullets' or 'progressbar' or 'fraction' or 'custom'
        dynamicBullets: false,
        dynamicMainBullets: 1,
        formatFractionCurrent: (number) => number,
        formatFractionTotal: (number) => number,
        bulletClass: 'swiper-pagination-bullet',
        bulletActiveClass: 'swiper-pagination-bullet-active',
        modifierClass: 'swiper-pagination-', // NEW
        currentClass: 'swiper-pagination-current',
        totalClass: 'swiper-pagination-total',
        hiddenClass: 'swiper-pagination-hidden',
        progressbarFillClass: 'swiper-pagination-progressbar-fill',
        progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
        clickableClass: 'swiper-pagination-clickable', // NEW
        lockClass: 'swiper-pagination-lock',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        pagination: {
          init: Pagination.init.bind(swiper),
          render: Pagination.render.bind(swiper),
          update: Pagination.update.bind(swiper),
          destroy: Pagination.destroy.bind(swiper),
          dynamicBulletIndex: 0,
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        swiper.pagination.init();
        swiper.pagination.render();
        swiper.pagination.update();
      },
      activeIndexChange() {
        const swiper = this;
        if (swiper.params.loop) {
          swiper.pagination.update();
        } else if (typeof swiper.snapIndex === 'undefined') {
          swiper.pagination.update();
        }
      },
      snapIndexChange() {
        const swiper = this;
        if (!swiper.params.loop) {
          swiper.pagination.update();
        }
      },
      slidesLengthChange() {
        const swiper = this;
        if (swiper.params.loop) {
          swiper.pagination.render();
          swiper.pagination.update();
        }
      },
      snapGridLengthChange() {
        const swiper = this;
        if (!swiper.params.loop) {
          swiper.pagination.render();
          swiper.pagination.update();
        }
      },
      destroy() {
        const swiper = this;
        swiper.pagination.destroy();
      },
      click(e) {
        const swiper = this;
        if (
          swiper.params.pagination.el
          && swiper.params.pagination.hideOnClick
          && swiper.pagination.$el.length > 0
          && !$(e.target).hasClass(swiper.params.pagination.bulletClass)
        ) {
          const isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);
          if (isHidden === true) {
            swiper.emit('paginationShow', swiper);
          } else {
            swiper.emit('paginationHide', swiper);
          }
          swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
        }
      },
    },
  };

  const Scrollbar = {
    setTranslate() {
      const swiper = this;
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
      const { scrollbar, rtlTranslate: rtl, progress } = swiper;
      const {
        dragSize, trackSize, $dragEl, $el,
      } = scrollbar;
      const params = swiper.params.scrollbar;

      let newSize = dragSize;
      let newPos = (trackSize - dragSize) * progress;
      if (rtl) {
        newPos = -newPos;
        if (newPos > 0) {
          newSize = dragSize - newPos;
          newPos = 0;
        } else if (-newPos + dragSize > trackSize) {
          newSize = trackSize + newPos;
        }
      } else if (newPos < 0) {
        newSize = dragSize + newPos;
        newPos = 0;
      } else if (newPos + dragSize > trackSize) {
        newSize = trackSize - newPos;
      }
      if (swiper.isHorizontal()) {
        $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);
        $dragEl[0].style.width = `${newSize}px`;
      } else {
        $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);
        $dragEl[0].style.height = `${newSize}px`;
      }
      if (params.hide) {
        clearTimeout(swiper.scrollbar.timeout);
        $el[0].style.opacity = 1;
        swiper.scrollbar.timeout = setTimeout(() => {
          $el[0].style.opacity = 0;
          $el.transition(400);
        }, 1000);
      }
    },
    setTransition(duration) {
      const swiper = this;
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
      swiper.scrollbar.$dragEl.transition(duration);
    },
    updateSize() {
      const swiper = this;
      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;

      const { scrollbar } = swiper;
      const { $dragEl, $el } = scrollbar;

      $dragEl[0].style.width = '';
      $dragEl[0].style.height = '';
      const trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;

      const divider = swiper.size / swiper.virtualSize;
      const moveDivider = divider * (trackSize / swiper.size);
      let dragSize;
      if (swiper.params.scrollbar.dragSize === 'auto') {
        dragSize = trackSize * divider;
      } else {
        dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
      }

      if (swiper.isHorizontal()) {
        $dragEl[0].style.width = `${dragSize}px`;
      } else {
        $dragEl[0].style.height = `${dragSize}px`;
      }

      if (divider >= 1) {
        $el[0].style.display = 'none';
      } else {
        $el[0].style.display = '';
      }
      if (swiper.params.scrollbar.hide) {
        $el[0].style.opacity = 0;
      }
      Utils.extend(scrollbar, {
        trackSize,
        divider,
        moveDivider,
        dragSize,
      });
      scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);
    },
    getPointerPosition(e) {
      const swiper = this;
      if (swiper.isHorizontal()) {
        return ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].clientX : e.clientX);
      }
      return ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].clientY : e.clientY);
    },
    setDragPosition(e) {
      const swiper = this;
      const { scrollbar, rtlTranslate: rtl } = swiper;
      const {
        $el,
        dragSize,
        trackSize,
        dragStartPos,
      } = scrollbar;

      let positionRatio;
      positionRatio = ((scrollbar.getPointerPosition(e)) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top']
        - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);
      positionRatio = Math.max(Math.min(positionRatio, 1), 0);
      if (rtl) {
        positionRatio = 1 - positionRatio;
      }

      const position = swiper.minTranslate() + ((swiper.maxTranslate() - swiper.minTranslate()) * positionRatio);

      swiper.updateProgress(position);
      swiper.setTranslate(position);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    },
    onDragStart(e) {
      const swiper = this;
      const params = swiper.params.scrollbar;
      const { scrollbar, $wrapperEl } = swiper;
      const { $el, $dragEl } = scrollbar;
      swiper.scrollbar.isTouched = true;
      swiper.scrollbar.dragStartPos = (e.target === $dragEl[0] || e.target === $dragEl)
        ? scrollbar.getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;
      e.preventDefault();
      e.stopPropagation();

      $wrapperEl.transition(100);
      $dragEl.transition(100);
      scrollbar.setDragPosition(e);

      clearTimeout(swiper.scrollbar.dragTimeout);

      $el.transition(0);
      if (params.hide) {
        $el.css('opacity', 1);
      }
      if (swiper.params.cssMode) {
        swiper.$wrapperEl.css('scroll-snap-type', 'none');
      }
      swiper.emit('scrollbarDragStart', e);
    },
    onDragMove(e) {
      const swiper = this;
      const { scrollbar, $wrapperEl } = swiper;
      const { $el, $dragEl } = scrollbar;

      if (!swiper.scrollbar.isTouched) return;
      if (e.preventDefault) e.preventDefault();
      else e.returnValue = false;
      scrollbar.setDragPosition(e);
      $wrapperEl.transition(0);
      $el.transition(0);
      $dragEl.transition(0);
      swiper.emit('scrollbarDragMove', e);
    },
    onDragEnd(e) {
      const swiper = this;

      const params = swiper.params.scrollbar;
      const { scrollbar, $wrapperEl } = swiper;
      const { $el } = scrollbar;

      if (!swiper.scrollbar.isTouched) return;
      swiper.scrollbar.isTouched = false;
      if (swiper.params.cssMode) {
        swiper.$wrapperEl.css('scroll-snap-type', '');
        $wrapperEl.transition('');
      }
      if (params.hide) {
        clearTimeout(swiper.scrollbar.dragTimeout);
        swiper.scrollbar.dragTimeout = Utils.nextTick(() => {
          $el.css('opacity', 0);
          $el.transition(400);
        }, 1000);
      }
      swiper.emit('scrollbarDragEnd', e);
      if (params.snapOnRelease) {
        swiper.slideToClosest();
      }
    },
    enableDraggable() {
      const swiper = this;
      if (!swiper.params.scrollbar.el) return;
      const {
        scrollbar, touchEventsTouch, touchEventsDesktop, params,
      } = swiper;
      const $el = scrollbar.$el;
      const target = $el[0];
      const activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;
      const passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
      if (!Support.touch) {
        target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
        doc.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
        doc.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
      } else {
        target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
        target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
        target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
      }
    },
    disableDraggable() {
      const swiper = this;
      if (!swiper.params.scrollbar.el) return;
      const {
        scrollbar, touchEventsTouch, touchEventsDesktop, params,
      } = swiper;
      const $el = scrollbar.$el;
      const target = $el[0];
      const activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;
      const passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;
      if (!Support.touch) {
        target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);
        doc.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);
        doc.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);
      } else {
        target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);
        target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);
        target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);
      }
    },
    init() {
      const swiper = this;
      if (!swiper.params.scrollbar.el) return;
      const { scrollbar, $el: $swiperEl } = swiper;
      const params = swiper.params.scrollbar;

      let $el = $(params.el);
      if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {
        $el = $swiperEl.find(params.el);
      }

      let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);
      if ($dragEl.length === 0) {
        $dragEl = $(`<div class="${swiper.params.scrollbar.dragClass}"></div>`);
        $el.append($dragEl);
      }

      Utils.extend(scrollbar, {
        $el,
        el: $el[0],
        $dragEl,
        dragEl: $dragEl[0],
      });

      if (params.draggable) {
        scrollbar.enableDraggable();
      }
    },
    destroy() {
      const swiper = this;
      swiper.scrollbar.disableDraggable();
    },
  };

  var Scrollbar$1 = {
    name: 'scrollbar',
    params: {
      scrollbar: {
        el: null,
        dragSize: 'auto',
        hide: false,
        draggable: false,
        snapOnRelease: true,
        lockClass: 'swiper-scrollbar-lock',
        dragClass: 'swiper-scrollbar-drag',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        scrollbar: {
          init: Scrollbar.init.bind(swiper),
          destroy: Scrollbar.destroy.bind(swiper),
          updateSize: Scrollbar.updateSize.bind(swiper),
          setTranslate: Scrollbar.setTranslate.bind(swiper),
          setTransition: Scrollbar.setTransition.bind(swiper),
          enableDraggable: Scrollbar.enableDraggable.bind(swiper),
          disableDraggable: Scrollbar.disableDraggable.bind(swiper),
          setDragPosition: Scrollbar.setDragPosition.bind(swiper),
          getPointerPosition: Scrollbar.getPointerPosition.bind(swiper),
          onDragStart: Scrollbar.onDragStart.bind(swiper),
          onDragMove: Scrollbar.onDragMove.bind(swiper),
          onDragEnd: Scrollbar.onDragEnd.bind(swiper),
          isTouched: false,
          timeout: null,
          dragTimeout: null,
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        swiper.scrollbar.init();
        swiper.scrollbar.updateSize();
        swiper.scrollbar.setTranslate();
      },
      update() {
        const swiper = this;
        swiper.scrollbar.updateSize();
      },
      resize() {
        const swiper = this;
        swiper.scrollbar.updateSize();
      },
      observerUpdate() {
        const swiper = this;
        swiper.scrollbar.updateSize();
      },
      setTranslate() {
        const swiper = this;
        swiper.scrollbar.setTranslate();
      },
      setTransition(duration) {
        const swiper = this;
        swiper.scrollbar.setTransition(duration);
      },
      destroy() {
        const swiper = this;
        swiper.scrollbar.destroy();
      },
    },
  };

  const Parallax = {
    setTransform(el, progress) {
      const swiper = this;
      const { rtl } = swiper;

      const $el = $(el);
      const rtlFactor = rtl ? -1 : 1;

      const p = $el.attr('data-swiper-parallax') || '0';
      let x = $el.attr('data-swiper-parallax-x');
      let y = $el.attr('data-swiper-parallax-y');
      const scale = $el.attr('data-swiper-parallax-scale');
      const opacity = $el.attr('data-swiper-parallax-opacity');

      if (x || y) {
        x = x || '0';
        y = y || '0';
      } else if (swiper.isHorizontal()) {
        x = p;
        y = '0';
      } else {
        y = p;
        x = '0';
      }

      if ((x).indexOf('%') >= 0) {
        x = `${parseInt(x, 10) * progress * rtlFactor}%`;
      } else {
        x = `${x * progress * rtlFactor}px`;
      }
      if ((y).indexOf('%') >= 0) {
        y = `${parseInt(y, 10) * progress}%`;
      } else {
        y = `${y * progress}px`;
      }

      if (typeof opacity !== 'undefined' && opacity !== null) {
        const currentOpacity = opacity - ((opacity - 1) * (1 - Math.abs(progress)));
        $el[0].style.opacity = currentOpacity;
      }
      if (typeof scale === 'undefined' || scale === null) {
        $el.transform(`translate3d(${x}, ${y}, 0px)`);
      } else {
        const currentScale = scale - ((scale - 1) * (1 - Math.abs(progress)));
        $el.transform(`translate3d(${x}, ${y}, 0px) scale(${currentScale})`);
      }
    },
    setTranslate() {
      const swiper = this;
      const {
        $el, slides, progress, snapGrid,
      } = swiper;
      $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]')
        .each((index, el) => {
          swiper.parallax.setTransform(el, progress);
        });
      slides.each((slideIndex, slideEl) => {
        let slideProgress = slideEl.progress;
        if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {
          slideProgress += Math.ceil(slideIndex / 2) - (progress * (snapGrid.length - 1));
        }
        slideProgress = Math.min(Math.max(slideProgress, -1), 1);
        $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]')
          .each((index, el) => {
            swiper.parallax.setTransform(el, slideProgress);
          });
      });
    },
    setTransition(duration = this.params.speed) {
      const swiper = this;
      const { $el } = swiper;
      $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]')
        .each((index, parallaxEl) => {
          const $parallaxEl = $(parallaxEl);
          let parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;
          if (duration === 0) parallaxDuration = 0;
          $parallaxEl.transition(parallaxDuration);
        });
    },
  };

  var Parallax$1 = {
    name: 'parallax',
    params: {
      parallax: {
        enabled: false,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        parallax: {
          setTransform: Parallax.setTransform.bind(swiper),
          setTranslate: Parallax.setTranslate.bind(swiper),
          setTransition: Parallax.setTransition.bind(swiper),
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        if (!swiper.params.parallax.enabled) return;
        swiper.params.watchSlidesProgress = true;
        swiper.originalParams.watchSlidesProgress = true;
      },
      init() {
        const swiper = this;
        if (!swiper.params.parallax.enabled) return;
        swiper.parallax.setTranslate();
      },
      setTranslate() {
        const swiper = this;
        if (!swiper.params.parallax.enabled) return;
        swiper.parallax.setTranslate();
      },
      setTransition(duration) {
        const swiper = this;
        if (!swiper.params.parallax.enabled) return;
        swiper.parallax.setTransition(duration);
      },
    },
  };

  const Zoom = {
    // Calc Scale From Multi-touches
    getDistanceBetweenTouches(e) {
      if (e.targetTouches.length < 2) return 1;
      const x1 = e.targetTouches[0].pageX;
      const y1 = e.targetTouches[0].pageY;
      const x2 = e.targetTouches[1].pageX;
      const y2 = e.targetTouches[1].pageY;
      const distance = Math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2));
      return distance;
    },
    // Events
    onGestureStart(e) {
      const swiper = this;
      const params = swiper.params.zoom;
      const zoom = swiper.zoom;
      const { gesture } = zoom;
      zoom.fakeGestureTouched = false;
      zoom.fakeGestureMoved = false;
      if (!Support.gestures) {
        if (e.type !== 'touchstart' || (e.type === 'touchstart' && e.targetTouches.length < 2)) {
          return;
        }
        zoom.fakeGestureTouched = true;
        gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);
      }
      if (!gesture.$slideEl || !gesture.$slideEl.length) {
        gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);
        if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
        gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
        gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
        gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
        if (gesture.$imageWrapEl.length === 0) {
          gesture.$imageEl = undefined;
          return;
        }
      }
      if (gesture.$imageEl) {
        gesture.$imageEl.transition(0);
      }
      swiper.zoom.isScaling = true;
    },
    onGestureChange(e) {
      const swiper = this;
      const params = swiper.params.zoom;
      const zoom = swiper.zoom;
      const { gesture } = zoom;
      if (!Support.gestures) {
        if (e.type !== 'touchmove' || (e.type === 'touchmove' && e.targetTouches.length < 2)) {
          return;
        }
        zoom.fakeGestureMoved = true;
        gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);
      }
      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
      if (Support.gestures) {
        zoom.scale = e.scale * zoom.currentScale;
      } else {
        zoom.scale = (gesture.scaleMove / gesture.scaleStart) * zoom.currentScale;
      }
      if (zoom.scale > gesture.maxRatio) {
        zoom.scale = (gesture.maxRatio - 1) + (((zoom.scale - gesture.maxRatio) + 1) ** 0.5);
      }
      if (zoom.scale < params.minRatio) {
        zoom.scale = (params.minRatio + 1) - (((params.minRatio - zoom.scale) + 1) ** 0.5);
      }
      gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);
    },
    onGestureEnd(e) {
      const swiper = this;
      const params = swiper.params.zoom;
      const zoom = swiper.zoom;
      const { gesture } = zoom;
      if (!Support.gestures) {
        if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {
          return;
        }
        if (e.type !== 'touchend' || (e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android)) {
          return;
        }
        zoom.fakeGestureTouched = false;
        zoom.fakeGestureMoved = false;
      }
      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
      zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
      gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);
      zoom.currentScale = zoom.scale;
      zoom.isScaling = false;
      if (zoom.scale === 1) gesture.$slideEl = undefined;
    },
    onTouchStart(e) {
      const swiper = this;
      const zoom = swiper.zoom;
      const { gesture, image } = zoom;
      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
      if (image.isTouched) return;
      if (Device.android && e.cancelable) e.preventDefault();
      image.isTouched = true;
      image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
      image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
    },
    onTouchMove(e) {
      const swiper = this;
      const zoom = swiper.zoom;
      const { gesture, image, velocity } = zoom;
      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
      swiper.allowClick = false;
      if (!image.isTouched || !gesture.$slideEl) return;

      if (!image.isMoved) {
        image.width = gesture.$imageEl[0].offsetWidth;
        image.height = gesture.$imageEl[0].offsetHeight;
        image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;
        image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;
        gesture.slideWidth = gesture.$slideEl[0].offsetWidth;
        gesture.slideHeight = gesture.$slideEl[0].offsetHeight;
        gesture.$imageWrapEl.transition(0);
        if (swiper.rtl) {
          image.startX = -image.startX;
          image.startY = -image.startY;
        }
      }
      // Define if we need image drag
      const scaledWidth = image.width * zoom.scale;
      const scaledHeight = image.height * zoom.scale;

      if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;

      image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
      image.maxX = -image.minX;
      image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
      image.maxY = -image.minY;

      image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
      image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;

      if (!image.isMoved && !zoom.isScaling) {
        if (
          swiper.isHorizontal()
          && (
            (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x)
            || (Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)
          )
        ) {
          image.isTouched = false;
          return;
        } if (
          !swiper.isHorizontal()
          && (
            (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y)
            || (Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)
          )
        ) {
          image.isTouched = false;
          return;
        }
      }
      if (e.cancelable) {
        e.preventDefault();
      }
      e.stopPropagation();

      image.isMoved = true;
      image.currentX = (image.touchesCurrent.x - image.touchesStart.x) + image.startX;
      image.currentY = (image.touchesCurrent.y - image.touchesStart.y) + image.startY;

      if (image.currentX < image.minX) {
        image.currentX = (image.minX + 1) - (((image.minX - image.currentX) + 1) ** 0.8);
      }
      if (image.currentX > image.maxX) {
        image.currentX = (image.maxX - 1) + (((image.currentX - image.maxX) + 1) ** 0.8);
      }

      if (image.currentY < image.minY) {
        image.currentY = (image.minY + 1) - (((image.minY - image.currentY) + 1) ** 0.8);
      }
      if (image.currentY > image.maxY) {
        image.currentY = (image.maxY - 1) + (((image.currentY - image.maxY) + 1) ** 0.8);
      }

      // Velocity
      if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
      if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
      if (!velocity.prevTime) velocity.prevTime = Date.now();
      velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
      velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
      if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
      if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
      velocity.prevPositionX = image.touchesCurrent.x;
      velocity.prevPositionY = image.touchesCurrent.y;
      velocity.prevTime = Date.now();

      gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);
    },
    onTouchEnd() {
      const swiper = this;
      const zoom = swiper.zoom;
      const { gesture, image, velocity } = zoom;
      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;
      if (!image.isTouched || !image.isMoved) {
        image.isTouched = false;
        image.isMoved = false;
        return;
      }
      image.isTouched = false;
      image.isMoved = false;
      let momentumDurationX = 300;
      let momentumDurationY = 300;
      const momentumDistanceX = velocity.x * momentumDurationX;
      const newPositionX = image.currentX + momentumDistanceX;
      const momentumDistanceY = velocity.y * momentumDurationY;
      const newPositionY = image.currentY + momentumDistanceY;

      // Fix duration
      if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
      if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
      const momentumDuration = Math.max(momentumDurationX, momentumDurationY);

      image.currentX = newPositionX;
      image.currentY = newPositionY;

      // Define if we need image drag
      const scaledWidth = image.width * zoom.scale;
      const scaledHeight = image.height * zoom.scale;
      image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);
      image.maxX = -image.minX;
      image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);
      image.maxY = -image.minY;
      image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
      image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);

      gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);
    },
    onTransitionEnd() {
      const swiper = this;
      const zoom = swiper.zoom;
      const { gesture } = zoom;
      if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {
        if (gesture.$imageEl) {
          gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');
        }
        if (gesture.$imageWrapEl) {
          gesture.$imageWrapEl.transform('translate3d(0,0,0)');
        }

        zoom.scale = 1;
        zoom.currentScale = 1;

        gesture.$slideEl = undefined;
        gesture.$imageEl = undefined;
        gesture.$imageWrapEl = undefined;
      }
    },
    // Toggle Zoom
    toggle(e) {
      const swiper = this;
      const zoom = swiper.zoom;

      if (zoom.scale && zoom.scale !== 1) {
        // Zoom Out
        zoom.out();
      } else {
        // Zoom In
        zoom.in(e);
      }
    },
    in(e) {
      const swiper = this;

      const zoom = swiper.zoom;
      const params = swiper.params.zoom;
      const { gesture, image } = zoom;

      if (!gesture.$slideEl) {
        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);
        } else {
          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
        }
        gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
        gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
      }
      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

      gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);

      let touchX;
      let touchY;
      let offsetX;
      let offsetY;
      let diffX;
      let diffY;
      let translateX;
      let translateY;
      let imageWidth;
      let imageHeight;
      let scaledWidth;
      let scaledHeight;
      let translateMinX;
      let translateMinY;
      let translateMaxX;
      let translateMaxY;
      let slideWidth;
      let slideHeight;

      if (typeof image.touchesStart.x === 'undefined' && e) {
        touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;
        touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;
      } else {
        touchX = image.touchesStart.x;
        touchY = image.touchesStart.y;
      }

      zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
      zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;
      if (e) {
        slideWidth = gesture.$slideEl[0].offsetWidth;
        slideHeight = gesture.$slideEl[0].offsetHeight;
        offsetX = gesture.$slideEl.offset().left;
        offsetY = gesture.$slideEl.offset().top;
        diffX = (offsetX + (slideWidth / 2)) - touchX;
        diffY = (offsetY + (slideHeight / 2)) - touchY;

        imageWidth = gesture.$imageEl[0].offsetWidth;
        imageHeight = gesture.$imageEl[0].offsetHeight;
        scaledWidth = imageWidth * zoom.scale;
        scaledHeight = imageHeight * zoom.scale;

        translateMinX = Math.min(((slideWidth / 2) - (scaledWidth / 2)), 0);
        translateMinY = Math.min(((slideHeight / 2) - (scaledHeight / 2)), 0);
        translateMaxX = -translateMinX;
        translateMaxY = -translateMinY;

        translateX = diffX * zoom.scale;
        translateY = diffY * zoom.scale;

        if (translateX < translateMinX) {
          translateX = translateMinX;
        }
        if (translateX > translateMaxX) {
          translateX = translateMaxX;
        }

        if (translateY < translateMinY) {
          translateY = translateMinY;
        }
        if (translateY > translateMaxY) {
          translateY = translateMaxY;
        }
      } else {
        translateX = 0;
        translateY = 0;
      }
      gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);
      gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);
    },
    out() {
      const swiper = this;

      const zoom = swiper.zoom;
      const params = swiper.params.zoom;
      const { gesture } = zoom;

      if (!gesture.$slideEl) {
        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
          gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);
        } else {
          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);
        }
        gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');
        gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);
      }
      if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;

      zoom.scale = 1;
      zoom.currentScale = 1;
      gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');
      gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');
      gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);
      gesture.$slideEl = undefined;
    },
    // Attach/Detach Events
    enable() {
      const swiper = this;
      const zoom = swiper.zoom;
      if (zoom.enabled) return;
      zoom.enabled = true;

      const passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;
      const activeListenerWithCapture = Support.passiveListener ? { passive: false, capture: true } : true;

      const slideSelector = `.${swiper.params.slideClass}`;

      // Scale image
      if (Support.gestures) {
        swiper.$wrapperEl.on('gesturestart', slideSelector, zoom.onGestureStart, passiveListener);
        swiper.$wrapperEl.on('gesturechange', slideSelector, zoom.onGestureChange, passiveListener);
        swiper.$wrapperEl.on('gestureend', slideSelector, zoom.onGestureEnd, passiveListener);
      } else if (swiper.touchEvents.start === 'touchstart') {
        swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
        swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
        swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);
        if (swiper.touchEvents.cancel) {
          swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
        }
      }

      // Move image
      swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, zoom.onTouchMove, activeListenerWithCapture);
    },
    disable() {
      const swiper = this;
      const zoom = swiper.zoom;
      if (!zoom.enabled) return;

      swiper.zoom.enabled = false;

      const passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;
      const activeListenerWithCapture = Support.passiveListener ? { passive: false, capture: true } : true;

      const slideSelector = `.${swiper.params.slideClass}`;

      // Scale image
      if (Support.gestures) {
        swiper.$wrapperEl.off('gesturestart', slideSelector, zoom.onGestureStart, passiveListener);
        swiper.$wrapperEl.off('gesturechange', slideSelector, zoom.onGestureChange, passiveListener);
        swiper.$wrapperEl.off('gestureend', slideSelector, zoom.onGestureEnd, passiveListener);
      } else if (swiper.touchEvents.start === 'touchstart') {
        swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);
        swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);
        swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);
        if (swiper.touchEvents.cancel) {
          swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);
        }
      }

      // Move image
      swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, zoom.onTouchMove, activeListenerWithCapture);
    },
  };

  var Zoom$1 = {
    name: 'zoom',
    params: {
      zoom: {
        enabled: false,
        maxRatio: 3,
        minRatio: 1,
        toggle: true,
        containerClass: 'swiper-zoom-container',
        zoomedSlideClass: 'swiper-slide-zoomed',
      },
    },
    create() {
      const swiper = this;
      const zoom = {
        enabled: false,
        scale: 1,
        currentScale: 1,
        isScaling: false,
        gesture: {
          $slideEl: undefined,
          slideWidth: undefined,
          slideHeight: undefined,
          $imageEl: undefined,
          $imageWrapEl: undefined,
          maxRatio: 3,
        },
        image: {
          isTouched: undefined,
          isMoved: undefined,
          currentX: undefined,
          currentY: undefined,
          minX: undefined,
          minY: undefined,
          maxX: undefined,
          maxY: undefined,
          width: undefined,
          height: undefined,
          startX: undefined,
          startY: undefined,
          touchesStart: {},
          touchesCurrent: {},
        },
        velocity: {
          x: undefined,
          y: undefined,
          prevPositionX: undefined,
          prevPositionY: undefined,
          prevTime: undefined,
        },
      };

      ('onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out').split(' ').forEach((methodName) => {
        zoom[methodName] = Zoom[methodName].bind(swiper);
      });
      Utils.extend(swiper, {
        zoom,
      });

      let scale = 1;
      Object.defineProperty(swiper.zoom, 'scale', {
        get() {
          return scale;
        },
        set(value) {
          if (scale !== value) {
            const imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;
            const slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;
            swiper.emit('zoomChange', value, imageEl, slideEl);
          }
          scale = value;
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        if (swiper.params.zoom.enabled) {
          swiper.zoom.enable();
        }
      },
      destroy() {
        const swiper = this;
        swiper.zoom.disable();
      },
      touchStart(e) {
        const swiper = this;
        if (!swiper.zoom.enabled) return;
        swiper.zoom.onTouchStart(e);
      },
      touchEnd(e) {
        const swiper = this;
        if (!swiper.zoom.enabled) return;
        swiper.zoom.onTouchEnd(e);
      },
      doubleTap(e) {
        const swiper = this;
        if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
          swiper.zoom.toggle(e);
        }
      },
      transitionEnd() {
        const swiper = this;
        if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
          swiper.zoom.onTransitionEnd();
        }
      },
      slideChange() {
        const swiper = this;
        if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {
          swiper.zoom.onTransitionEnd();
        }
      },
    },
  };

  const Lazy = {
    loadInSlide(index, loadInDuplicate = true) {
      const swiper = this;
      const params = swiper.params.lazy;
      if (typeof index === 'undefined') return;
      if (swiper.slides.length === 0) return;
      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;

      const $slideEl = isVirtual
        ? swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-swiper-slide-index="${index}"]`)
        : swiper.slides.eq(index);

      let $images = $slideEl.find(`.${params.elementClass}:not(.${params.loadedClass}):not(.${params.loadingClass})`);
      if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
        $images = $images.add($slideEl[0]);
      }
      if ($images.length === 0) return;

      $images.each((imageIndex, imageEl) => {
        const $imageEl = $(imageEl);
        $imageEl.addClass(params.loadingClass);

        const background = $imageEl.attr('data-background');
        const src = $imageEl.attr('data-src');
        const srcset = $imageEl.attr('data-srcset');
        const sizes = $imageEl.attr('data-sizes');
        const $pictureEl = $imageEl.parent('picture');

        swiper.loadImage($imageEl[0], (src || background), srcset, sizes, false, () => {
          if (typeof swiper === 'undefined' || swiper === null || !swiper || (swiper && !swiper.params) || swiper.destroyed) return;
          if (background) {
            $imageEl.css('background-image', `url("${background}")`);
            $imageEl.removeAttr('data-background');
          } else {
            if (srcset) {
              $imageEl.attr('srcset', srcset);
              $imageEl.removeAttr('data-srcset');
            }
            if (sizes) {
              $imageEl.attr('sizes', sizes);
              $imageEl.removeAttr('data-sizes');
            }
            if ($pictureEl.length) {
              $pictureEl.children('source').each((sourceIndex, sourceEl) => {
                const $source = $(sourceEl);

                if ($source.attr('data-srcset')) {
                  $source.attr('srcset', $source.attr('data-srcset'));
                  $source.removeAttr('data-srcset');
                }
              });
            }
            if (src) {
              $imageEl.attr('src', src);
              $imageEl.removeAttr('data-src');
            }
          }

          $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
          $slideEl.find(`.${params.preloaderClass}`).remove();
          if (swiper.params.loop && loadInDuplicate) {
            const slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');
            if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
              const originalSlide = swiper.$wrapperEl.children(`[data-swiper-slide-index="${slideOriginalIndex}"]:not(.${swiper.params.slideDuplicateClass})`);
              swiper.lazy.loadInSlide(originalSlide.index(), false);
            } else {
              const duplicatedSlide = swiper.$wrapperEl.children(`.${swiper.params.slideDuplicateClass}[data-swiper-slide-index="${slideOriginalIndex}"]`);
              swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
            }
          }
          swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);
          if (swiper.params.autoHeight) {
            swiper.updateAutoHeight();
          }
        });

        swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
      });
    },
    load() {
      const swiper = this;
      const {
        $wrapperEl, params: swiperParams, slides, activeIndex,
      } = swiper;
      const isVirtual = swiper.virtual && swiperParams.virtual.enabled;
      const params = swiperParams.lazy;

      let slidesPerView = swiperParams.slidesPerView;
      if (slidesPerView === 'auto') {
        slidesPerView = 0;
      }

      function slideExist(index) {
        if (isVirtual) {
          if ($wrapperEl.children(`.${swiperParams.slideClass}[data-swiper-slide-index="${index}"]`).length) {
            return true;
          }
        } else if (slides[index]) return true;
        return false;
      }

      function slideIndex(slideEl) {
        if (isVirtual) {
          return $(slideEl).attr('data-swiper-slide-index');
        }
        return $(slideEl).index();
      }

      if (!swiper.lazy.initialImageLoaded) swiper.lazy.initialImageLoaded = true;
      if (swiper.params.watchSlidesVisibility) {
        $wrapperEl.children(`.${swiperParams.slideVisibleClass}`).each((elIndex, slideEl) => {
          const index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();
          swiper.lazy.loadInSlide(index);
        });
      } else if (slidesPerView > 1) {
        for (let i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
          if (slideExist(i)) swiper.lazy.loadInSlide(i);
        }
      } else {
        swiper.lazy.loadInSlide(activeIndex);
      }
      if (params.loadPrevNext) {
        if (slidesPerView > 1 || (params.loadPrevNextAmount && params.loadPrevNextAmount > 1)) {
          const amount = params.loadPrevNextAmount;
          const spv = slidesPerView;
          const maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
          const minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);
          // Next Slides
          for (let i = activeIndex + slidesPerView; i < maxIndex; i += 1) {
            if (slideExist(i)) swiper.lazy.loadInSlide(i);
          }
          // Prev Slides
          for (let i = minIndex; i < activeIndex; i += 1) {
            if (slideExist(i)) swiper.lazy.loadInSlide(i);
          }
        } else {
          const nextSlide = $wrapperEl.children(`.${swiperParams.slideNextClass}`);
          if (nextSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(nextSlide));

          const prevSlide = $wrapperEl.children(`.${swiperParams.slidePrevClass}`);
          if (prevSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(prevSlide));
        }
      }
    },
  };

  var Lazy$1 = {
    name: 'lazy',
    params: {
      lazy: {
        enabled: false,
        loadPrevNext: false,
        loadPrevNextAmount: 1,
        loadOnTransitionStart: false,

        elementClass: 'swiper-lazy',
        loadingClass: 'swiper-lazy-loading',
        loadedClass: 'swiper-lazy-loaded',
        preloaderClass: 'swiper-lazy-preloader',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        lazy: {
          initialImageLoaded: false,
          load: Lazy.load.bind(swiper),
          loadInSlide: Lazy.loadInSlide.bind(swiper),
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
          swiper.params.preloadImages = false;
        }
      },
      init() {
        const swiper = this;
        if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
          swiper.lazy.load();
        }
      },
      scroll() {
        const swiper = this;
        if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
          swiper.lazy.load();
        }
      },
      resize() {
        const swiper = this;
        if (swiper.params.lazy.enabled) {
          swiper.lazy.load();
        }
      },
      scrollbarDragMove() {
        const swiper = this;
        if (swiper.params.lazy.enabled) {
          swiper.lazy.load();
        }
      },
      transitionStart() {
        const swiper = this;
        if (swiper.params.lazy.enabled) {
          if (swiper.params.lazy.loadOnTransitionStart || (!swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded)) {
            swiper.lazy.load();
          }
        }
      },
      transitionEnd() {
        const swiper = this;
        if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
          swiper.lazy.load();
        }
      },
      slideChange() {
        const swiper = this;
        if (swiper.params.lazy.enabled && swiper.params.cssMode) {
          swiper.lazy.load();
        }
      },
    },
  };

  /* eslint no-bitwise: ["error", { "allow": [">>"] }] */

  const Controller = {
    LinearSpline: function LinearSpline(x, y) {
      const binarySearch = (function search() {
        let maxIndex;
        let minIndex;
        let guess;
        return (array, val) => {
          minIndex = -1;
          maxIndex = array.length;
          while (maxIndex - minIndex > 1) {
            guess = maxIndex + minIndex >> 1;
            if (array[guess] <= val) {
              minIndex = guess;
            } else {
              maxIndex = guess;
            }
          }
          return maxIndex;
        };
      }());
      this.x = x;
      this.y = y;
      this.lastIndex = x.length - 1;
      // Given an x value (x2), return the expected y2 value:
      // (x1,y1) is the known point before given value,
      // (x3,y3) is the known point after given value.
      let i1;
      let i3;

      this.interpolate = function interpolate(x2) {
        if (!x2) return 0;

        // Get the indexes of x1 and x3 (the array indexes before and after given x2):
        i3 = binarySearch(this.x, x2);
        i1 = i3 - 1;

        // We have our indexes i1 & i3, so we can calculate already:
        // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1
        return (((x2 - this.x[i1]) * (this.y[i3] - this.y[i1])) / (this.x[i3] - this.x[i1])) + this.y[i1];
      };
      return this;
    },
    // xxx: for now i will just save one spline function to to
    getInterpolateFunction(c) {
      const swiper = this;
      if (!swiper.controller.spline) {
        swiper.controller.spline = swiper.params.loop
          ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid)
          : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);
      }
    },
    setTranslate(setTranslate, byController) {
      const swiper = this;
      const controlled = swiper.controller.control;
      let multiplier;
      let controlledTranslate;
      function setControlledTranslate(c) {
        // this will create an Interpolate function based on the snapGrids
        // x is the Grid of the scrolled scroller and y will be the controlled scroller
        // it makes sense to create this only once and recall it for the interpolation
        // the function does a lot of value caching for performance
        const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;
        if (swiper.params.controller.by === 'slide') {
          swiper.controller.getInterpolateFunction(c);
          // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
          // but it did not work out
          controlledTranslate = -swiper.controller.spline.interpolate(-translate);
        }

        if (!controlledTranslate || swiper.params.controller.by === 'container') {
          multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
          controlledTranslate = ((translate - swiper.minTranslate()) * multiplier) + c.minTranslate();
        }

        if (swiper.params.controller.inverse) {
          controlledTranslate = c.maxTranslate() - controlledTranslate;
        }
        c.updateProgress(controlledTranslate);
        c.setTranslate(controlledTranslate, swiper);
        c.updateActiveIndex();
        c.updateSlidesClasses();
      }
      if (Array.isArray(controlled)) {
        for (let i = 0; i < controlled.length; i += 1) {
          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
            setControlledTranslate(controlled[i]);
          }
        }
      } else if (controlled instanceof Swiper && byController !== controlled) {
        setControlledTranslate(controlled);
      }
    },
    setTransition(duration, byController) {
      const swiper = this;
      const controlled = swiper.controller.control;
      let i;
      function setControlledTransition(c) {
        c.setTransition(duration, swiper);
        if (duration !== 0) {
          c.transitionStart();
          if (c.params.autoHeight) {
            Utils.nextTick(() => {
              c.updateAutoHeight();
            });
          }
          c.$wrapperEl.transitionEnd(() => {
            if (!controlled) return;
            if (c.params.loop && swiper.params.controller.by === 'slide') {
              c.loopFix();
            }
            c.transitionEnd();
          });
        }
      }
      if (Array.isArray(controlled)) {
        for (i = 0; i < controlled.length; i += 1) {
          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {
            setControlledTransition(controlled[i]);
          }
        }
      } else if (controlled instanceof Swiper && byController !== controlled) {
        setControlledTransition(controlled);
      }
    },
  };
  var Controller$1 = {
    name: 'controller',
    params: {
      controller: {
        control: undefined,
        inverse: false,
        by: 'slide', // or 'container'
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        controller: {
          control: swiper.params.controller.control,
          getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),
          setTranslate: Controller.setTranslate.bind(swiper),
          setTransition: Controller.setTransition.bind(swiper),
        },
      });
    },
    on: {
      update() {
        const swiper = this;
        if (!swiper.controller.control) return;
        if (swiper.controller.spline) {
          swiper.controller.spline = undefined;
          delete swiper.controller.spline;
        }
      },
      resize() {
        const swiper = this;
        if (!swiper.controller.control) return;
        if (swiper.controller.spline) {
          swiper.controller.spline = undefined;
          delete swiper.controller.spline;
        }
      },
      observerUpdate() {
        const swiper = this;
        if (!swiper.controller.control) return;
        if (swiper.controller.spline) {
          swiper.controller.spline = undefined;
          delete swiper.controller.spline;
        }
      },
      setTranslate(translate, byController) {
        const swiper = this;
        if (!swiper.controller.control) return;
        swiper.controller.setTranslate(translate, byController);
      },
      setTransition(duration, byController) {
        const swiper = this;
        if (!swiper.controller.control) return;
        swiper.controller.setTransition(duration, byController);
      },
    },
  };

  const History$1 = {
    init() {
      const swiper = this;
      if (!swiper.params.history) return;
      if (!win.history || !win.history.pushState) {
        swiper.params.history.enabled = false;
        swiper.params.hashNavigation.enabled = true;
        return;
      }
      const history = swiper.history;
      history.initialized = true;
      history.paths = History$1.getPathValues();
      if (!history.paths.key && !history.paths.value) return;
      history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);
      if (!swiper.params.history.replaceState) {
        win.addEventListener('popstate', swiper.history.setHistoryPopState);
      }
    },
    destroy() {
      const swiper = this;
      if (!swiper.params.history.replaceState) {
        win.removeEventListener('popstate', swiper.history.setHistoryPopState);
      }
    },
    setHistoryPopState() {
      const swiper = this;
      swiper.history.paths = History$1.getPathValues();
      swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);
    },
    getPathValues() {
      const pathArray = win.location.pathname.slice(1).split('/').filter((part) => part !== '');
      const total = pathArray.length;
      const key = pathArray[total - 2];
      const value = pathArray[total - 1];
      return { key, value };
    },
    setHistory(key, index) {
      const swiper = this;
      if (!swiper.history.initialized || !swiper.params.history.enabled) return;
      const slide = swiper.slides.eq(index);
      let value = History$1.slugify(slide.attr('data-history'));
      if (!win.location.pathname.includes(key)) {
        value = `${key}/${value}`;
      }
      const currentState = win.history.state;
      if (currentState && currentState.value === value) {
        return;
      }
      if (swiper.params.history.replaceState) {
        win.history.replaceState({ value }, null, value);
      } else {
        win.history.pushState({ value }, null, value);
      }
    },
    slugify(text) {
      return text.toString()
        .replace(/\s+/g, '-')
        .replace(/[^\w-]+/g, '')
        .replace(/--+/g, '-')
        .replace(/^-+/, '')
        .replace(/-+$/, '');
    },
    scrollToSlide(speed, value, runCallbacks) {
      const swiper = this;
      if (value) {
        for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
          const slide = swiper.slides.eq(i);
          const slideHistory = History$1.slugify(slide.attr('data-history'));
          if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {
            const index = slide.index();
            swiper.slideTo(index, speed, runCallbacks);
          }
        }
      } else {
        swiper.slideTo(0, speed, runCallbacks);
      }
    },
  };

  var History$2 = {
    name: 'history',
    params: {
      history: {
        enabled: false,
        replaceState: false,
        key: 'slides',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        history: {
          init: History$1.init.bind(swiper),
          setHistory: History$1.setHistory.bind(swiper),
          setHistoryPopState: History$1.setHistoryPopState.bind(swiper),
          scrollToSlide: History$1.scrollToSlide.bind(swiper),
          destroy: History$1.destroy.bind(swiper),
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        if (swiper.params.history.enabled) {
          swiper.history.init();
        }
      },
      destroy() {
        const swiper = this;
        if (swiper.params.history.enabled) {
          swiper.history.destroy();
        }
      },
      transitionEnd() {
        const swiper = this;
        if (swiper.history.initialized) {
          swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
        }
      },
      slideChange() {
        const swiper = this;
        if (swiper.history.initialized && swiper.params.cssMode) {
          swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);
        }
      },
    },
  };

  const HashNavigation = {
    onHashCange() {
      const swiper = this;
      swiper.emit('hashChange');
      const newHash = doc.location.hash.replace('#', '');
      const activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');
      if (newHash !== activeSlideHash) {
        const newIndex = swiper.$wrapperEl.children(`.${swiper.params.slideClass}[data-hash="${newHash}"]`).index();
        if (typeof newIndex === 'undefined') return;
        swiper.slideTo(newIndex);
      }
    },
    setHash() {
      const swiper = this;
      if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) return;
      if (swiper.params.hashNavigation.replaceState && win.history && win.history.replaceState) {
        win.history.replaceState(null, null, (`#${swiper.slides.eq(swiper.activeIndex).attr('data-hash')}` || ''));
        swiper.emit('hashSet');
      } else {
        const slide = swiper.slides.eq(swiper.activeIndex);
        const hash = slide.attr('data-hash') || slide.attr('data-history');
        doc.location.hash = hash || '';
        swiper.emit('hashSet');
      }
    },
    init() {
      const swiper = this;
      if (!swiper.params.hashNavigation.enabled || (swiper.params.history && swiper.params.history.enabled)) return;
      swiper.hashNavigation.initialized = true;
      const hash = doc.location.hash.replace('#', '');
      if (hash) {
        const speed = 0;
        for (let i = 0, length = swiper.slides.length; i < length; i += 1) {
          const slide = swiper.slides.eq(i);
          const slideHash = slide.attr('data-hash') || slide.attr('data-history');
          if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {
            const index = slide.index();
            swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);
          }
        }
      }
      if (swiper.params.hashNavigation.watchState) {
        $(win).on('hashchange', swiper.hashNavigation.onHashCange);
      }
    },
    destroy() {
      const swiper = this;
      if (swiper.params.hashNavigation.watchState) {
        $(win).off('hashchange', swiper.hashNavigation.onHashCange);
      }
    },
  };
  var HashNavigation$1 = {
    name: 'hash-navigation',
    params: {
      hashNavigation: {
        enabled: false,
        replaceState: false,
        watchState: false,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        hashNavigation: {
          initialized: false,
          init: HashNavigation.init.bind(swiper),
          destroy: HashNavigation.destroy.bind(swiper),
          setHash: HashNavigation.setHash.bind(swiper),
          onHashCange: HashNavigation.onHashCange.bind(swiper),
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        if (swiper.params.hashNavigation.enabled) {
          swiper.hashNavigation.init();
        }
      },
      destroy() {
        const swiper = this;
        if (swiper.params.hashNavigation.enabled) {
          swiper.hashNavigation.destroy();
        }
      },
      transitionEnd() {
        const swiper = this;
        if (swiper.hashNavigation.initialized) {
          swiper.hashNavigation.setHash();
        }
      },
      slideChange() {
        const swiper = this;
        if (swiper.hashNavigation.initialized && swiper.params.cssMode) {
          swiper.hashNavigation.setHash();
        }
      },
    },
  };

  const a11y = {
    makeElFocusable($el) {
      $el.attr('tabIndex', '0');
      return $el;
    },
    makeElNotFocusable($el) {
      $el.attr('tabIndex', '-1');
      return $el;
    },
    addElRole($el, role) {
      $el.attr('role', role);
      return $el;
    },
    addElLabel($el, label) {
      $el.attr('aria-label', label);
      return $el;
    },
    disableEl($el) {
      $el.attr('aria-disabled', true);
      return $el;
    },
    enableEl($el) {
      $el.attr('aria-disabled', false);
      return $el;
    },
    onEnterKey(e) {
      const swiper = this;
      const params = swiper.params.a11y;
      if (e.keyCode !== 13) return;
      const $targetEl = $(e.target);
      if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {
        if (!(swiper.isEnd && !swiper.params.loop)) {
          swiper.slideNext();
        }
        if (swiper.isEnd) {
          swiper.a11y.notify(params.lastSlideMessage);
        } else {
          swiper.a11y.notify(params.nextSlideMessage);
        }
      }
      if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {
        if (!(swiper.isBeginning && !swiper.params.loop)) {
          swiper.slidePrev();
        }
        if (swiper.isBeginning) {
          swiper.a11y.notify(params.firstSlideMessage);
        } else {
          swiper.a11y.notify(params.prevSlideMessage);
        }
      }
      if (swiper.pagination && $targetEl.is(`.${swiper.params.pagination.bulletClass}`)) {
        $targetEl[0].click();
      }
    },
    notify(message) {
      const swiper = this;
      const notification = swiper.a11y.liveRegion;
      if (notification.length === 0) return;
      notification.html('');
      notification.html(message);
    },
    updateNavigation() {
      const swiper = this;

      if (swiper.params.loop || !swiper.navigation) return;
      const { $nextEl, $prevEl } = swiper.navigation;

      if ($prevEl && $prevEl.length > 0) {
        if (swiper.isBeginning) {
          swiper.a11y.disableEl($prevEl);
          swiper.a11y.makeElNotFocusable($prevEl);
        } else {
          swiper.a11y.enableEl($prevEl);
          swiper.a11y.makeElFocusable($prevEl);
        }
      }
      if ($nextEl && $nextEl.length > 0) {
        if (swiper.isEnd) {
          swiper.a11y.disableEl($nextEl);
          swiper.a11y.makeElNotFocusable($nextEl);
        } else {
          swiper.a11y.enableEl($nextEl);
          swiper.a11y.makeElFocusable($nextEl);
        }
      }
    },
    updatePagination() {
      const swiper = this;
      const params = swiper.params.a11y;
      if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
        swiper.pagination.bullets.each((bulletIndex, bulletEl) => {
          const $bulletEl = $(bulletEl);
          swiper.a11y.makeElFocusable($bulletEl);
          swiper.a11y.addElRole($bulletEl, 'button');
          swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/\{\{index\}\}/, $bulletEl.index() + 1));
        });
      }
    },
    init() {
      const swiper = this;

      swiper.$el.append(swiper.a11y.liveRegion);

      // Navigation
      const params = swiper.params.a11y;
      let $nextEl;
      let $prevEl;
      if (swiper.navigation && swiper.navigation.$nextEl) {
        $nextEl = swiper.navigation.$nextEl;
      }
      if (swiper.navigation && swiper.navigation.$prevEl) {
        $prevEl = swiper.navigation.$prevEl;
      }
      if ($nextEl) {
        swiper.a11y.makeElFocusable($nextEl);
        swiper.a11y.addElRole($nextEl, 'button');
        swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);
        $nextEl.on('keydown', swiper.a11y.onEnterKey);
      }
      if ($prevEl) {
        swiper.a11y.makeElFocusable($prevEl);
        swiper.a11y.addElRole($prevEl, 'button');
        swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);
        $prevEl.on('keydown', swiper.a11y.onEnterKey);
      }

      // Pagination
      if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
        swiper.pagination.$el.on('keydown', `.${swiper.params.pagination.bulletClass}`, swiper.a11y.onEnterKey);
      }
    },
    destroy() {
      const swiper = this;
      if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) swiper.a11y.liveRegion.remove();

      let $nextEl;
      let $prevEl;
      if (swiper.navigation && swiper.navigation.$nextEl) {
        $nextEl = swiper.navigation.$nextEl;
      }
      if (swiper.navigation && swiper.navigation.$prevEl) {
        $prevEl = swiper.navigation.$prevEl;
      }
      if ($nextEl) {
        $nextEl.off('keydown', swiper.a11y.onEnterKey);
      }
      if ($prevEl) {
        $prevEl.off('keydown', swiper.a11y.onEnterKey);
      }

      // Pagination
      if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {
        swiper.pagination.$el.off('keydown', `.${swiper.params.pagination.bulletClass}`, swiper.a11y.onEnterKey);
      }
    },
  };
  var A11y = {
    name: 'a11y',
    params: {
      a11y: {
        enabled: true,
        notificationClass: 'swiper-notification',
        prevSlideMessage: 'Previous slide',
        nextSlideMessage: 'Next slide',
        firstSlideMessage: 'This is the first slide',
        lastSlideMessage: 'This is the last slide',
        paginationBulletMessage: 'Go to slide {{index}}',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        a11y: {
          liveRegion: $(`<span class="${swiper.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`),
        },
      });
      Object.keys(a11y).forEach((methodName) => {
        swiper.a11y[methodName] = a11y[methodName].bind(swiper);
      });
    },
    on: {
      init() {
        const swiper = this;
        if (!swiper.params.a11y.enabled) return;
        swiper.a11y.init();
        swiper.a11y.updateNavigation();
      },
      toEdge() {
        const swiper = this;
        if (!swiper.params.a11y.enabled) return;
        swiper.a11y.updateNavigation();
      },
      fromEdge() {
        const swiper = this;
        if (!swiper.params.a11y.enabled) return;
        swiper.a11y.updateNavigation();
      },
      paginationUpdate() {
        const swiper = this;
        if (!swiper.params.a11y.enabled) return;
        swiper.a11y.updatePagination();
      },
      destroy() {
        const swiper = this;
        if (!swiper.params.a11y.enabled) return;
        swiper.a11y.destroy();
      },
    },
  };

  /* eslint no-underscore-dangle: "off" */

  const Autoplay = {
    run() {
      const swiper = this;
      const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
      let delay = swiper.params.autoplay.delay;
      if ($activeSlideEl.attr('data-swiper-autoplay')) {
        delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
      }
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = Utils.nextTick(() => {
        if (swiper.params.autoplay.reverseDirection) {
          if (swiper.params.loop) {
            swiper.loopFix();
            swiper.slidePrev(swiper.params.speed, true, true);
            swiper.emit('autoplay');
          } else if (!swiper.isBeginning) {
            swiper.slidePrev(swiper.params.speed, true, true);
            swiper.emit('autoplay');
          } else if (!swiper.params.autoplay.stopOnLastSlide) {
            swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
            swiper.emit('autoplay');
          } else {
            swiper.autoplay.stop();
          }
        } else if (swiper.params.loop) {
          swiper.loopFix();
          swiper.slideNext(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.isEnd) {
          swiper.slideNext(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(0, swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else {
          swiper.autoplay.stop();
        }
        if (swiper.params.cssMode && swiper.autoplay.running) swiper.autoplay.run();
      }, delay);
    },
    start() {
      const swiper = this;
      if (typeof swiper.autoplay.timeout !== 'undefined') return false;
      if (swiper.autoplay.running) return false;
      swiper.autoplay.running = true;
      swiper.emit('autoplayStart');
      swiper.autoplay.run();
      return true;
    },
    stop() {
      const swiper = this;
      if (!swiper.autoplay.running) return false;
      if (typeof swiper.autoplay.timeout === 'undefined') return false;

      if (swiper.autoplay.timeout) {
        clearTimeout(swiper.autoplay.timeout);
        swiper.autoplay.timeout = undefined;
      }
      swiper.autoplay.running = false;
      swiper.emit('autoplayStop');
      return true;
    },
    pause(speed) {
      const swiper = this;
      if (!swiper.autoplay.running) return;
      if (swiper.autoplay.paused) return;
      if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.paused = true;
      if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
        swiper.autoplay.paused = false;
        swiper.autoplay.run();
      } else {
        swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);
        swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
      }
    },
  };

  var Autoplay$1 = {
    name: 'autoplay',
    params: {
      autoplay: {
        enabled: false,
        delay: 3000,
        waitForTransition: true,
        disableOnInteraction: true,
        stopOnLastSlide: false,
        reverseDirection: false,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        autoplay: {
          running: false,
          paused: false,
          run: Autoplay.run.bind(swiper),
          start: Autoplay.start.bind(swiper),
          stop: Autoplay.stop.bind(swiper),
          pause: Autoplay.pause.bind(swiper),
          onVisibilityChange() {
            if (document.visibilityState === 'hidden' && swiper.autoplay.running) {
              swiper.autoplay.pause();
            }
            if (document.visibilityState === 'visible' && swiper.autoplay.paused) {
              swiper.autoplay.run();
              swiper.autoplay.paused = false;
            }
          },
          onTransitionEnd(e) {
            if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
            if (e.target !== this) return;
            swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);
            swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);
            swiper.autoplay.paused = false;
            if (!swiper.autoplay.running) {
              swiper.autoplay.stop();
            } else {
              swiper.autoplay.run();
            }
          },
        },
      });
    },
    on: {
      init() {
        const swiper = this;
        if (swiper.params.autoplay.enabled) {
          swiper.autoplay.start();
          document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
        }
      },
      beforeTransitionStart(speed, internal) {
        const swiper = this;
        if (swiper.autoplay.running) {
          if (internal || !swiper.params.autoplay.disableOnInteraction) {
            swiper.autoplay.pause(speed);
          } else {
            swiper.autoplay.stop();
          }
        }
      },
      sliderFirstMove() {
        const swiper = this;
        if (swiper.autoplay.running) {
          if (swiper.params.autoplay.disableOnInteraction) {
            swiper.autoplay.stop();
          } else {
            swiper.autoplay.pause();
          }
        }
      },
      touchEnd() {
        const swiper = this;
        if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.run();
        }
      },
      destroy() {
        const swiper = this;
        if (swiper.autoplay.running) {
          swiper.autoplay.stop();
        }
        document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
      },
    },
  };

  const Fade = {
    setTranslate() {
      const swiper = this;
      const { slides } = swiper;
      for (let i = 0; i < slides.length; i += 1) {
        const $slideEl = swiper.slides.eq(i);
        const offset = $slideEl[0].swiperSlideOffset;
        let tx = -offset;
        if (!swiper.params.virtualTranslate) tx -= swiper.translate;
        let ty = 0;
        if (!swiper.isHorizontal()) {
          ty = tx;
          tx = 0;
        }
        const slideOpacity = swiper.params.fadeEffect.crossFade
          ? Math.max(1 - Math.abs($slideEl[0].progress), 0)
          : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);
        $slideEl
          .css({
            opacity: slideOpacity,
          })
          .transform(`translate3d(${tx}px, ${ty}px, 0px)`);
      }
    },
    setTransition(duration) {
      const swiper = this;
      const { slides, $wrapperEl } = swiper;
      slides.transition(duration);
      if (swiper.params.virtualTranslate && duration !== 0) {
        let eventTriggered = false;
        slides.transitionEnd(() => {
          if (eventTriggered) return;
          if (!swiper || swiper.destroyed) return;
          eventTriggered = true;
          swiper.animating = false;
          const triggerEvents = ['webkitTransitionEnd', 'transitionend'];
          for (let i = 0; i < triggerEvents.length; i += 1) {
            $wrapperEl.trigger(triggerEvents[i]);
          }
        });
      }
    },
  };

  var EffectFade = {
    name: 'effect-fade',
    params: {
      fadeEffect: {
        crossFade: false,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        fadeEffect: {
          setTranslate: Fade.setTranslate.bind(swiper),
          setTransition: Fade.setTransition.bind(swiper),
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        if (swiper.params.effect !== 'fade') return;
        swiper.classNames.push(`${swiper.params.containerModifierClass}fade`);
        const overwriteParams = {
          slidesPerView: 1,
          slidesPerColumn: 1,
          slidesPerGroup: 1,
          watchSlidesProgress: true,
          spaceBetween: 0,
          virtualTranslate: true,
        };
        Utils.extend(swiper.params, overwriteParams);
        Utils.extend(swiper.originalParams, overwriteParams);
      },
      setTranslate() {
        const swiper = this;
        if (swiper.params.effect !== 'fade') return;
        swiper.fadeEffect.setTranslate();
      },
      setTransition(duration) {
        const swiper = this;
        if (swiper.params.effect !== 'fade') return;
        swiper.fadeEffect.setTransition(duration);
      },
    },
  };

  const Cube = {
    setTranslate() {
      const swiper = this;
      const {
        $el, $wrapperEl, slides, width: swiperWidth, height: swiperHeight, rtlTranslate: rtl, size: swiperSize,
      } = swiper;
      const params = swiper.params.cubeEffect;
      const isHorizontal = swiper.isHorizontal();
      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
      let wrapperRotate = 0;
      let $cubeShadowEl;
      if (params.shadow) {
        if (isHorizontal) {
          $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');
          if ($cubeShadowEl.length === 0) {
            $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
            $wrapperEl.append($cubeShadowEl);
          }
          $cubeShadowEl.css({ height: `${swiperWidth}px` });
        } else {
          $cubeShadowEl = $el.find('.swiper-cube-shadow');
          if ($cubeShadowEl.length === 0) {
            $cubeShadowEl = $('<div class="swiper-cube-shadow"></div>');
            $el.append($cubeShadowEl);
          }
        }
      }
      for (let i = 0; i < slides.length; i += 1) {
        const $slideEl = slides.eq(i);
        let slideIndex = i;
        if (isVirtual) {
          slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);
        }
        let slideAngle = slideIndex * 90;
        let round = Math.floor(slideAngle / 360);
        if (rtl) {
          slideAngle = -slideAngle;
          round = Math.floor(-slideAngle / 360);
        }
        const progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
        let tx = 0;
        let ty = 0;
        let tz = 0;
        if (slideIndex % 4 === 0) {
          tx = -round * 4 * swiperSize;
          tz = 0;
        } else if ((slideIndex - 1) % 4 === 0) {
          tx = 0;
          tz = -round * 4 * swiperSize;
        } else if ((slideIndex - 2) % 4 === 0) {
          tx = swiperSize + (round * 4 * swiperSize);
          tz = swiperSize;
        } else if ((slideIndex - 3) % 4 === 0) {
          tx = -swiperSize;
          tz = (3 * swiperSize) + (swiperSize * 4 * round);
        }
        if (rtl) {
          tx = -tx;
        }

        if (!isHorizontal) {
          ty = tx;
          tx = 0;
        }

        const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;
        if (progress <= 1 && progress > -1) {
          wrapperRotate = (slideIndex * 90) + (progress * 90);
          if (rtl) wrapperRotate = (-slideIndex * 90) - (progress * 90);
        }
        $slideEl.transform(transform);
        if (params.slideShadows) {
          // Set shadows
          let shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
          let shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
          if (shadowBefore.length === 0) {
            shadowBefore = $(`<div class="swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}"></div>`);
            $slideEl.append(shadowBefore);
          }
          if (shadowAfter.length === 0) {
            shadowAfter = $(`<div class="swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}"></div>`);
            $slideEl.append(shadowAfter);
          }
          if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
          if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
        }
      }
      $wrapperEl.css({
        '-webkit-transform-origin': `50% 50% -${swiperSize / 2}px`,
        '-moz-transform-origin': `50% 50% -${swiperSize / 2}px`,
        '-ms-transform-origin': `50% 50% -${swiperSize / 2}px`,
        'transform-origin': `50% 50% -${swiperSize / 2}px`,
      });

      if (params.shadow) {
        if (isHorizontal) {
          $cubeShadowEl.transform(`translate3d(0px, ${(swiperWidth / 2) + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`);
        } else {
          const shadowAngle = Math.abs(wrapperRotate) - (Math.floor(Math.abs(wrapperRotate) / 90) * 90);
          const multiplier = 1.5 - (
            (Math.sin((shadowAngle * 2 * Math.PI) / 360) / 2)
            + (Math.cos((shadowAngle * 2 * Math.PI) / 360) / 2)
          );
          const scale1 = params.shadowScale;
          const scale2 = params.shadowScale / multiplier;
          const offset = params.shadowOffset;
          $cubeShadowEl.transform(`scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${(swiperHeight / 2) + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`);
        }
      }
      const zFactor = (Browser.isSafari || Browser.isUiWebView) ? (-swiperSize / 2) : 0;
      $wrapperEl
        .transform(`translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`);
    },
    setTransition(duration) {
      const swiper = this;
      const { $el, slides } = swiper;
      slides
        .transition(duration)
        .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
        .transition(duration);
      if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
        $el.find('.swiper-cube-shadow').transition(duration);
      }
    },
  };

  var EffectCube = {
    name: 'effect-cube',
    params: {
      cubeEffect: {
        slideShadows: true,
        shadow: true,
        shadowOffset: 20,
        shadowScale: 0.94,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        cubeEffect: {
          setTranslate: Cube.setTranslate.bind(swiper),
          setTransition: Cube.setTransition.bind(swiper),
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        if (swiper.params.effect !== 'cube') return;
        swiper.classNames.push(`${swiper.params.containerModifierClass}cube`);
        swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);
        const overwriteParams = {
          slidesPerView: 1,
          slidesPerColumn: 1,
          slidesPerGroup: 1,
          watchSlidesProgress: true,
          resistanceRatio: 0,
          spaceBetween: 0,
          centeredSlides: false,
          virtualTranslate: true,
        };
        Utils.extend(swiper.params, overwriteParams);
        Utils.extend(swiper.originalParams, overwriteParams);
      },
      setTranslate() {
        const swiper = this;
        if (swiper.params.effect !== 'cube') return;
        swiper.cubeEffect.setTranslate();
      },
      setTransition(duration) {
        const swiper = this;
        if (swiper.params.effect !== 'cube') return;
        swiper.cubeEffect.setTransition(duration);
      },
    },
  };

  const Flip = {
    setTranslate() {
      const swiper = this;
      const { slides, rtlTranslate: rtl } = swiper;
      for (let i = 0; i < slides.length; i += 1) {
        const $slideEl = slides.eq(i);
        let progress = $slideEl[0].progress;
        if (swiper.params.flipEffect.limitRotation) {
          progress = Math.max(Math.min($slideEl[0].progress, 1), -1);
        }
        const offset = $slideEl[0].swiperSlideOffset;
        const rotate = -180 * progress;
        let rotateY = rotate;
        let rotateX = 0;
        let tx = -offset;
        let ty = 0;
        if (!swiper.isHorizontal()) {
          ty = tx;
          tx = 0;
          rotateX = -rotateY;
          rotateY = 0;
        } else if (rtl) {
          rotateY = -rotateY;
        }

        $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;

        if (swiper.params.flipEffect.slideShadows) {
          // Set shadows
          let shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
          let shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
          if (shadowBefore.length === 0) {
            shadowBefore = $(`<div class="swiper-slide-shadow-${swiper.isHorizontal() ? 'left' : 'top'}"></div>`);
            $slideEl.append(shadowBefore);
          }
          if (shadowAfter.length === 0) {
            shadowAfter = $(`<div class="swiper-slide-shadow-${swiper.isHorizontal() ? 'right' : 'bottom'}"></div>`);
            $slideEl.append(shadowAfter);
          }
          if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);
          if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);
        }
        $slideEl
          .transform(`translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`);
      }
    },
    setTransition(duration) {
      const swiper = this;
      const { slides, activeIndex, $wrapperEl } = swiper;
      slides
        .transition(duration)
        .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
        .transition(duration);
      if (swiper.params.virtualTranslate && duration !== 0) {
        let eventTriggered = false;
        // eslint-disable-next-line
        slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {
          if (eventTriggered) return;
          if (!swiper || swiper.destroyed) return;
          // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;
          eventTriggered = true;
          swiper.animating = false;
          const triggerEvents = ['webkitTransitionEnd', 'transitionend'];
          for (let i = 0; i < triggerEvents.length; i += 1) {
            $wrapperEl.trigger(triggerEvents[i]);
          }
        });
      }
    },
  };

  var EffectFlip = {
    name: 'effect-flip',
    params: {
      flipEffect: {
        slideShadows: true,
        limitRotation: true,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        flipEffect: {
          setTranslate: Flip.setTranslate.bind(swiper),
          setTransition: Flip.setTransition.bind(swiper),
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        if (swiper.params.effect !== 'flip') return;
        swiper.classNames.push(`${swiper.params.containerModifierClass}flip`);
        swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);
        const overwriteParams = {
          slidesPerView: 1,
          slidesPerColumn: 1,
          slidesPerGroup: 1,
          watchSlidesProgress: true,
          spaceBetween: 0,
          virtualTranslate: true,
        };
        Utils.extend(swiper.params, overwriteParams);
        Utils.extend(swiper.originalParams, overwriteParams);
      },
      setTranslate() {
        const swiper = this;
        if (swiper.params.effect !== 'flip') return;
        swiper.flipEffect.setTranslate();
      },
      setTransition(duration) {
        const swiper = this;
        if (swiper.params.effect !== 'flip') return;
        swiper.flipEffect.setTransition(duration);
      },
    },
  };

  const Coverflow = {
    setTranslate() {
      const swiper = this;
      const {
        width: swiperWidth, height: swiperHeight, slides, $wrapperEl, slidesSizesGrid,
      } = swiper;
      const params = swiper.params.coverflowEffect;
      const isHorizontal = swiper.isHorizontal();
      const transform = swiper.translate;
      const center = isHorizontal ? -transform + (swiperWidth / 2) : -transform + (swiperHeight / 2);
      const rotate = isHorizontal ? params.rotate : -params.rotate;
      const translate = params.depth;
      // Each slide offset from center
      for (let i = 0, length = slides.length; i < length; i += 1) {
        const $slideEl = slides.eq(i);
        const slideSize = slidesSizesGrid[i];
        const slideOffset = $slideEl[0].swiperSlideOffset;
        const offsetMultiplier = ((center - slideOffset - (slideSize / 2)) / slideSize) * params.modifier;

        let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
        let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
        // var rotateZ = 0
        let translateZ = -translate * Math.abs(offsetMultiplier);

        let stretch = params.stretch;
        // Allow percentage to make a relative stretch for responsive sliders
        if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {
          stretch = ((parseFloat(params.stretch) / 100) * slideSize);
        }
        let translateY = isHorizontal ? 0 : stretch * (offsetMultiplier);
        let translateX = isHorizontal ? stretch * (offsetMultiplier) : 0;

        // Fix for ultra small values
        if (Math.abs(translateX) < 0.001) translateX = 0;
        if (Math.abs(translateY) < 0.001) translateY = 0;
        if (Math.abs(translateZ) < 0.001) translateZ = 0;
        if (Math.abs(rotateY) < 0.001) rotateY = 0;
        if (Math.abs(rotateX) < 0.001) rotateX = 0;

        const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;

        $slideEl.transform(slideTransform);
        $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
        if (params.slideShadows) {
          // Set shadows
          let $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');
          let $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');
          if ($shadowBeforeEl.length === 0) {
            $shadowBeforeEl = $(`<div class="swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}"></div>`);
            $slideEl.append($shadowBeforeEl);
          }
          if ($shadowAfterEl.length === 0) {
            $shadowAfterEl = $(`<div class="swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}"></div>`);
            $slideEl.append($shadowAfterEl);
          }
          if ($shadowBeforeEl.length) $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
          if ($shadowAfterEl.length) $shadowAfterEl[0].style.opacity = (-offsetMultiplier) > 0 ? -offsetMultiplier : 0;
        }
      }

      // Set correct perspective for IE10
      if (Support.pointerEvents || Support.prefixedPointerEvents) {
        const ws = $wrapperEl[0].style;
        ws.perspectiveOrigin = `${center}px 50%`;
      }
    },
    setTransition(duration) {
      const swiper = this;
      swiper.slides
        .transition(duration)
        .find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left')
        .transition(duration);
    },
  };

  var EffectCoverflow = {
    name: 'effect-coverflow',
    params: {
      coverflowEffect: {
        rotate: 50,
        stretch: 0,
        depth: 100,
        modifier: 1,
        slideShadows: true,
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        coverflowEffect: {
          setTranslate: Coverflow.setTranslate.bind(swiper),
          setTransition: Coverflow.setTransition.bind(swiper),
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        if (swiper.params.effect !== 'coverflow') return;

        swiper.classNames.push(`${swiper.params.containerModifierClass}coverflow`);
        swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);

        swiper.params.watchSlidesProgress = true;
        swiper.originalParams.watchSlidesProgress = true;
      },
      setTranslate() {
        const swiper = this;
        if (swiper.params.effect !== 'coverflow') return;
        swiper.coverflowEffect.setTranslate();
      },
      setTransition(duration) {
        const swiper = this;
        if (swiper.params.effect !== 'coverflow') return;
        swiper.coverflowEffect.setTransition(duration);
      },
    },
  };

  const Thumbs = {
    init() {
      const swiper = this;
      const { thumbs: thumbsParams } = swiper.params;
      const SwiperClass = swiper.constructor;
      if (thumbsParams.swiper instanceof SwiperClass) {
        swiper.thumbs.swiper = thumbsParams.swiper;
        Utils.extend(swiper.thumbs.swiper.originalParams, {
          watchSlidesProgress: true,
          slideToClickedSlide: false,
        });
        Utils.extend(swiper.thumbs.swiper.params, {
          watchSlidesProgress: true,
          slideToClickedSlide: false,
        });
      } else if (Utils.isObject(thumbsParams.swiper)) {
        swiper.thumbs.swiper = new SwiperClass(Utils.extend({}, thumbsParams.swiper, {
          watchSlidesVisibility: true,
          watchSlidesProgress: true,
          slideToClickedSlide: false,
        }));
        swiper.thumbs.swiperCreated = true;
      }
      swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);
      swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);
    },
    onThumbClick() {
      const swiper = this;
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;
      const clickedIndex = thumbsSwiper.clickedIndex;
      const clickedSlide = thumbsSwiper.clickedSlide;
      if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) return;
      if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;
      let slideToIndex;
      if (thumbsSwiper.params.loop) {
        slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);
      } else {
        slideToIndex = clickedIndex;
      }
      if (swiper.params.loop) {
        let currentIndex = swiper.activeIndex;
        if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {
          swiper.loopFix();
          // eslint-disable-next-line
          swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
          currentIndex = swiper.activeIndex;
        }
        const prevIndex = swiper.slides.eq(currentIndex).prevAll(`[data-swiper-slide-index="${slideToIndex}"]`).eq(0).index();
        const nextIndex = swiper.slides.eq(currentIndex).nextAll(`[data-swiper-slide-index="${slideToIndex}"]`).eq(0).index();
        if (typeof prevIndex === 'undefined') slideToIndex = nextIndex;
        else if (typeof nextIndex === 'undefined') slideToIndex = prevIndex;
        else if (nextIndex - currentIndex < currentIndex - prevIndex) slideToIndex = nextIndex;
        else slideToIndex = prevIndex;
      }
      swiper.slideTo(slideToIndex);
    },
    update(initial) {
      const swiper = this;
      const thumbsSwiper = swiper.thumbs.swiper;
      if (!thumbsSwiper) return;

      const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto'
        ? thumbsSwiper.slidesPerViewDynamic()
        : thumbsSwiper.params.slidesPerView;

      const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
      const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;
      if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
        let currentThumbsIndex = thumbsSwiper.activeIndex;
        let newThumbsIndex;
        let direction;
        if (thumbsSwiper.params.loop) {
          if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {
            thumbsSwiper.loopFix();
            // eslint-disable-next-line
            thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;
            currentThumbsIndex = thumbsSwiper.activeIndex;
          }
          // Find actual thumbs index to slide to
          const prevThumbsIndex = thumbsSwiper.slides
            .eq(currentThumbsIndex)
            .prevAll(`[data-swiper-slide-index="${swiper.realIndex}"]`).eq(0)
            .index();
          const nextThumbsIndex = thumbsSwiper.slides
            .eq(currentThumbsIndex)
            .nextAll(`[data-swiper-slide-index="${swiper.realIndex}"]`).eq(0)
            .index();
          if (typeof prevThumbsIndex === 'undefined') newThumbsIndex = nextThumbsIndex;
          else if (typeof nextThumbsIndex === 'undefined') newThumbsIndex = prevThumbsIndex;
          else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) newThumbsIndex = currentThumbsIndex;
          else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) newThumbsIndex = nextThumbsIndex;
          else newThumbsIndex = prevThumbsIndex;
          direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';
        } else {
          newThumbsIndex = swiper.realIndex;
          direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';
        }
        if (useOffset) {
          newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;
        }

        if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
          if (thumbsSwiper.params.centeredSlides) {
            if (newThumbsIndex > currentThumbsIndex) {
              newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
            } else {
              newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
            }
          } else if (newThumbsIndex > currentThumbsIndex) {
            newThumbsIndex = newThumbsIndex - slidesPerView + 1;
          }
          thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);
        }
      }

      // Activate thumbs
      let thumbsToActivate = 1;
      const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;

      if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
        thumbsToActivate = swiper.params.slidesPerView;
      }

      if (!swiper.params.thumbs.multipleActiveThumbs) {
        thumbsToActivate = 1;
      }

      thumbsToActivate = Math.floor(thumbsToActivate);

      thumbsSwiper.slides.removeClass(thumbActiveClass);
      if (thumbsSwiper.params.loop || (thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled)) {
        for (let i = 0; i < thumbsToActivate; i += 1) {
          thumbsSwiper.$wrapperEl.children(`[data-swiper-slide-index="${swiper.realIndex + i}"]`).addClass(thumbActiveClass);
        }
      } else {
        for (let i = 0; i < thumbsToActivate; i += 1) {
          thumbsSwiper.slides.eq(swiper.realIndex + i).addClass(thumbActiveClass);
        }
      }
    },
  };
  var Thumbs$1 = {
    name: 'thumbs',
    params: {
      thumbs: {
        swiper: null,
        multipleActiveThumbs: true,
        autoScrollOffset: 0,
        slideThumbActiveClass: 'swiper-slide-thumb-active',
        thumbsContainerClass: 'swiper-container-thumbs',
      },
    },
    create() {
      const swiper = this;
      Utils.extend(swiper, {
        thumbs: {
          swiper: null,
          init: Thumbs.init.bind(swiper),
          update: Thumbs.update.bind(swiper),
          onThumbClick: Thumbs.onThumbClick.bind(swiper),
        },
      });
    },
    on: {
      beforeInit() {
        const swiper = this;
        const { thumbs } = swiper.params;
        if (!thumbs || !thumbs.swiper) return;
        swiper.thumbs.init();
        swiper.thumbs.update(true);
      },
      slideChange() {
        const swiper = this;
        if (!swiper.thumbs.swiper) return;
        swiper.thumbs.update();
      },
      update() {
        const swiper = this;
        if (!swiper.thumbs.swiper) return;
        swiper.thumbs.update();
      },
      resize() {
        const swiper = this;
        if (!swiper.thumbs.swiper) return;
        swiper.thumbs.update();
      },
      observerUpdate() {
        const swiper = this;
        if (!swiper.thumbs.swiper) return;
        swiper.thumbs.update();
      },
      setTransition(duration) {
        const swiper = this;
        const thumbsSwiper = swiper.thumbs.swiper;
        if (!thumbsSwiper) return;
        thumbsSwiper.setTransition(duration);
      },
      beforeDestroy() {
        const swiper = this;
        const thumbsSwiper = swiper.thumbs.swiper;
        if (!thumbsSwiper) return;
        if (swiper.thumbs.swiperCreated && thumbsSwiper) {
          thumbsSwiper.destroy();
        }
      },
    },
  };

  // Swiper Class

  Swiper.use([
    Device$1,
    Browser$1,
    Support$1,
    Resize,
    Observer$1,
    Virtual$1,
    Keyboard$1,
    Mousewheel$1,
    Navigation$1,
    Pagination$1,
    Scrollbar$1,
    Parallax$1,
    Zoom$1,
    Lazy$1,
    Controller$1,
    History$2,
    HashNavigation$1,
    A11y,
    Autoplay$1,
    EffectFade,
    EffectCube,
    EffectFlip,
    EffectCoverflow,
    Thumbs$1,
  ]);

  function initSwiper(swiperEl) {
    const app = this;
    const $swiperEl = $(swiperEl);
    if ($swiperEl.length === 0) return;
    if ($swiperEl[0].swiper) return;
    let initialSlide;
    let params = {};
    let isTabs;
    let isRoutableTabs;
    if ($swiperEl.hasClass('tabs-swipeable-wrap')) {
      $swiperEl
        .addClass('swiper-container')
        .children('.tabs')
        .addClass('swiper-wrapper')
        .children('.tab')
        .addClass('swiper-slide');
      initialSlide = $swiperEl.children('.tabs').children('.tab-active').index();
      isTabs = true;
      isRoutableTabs = $swiperEl.find('.tabs-routable').length > 0;
    }
    if ($swiperEl.attr('data-swiper')) {
      params = JSON.parse($swiperEl.attr('data-swiper'));
    } else if ($swiperEl[0].f7SwiperParams) {
      params = $swiperEl[0].f7SwiperParams;
    } else {
      params = $swiperEl.dataset();
      Object.keys(params).forEach((key) => {
        const value = params[key];
        if (typeof value === 'string' && value.indexOf('{') === 0 && value.indexOf('}') > 0) {
          try {
            params[key] = JSON.parse(value);
          } catch (e) {
            // not JSON
          }
        }
      });
    }
    if (typeof params.initialSlide === 'undefined' && typeof initialSlide !== 'undefined') {
      params.initialSlide = initialSlide;
    }

    const swiper = app.swiper.create($swiperEl[0], params);
    function updateSwiper() {
      swiper.update();
    }
    const $tabEl = $swiperEl.parents('.tab').filter((tabElIndex, tabEl) => {
      return $(tabEl).parent('.tabs').parent('.tabs-animated-wrap, .tabs-swipeable-wrap').length === 0;
    }).eq(0);
    $swiperEl.parents('.popup, .login-screen, .sheet-modal, .popover').on('modal:open', updateSwiper);
    $swiperEl.parents('.panel').on('panel:open', updateSwiper);
    if ($tabEl && $tabEl.length) {
      $tabEl.on('tab:show', updateSwiper);
    }

    swiper.on('beforeDestroy', () => {
      $swiperEl.parents('.popup, .login-screen, .sheet-modal, .popover').off('modal:open', updateSwiper);
      $swiperEl.parents('.panel').off('panel:open', updateSwiper);
      if ($tabEl && $tabEl.length) {
        $tabEl.off('tab:show', updateSwiper);
      }
    });
    if (isTabs) {
      swiper.on('slideChange', () => {
        if (isRoutableTabs) {
          let view = app.views.get($swiperEl.parents('.view'));
          if (!view) view = app.views.main;
          const router = view.router;
          const tabRoute = router.findTabRoute(swiper.slides.eq(swiper.activeIndex)[0]);
          if (tabRoute) {
            setTimeout(() => {
              router.navigate(tabRoute.path);
            }, 0);
          }
        } else {
          app.tab.show({
            tabEl: swiper.slides.eq(swiper.activeIndex),
          });
        }
      });
    }
  }

  var Swiper$1 = {
    name: 'swiper',
    static: {
      Swiper,
    },
    create() {
      const app = this;
      app.swiper = ConstructorMethods({
        defaultSelector: '.swiper-container',
        constructor: Swiper,
        domProp: 'swiper',
      });
    },
    on: {
      pageBeforeRemove(page) {
        const app = this;
        page.$el.find('.swiper-init, .tabs-swipeable-wrap').each((index, swiperEl) => {
          app.swiper.destroy(swiperEl);
        });
      },
      pageMounted(page) {
        const app = this;
        page.$el.find('.tabs-swipeable-wrap').each((index, swiperEl) => {
          initSwiper.call(app, swiperEl);
        });
      },
      pageInit(page) {
        const app = this;
        page.$el.find('.swiper-init, .tabs-swipeable-wrap').each((index, swiperEl) => {
          initSwiper.call(app, swiperEl);
        });
      },
      pageReinit(page) {
        const app = this;
        page.$el.find('.swiper-init, .tabs-swipeable-wrap').each((index, swiperEl) => {
          const swiper = app.swiper.get(swiperEl);
          if (swiper && swiper.update) swiper.update();
        });
      },
      tabMounted(tabEl) {
        const app = this;
        $(tabEl).find('.swiper-init, .tabs-swipeable-wrap').each((index, swiperEl) => {
          initSwiper.call(app, swiperEl);
        });
      },
      tabShow(tabEl) {
        const app = this;
        $(tabEl).find('.swiper-init, .tabs-swipeable-wrap').each((index, swiperEl) => {
          const swiper = app.swiper.get(swiperEl);
          if (swiper && swiper.update) swiper.update();
        });
      },
      tabBeforeRemove(tabEl) {
        const app = this;
        $(tabEl).find('.swiper-init, .tabs-swipeable-wrap').each((index, swiperEl) => {
          app.swiper.destroy(swiperEl);
        });
      },
    },
    vnode: {
      'swiper-init': {
        insert(vnode) {
          const app = this;
          const swiperEl = vnode.elm;
          initSwiper.call(app, swiperEl);
        },
        destroy(vnode) {
          const app = this;
          const swiperEl = vnode.elm;
          app.swiper.destroy(swiperEl);
        },
      },
      'tabs-swipeable-wrap': {
        insert(vnode) {
          const app = this;
          const swiperEl = vnode.elm;
          initSwiper.call(app, swiperEl);
        },
        destroy(vnode) {
          const app = this;
          const swiperEl = vnode.elm;
          app.swiper.destroy(swiperEl);
        },
      },
    },
  };

  // import PhotoBrowser from 'framework7/components/photo-browser/photo-browser';
  // import Notification from 'framework7/components/notification/notification';
  // import Autocomplete from 'framework7/components/autocomplete/autocomplete';
  // import Tooltip from 'framework7/components/tooltip/tooltip';
  // import Gauge from 'framework7/components/gauge/gauge';
  // import Skeleton from 'framework7/components/skeleton/skeleton';
  // import Menu from 'framework7/components/menu/menu';
  // import ColorPicker from 'framework7/components/color-picker/color-picker';
  // import Treeview from 'framework7/components/treeview/treeview';
  // import TextEditor from 'framework7/components/text-editor/text-editor';
  // import Elevation from 'framework7/components/elevation/elevation';
  // import Typography from 'framework7/components/typography/typography';

  Framework7.use([
    // Appbar,
    // Dialog,
    // Popup,
    // LoginScreen,
    // Popover,
    // Actions,
    // Sheet,
    // Toast,
    // Preloader,
    // Progressbar,
    // Sortable,
    // Swipeout,
    // Accordion,
    // ContactsList,
    // VirtualList,
    // ListIndex,
    // Timeline,
    // Tabs,
    // Panel,
    Card,
    // Chip,
    // Form,
    // Input,
    // Checkbox,
    // Radio,
    // Toggle,
    // Range,
    // Stepper,
    // SmartSelect,
    // Grid,
    // Calendar,
    // Picker,
    // InfiniteScroll,
    // PullToRefresh,
    // Lazy,
    // DataTable,
    // Fab,
    // Searchbar,
    // Messages,
    // Messagebar,
    Swiper$1,
    // PhotoBrowser,
    // Notification,
    // Autocomplete,
    // Tooltip,
    // Gauge,
    // Skeleton,
    // Menu,
    // ColorPicker,
    // Treeview,
    // TextEditor,
    // Elevation,
    // Typography,
  ]);

  function noop() { }
  function assign(tar, src) {
      // @ts-ignore
      for (const k in src)
          tar[k] = src[k];
      return tar;
  }
  function add_location(element, file, line, column, char) {
      element.__svelte_meta = {
          loc: { file, line, column, char }
      };
  }
  function run(fn) {
      return fn();
  }
  function blank_object() {
      return Object.create(null);
  }
  function run_all(fns) {
      fns.forEach(run);
  }
  function is_function(thing) {
      return typeof thing === 'function';
  }
  function safe_not_equal(a, b) {
      return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
  }
  function is_empty(obj) {
      return Object.keys(obj).length === 0;
  }
  function create_slot(definition, ctx, $$scope, fn) {
      if (definition) {
          const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
          return definition[0](slot_ctx);
      }
  }
  function get_slot_context(definition, ctx, $$scope, fn) {
      return definition[1] && fn
          ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
          : $$scope.ctx;
  }
  function get_slot_changes(definition, $$scope, dirty, fn) {
      if (definition[2] && fn) {
          const lets = definition[2](fn(dirty));
          if ($$scope.dirty === undefined) {
              return lets;
          }
          if (typeof lets === 'object') {
              const merged = [];
              const len = Math.max($$scope.dirty.length, lets.length);
              for (let i = 0; i < len; i += 1) {
                  merged[i] = $$scope.dirty[i] | lets[i];
              }
              return merged;
          }
          return $$scope.dirty | lets;
      }
      return $$scope.dirty;
  }
  function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
      const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
      if (slot_changes) {
          const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
          slot.p(slot_context, slot_changes);
      }
  }
  function exclude_internal_props(props) {
      const result = {};
      for (const k in props)
          if (k[0] !== '$')
              result[k] = props[k];
      return result;
  }
  function compute_rest_props(props, keys) {
      const rest = {};
      keys = new Set(keys);
      for (const k in props)
          if (!keys.has(k) && k[0] !== '$')
              rest[k] = props[k];
      return rest;
  }

  function append$1(target, node) {
      target.appendChild(node);
  }
  function insert(target, node, anchor) {
      target.insertBefore(node, anchor || null);
  }
  function detach$1(node) {
      node.parentNode.removeChild(node);
  }
  function destroy_each(iterations, detaching) {
      for (let i = 0; i < iterations.length; i += 1) {
          if (iterations[i])
              iterations[i].d(detaching);
      }
  }
  function element(name) {
      return document.createElement(name);
  }
  function text$1(data) {
      return document.createTextNode(data);
  }
  function space() {
      return text$1(' ');
  }
  function empty$1() {
      return text$1('');
  }
  function listen(node, event, handler, options) {
      node.addEventListener(event, handler, options);
      return () => node.removeEventListener(event, handler, options);
  }
  function attr$1(node, attribute, value) {
      if (value == null)
          node.removeAttribute(attribute);
      else if (node.getAttribute(attribute) !== value)
          node.setAttribute(attribute, value);
  }
  function set_attributes(node, attributes) {
      // @ts-ignore
      const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
      for (const key in attributes) {
          if (attributes[key] == null) {
              node.removeAttribute(key);
          }
          else if (key === 'style') {
              node.style.cssText = attributes[key];
          }
          else if (key === '__value') {
              node.value = node[key] = attributes[key];
          }
          else if (descriptors[key] && descriptors[key].set) {
              node[key] = attributes[key];
          }
          else {
              attr$1(node, key, attributes[key]);
          }
      }
  }
  function children$1(element) {
      return Array.from(element.childNodes);
  }
  function set_style(node, key, value, important) {
      node.style.setProperty(key, value, important ? 'important' : '');
  }
  function toggle_class(element, name, toggle) {
      element.classList[toggle ? 'add' : 'remove'](name);
  }
  function custom_event(type, detail) {
      const e = document.createEvent('CustomEvent');
      e.initCustomEvent(type, false, false, detail);
      return e;
  }

  let current_component;
  function set_current_component(component) {
      current_component = component;
  }
  function get_current_component() {
      if (!current_component)
          throw new Error('Function called outside component initialization');
      return current_component;
  }
  function onMount(fn) {
      get_current_component().$$.on_mount.push(fn);
  }
  function afterUpdate(fn) {
      get_current_component().$$.after_update.push(fn);
  }
  function onDestroy(fn) {
      get_current_component().$$.on_destroy.push(fn);
  }
  function createEventDispatcher() {
      const component = get_current_component();
      return (type, detail) => {
          const callbacks = component.$$.callbacks[type];
          if (callbacks) {
              // TODO are there situations where events could be dispatched
              // in a server (non-DOM) environment?
              const event = custom_event(type, detail);
              callbacks.slice().forEach(fn => {
                  fn.call(component, event);
              });
          }
      };
  }
  function setContext(key, context) {
      get_current_component().$$.context.set(key, context);
  }
  function getContext(key) {
      return get_current_component().$$.context.get(key);
  }

  const dirty_components = [];
  const binding_callbacks = [];
  const render_callbacks = [];
  const flush_callbacks = [];
  const resolved_promise = Promise.resolve();
  let update_scheduled = false;
  function schedule_update() {
      if (!update_scheduled) {
          update_scheduled = true;
          resolved_promise.then(flush);
      }
  }
  function tick() {
      schedule_update();
      return resolved_promise;
  }
  function add_render_callback(fn) {
      render_callbacks.push(fn);
  }
  let flushing = false;
  const seen_callbacks = new Set();
  function flush() {
      if (flushing)
          return;
      flushing = true;
      do {
          // first, call beforeUpdate functions
          // and update components
          for (let i = 0; i < dirty_components.length; i += 1) {
              const component = dirty_components[i];
              set_current_component(component);
              update$1(component.$$);
          }
          set_current_component(null);
          dirty_components.length = 0;
          while (binding_callbacks.length)
              binding_callbacks.pop()();
          // then, once components are updated, call
          // afterUpdate functions. This may cause
          // subsequent updates...
          for (let i = 0; i < render_callbacks.length; i += 1) {
              const callback = render_callbacks[i];
              if (!seen_callbacks.has(callback)) {
                  // ...so guard against infinite loops
                  seen_callbacks.add(callback);
                  callback();
              }
          }
          render_callbacks.length = 0;
      } while (dirty_components.length);
      while (flush_callbacks.length) {
          flush_callbacks.pop()();
      }
      update_scheduled = false;
      flushing = false;
      seen_callbacks.clear();
  }
  function update$1($$) {
      if ($$.fragment !== null) {
          $$.update();
          run_all($$.before_update);
          const dirty = $$.dirty;
          $$.dirty = [-1];
          $$.fragment && $$.fragment.p($$.ctx, dirty);
          $$.after_update.forEach(add_render_callback);
      }
  }
  const outroing = new Set();
  let outros;
  function group_outros() {
      outros = {
          r: 0,
          c: [],
          p: outros // parent group
      };
  }
  function check_outros() {
      if (!outros.r) {
          run_all(outros.c);
      }
      outros = outros.p;
  }
  function transition_in(block, local) {
      if (block && block.i) {
          outroing.delete(block);
          block.i(local);
      }
  }
  function transition_out(block, local, detach, callback) {
      if (block && block.o) {
          if (outroing.has(block))
              return;
          outroing.add(block);
          outros.c.push(() => {
              outroing.delete(block);
              if (callback) {
                  if (detach)
                      block.d(1);
                  callback();
              }
          });
          block.o(local);
      }
  }
  function outro_and_destroy_block(block, lookup) {
      transition_out(block, 1, 1, () => {
          lookup.delete(block.key);
      });
  }
  function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
      let o = old_blocks.length;
      let n = list.length;
      let i = o;
      const old_indexes = {};
      while (i--)
          old_indexes[old_blocks[i].key] = i;
      const new_blocks = [];
      const new_lookup = new Map();
      const deltas = new Map();
      i = n;
      while (i--) {
          const child_ctx = get_context(ctx, list, i);
          const key = get_key(child_ctx);
          let block = lookup.get(key);
          if (!block) {
              block = create_each_block(key, child_ctx);
              block.c();
          }
          else if (dynamic) {
              block.p(child_ctx, dirty);
          }
          new_lookup.set(key, new_blocks[i] = block);
          if (key in old_indexes)
              deltas.set(key, Math.abs(i - old_indexes[key]));
      }
      const will_move = new Set();
      const did_move = new Set();
      function insert(block) {
          transition_in(block, 1);
          block.m(node, next);
          lookup.set(block.key, block);
          next = block.first;
          n--;
      }
      while (o && n) {
          const new_block = new_blocks[n - 1];
          const old_block = old_blocks[o - 1];
          const new_key = new_block.key;
          const old_key = old_block.key;
          if (new_block === old_block) {
              // do nothing
              next = new_block.first;
              o--;
              n--;
          }
          else if (!new_lookup.has(old_key)) {
              // remove old block
              destroy(old_block, lookup);
              o--;
          }
          else if (!lookup.has(new_key) || will_move.has(new_key)) {
              insert(new_block);
          }
          else if (did_move.has(old_key)) {
              o--;
          }
          else if (deltas.get(new_key) > deltas.get(old_key)) {
              did_move.add(new_key);
              insert(new_block);
          }
          else {
              will_move.add(old_key);
              o--;
          }
      }
      while (o--) {
          const old_block = old_blocks[o];
          if (!new_lookup.has(old_block.key))
              destroy(old_block, lookup);
      }
      while (n)
          insert(new_blocks[n - 1]);
      return new_blocks;
  }
  function validate_each_keys(ctx, list, get_context, get_key) {
      const keys = new Set();
      for (let i = 0; i < list.length; i++) {
          const key = get_key(get_context(ctx, list, i));
          if (keys.has(key)) {
              throw new Error('Cannot have duplicate keys in a keyed each');
          }
          keys.add(key);
      }
  }

  function get_spread_update(levels, updates) {
      const update = {};
      const to_null_out = {};
      const accounted_for = { $$scope: 1 };
      let i = levels.length;
      while (i--) {
          const o = levels[i];
          const n = updates[i];
          if (n) {
              for (const key in o) {
                  if (!(key in n))
                      to_null_out[key] = 1;
              }
              for (const key in n) {
                  if (!accounted_for[key]) {
                      update[key] = n[key];
                      accounted_for[key] = 1;
                  }
              }
              levels[i] = n;
          }
          else {
              for (const key in o) {
                  accounted_for[key] = 1;
              }
          }
      }
      for (const key in to_null_out) {
          if (!(key in update))
              update[key] = undefined;
      }
      return update;
  }
  function get_spread_object(spread_props) {
      return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
  }
  function create_component(block) {
      block && block.c();
  }
  function mount_component(component, target, anchor) {
      const { fragment, on_mount, on_destroy, after_update } = component.$$;
      fragment && fragment.m(target, anchor);
      // onMount happens before the initial afterUpdate
      add_render_callback(() => {
          const new_on_destroy = on_mount.map(run).filter(is_function);
          if (on_destroy) {
              on_destroy.push(...new_on_destroy);
          }
          else {
              // Edge case - component was destroyed immediately,
              // most likely as a result of a binding initialising
              run_all(new_on_destroy);
          }
          component.$$.on_mount = [];
      });
      after_update.forEach(add_render_callback);
  }
  function destroy_component(component, detaching) {
      const $$ = component.$$;
      if ($$.fragment !== null) {
          run_all($$.on_destroy);
          $$.fragment && $$.fragment.d(detaching);
          // TODO null out other refs, including component.$$ (but need to
          // preserve final state?)
          $$.on_destroy = $$.fragment = null;
          $$.ctx = [];
      }
  }
  function make_dirty(component, i) {
      if (component.$$.dirty[0] === -1) {
          dirty_components.push(component);
          schedule_update();
          component.$$.dirty.fill(0);
      }
      component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
  }
  function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
      const parent_component = current_component;
      set_current_component(component);
      const prop_values = options.props || {};
      const $$ = component.$$ = {
          fragment: null,
          ctx: null,
          // state
          props,
          update: noop,
          not_equal,
          bound: blank_object(),
          // lifecycle
          on_mount: [],
          on_destroy: [],
          before_update: [],
          after_update: [],
          context: new Map(parent_component ? parent_component.$$.context : []),
          // everything else
          callbacks: blank_object(),
          dirty,
          skip_bound: false
      };
      let ready = false;
      $$.ctx = instance
          ? instance(component, prop_values, (i, ret, ...rest) => {
              const value = rest.length ? rest[0] : ret;
              if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                  if (!$$.skip_bound && $$.bound[i])
                      $$.bound[i](value);
                  if (ready)
                      make_dirty(component, i);
              }
              return ret;
          })
          : [];
      $$.update();
      ready = true;
      run_all($$.before_update);
      // `false` as a special case of no DOM component
      $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
      if (options.target) {
          if (options.hydrate) {
              const nodes = children$1(options.target);
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              $$.fragment && $$.fragment.l(nodes);
              nodes.forEach(detach$1);
          }
          else {
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              $$.fragment && $$.fragment.c();
          }
          if (options.intro)
              transition_in(component.$$.fragment);
          mount_component(component, options.target, options.anchor);
          flush();
      }
      set_current_component(parent_component);
  }
  class SvelteComponent {
      $destroy() {
          destroy_component(this, 1);
          this.$destroy = noop;
      }
      $on(type, callback) {
          const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
          callbacks.push(callback);
          return () => {
              const index = callbacks.indexOf(callback);
              if (index !== -1)
                  callbacks.splice(index, 1);
          };
      }
      $set($$props) {
          if (this.$$set && !is_empty($$props)) {
              this.$$.skip_bound = true;
              this.$$set($$props);
              this.$$.skip_bound = false;
          }
      }
  }

  function dispatch_dev(type, detail) {
      document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.4' }, detail)));
  }
  function append_dev(target, node) {
      dispatch_dev('SvelteDOMInsert', { target, node });
      append$1(target, node);
  }
  function insert_dev(target, node, anchor) {
      dispatch_dev('SvelteDOMInsert', { target, node, anchor });
      insert(target, node, anchor);
  }
  function detach_dev(node) {
      dispatch_dev('SvelteDOMRemove', { node });
      detach$1(node);
  }
  function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
      const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
      if (has_prevent_default)
          modifiers.push('preventDefault');
      if (has_stop_propagation)
          modifiers.push('stopPropagation');
      dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
      const dispose = listen(node, event, handler, options);
      return () => {
          dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
          dispose();
      };
  }
  function attr_dev(node, attribute, value) {
      attr$1(node, attribute, value);
      if (value == null)
          dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
      else
          dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
  }
  function prop_dev(node, property, value) {
      node[property] = value;
      dispatch_dev('SvelteDOMSetProperty', { node, property, value });
  }
  function set_data_dev(text, data) {
      data = '' + data;
      if (text.wholeText === data)
          return;
      dispatch_dev('SvelteDOMSetData', { node: text, data });
      text.data = data;
  }
  function validate_each_argument(arg) {
      if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
          let msg = '{#each} only iterates over array-like objects.';
          if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
              msg += ' You can use a spread to convert this iterable into an array.';
          }
          throw new Error(msg);
      }
  }
  function validate_slots(name, slot, keys) {
      for (const slot_key of Object.keys(slot)) {
          if (!~keys.indexOf(slot_key)) {
              console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
          }
      }
  }
  class SvelteComponentDev extends SvelteComponent {
      constructor(options) {
          if (!options || (!options.target && !options.$$inline)) {
              throw new Error("'target' is a required option");
          }
          super();
      }
      $destroy() {
          super.$destroy();
          this.$destroy = () => {
              console.warn('Component was already destroyed'); // eslint-disable-line no-console
          };
      }
      $capture_state() { }
      $inject_state() { }
  }

  const Utils$1 = {
    text(text) {
      if (typeof text === 'undefined' || text === null) return '';
      return text;
    },
    noUndefinedProps(obj) {
      const o = {};
      Object.keys(obj).forEach((key) => {
        if (typeof obj[key] !== 'undefined') o[key] = obj[key];
      });
      return o;
    },
    isTrueProp(val) {
      return val === true || val === '';
    },
    isStringProp(val) {
      return typeof val === 'string' && val !== '';
    },
    isObject(o) {
      return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;
    },
    now() {
      return Date.now();
    },
    extend(...args) {
      let deep = true;
      let to;
      let from;
      if (typeof args[0] === 'boolean') {
        [deep, to] = args;
        args.splice(0, 2);
        from = args;
      } else {
        [to] = args;
        args.splice(0, 1);
        from = args;
      }
      for (let i = 0; i < from.length; i += 1) {
        const nextSource = args[i];
        if (nextSource !== undefined && nextSource !== null) {
          const keysArray = Object.keys(Object(nextSource));
          for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
            const nextKey = keysArray[nextIndex];
            const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) {
              if (!deep) {
                to[nextKey] = nextSource[nextKey];
              } else if (Utils$1.isObject(to[nextKey]) && Utils$1.isObject(nextSource[nextKey])) {
                Utils$1.extend(to[nextKey], nextSource[nextKey]);
              } else if (!Utils$1.isObject(to[nextKey]) && Utils$1.isObject(nextSource[nextKey])) {
                to[nextKey] = {};
                Utils$1.extend(to[nextKey], nextSource[nextKey]);
              } else {
                to[nextKey] = nextSource[nextKey];
              }
            }
          }
        }
      }
      return to;
    },
    flattenArray(...args) {
      const arr = [];
      args.forEach((arg) => {
        if (Array.isArray(arg)) arr.push(...Utils$1.flattenArray(...arg));
        else arr.push(arg);
      });
      return arr;
    },
    classNames(...args) {
      const classes = [];
      args.forEach((arg) => {
        if (typeof arg === 'object' && arg.constructor === Object) {
          Object.keys(arg).forEach((key) => {
            if (arg[key]) classes.push(key);
          });
        } else if (arg) classes.push(arg);
      });
      const uniqueClasses = [];
      classes.forEach((c) => {
        if (uniqueClasses.indexOf(c) < 0) uniqueClasses.push(c);
      });
      return uniqueClasses.join(' ');
    },
    bindMethods(context, methods = []) {
      for (let i = 0; i < methods.length; i += 1) {
        if (context[methods[i]]) context[methods[i]] = context[methods[i]].bind(context);
      }
    },
  };

  const Mixins = {
    colorProps: {
      color: String,
      colorTheme: String,
      textColor: String,
      bgColor: String,
      borderColor: String,
      rippleColor: String,
      themeDark: Boolean,
    },
    colorClasses(props) {
      const {
        color,
        colorTheme,
        textColor,
        bgColor,
        borderColor,
        rippleColor,
        themeDark,
      } = props;

      return {
        'theme-dark': themeDark,
        [`color-${color}`]: color,
        [`color-theme-${colorTheme}`]: colorTheme,
        [`text-color-${textColor}`]: textColor,
        [`bg-color-${bgColor}`]: bgColor,
        [`border-color-${borderColor}`]: borderColor,
        [`ripple-color-${rippleColor}`]: rippleColor,
      };
    },
    linkIconProps: {
      icon: String,
      iconMaterial: String,
      iconF7: String,
      iconIos: String,
      iconMd: String,
      iconAurora: String,
      iconColor: String,
      iconSize: [String, Number],
    },
    linkRouterProps: {
      back: Boolean,
      external: Boolean,
      force: Boolean,
      animate: {
        type: Boolean,
        default: undefined,
      },
      ignoreCache: Boolean,
      reloadCurrent: Boolean,
      reloadAll: Boolean,
      reloadPrevious: Boolean,
      reloadDetail: {
        type: Boolean,
        default: undefined,
      },
      routeTabId: String,
      view: String,
      routeProps: Object,
      preventRouter: Boolean,
      transition: String,
    },
    linkRouterAttrs(props) {
      const {
        force,
        reloadCurrent,
        reloadPrevious,
        reloadAll,
        reloadDetail,
        animate,
        ignoreCache,
        routeTabId,
        view,
        transition,
      } = props;

      let dataAnimate;
      if ('animate' in props && typeof animate !== 'undefined') {
        dataAnimate = animate.toString();
      }

      let dataReloadDetail;
      if ('reloadDetail' in props && typeof reloadDetail !== 'undefined') {
        dataReloadDetail = reloadDetail.toString();
      }

      return {
        'data-force': force || undefined,
        'data-reload-current': reloadCurrent || undefined,
        'data-reload-all': reloadAll || undefined,
        'data-reload-previous': reloadPrevious || undefined,
        'data-reload-detail': dataReloadDetail,
        'data-animate': dataAnimate,
        'data-ignore-cache': ignoreCache || undefined,
        'data-route-tab-id': routeTabId || undefined,
        'data-view': Utils$1.isStringProp(view) ? view : undefined,
        'data-transition': Utils$1.isStringProp(transition) ? transition : undefined,
      };
    },
    linkRouterClasses(props) {
      const { back, linkBack, external, preventRouter } = props;

      return {
        back: back || linkBack,
        external,
        'prevent-router': preventRouter,
      };
    },
    linkActionsProps: {
      searchbarEnable: [Boolean, String],
      searchbarDisable: [Boolean, String],

      searchbarClear: [Boolean, String],
      searchbarToggle: [Boolean, String],

      // Panel
      panelOpen: [Boolean, String],
      panelClose: [Boolean, String],
      panelToggle: [Boolean, String],

      // Popup
      popupOpen: [Boolean, String],
      popupClose: [Boolean, String],

      // Actions
      actionsOpen: [Boolean, String],
      actionsClose: [Boolean, String],

      // Popover
      popoverOpen: [Boolean, String],
      popoverClose: [Boolean, String],

      // Login Screen
      loginScreenOpen: [Boolean, String],
      loginScreenClose: [Boolean, String],

      // Picker
      sheetOpen: [Boolean, String],
      sheetClose: [Boolean, String],

      // Sortable
      sortableEnable: [Boolean, String],
      sortableDisable: [Boolean, String],
      sortableToggle: [Boolean, String],

      // Card
      cardOpen: [Boolean, String],
      cardPreventOpen: [Boolean, String],
      cardClose: [Boolean, String],

      // Menu
      menuClose: {
        type: [Boolean, String],
        default: undefined,
      },
    },
    linkActionsAttrs(props) {
      const {
        searchbarEnable,
        searchbarDisable,
        searchbarClear,
        searchbarToggle,
        panelOpen,
        panelClose,
        panelToggle,
        popupOpen,
        popupClose,
        actionsOpen,
        actionsClose,
        popoverOpen,
        popoverClose,
        loginScreenOpen,
        loginScreenClose,
        sheetOpen,
        sheetClose,
        sortableEnable,
        sortableDisable,
        sortableToggle,
        cardOpen,
        cardClose,
      } = props;

      return {
        'data-searchbar': (Utils$1.isStringProp(searchbarEnable) && searchbarEnable)
                          || (Utils$1.isStringProp(searchbarDisable) && searchbarDisable)
                          || (Utils$1.isStringProp(searchbarClear) && searchbarClear)
                          || (Utils$1.isStringProp(searchbarToggle) && searchbarToggle) || undefined,
        'data-panel': (Utils$1.isStringProp(panelOpen) && panelOpen)
                      || (Utils$1.isStringProp(panelClose) && panelClose)
                      || (Utils$1.isStringProp(panelToggle) && panelToggle) || undefined,
        'data-popup': (Utils$1.isStringProp(popupOpen) && popupOpen)
                      || (Utils$1.isStringProp(popupClose) && popupClose) || undefined,
        'data-actions': (Utils$1.isStringProp(actionsOpen) && actionsOpen)
                      || (Utils$1.isStringProp(actionsClose) && actionsClose) || undefined,
        'data-popover': (Utils$1.isStringProp(popoverOpen) && popoverOpen)
                        || (Utils$1.isStringProp(popoverClose) && popoverClose) || undefined,
        'data-sheet': (Utils$1.isStringProp(sheetOpen) && sheetOpen)
                      || (Utils$1.isStringProp(sheetClose) && sheetClose) || undefined,
        'data-login-screen': (Utils$1.isStringProp(loginScreenOpen) && loginScreenOpen)
                             || (Utils$1.isStringProp(loginScreenClose) && loginScreenClose) || undefined,
        'data-sortable': (Utils$1.isStringProp(sortableEnable) && sortableEnable)
                         || (Utils$1.isStringProp(sortableDisable) && sortableDisable)
                         || (Utils$1.isStringProp(sortableToggle) && sortableToggle) || undefined,
        'data-card': (Utils$1.isStringProp(cardOpen) && cardOpen)
                      || (Utils$1.isStringProp(cardClose) && cardClose) || undefined,
      };
    },
    linkActionsClasses(props) {
      const {
        searchbarEnable,
        searchbarDisable,
        searchbarClear,
        searchbarToggle,
        panelOpen,
        panelClose,
        panelToggle,
        popupOpen,
        popupClose,
        actionsClose,
        actionsOpen,
        popoverOpen,
        popoverClose,
        loginScreenOpen,
        loginScreenClose,
        sheetOpen,
        sheetClose,
        sortableEnable,
        sortableDisable,
        sortableToggle,
        cardOpen,
        cardPreventOpen,
        cardClose,
        menuClose,
      } = props;

      return {
        'searchbar-enable': searchbarEnable || searchbarEnable === '',
        'searchbar-disable': searchbarDisable || searchbarDisable === '',
        'searchbar-clear': searchbarClear || searchbarClear === '',
        'searchbar-toggle': searchbarToggle || searchbarToggle === '',
        'panel-close': panelClose || panelClose === '',
        'panel-open': panelOpen || panelOpen === '',
        'panel-toggle': panelToggle || panelToggle === '',
        'popup-close': popupClose || popupClose === '',
        'popup-open': popupOpen || popupOpen === '',
        'actions-close': actionsClose || actionsClose === '',
        'actions-open': actionsOpen || actionsOpen === '',
        'popover-close': popoverClose || popoverClose === '',
        'popover-open': popoverOpen || popoverOpen === '',
        'sheet-close': sheetClose || sheetClose === '',
        'sheet-open': sheetOpen || sheetOpen === '',
        'login-screen-close': loginScreenClose || loginScreenClose === '',
        'login-screen-open': loginScreenOpen || loginScreenOpen === '',
        'sortable-enable': sortableEnable || sortableEnable === '',
        'sortable-disable': sortableDisable || sortableDisable === '',
        'sortable-toggle': sortableToggle || sortableToggle === '',
        'card-close': cardClose || cardClose === '',
        'card-open': cardOpen || cardOpen === '',
        'card-prevent-open': cardPreventOpen || cardPreventOpen === '',
        'menu-close': menuClose || menuClose === '',
      };
    },
  };

  function restProps(rest = {}) {
    const props = {};
    Object.keys(rest).forEach((key) => {
      if (key.indexOf('on') !== 0) {
        props[key] = rest[key];
      }
    });
    return props;
  }

  const f7 = {
    instance: null,
    Framework7: null,
    events: null,
    init(rootEl, params = {}, routes) {
      const { events, Framework7 } = f7;
      const f7Params = Utils$1.extend({}, params, {
        root: rootEl,
      });
      if (routes && routes.length && !f7Params.routes) f7Params.routes = routes;

      const instance = new Framework7(f7Params);
      if (instance.initialized) {
        f7.instance = instance;
        events.emit('ready', f7.instance);
      } else {
        instance.on('init', () => {
          f7.instance = instance;
          events.emit('ready', f7.instance);
        });
      }
    },
    ready(callback) {
      if (!callback) return;
      if (f7.instance) callback(f7.instance);
      else {
        f7.events.once('ready', callback);
      }
    },
    routers: {
      views: [],
      tabs: [],
      modals: null,
    },
  };

  function hasSlots (args, name) {
    return args && args[1] && args[1].$$slots && args[1].$$slots[name] && args[1].$$slots[name].length > 0;
  }

  /* node_modules\framework7-svelte\components\routable-modals.svelte generated by Svelte v3.29.4 */
  const file = "node_modules\\framework7-svelte\\components\\routable-modals.svelte";

  function get_each_context(ctx, list, i) {
  	const child_ctx = ctx.slice();
  	child_ctx[5] = list[i];
  	return child_ctx;
  }

  // (33:2) {#each modals as modal (modal.id)}
  function create_each_block(key_1, ctx) {
  	let first;
  	let switch_instance;
  	let switch_instance_anchor;
  	let current;
  	const switch_instance_spread_levels = [/*modal*/ ctx[5].props];
  	var switch_value = /*modal*/ ctx[5].component;

  	function switch_props(ctx) {
  		let switch_instance_props = {};

  		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
  			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
  		}

  		return {
  			props: switch_instance_props,
  			$$inline: true
  		};
  	}

  	if (switch_value) {
  		switch_instance = new switch_value(switch_props());
  	}

  	const block = {
  		key: key_1,
  		first: null,
  		c: function create() {
  			first = empty$1();
  			if (switch_instance) create_component(switch_instance.$$.fragment);
  			switch_instance_anchor = empty$1();
  			this.first = first;
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, first, anchor);

  			if (switch_instance) {
  				mount_component(switch_instance, target, anchor);
  			}

  			insert_dev(target, switch_instance_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const switch_instance_changes = (dirty & /*modals*/ 1)
  			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*modal*/ ctx[5].props)])
  			: {};

  			if (switch_value !== (switch_value = /*modal*/ ctx[5].component)) {
  				if (switch_instance) {
  					group_outros();
  					const old_component = switch_instance;

  					transition_out(old_component.$$.fragment, 1, 0, () => {
  						destroy_component(old_component, 1);
  					});

  					check_outros();
  				}

  				if (switch_value) {
  					switch_instance = new switch_value(switch_props());
  					create_component(switch_instance.$$.fragment);
  					transition_in(switch_instance.$$.fragment, 1);
  					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
  				} else {
  					switch_instance = null;
  				}
  			} else if (switch_value) {
  				switch_instance.$set(switch_instance_changes);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(first);
  			if (detaching) detach_dev(switch_instance_anchor);
  			if (switch_instance) destroy_component(switch_instance, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_each_block.name,
  		type: "each",
  		source: "(33:2) {#each modals as modal (modal.id)}",
  		ctx
  	});

  	return block;
  }

  function create_fragment(ctx) {
  	let div;
  	let each_blocks = [];
  	let each_1_lookup = new Map();
  	let current;
  	let each_value = /*modals*/ ctx[0];
  	validate_each_argument(each_value);
  	const get_key = ctx => /*modal*/ ctx[5].id;
  	validate_each_keys(ctx, each_value, get_each_context, get_key);

  	for (let i = 0; i < each_value.length; i += 1) {
  		let child_ctx = get_each_context(ctx, each_value, i);
  		let key = get_key(child_ctx);
  		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  	}

  	const block = {
  		c: function create() {
  			div = element("div");

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].c();
  			}

  			attr_dev(div, "class", "framework7-modals");
  			add_location(div, file, 31, 0, 614);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].m(div, null);
  			}

  			/*div_binding*/ ctx[2](div);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (dirty & /*modals*/ 1) {
  				const each_value = /*modals*/ ctx[0];
  				validate_each_argument(each_value);
  				group_outros();
  				validate_each_keys(ctx, each_value, get_each_context, get_key);
  				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;

  			for (let i = 0; i < each_value.length; i += 1) {
  				transition_in(each_blocks[i]);
  			}

  			current = true;
  		},
  		o: function outro(local) {
  			for (let i = 0; i < each_blocks.length; i += 1) {
  				transition_out(each_blocks[i]);
  			}

  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].d();
  			}

  			/*div_binding*/ ctx[2](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance($$self, $$props, $$invalidate) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Routable_modals", slots, []);
  	let modals = [];
  	let el;
  	let routerData;

  	onMount(() => {
  		routerData = {
  			el,
  			modals,
  			setModals(m) {
  				tick().then(() => {
  					$$invalidate(0, modals = m);
  				});
  			}
  		};

  		f7.routers.modals = routerData;
  	});

  	afterUpdate(() => {
  		if (!routerData) return;
  		f7.events.emit("modalsRouterDidUpdate", routerData);
  	});

  	onDestroy(() => {
  		if (!routerData) return;
  		f7.routers.modals = null;
  		routerData = null;
  	});

  	const writable_props = [];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routable_modals> was created with unknown prop '${key}'`);
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(1, el);
  		});
  	}

  	$$self.$capture_state = () => ({
  		onMount,
  		onDestroy,
  		afterUpdate,
  		tick,
  		f7,
  		modals,
  		el,
  		routerData
  	});

  	$$self.$inject_state = $$props => {
  		if ("modals" in $$props) $$invalidate(0, modals = $$props.modals);
  		if ("el" in $$props) $$invalidate(1, el = $$props.el);
  		if ("routerData" in $$props) routerData = $$props.routerData;
  	};

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	return [modals, el, div_binding];
  }

  class Routable_modals extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance, create_fragment, safe_not_equal, {});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Routable_modals",
  			options,
  			id: create_fragment.name
  		});
  	}
  }

  /* node_modules\framework7-svelte\components\app.svelte generated by Svelte v3.29.4 */
  const file$1 = "node_modules\\framework7-svelte\\components\\app.svelte";

  function create_fragment$1(ctx) {
  	let div;
  	let t;
  	let routablemodals;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[8].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
  	routablemodals = new Routable_modals({ $$inline: true });

  	let div_levels = [
  		{ id: /*id*/ ctx[0] },
  		{ class: /*classes*/ ctx[2] },
  		restProps(/*$$restProps*/ ctx[3])
  	];

  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			t = space();
  			create_component(routablemodals.$$.fragment);
  			set_attributes(div, div_data);
  			add_location(div, file$1, 34, 0, 804);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			append_dev(div, t);
  			mount_component(routablemodals, div, null);
  			/*div_binding*/ ctx[9](div);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 128) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
  				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] },
  				dirty & /*$$restProps*/ 8 && restProps(/*$$restProps*/ ctx[3])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			transition_in(routablemodals.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			transition_out(routablemodals.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  			destroy_component(routablemodals);
  			/*div_binding*/ ctx[9](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$1.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$1($$self, $$props, $$invalidate) {
  	const omit_props_names = ["id","params","routes","class"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("App", slots, ['default']);
  	let { id = "framework7-root" } = $$props;
  	let { params = {} } = $$props;
  	let { routes = [] } = $$props;
  	let { class: className = undefined } = $$props;
  	let el;

  	onMount(() => {
  		const parentEl = el.parentNode;

  		if (parentEl && parentEl !== document.body && parentEl.parentNode === document.body) {
  			parentEl.style.height = "100%";
  		}

  		if (f7.instance) return;
  		f7.init(el, params, routes);
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(1, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
  		if ("params" in $$new_props) $$invalidate(4, params = $$new_props.params);
  		if ("routes" in $$new_props) $$invalidate(5, routes = $$new_props.routes);
  		if ("class" in $$new_props) $$invalidate(6, className = $$new_props.class);
  		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		f7,
  		RoutableModals: Routable_modals,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		id,
  		params,
  		routes,
  		className,
  		el,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
  		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
  		if ("params" in $$props) $$invalidate(4, params = $$new_props.params);
  		if ("routes" in $$props) $$invalidate(5, routes = $$new_props.routes);
  		if ("className" in $$props) $$invalidate(6, className = $$new_props.className);
  		if ("el" in $$props) $$invalidate(1, el = $$new_props.el);
  		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(2, classes = Utils$1.classNames(className, "framework7-root", Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		id,
  		el,
  		classes,
  		$$restProps,
  		params,
  		routes,
  		className,
  		$$scope,
  		slots,
  		div_binding
  	];
  }

  class App extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$1, create_fragment$1, safe_not_equal, { id: 0, params: 4, routes: 5, class: 6 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "App",
  			options,
  			id: create_fragment$1.name
  		});
  	}

  	get id() {
  		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set id(value) {
  		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get params() {
  		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set params(value) {
  		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get routes() {
  		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set routes(value) {
  		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get class() {
  		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\badge.svelte generated by Svelte v3.29.4 */
  const file$2 = "node_modules\\framework7-svelte\\components\\badge.svelte";

  function create_fragment$2(ctx) {
  	let span;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[6].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
  	let span_levels = [{ class: /*classes*/ ctx[0] }, restProps(/*$$restProps*/ ctx[1])];
  	let span_data = {};

  	for (let i = 0; i < span_levels.length; i += 1) {
  		span_data = assign(span_data, span_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			span = element("span");
  			if (default_slot) default_slot.c();
  			set_attributes(span, span_data);
  			add_location(span, file$2, 64, 0, 1406);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);

  			if (default_slot) {
  				default_slot.m(span, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 32) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
  				}
  			}

  			set_attributes(span, span_data = get_spread_update(span_levels, [
  				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] },
  				dirty & /*$$restProps*/ 2 && restProps(/*$$restProps*/ ctx[1])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$2.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$2($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class","tooltip","tooltipTrigger"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Badge", slots, ['default']);
  	let { class: className = undefined } = $$props;
  	let { tooltip = undefined } = $$props;
  	let { tooltipTrigger = undefined } = $$props;
  	let el;
  	let f7Tooltip;
  	let tooltipText = tooltip;

  	function watchTooltip(newText) {
  		const oldText = tooltipText;
  		if (oldText === newText) return;
  		tooltipText = newText;

  		if (!newText && f7Tooltip) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  			return;
  		}

  		if (newText && !f7Tooltip && f7.instance) {
  			f7Tooltip = f7.instance.tooltip.create({
  				targetEl: el,
  				text: newText,
  				trigger: tooltipTrigger
  			});

  			return;
  		}

  		if (!newText || !f7Tooltip) return;
  		f7Tooltip.setText(newText);
  	}

  	onMount(() => {
  		if (!tooltip) return;

  		f7.ready(() => {
  			f7Tooltip = f7.instance.tooltip.create({
  				targetEl: el,
  				text: tooltip,
  				trigger: tooltipTrigger
  			});
  		});
  	});

  	onDestroy(() => {
  		if (f7Tooltip && f7Tooltip.destroy) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  		}
  	});

  	$$self.$$set = $$new_props => {
  		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
  		if ("tooltip" in $$new_props) $$invalidate(3, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$new_props) $$invalidate(4, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		onDestroy,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		className,
  		tooltip,
  		tooltipTrigger,
  		el,
  		f7Tooltip,
  		tooltipText,
  		watchTooltip,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
  		if ("tooltip" in $$props) $$invalidate(3, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$props) $$invalidate(4, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("el" in $$props) el = $$new_props.el;
  		if ("f7Tooltip" in $$props) f7Tooltip = $$new_props.f7Tooltip;
  		if ("tooltipText" in $$props) tooltipText = $$new_props.tooltipText;
  		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(0, classes = Utils$1.classNames(className, "badge", Mixins.colorClasses($$props)));

  		if ($$self.$$.dirty & /*tooltip*/ 8) {
  			 watchTooltip(tooltip);
  		}
  	};

  	$$props = exclude_internal_props($$props);
  	return [classes, $$restProps, className, tooltip, tooltipTrigger, $$scope, slots];
  }

  class Badge extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$2, create_fragment$2, safe_not_equal, { class: 2, tooltip: 3, tooltipTrigger: 4 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Badge",
  			options,
  			id: create_fragment$2.name
  		});
  	}

  	get class() {
  		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltip() {
  		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltip(value) {
  		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltipTrigger() {
  		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltipTrigger(value) {
  		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\block.svelte generated by Svelte v3.29.4 */
  const file$3 = "node_modules\\framework7-svelte\\components\\block.svelte";

  function create_fragment$3(ctx) {
  	let div;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[21].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);
  	let div_levels = [{ class: /*classes*/ ctx[1] }, restProps(/*$$restProps*/ ctx[2])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$3, 81, 0, 2150);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			/*div_binding*/ ctx[22](div);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 1048576) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[20], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
  				dirty & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  			/*div_binding*/ ctx[22](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$3.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$3($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"inset","xsmallInset","smallInset","mediumInset","largeInset","xlargeInset","strong","tabs","tab","tabActive","accordionList","accordionOpposite","noHairlines","noHairlinesMd","noHairlinesIos","noHairlinesAurora","class"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Block", slots, ['default']);
  	const dispatch = createEventDispatcher();
  	let { inset = false } = $$props;
  	let { xsmallInset = false } = $$props;
  	let { smallInset = false } = $$props;
  	let { mediumInset = false } = $$props;
  	let { largeInset = false } = $$props;
  	let { xlargeInset = false } = $$props;
  	let { strong = false } = $$props;
  	let { tabs = false } = $$props;
  	let { tab = false } = $$props;
  	let { tabActive = false } = $$props;
  	let { accordionList = false } = $$props;
  	let { accordionOpposite = false } = $$props;
  	let { noHairlines = false } = $$props;
  	let { noHairlinesMd = false } = $$props;
  	let { noHairlinesIos = false } = $$props;
  	let { noHairlinesAurora = false } = $$props;
  	let { class: className = undefined } = $$props;
  	let el;

  	function onTabShow(tabEl) {
  		if (el !== tabEl) return;
  		dispatch("tabShow");
  		if (typeof $$props.onTabShow === "function") $$props.onTabShow(tabEl);
  	}

  	function onTabHide(tabEl) {
  		if (el !== tabEl) return;
  		dispatch("tabHide");
  		if (typeof $$props.onTabHide === "function") $$props.onTabHide(tabEl);
  	}

  	onMount(() => {
  		f7.ready(() => {
  			f7.instance.on("tabShow", onTabShow);
  			f7.instance.on("tabHide", onTabHide);
  		});
  	});

  	onDestroy(() => {
  		if (f7.instance) {
  			f7.instance.off("tabShow", onTabShow);
  			f7.instance.off("tabHide", onTabHide);
  		}
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(0, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(26, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("inset" in $$new_props) $$invalidate(3, inset = $$new_props.inset);
  		if ("xsmallInset" in $$new_props) $$invalidate(4, xsmallInset = $$new_props.xsmallInset);
  		if ("smallInset" in $$new_props) $$invalidate(5, smallInset = $$new_props.smallInset);
  		if ("mediumInset" in $$new_props) $$invalidate(6, mediumInset = $$new_props.mediumInset);
  		if ("largeInset" in $$new_props) $$invalidate(7, largeInset = $$new_props.largeInset);
  		if ("xlargeInset" in $$new_props) $$invalidate(8, xlargeInset = $$new_props.xlargeInset);
  		if ("strong" in $$new_props) $$invalidate(9, strong = $$new_props.strong);
  		if ("tabs" in $$new_props) $$invalidate(10, tabs = $$new_props.tabs);
  		if ("tab" in $$new_props) $$invalidate(11, tab = $$new_props.tab);
  		if ("tabActive" in $$new_props) $$invalidate(12, tabActive = $$new_props.tabActive);
  		if ("accordionList" in $$new_props) $$invalidate(13, accordionList = $$new_props.accordionList);
  		if ("accordionOpposite" in $$new_props) $$invalidate(14, accordionOpposite = $$new_props.accordionOpposite);
  		if ("noHairlines" in $$new_props) $$invalidate(15, noHairlines = $$new_props.noHairlines);
  		if ("noHairlinesMd" in $$new_props) $$invalidate(16, noHairlinesMd = $$new_props.noHairlinesMd);
  		if ("noHairlinesIos" in $$new_props) $$invalidate(17, noHairlinesIos = $$new_props.noHairlinesIos);
  		if ("noHairlinesAurora" in $$new_props) $$invalidate(18, noHairlinesAurora = $$new_props.noHairlinesAurora);
  		if ("class" in $$new_props) $$invalidate(19, className = $$new_props.class);
  		if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		onDestroy,
  		createEventDispatcher,
  		f7,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		dispatch,
  		inset,
  		xsmallInset,
  		smallInset,
  		mediumInset,
  		largeInset,
  		xlargeInset,
  		strong,
  		tabs,
  		tab,
  		tabActive,
  		accordionList,
  		accordionOpposite,
  		noHairlines,
  		noHairlinesMd,
  		noHairlinesIos,
  		noHairlinesAurora,
  		className,
  		el,
  		onTabShow,
  		onTabHide,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(26, $$props = assign(assign({}, $$props), $$new_props));
  		if ("inset" in $$props) $$invalidate(3, inset = $$new_props.inset);
  		if ("xsmallInset" in $$props) $$invalidate(4, xsmallInset = $$new_props.xsmallInset);
  		if ("smallInset" in $$props) $$invalidate(5, smallInset = $$new_props.smallInset);
  		if ("mediumInset" in $$props) $$invalidate(6, mediumInset = $$new_props.mediumInset);
  		if ("largeInset" in $$props) $$invalidate(7, largeInset = $$new_props.largeInset);
  		if ("xlargeInset" in $$props) $$invalidate(8, xlargeInset = $$new_props.xlargeInset);
  		if ("strong" in $$props) $$invalidate(9, strong = $$new_props.strong);
  		if ("tabs" in $$props) $$invalidate(10, tabs = $$new_props.tabs);
  		if ("tab" in $$props) $$invalidate(11, tab = $$new_props.tab);
  		if ("tabActive" in $$props) $$invalidate(12, tabActive = $$new_props.tabActive);
  		if ("accordionList" in $$props) $$invalidate(13, accordionList = $$new_props.accordionList);
  		if ("accordionOpposite" in $$props) $$invalidate(14, accordionOpposite = $$new_props.accordionOpposite);
  		if ("noHairlines" in $$props) $$invalidate(15, noHairlines = $$new_props.noHairlines);
  		if ("noHairlinesMd" in $$props) $$invalidate(16, noHairlinesMd = $$new_props.noHairlinesMd);
  		if ("noHairlinesIos" in $$props) $$invalidate(17, noHairlinesIos = $$new_props.noHairlinesIos);
  		if ("noHairlinesAurora" in $$props) $$invalidate(18, noHairlinesAurora = $$new_props.noHairlinesAurora);
  		if ("className" in $$props) $$invalidate(19, className = $$new_props.className);
  		if ("el" in $$props) $$invalidate(0, el = $$new_props.el);
  		if ("classes" in $$props) $$invalidate(1, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(1, classes = Utils$1.classNames(
  			className,
  			"block",
  			{
  				inset,
  				"xsmall-inset": xsmallInset,
  				"small-inset": smallInset,
  				"medium-inset": mediumInset,
  				"large-inset": largeInset,
  				"xlarge-inset": xlargeInset,
  				"block-strong": strong,
  				"accordion-list": accordionList,
  				"accordion-opposite": accordionOpposite,
  				tabs,
  				tab,
  				"tab-active": tabActive,
  				"no-hairlines": noHairlines,
  				"no-hairlines-md": noHairlinesMd,
  				"no-hairlines-ios": noHairlinesIos,
  				"no-hairlines-aurora": noHairlinesAurora
  			},
  			Mixins.colorClasses($$props)
  		));
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		el,
  		classes,
  		$$restProps,
  		inset,
  		xsmallInset,
  		smallInset,
  		mediumInset,
  		largeInset,
  		xlargeInset,
  		strong,
  		tabs,
  		tab,
  		tabActive,
  		accordionList,
  		accordionOpposite,
  		noHairlines,
  		noHairlinesMd,
  		noHairlinesIos,
  		noHairlinesAurora,
  		className,
  		$$scope,
  		slots,
  		div_binding
  	];
  }

  class Block extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
  			inset: 3,
  			xsmallInset: 4,
  			smallInset: 5,
  			mediumInset: 6,
  			largeInset: 7,
  			xlargeInset: 8,
  			strong: 9,
  			tabs: 10,
  			tab: 11,
  			tabActive: 12,
  			accordionList: 13,
  			accordionOpposite: 14,
  			noHairlines: 15,
  			noHairlinesMd: 16,
  			noHairlinesIos: 17,
  			noHairlinesAurora: 18,
  			class: 19
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Block",
  			options,
  			id: create_fragment$3.name
  		});
  	}

  	get inset() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set inset(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get xsmallInset() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set xsmallInset(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get smallInset() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set smallInset(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get mediumInset() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set mediumInset(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get largeInset() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set largeInset(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get xlargeInset() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set xlargeInset(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get strong() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set strong(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabs() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabs(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tab() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tab(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabActive() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabActive(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get accordionList() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set accordionList(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get accordionOpposite() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set accordionOpposite(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlines() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlines(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesMd() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesMd(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesIos() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesIos(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesAurora() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesAurora(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get class() {
  		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* eslint no-underscore-dangle: "off" */

  let routerComponentIdCounter = 0;

  var componentsRouter = {
    proto: {
      pageComponentLoader(routerEl, component, componentUrl, options, resolve, reject) {
        const router = this;
        const el = routerEl;
        let viewRouter;
        f7.routers.views.forEach((data) => {
          if (data.el && data.el === routerEl) {
            viewRouter = data;
          }
        });

        if (!viewRouter) {
          reject();
          return;
        }

        const id = `${Utils$1.now()}_${(routerComponentIdCounter += 1)}`;
        const pageData = {
          component,
          id,
          props: Utils$1.extend(
            {
              f7route: options.route,
              $f7route: options.route,
              f7router: router,
              $f7router: router,
            },
            options.route.params,
            options.props || {},
          ),
        };
        if (viewRouter.component) {
          viewRouter.component.$f7router = router;
          viewRouter.component.$f7route = options.route;
        }

        let resolved;
        function onDidUpdate(componentRouterData) {
          if (componentRouterData !== viewRouter || resolved) return;
          f7.events.off('viewRouterDidUpdate', onDidUpdate);

          const pageEl = el.children[el.children.length - 1];
          pageData.el = pageEl;

          resolve(pageEl);
          resolved = true;
        }

        f7.events.on('viewRouterDidUpdate', onDidUpdate);

        viewRouter.pages.push(pageData);
        viewRouter.setPages(viewRouter.pages);
      },
      removePage($pageEl) {
        if (!$pageEl) return;
        const router = this;
        let f7Page;
        if ('length' in $pageEl && $pageEl[0]) f7Page = $pageEl[0].f7Page;
        else f7Page = $pageEl.f7Page;
        if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {
          router.app.$($pageEl).remove();
          return;
        }
        let viewRouter;
        f7.routers.views.forEach((data) => {
          if (data.el && data.el === router.el) {
            viewRouter = data;
          }
        });

        let pageEl;
        if ('length' in $pageEl) {
          // Dom7
          if ($pageEl.length === 0) return;
          pageEl = $pageEl[0];
        } else {
          pageEl = $pageEl;
        }
        if (!pageEl) return;

        let pageComponentFound;
        viewRouter.pages.forEach((page, index) => {
          if (page.el === pageEl) {
            pageComponentFound = true;
            viewRouter.pages.splice(index, 1);
            viewRouter.setPages(viewRouter.pages);
          }
        });
        if (!pageComponentFound) {
          pageEl.parentNode.removeChild(pageEl);
        }
      },
      tabComponentLoader(tabEl, component, componentUrl, options, resolve, reject) {
        const router = this;
        if (!tabEl) reject();

        let tabRouter;
        f7.routers.tabs.forEach((tabData) => {
          if (tabData.el && tabData.el === tabEl) {
            tabRouter = tabData;
          }
        });
        if (!tabRouter) {
          reject();
          return;
        }

        const id = `${Utils$1.now()}_${(routerComponentIdCounter += 1)}`;
        const tabContent = {
          id,
          component,
          props: Utils$1.extend(
            {
              f7route: options.route,
              $f7route: options.route,
              f7router: router,
              $f7router: router,
            },
            options.route.params,
            options.props || {},
          ),
        };

        if (tabRouter.component) {
          tabRouter.component.$f7router = router;
          tabRouter.component.$f7route = options.route;
        }

        let resolved;
        function onDidUpdate(componentRouterData) {
          if (componentRouterData !== tabRouter || resolved) return;
          f7.events.off('tabRouterDidUpdate', onDidUpdate);

          const tabContentEl = tabEl.children[0];
          resolve(tabContentEl);

          resolved = true;
        }

        f7.events.on('tabRouterDidUpdate', onDidUpdate);

        tabRouter.setTabContent(tabContent);
      },
      removeTabContent(tabEl) {
        if (!tabEl) return;

        let tabRouter;
        f7.routers.tabs.forEach((tabData) => {
          if (tabData.el && tabData.el === tabEl) {
            tabRouter = tabData;
          }
        });
        const hasComponent = tabRouter && tabRouter.component;
        if (!tabRouter || !hasComponent) {
          tabEl.innerHTML = ''; // eslint-disable-line
          return;
        }
        tabRouter.setTabContent(null);
      },
      modalComponentLoader(rootEl, component, componentUrl, options, resolve, reject) {
        const router = this;
        const modalsRouter = f7.routers.modals;

        if (!modalsRouter) {
          reject();
          return;
        }

        const id = `${Utils$1.now()}_${(routerComponentIdCounter += 1)}`;
        const modalData = {
          component,
          id,
          props: Utils$1.extend(
            {
              f7route: options.route,
              $f7route: options.route,
              f7router: router,
              $f7router: router,
            },
            options.route.params,
            options.props || {},
          ),
        };
        if (modalsRouter.component) {
          modalsRouter.component.$f7router = router;
          modalsRouter.component.$f7route = options.route;
        }

        let resolved;
        function onDidUpdate() {
          if (resolved) return;
          f7.events.off('modalsRouterDidUpdate', onDidUpdate);

          const modalEl = modalsRouter.el.children[modalsRouter.el.children.length - 1];
          modalData.el = modalEl;

          resolve(modalEl);
          resolved = true;
        }

        f7.events.on('modalsRouterDidUpdate', onDidUpdate);

        modalsRouter.modals.push(modalData);
        modalsRouter.setModals(modalsRouter.modals);
      },
      removeModal(modalEl) {
        const modalsRouter = f7.routers.modals;
        if (!modalsRouter) return;

        let modalDataToRemove;
        modalsRouter.modals.forEach((modalData) => {
          if (modalData.el === modalEl) modalDataToRemove = modalData;
        });

        modalsRouter.modals.splice(modalsRouter.modals.indexOf(modalDataToRemove), 1);
        modalsRouter.setModals(modalsRouter.modals);
      },
    },
  };

  /* eslint no-underscore-dangle: "off" */
  const f7Theme = {};
  const Plugin = {
    name: 'phenomePlugin',
    installed: false,
    install(params = {}) {
      if (Plugin.installed) return;
      Plugin.installed = true;
      const Framework7 = this;
      f7.Framework7 = Framework7;
      f7.events = new Framework7.Events();
      // eslint-disable-next-line
      
      const { theme } = params;
      if (theme === 'md') f7Theme.md = true;
      if (theme === 'ios') f7Theme.ios = true;
      if (theme === 'aurora') f7Theme.aurora = true;
      if (!theme || theme === 'auto') {
        f7Theme.ios = !!Framework7.device.ios;
        f7Theme.aurora = Framework7.device.desktop && Framework7.device.electron;
        f7Theme.md = !f7Theme.ios && !f7Theme.aurora;
      }
      f7.ready(() => {
        f7Theme.ios = f7.instance.theme === 'ios';
        f7Theme.md = f7.instance.theme === 'md';
        f7Theme.aurora = f7.instance.theme === 'aurora';
      });
      
      // Extend F7 Router
      Framework7.Router.use(componentsRouter);
    },
  };

  /* node_modules\framework7-svelte\components\icon.svelte generated by Svelte v3.29.4 */
  const file$4 = "node_modules\\framework7-svelte\\components\\icon.svelte";

  function create_fragment$4(ctx) {
  	let i;
  	let t0_value = (/*iconText*/ ctx[2] || "") + "";
  	let t0;
  	let t1;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[17].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

  	let i_levels = [
  		{ style: /*iconStyle*/ ctx[3] },
  		{ class: /*iconClasses*/ ctx[1] },
  		restProps(/*$$restProps*/ ctx[4])
  	];

  	let i_data = {};

  	for (let i = 0; i < i_levels.length; i += 1) {
  		i_data = assign(i_data, i_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			i = element("i");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (default_slot) default_slot.c();
  			set_attributes(i, i_data);
  			add_location(i, file$4, 135, 0, 3344);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, i, anchor);
  			append_dev(i, t0);
  			append_dev(i, t1);

  			if (default_slot) {
  				default_slot.m(i, null);
  			}

  			/*i_binding*/ ctx[18](i);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if ((!current || dirty & /*iconText*/ 4) && t0_value !== (t0_value = (/*iconText*/ ctx[2] || "") + "")) set_data_dev(t0, t0_value);

  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 65536) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
  				}
  			}

  			set_attributes(i, i_data = get_spread_update(i_levels, [
  				(!current || dirty & /*iconStyle*/ 8) && { style: /*iconStyle*/ ctx[3] },
  				(!current || dirty & /*iconClasses*/ 2) && { class: /*iconClasses*/ ctx[1] },
  				dirty & /*$$restProps*/ 16 && restProps(/*$$restProps*/ ctx[4])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(i);
  			if (default_slot) default_slot.d(detaching);
  			/*i_binding*/ ctx[18](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$4.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$4($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"style","class","material","f7","icon","ios","aurora","md","tooltip","tooltipTrigger","size"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Icon", slots, ['default']);
  	let { style = undefined } = $$props;
  	let { class: className = undefined } = $$props;
  	let { material = undefined } = $$props;
  	let { f7: f7$1 = undefined } = $$props;
  	let { icon = undefined } = $$props;
  	let { ios = undefined } = $$props;
  	let { aurora = undefined } = $$props;
  	let { md = undefined } = $$props;
  	let { tooltip = undefined } = $$props;
  	let { tooltipTrigger = undefined } = $$props;
  	let { size = undefined } = $$props;

  	// eslint-disable-next-line
  	let _theme = f7.instance ? f7Theme : null;

  	let el;
  	let f7Tooltip;
  	let classes = { icon: true };

  	if (!f7.instance) {
  		f7.ready(() => {
  			$$invalidate(19, _theme = f7Theme);
  		});
  	}

  	let themeIcon;

  	function iconTextComputed(t) {
  		let textComputed = material || f7$1;

  		if (md && t && t.md && (md.indexOf("material:") >= 0 || md.indexOf("f7:") >= 0)) {
  			textComputed = md.split(":")[1];
  		} else if (ios && t && t.ios && (ios.indexOf("material:") >= 0 || ios.indexOf("f7:") >= 0)) {
  			textComputed = ios.split(":")[1];
  		} else if (aurora && t && t.aurora && (aurora.indexOf("material:") >= 0 || aurora.indexOf("f7:") >= 0)) {
  			textComputed = aurora.split(":")[1];
  		}

  		return textComputed;
  	}

  	let tooltipText = tooltip;

  	function watchTooltip(newText) {
  		const oldText = tooltipText;
  		if (oldText === newText) return;
  		tooltipText = newText;

  		if (!newText && f7Tooltip) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  			return;
  		}

  		if (newText && !f7Tooltip && f7.instance) {
  			f7Tooltip = f7.instance.tooltip.create({
  				targetEl: el,
  				text: newText,
  				trigger: tooltipTrigger
  			});

  			return;
  		}

  		if (!newText || !f7Tooltip) return;
  		f7Tooltip.setText(newText);
  	}

  	onMount(() => {
  		if (!tooltip) return;

  		f7.ready(() => {
  			f7Tooltip = f7.instance.tooltip.create({
  				targetEl: el,
  				text: tooltip,
  				trigger: tooltipTrigger
  			});
  		});
  	});

  	onDestroy(() => {
  		if (f7Tooltip && f7Tooltip.destroy) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  		}
  	});

  	function i_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(0, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(27, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("style" in $$new_props) $$invalidate(5, style = $$new_props.style);
  		if ("class" in $$new_props) $$invalidate(6, className = $$new_props.class);
  		if ("material" in $$new_props) $$invalidate(7, material = $$new_props.material);
  		if ("f7" in $$new_props) $$invalidate(8, f7$1 = $$new_props.f7);
  		if ("icon" in $$new_props) $$invalidate(9, icon = $$new_props.icon);
  		if ("ios" in $$new_props) $$invalidate(10, ios = $$new_props.ios);
  		if ("aurora" in $$new_props) $$invalidate(11, aurora = $$new_props.aurora);
  		if ("md" in $$new_props) $$invalidate(12, md = $$new_props.md);
  		if ("tooltip" in $$new_props) $$invalidate(13, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$new_props) $$invalidate(14, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("size" in $$new_props) $$invalidate(15, size = $$new_props.size);
  		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		onDestroy,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		theme: f7Theme,
  		F7: f7,
  		style,
  		className,
  		material,
  		f7: f7$1,
  		icon,
  		ios,
  		aurora,
  		md,
  		tooltip,
  		tooltipTrigger,
  		size,
  		_theme,
  		el,
  		f7Tooltip,
  		classes,
  		themeIcon,
  		iconTextComputed,
  		tooltipText,
  		watchTooltip,
  		iconClasses,
  		iconText,
  		iconSize,
  		iconStyle
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(27, $$props = assign(assign({}, $$props), $$new_props));
  		if ("style" in $$props) $$invalidate(5, style = $$new_props.style);
  		if ("className" in $$props) $$invalidate(6, className = $$new_props.className);
  		if ("material" in $$props) $$invalidate(7, material = $$new_props.material);
  		if ("f7" in $$props) $$invalidate(8, f7$1 = $$new_props.f7);
  		if ("icon" in $$props) $$invalidate(9, icon = $$new_props.icon);
  		if ("ios" in $$props) $$invalidate(10, ios = $$new_props.ios);
  		if ("aurora" in $$props) $$invalidate(11, aurora = $$new_props.aurora);
  		if ("md" in $$props) $$invalidate(12, md = $$new_props.md);
  		if ("tooltip" in $$props) $$invalidate(13, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$props) $$invalidate(14, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("size" in $$props) $$invalidate(15, size = $$new_props.size);
  		if ("_theme" in $$props) $$invalidate(19, _theme = $$new_props._theme);
  		if ("el" in $$props) $$invalidate(0, el = $$new_props.el);
  		if ("f7Tooltip" in $$props) f7Tooltip = $$new_props.f7Tooltip;
  		if ("classes" in $$props) $$invalidate(21, classes = $$new_props.classes);
  		if ("themeIcon" in $$props) $$invalidate(22, themeIcon = $$new_props.themeIcon);
  		if ("tooltipText" in $$props) tooltipText = $$new_props.tooltipText;
  		if ("iconClasses" in $$props) $$invalidate(1, iconClasses = $$new_props.iconClasses);
  		if ("iconText" in $$props) $$invalidate(2, iconText = $$new_props.iconText);
  		if ("iconSize" in $$props) $$invalidate(24, iconSize = $$new_props.iconSize);
  		if ("iconStyle" in $$props) $$invalidate(3, iconStyle = $$new_props.iconStyle);
  	};

  	let iconClasses;
  	let iconText;
  	let iconSize;
  	let iconStyle;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		if ($$self.$$.dirty & /*_theme, ios, md, aurora*/ 531456) {
  			 if (_theme) {
  				if (_theme.ios) $$invalidate(22, themeIcon = ios);
  				if (_theme.md) $$invalidate(22, themeIcon = md);
  				if (_theme.aurora) $$invalidate(22, themeIcon = aurora);
  			}
  		}

  		if ($$self.$$.dirty & /*themeIcon, material, f7, icon*/ 4195200) {
  			 if (themeIcon) {
  				const parts = themeIcon.split(":");
  				const prop = parts[0];
  				const value = parts[1];

  				if (prop === "material" || prop === "f7") {
  					$$invalidate(21, classes["material-icons"] = prop === "material", classes);
  					$$invalidate(21, classes["f7-icons"] = prop === "f7", classes);
  				}

  				if (prop === "icon") {
  					$$invalidate(21, classes[value] = true, classes);
  				}
  			} else {
  				$$invalidate(21, classes = {
  					icon: true,
  					"material-icons": material,
  					"f7-icons": f7$1
  				});

  				if (icon) $$invalidate(21, classes[icon] = true, classes);
  			}
  		}

  		 $$invalidate(1, iconClasses = Utils$1.classNames(className, classes, Mixins.colorClasses($$props)));

  		if ($$self.$$.dirty & /*_theme*/ 524288) {
  			 $$invalidate(2, iconText = iconTextComputed(_theme));
  		}

  		if ($$self.$$.dirty & /*size*/ 32768) {
  			 $$invalidate(24, iconSize = typeof size === "number" || parseFloat(size) === size * 1
  			? `${size}px`
  			: size);
  		}

  		if ($$self.$$.dirty & /*style, iconSize*/ 16777248) {
  			 $$invalidate(3, iconStyle = (style || "") + (iconSize
  			? `;font-size: ${iconSize}; width: ${iconSize}; height: ${iconSize}`.replace(";;", "")
  			: ""));
  		}

  		if ($$self.$$.dirty & /*tooltip*/ 8192) {
  			 watchTooltip(tooltip);
  		}
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		el,
  		iconClasses,
  		iconText,
  		iconStyle,
  		$$restProps,
  		style,
  		className,
  		material,
  		f7$1,
  		icon,
  		ios,
  		aurora,
  		md,
  		tooltip,
  		tooltipTrigger,
  		size,
  		$$scope,
  		slots,
  		i_binding
  	];
  }

  class Icon extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
  			style: 5,
  			class: 6,
  			material: 7,
  			f7: 8,
  			icon: 9,
  			ios: 10,
  			aurora: 11,
  			md: 12,
  			tooltip: 13,
  			tooltipTrigger: 14,
  			size: 15
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Icon",
  			options,
  			id: create_fragment$4.name
  		});
  	}

  	get style() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set style(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get class() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get material() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set material(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get f7() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set f7(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get icon() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set icon(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ios() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ios(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get aurora() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set aurora(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get md() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set md(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltip() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltip(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltipTrigger() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltipTrigger(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get size() {
  		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set size(value) {
  		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\card-content.svelte generated by Svelte v3.29.4 */
  const file$5 = "node_modules\\framework7-svelte\\components\\card-content.svelte";

  function create_fragment$5(ctx) {
  	let div;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[5].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
  	let div_levels = [{ class: /*classes*/ ctx[0] }, restProps(/*$$restProps*/ ctx[1])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$5, 21, 0, 399);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 16) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] },
  				dirty & /*$$restProps*/ 2 && restProps(/*$$restProps*/ ctx[1])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$5.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$5($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class","padding"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Card_content", slots, ['default']);
  	let { class: className = undefined } = $$props;
  	let { padding = true } = $$props;

  	$$self.$$set = $$new_props => {
  		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
  		if ("padding" in $$new_props) $$invalidate(3, padding = $$new_props.padding);
  		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		className,
  		padding,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
  		if ("padding" in $$props) $$invalidate(3, padding = $$new_props.padding);
  		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(0, classes = Utils$1.classNames(className, "card-content", { "card-content-padding": padding }, Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);
  	return [classes, $$restProps, className, padding, $$scope, slots];
  }

  class Card_content extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$5, create_fragment$5, safe_not_equal, { class: 2, padding: 3 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Card_content",
  			options,
  			id: create_fragment$5.name
  		});
  	}

  	get class() {
  		throw new Error("<Card_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Card_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get padding() {
  		throw new Error("<Card_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set padding(value) {
  		throw new Error("<Card_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\card-footer.svelte generated by Svelte v3.29.4 */
  const file$6 = "node_modules\\framework7-svelte\\components\\card-footer.svelte";

  function create_fragment$6(ctx) {
  	let div;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[4].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
  	let div_levels = [{ class: /*classes*/ ctx[0] }, restProps(/*$$restProps*/ ctx[1])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$6, 16, 0, 316);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 8) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] },
  				dirty & /*$$restProps*/ 2 && restProps(/*$$restProps*/ ctx[1])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$6.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$6($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Card_footer", slots, ['default']);
  	let { class: className = undefined } = $$props;

  	$$self.$$set = $$new_props => {
  		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
  		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		className,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
  		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(0, classes = Utils$1.classNames(className, "card-footer", Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);
  	return [classes, $$restProps, className, $$scope, slots];
  }

  class Card_footer extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$6, create_fragment$6, safe_not_equal, { class: 2 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Card_footer",
  			options,
  			id: create_fragment$6.name
  		});
  	}

  	get class() {
  		throw new Error("<Card_footer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Card_footer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\card-header.svelte generated by Svelte v3.29.4 */
  const file$7 = "node_modules\\framework7-svelte\\components\\card-header.svelte";

  function create_fragment$7(ctx) {
  	let div;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[4].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
  	let div_levels = [{ class: /*classes*/ ctx[0] }, restProps(/*$$restProps*/ ctx[1])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$7, 16, 0, 316);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 8) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] },
  				dirty & /*$$restProps*/ 2 && restProps(/*$$restProps*/ ctx[1])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$7.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$7($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Card_header", slots, ['default']);
  	let { class: className = undefined } = $$props;

  	$$self.$$set = $$new_props => {
  		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
  		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		className,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
  		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(0, classes = Utils$1.classNames(className, "card-header", Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);
  	return [classes, $$restProps, className, $$scope, slots];
  }

  class Card_header extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$7, create_fragment$7, safe_not_equal, { class: 2 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Card_header",
  			options,
  			id: create_fragment$7.name
  		});
  	}

  	get class() {
  		throw new Error("<Card_header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Card_header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\card.svelte generated by Svelte v3.29.4 */
  const file$8 = "node_modules\\framework7-svelte\\components\\card.svelte";
  const get_footer_slot_changes = dirty => ({});
  const get_footer_slot_context = ctx => ({});
  const get_content_slot_changes = dirty => ({});
  const get_content_slot_context = ctx => ({});
  const get_header_slot_changes = dirty => ({});
  const get_header_slot_context = ctx => ({});

  // (148:2) {#if typeof title !== 'undefined' || hasHeaderSlots}
  function create_if_block_2(ctx) {
  	let cardheader;
  	let current;

  	cardheader = new Card_header({
  			props: {
  				$$slots: { default: [create_default_slot_2] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(cardheader.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(cardheader, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const cardheader_changes = {};

  			if (dirty[0] & /*$$scope, title*/ 268435457) {
  				cardheader_changes.$$scope = { dirty, ctx };
  			}

  			cardheader.$set(cardheader_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(cardheader.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(cardheader.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(cardheader, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2.name,
  		type: "if",
  		source: "(148:2) {#if typeof title !== 'undefined' || hasHeaderSlots}",
  		ctx
  	});

  	return block;
  }

  // (149:4) <CardHeader>
  function create_default_slot_2(ctx) {
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[26].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[28], get_header_slot_context);

  	const block = {
  		c: function create() {
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t0, anchor);
  			insert_dev(target, t1, anchor);

  			if (header_slot) {
  				header_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[0] & /*$$scope*/ 268435456) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_header_slot_changes, get_header_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(t1);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_2.name,
  		type: "slot",
  		source: "(149:4) <CardHeader>",
  		ctx
  	});

  	return block;
  }

  // (154:2) {#if typeof content !== 'undefined' || hasContentSlots}
  function create_if_block_1(ctx) {
  	let cardcontent;
  	let current;

  	cardcontent = new Card_content({
  			props: {
  				padding: /*padding*/ ctx[12],
  				$$slots: { default: [create_default_slot_1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(cardcontent.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(cardcontent, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const cardcontent_changes = {};
  			if (dirty[0] & /*padding*/ 4096) cardcontent_changes.padding = /*padding*/ ctx[12];

  			if (dirty[0] & /*$$scope, content*/ 268435458) {
  				cardcontent_changes.$$scope = { dirty, ctx };
  			}

  			cardcontent.$set(cardcontent_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(cardcontent.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(cardcontent.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(cardcontent, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1.name,
  		type: "if",
  		source: "(154:2) {#if typeof content !== 'undefined' || hasContentSlots}",
  		ctx
  	});

  	return block;
  }

  // (155:4) <CardContent padding={padding}>
  function create_default_slot_1(ctx) {
  	let t0_value = Utils$1.text(/*content*/ ctx[1]) + "";
  	let t0;
  	let t1;
  	let current;
  	const content_slot_template = /*#slots*/ ctx[26].content;
  	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[28], get_content_slot_context);

  	const block = {
  		c: function create() {
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (content_slot) content_slot.c();
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t0, anchor);
  			insert_dev(target, t1, anchor);

  			if (content_slot) {
  				content_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*content*/ 2) && t0_value !== (t0_value = Utils$1.text(/*content*/ ctx[1]) + "")) set_data_dev(t0, t0_value);

  			if (content_slot) {
  				if (content_slot.p && dirty[0] & /*$$scope*/ 268435456) {
  					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_content_slot_changes, get_content_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(content_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(content_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(t1);
  			if (content_slot) content_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_1.name,
  		type: "slot",
  		source: "(155:4) <CardContent padding={padding}>",
  		ctx
  	});

  	return block;
  }

  // (160:2) {#if typeof footer !== 'undefined' || hasFooterSlots}
  function create_if_block(ctx) {
  	let cardfooter;
  	let current;

  	cardfooter = new Card_footer({
  			props: {
  				$$slots: { default: [create_default_slot] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(cardfooter.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(cardfooter, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const cardfooter_changes = {};

  			if (dirty[0] & /*$$scope, footer*/ 268435460) {
  				cardfooter_changes.$$scope = { dirty, ctx };
  			}

  			cardfooter.$set(cardfooter_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(cardfooter.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(cardfooter.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(cardfooter, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block.name,
  		type: "if",
  		source: "(160:2) {#if typeof footer !== 'undefined' || hasFooterSlots}",
  		ctx
  	});

  	return block;
  }

  // (161:4) <CardFooter>
  function create_default_slot(ctx) {
  	let t0_value = Utils$1.text(/*footer*/ ctx[2]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[26].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[28], get_footer_slot_context);

  	const block = {
  		c: function create() {
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t0, anchor);
  			insert_dev(target, t1, anchor);

  			if (footer_slot) {
  				footer_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 4) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[2]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[0] & /*$$scope*/ 268435456) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_footer_slot_changes, get_footer_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(t1);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot.name,
  		type: "slot",
  		source: "(161:4) <CardFooter>",
  		ctx
  	});

  	return block;
  }

  function create_fragment$8(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let div_data_animate_value;
  	let div_data_hide_navbar_on_open_value;
  	let div_data_hide_toolbar_on_open_value;
  	let div_data_hide_statusbar_on_open_value;
  	let div_data_swipe_to_close_value;
  	let div_data_close_by_backdrop_click_value;
  	let div_data_backdrop_value;
  	let current;
  	let if_block0 = (typeof /*title*/ ctx[0] !== "undefined" || /*hasHeaderSlots*/ ctx[15]) && create_if_block_2(ctx);
  	let if_block1 = (typeof /*content*/ ctx[1] !== "undefined" || /*hasContentSlots*/ ctx[16]) && create_if_block_1(ctx);
  	let if_block2 = (typeof /*footer*/ ctx[2] !== "undefined" || /*hasFooterSlots*/ ctx[17]) && create_if_block(ctx);
  	const default_slot_template = /*#slots*/ ctx[26].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[28], null);

  	let div_levels = [
  		{ class: /*classes*/ ctx[14] },
  		{
  			"data-animate": div_data_animate_value = typeof /*animate*/ ctx[3] === "undefined"
  			? /*animate*/ ctx[3]
  			: /*animate*/ ctx[3].toString()
  		},
  		{
  			"data-hide-navbar-on-open": div_data_hide_navbar_on_open_value = typeof /*hideNavbarOnOpen*/ ctx[4] === "undefined"
  			? /*hideNavbarOnOpen*/ ctx[4]
  			: /*hideNavbarOnOpen*/ ctx[4].toString()
  		},
  		{
  			"data-hide-toolbar-on-open": div_data_hide_toolbar_on_open_value = typeof /*hideToolbarOnOpen*/ ctx[5] === "undefined"
  			? /*hideToolbarOnOpen*/ ctx[5]
  			: /*hideToolbarOnOpen*/ ctx[5].toString()
  		},
  		{
  			"data-hide-statusbar-on-open": div_data_hide_statusbar_on_open_value = typeof /*hideStatusbarOnOpen*/ ctx[6] === "undefined"
  			? /*hideStatusbarOnOpen*/ ctx[6]
  			: /*hideStatusbarOnOpen*/ ctx[6].toString()
  		},
  		{
  			"data-scrollable-el": /*scrollableEl*/ ctx[7]
  		},
  		{
  			"data-swipe-to-close": div_data_swipe_to_close_value = typeof /*swipeToClose*/ ctx[8] === "undefined"
  			? /*swipeToClose*/ ctx[8]
  			: /*swipeToClose*/ ctx[8].toString()
  		},
  		{
  			"data-close-by-backdrop-click": div_data_close_by_backdrop_click_value = typeof /*closeByBackdropClick*/ ctx[9] === "undefined"
  			? /*closeByBackdropClick*/ ctx[9]
  			: /*closeByBackdropClick*/ ctx[9].toString()
  		},
  		{
  			"data-backdrop": div_data_backdrop_value = typeof /*backdrop*/ ctx[10] === "undefined"
  			? /*backdrop*/ ctx[10]
  			: /*backdrop*/ ctx[10].toString()
  		},
  		{
  			"data-backdrop-el": /*backdropEl*/ ctx[11]
  		},
  		restProps(/*$$restProps*/ ctx[18])
  	];

  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			if (if_block1) if_block1.c();
  			t1 = space();
  			if (if_block2) if_block2.c();
  			t2 = space();
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$8, 133, 0, 3864);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t1);
  			if (if_block2) if_block2.m(div, null);
  			append_dev(div, t2);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			/*div_binding*/ ctx[27](div);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (typeof /*title*/ ctx[0] !== "undefined" || /*hasHeaderSlots*/ ctx[15]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[0] & /*title, hasHeaderSlots*/ 32769) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_2(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (typeof /*content*/ ctx[1] !== "undefined" || /*hasContentSlots*/ ctx[16]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*content, hasContentSlots*/ 65538) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_1(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t1);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (typeof /*footer*/ ctx[2] !== "undefined" || /*hasFooterSlots*/ ctx[17]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*footer, hasFooterSlots*/ 131076) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, t2);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[0] & /*$$scope*/ 268435456) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[28], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty[0] & /*classes*/ 16384) && { class: /*classes*/ ctx[14] },
  				(!current || dirty[0] & /*animate*/ 8 && div_data_animate_value !== (div_data_animate_value = typeof /*animate*/ ctx[3] === "undefined"
  				? /*animate*/ ctx[3]
  				: /*animate*/ ctx[3].toString())) && { "data-animate": div_data_animate_value },
  				(!current || dirty[0] & /*hideNavbarOnOpen*/ 16 && div_data_hide_navbar_on_open_value !== (div_data_hide_navbar_on_open_value = typeof /*hideNavbarOnOpen*/ ctx[4] === "undefined"
  				? /*hideNavbarOnOpen*/ ctx[4]
  				: /*hideNavbarOnOpen*/ ctx[4].toString())) && {
  					"data-hide-navbar-on-open": div_data_hide_navbar_on_open_value
  				},
  				(!current || dirty[0] & /*hideToolbarOnOpen*/ 32 && div_data_hide_toolbar_on_open_value !== (div_data_hide_toolbar_on_open_value = typeof /*hideToolbarOnOpen*/ ctx[5] === "undefined"
  				? /*hideToolbarOnOpen*/ ctx[5]
  				: /*hideToolbarOnOpen*/ ctx[5].toString())) && {
  					"data-hide-toolbar-on-open": div_data_hide_toolbar_on_open_value
  				},
  				(!current || dirty[0] & /*hideStatusbarOnOpen*/ 64 && div_data_hide_statusbar_on_open_value !== (div_data_hide_statusbar_on_open_value = typeof /*hideStatusbarOnOpen*/ ctx[6] === "undefined"
  				? /*hideStatusbarOnOpen*/ ctx[6]
  				: /*hideStatusbarOnOpen*/ ctx[6].toString())) && {
  					"data-hide-statusbar-on-open": div_data_hide_statusbar_on_open_value
  				},
  				(!current || dirty[0] & /*scrollableEl*/ 128) && {
  					"data-scrollable-el": /*scrollableEl*/ ctx[7]
  				},
  				(!current || dirty[0] & /*swipeToClose*/ 256 && div_data_swipe_to_close_value !== (div_data_swipe_to_close_value = typeof /*swipeToClose*/ ctx[8] === "undefined"
  				? /*swipeToClose*/ ctx[8]
  				: /*swipeToClose*/ ctx[8].toString())) && {
  					"data-swipe-to-close": div_data_swipe_to_close_value
  				},
  				(!current || dirty[0] & /*closeByBackdropClick*/ 512 && div_data_close_by_backdrop_click_value !== (div_data_close_by_backdrop_click_value = typeof /*closeByBackdropClick*/ ctx[9] === "undefined"
  				? /*closeByBackdropClick*/ ctx[9]
  				: /*closeByBackdropClick*/ ctx[9].toString())) && {
  					"data-close-by-backdrop-click": div_data_close_by_backdrop_click_value
  				},
  				(!current || dirty[0] & /*backdrop*/ 1024 && div_data_backdrop_value !== (div_data_backdrop_value = typeof /*backdrop*/ ctx[10] === "undefined"
  				? /*backdrop*/ ctx[10]
  				: /*backdrop*/ ctx[10].toString())) && { "data-backdrop": div_data_backdrop_value },
  				(!current || dirty[0] & /*backdropEl*/ 2048) && {
  					"data-backdrop-el": /*backdropEl*/ ctx[11]
  				},
  				dirty[0] & /*$$restProps*/ 262144 && restProps(/*$$restProps*/ ctx[18])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(if_block1);
  			transition_in(if_block2);
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(if_block1);
  			transition_out(if_block2);
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (if_block2) if_block2.d();
  			if (default_slot) default_slot.d(detaching);
  			/*div_binding*/ ctx[27](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$8.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$8($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"class","title","content","footer","outline","expandable","expandableAnimateWidth","expandableOpened","animate","hideNavbarOnOpen","hideToolbarOnOpen","hideStatusbarOnOpen","scrollableEl","swipeToClose","closeByBackdropClick","backdrop","backdropEl","noShadow","noBorder","padding"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Card", slots, ['header','content','footer','default']);
  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { title = undefined } = $$props;
  	let { content = undefined } = $$props;
  	let { footer = undefined } = $$props;
  	let { outline = false } = $$props;
  	let { expandable = false } = $$props;
  	let { expandableAnimateWidth = false } = $$props;
  	let { expandableOpened = false } = $$props;
  	let { animate = undefined } = $$props;
  	let { hideNavbarOnOpen = undefined } = $$props;
  	let { hideToolbarOnOpen = undefined } = $$props;
  	let { hideStatusbarOnOpen = undefined } = $$props;
  	let { scrollableEl = undefined } = $$props;
  	let { swipeToClose = undefined } = $$props;
  	let { closeByBackdropClick = undefined } = $$props;
  	let { backdrop = undefined } = $$props;
  	let { backdropEl = undefined } = $$props;
  	let { noShadow = false } = $$props;
  	let { noBorder = false } = $$props;
  	let { padding = true } = $$props;
  	let el;

  	/* eslint-enable no-undef */
  	function open() {
  		f7.instance.card.open(el);
  	}

  	function close() {
  		f7.instance.card.close(el);
  	}

  	let initialWatched = false;

  	function watchOpened(openedPassed) {
  		if (!initialWatched) {
  			initialWatched = true;
  			return;
  		}

  		if (openedPassed) {
  			open();
  		} else {
  			close();
  		}
  	}

  	function onBeforeOpen(cardEl, prevent) {
  		if (cardEl !== el) return;
  		dispatch("cardBeforeOpen", [el, prevent]);
  		if (typeof $$props.onCardBeforeOpen === "function") $$props.onCardBeforeOpen(el, prevent);
  	}

  	function onOpen(cardEl) {
  		if (cardEl !== el) return;
  		dispatch("cardOpen", [el]);
  		if (typeof $$props.onCardOpen === "function") $$props.onCardOpen(el);
  	}

  	function onOpened(cardEl, pageEl) {
  		if (cardEl !== el) return;
  		dispatch("cardOpened", [el, pageEl]);
  		if (typeof $$props.onCardOpened === "function") $$props.onCardOpened(el, pageEl);
  	}

  	function onClose(cardEl) {
  		if (cardEl !== el) return;
  		dispatch("cardClose", [el]);
  		if (typeof $$props.onCardClose === "function") $$props.onCardClose(el);
  	}

  	function onClosed(cardEl, pageEl) {
  		if (cardEl !== el) return;
  		dispatch("cardClosed", [el, pageEl]);
  		if (typeof $$props.onCardClosed === "function") $$props.onCardClosed(el, pageEl);
  	}

  	onMount(() => {
  		if (!expandable) return;

  		f7.ready(() => {
  			f7.instance.on("cardBeforeOpen", onBeforeOpen);
  			f7.instance.on("cardOpen", onOpen);
  			f7.instance.on("cardOpened", onOpened);
  			f7.instance.on("cardClose", onClose);
  			f7.instance.on("cardClosed", onClosed);

  			if (expandable && expandableOpened && el) {
  				f7.instance.card.open(el, false);
  			}
  		});
  	});

  	onDestroy(() => {
  		if (!expandable) return;
  		if (!f7.instance || !el) return;
  		f7.instance.off("cardBeforeOpen", onBeforeOpen);
  		f7.instance.off("cardOpen", onOpen);
  		f7.instance.off("cardOpened", onOpened);
  		f7.instance.off("cardClose", onClose);
  		f7.instance.off("cardClosed", onClosed);
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(13, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(39, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(19, className = $$new_props.class);
  		if ("title" in $$new_props) $$invalidate(0, title = $$new_props.title);
  		if ("content" in $$new_props) $$invalidate(1, content = $$new_props.content);
  		if ("footer" in $$new_props) $$invalidate(2, footer = $$new_props.footer);
  		if ("outline" in $$new_props) $$invalidate(20, outline = $$new_props.outline);
  		if ("expandable" in $$new_props) $$invalidate(21, expandable = $$new_props.expandable);
  		if ("expandableAnimateWidth" in $$new_props) $$invalidate(22, expandableAnimateWidth = $$new_props.expandableAnimateWidth);
  		if ("expandableOpened" in $$new_props) $$invalidate(23, expandableOpened = $$new_props.expandableOpened);
  		if ("animate" in $$new_props) $$invalidate(3, animate = $$new_props.animate);
  		if ("hideNavbarOnOpen" in $$new_props) $$invalidate(4, hideNavbarOnOpen = $$new_props.hideNavbarOnOpen);
  		if ("hideToolbarOnOpen" in $$new_props) $$invalidate(5, hideToolbarOnOpen = $$new_props.hideToolbarOnOpen);
  		if ("hideStatusbarOnOpen" in $$new_props) $$invalidate(6, hideStatusbarOnOpen = $$new_props.hideStatusbarOnOpen);
  		if ("scrollableEl" in $$new_props) $$invalidate(7, scrollableEl = $$new_props.scrollableEl);
  		if ("swipeToClose" in $$new_props) $$invalidate(8, swipeToClose = $$new_props.swipeToClose);
  		if ("closeByBackdropClick" in $$new_props) $$invalidate(9, closeByBackdropClick = $$new_props.closeByBackdropClick);
  		if ("backdrop" in $$new_props) $$invalidate(10, backdrop = $$new_props.backdrop);
  		if ("backdropEl" in $$new_props) $$invalidate(11, backdropEl = $$new_props.backdropEl);
  		if ("noShadow" in $$new_props) $$invalidate(24, noShadow = $$new_props.noShadow);
  		if ("noBorder" in $$new_props) $$invalidate(25, noBorder = $$new_props.noBorder);
  		if ("padding" in $$new_props) $$invalidate(12, padding = $$new_props.padding);
  		if ("$$scope" in $$new_props) $$invalidate(28, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		onMount,
  		onDestroy,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		hasSlots,
  		CardHeader: Card_header,
  		CardContent: Card_content,
  		CardFooter: Card_footer,
  		dispatch,
  		className,
  		title,
  		content,
  		footer,
  		outline,
  		expandable,
  		expandableAnimateWidth,
  		expandableOpened,
  		animate,
  		hideNavbarOnOpen,
  		hideToolbarOnOpen,
  		hideStatusbarOnOpen,
  		scrollableEl,
  		swipeToClose,
  		closeByBackdropClick,
  		backdrop,
  		backdropEl,
  		noShadow,
  		noBorder,
  		padding,
  		el,
  		open,
  		close,
  		initialWatched,
  		watchOpened,
  		onBeforeOpen,
  		onOpen,
  		onOpened,
  		onClose,
  		onClosed,
  		classes,
  		hasHeaderSlots,
  		hasContentSlots,
  		hasFooterSlots
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(39, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(19, className = $$new_props.className);
  		if ("title" in $$props) $$invalidate(0, title = $$new_props.title);
  		if ("content" in $$props) $$invalidate(1, content = $$new_props.content);
  		if ("footer" in $$props) $$invalidate(2, footer = $$new_props.footer);
  		if ("outline" in $$props) $$invalidate(20, outline = $$new_props.outline);
  		if ("expandable" in $$props) $$invalidate(21, expandable = $$new_props.expandable);
  		if ("expandableAnimateWidth" in $$props) $$invalidate(22, expandableAnimateWidth = $$new_props.expandableAnimateWidth);
  		if ("expandableOpened" in $$props) $$invalidate(23, expandableOpened = $$new_props.expandableOpened);
  		if ("animate" in $$props) $$invalidate(3, animate = $$new_props.animate);
  		if ("hideNavbarOnOpen" in $$props) $$invalidate(4, hideNavbarOnOpen = $$new_props.hideNavbarOnOpen);
  		if ("hideToolbarOnOpen" in $$props) $$invalidate(5, hideToolbarOnOpen = $$new_props.hideToolbarOnOpen);
  		if ("hideStatusbarOnOpen" in $$props) $$invalidate(6, hideStatusbarOnOpen = $$new_props.hideStatusbarOnOpen);
  		if ("scrollableEl" in $$props) $$invalidate(7, scrollableEl = $$new_props.scrollableEl);
  		if ("swipeToClose" in $$props) $$invalidate(8, swipeToClose = $$new_props.swipeToClose);
  		if ("closeByBackdropClick" in $$props) $$invalidate(9, closeByBackdropClick = $$new_props.closeByBackdropClick);
  		if ("backdrop" in $$props) $$invalidate(10, backdrop = $$new_props.backdrop);
  		if ("backdropEl" in $$props) $$invalidate(11, backdropEl = $$new_props.backdropEl);
  		if ("noShadow" in $$props) $$invalidate(24, noShadow = $$new_props.noShadow);
  		if ("noBorder" in $$props) $$invalidate(25, noBorder = $$new_props.noBorder);
  		if ("padding" in $$props) $$invalidate(12, padding = $$new_props.padding);
  		if ("el" in $$props) $$invalidate(13, el = $$new_props.el);
  		if ("initialWatched" in $$props) initialWatched = $$new_props.initialWatched;
  		if ("classes" in $$props) $$invalidate(14, classes = $$new_props.classes);
  		if ("hasHeaderSlots" in $$props) $$invalidate(15, hasHeaderSlots = $$new_props.hasHeaderSlots);
  		if ("hasContentSlots" in $$props) $$invalidate(16, hasContentSlots = $$new_props.hasContentSlots);
  		if ("hasFooterSlots" in $$props) $$invalidate(17, hasFooterSlots = $$new_props.hasFooterSlots);
  	};

  	let classes;
  	let hasHeaderSlots;
  	let hasContentSlots;
  	let hasFooterSlots;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(14, classes = Utils$1.classNames(
  			className,
  			"card",
  			{
  				"card-outline": outline,
  				"card-expandable": expandable,
  				"card-expandable-animate-width": expandableAnimateWidth,
  				"no-shadow": noShadow,
  				"no-border": noBorder
  			},
  			Mixins.colorClasses($$props)
  		));

  		if ($$self.$$.dirty[0] & /*expandableOpened*/ 8388608) {
  			 watchOpened(expandableOpened);
  		}
  	};

  	 $$invalidate(15, hasHeaderSlots = hasSlots(arguments, "header"));
  	 $$invalidate(16, hasContentSlots = hasSlots(arguments, "content"));
  	 $$invalidate(17, hasFooterSlots = hasSlots(arguments, "footer"));
  	$$props = exclude_internal_props($$props);

  	return [
  		title,
  		content,
  		footer,
  		animate,
  		hideNavbarOnOpen,
  		hideToolbarOnOpen,
  		hideStatusbarOnOpen,
  		scrollableEl,
  		swipeToClose,
  		closeByBackdropClick,
  		backdrop,
  		backdropEl,
  		padding,
  		el,
  		classes,
  		hasHeaderSlots,
  		hasContentSlots,
  		hasFooterSlots,
  		$$restProps,
  		className,
  		outline,
  		expandable,
  		expandableAnimateWidth,
  		expandableOpened,
  		noShadow,
  		noBorder,
  		slots,
  		div_binding,
  		$$scope
  	];
  }

  class Card$1 extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(
  			this,
  			options,
  			instance$8,
  			create_fragment$8,
  			safe_not_equal,
  			{
  				class: 19,
  				title: 0,
  				content: 1,
  				footer: 2,
  				outline: 20,
  				expandable: 21,
  				expandableAnimateWidth: 22,
  				expandableOpened: 23,
  				animate: 3,
  				hideNavbarOnOpen: 4,
  				hideToolbarOnOpen: 5,
  				hideStatusbarOnOpen: 6,
  				scrollableEl: 7,
  				swipeToClose: 8,
  				closeByBackdropClick: 9,
  				backdrop: 10,
  				backdropEl: 11,
  				noShadow: 24,
  				noBorder: 25,
  				padding: 12
  			},
  			[-1, -1]
  		);

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Card",
  			options,
  			id: create_fragment$8.name
  		});
  	}

  	get class() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get title() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set title(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get content() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set content(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get footer() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set footer(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get outline() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set outline(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get expandable() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set expandable(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get expandableAnimateWidth() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set expandableAnimateWidth(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get expandableOpened() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set expandableOpened(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get animate() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set animate(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideNavbarOnOpen() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideNavbarOnOpen(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideToolbarOnOpen() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideToolbarOnOpen(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideStatusbarOnOpen() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideStatusbarOnOpen(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get scrollableEl() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set scrollableEl(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get swipeToClose() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set swipeToClose(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get closeByBackdropClick() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set closeByBackdropClick(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backdrop() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backdrop(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backdropEl() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backdropEl(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noShadow() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noShadow(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noBorder() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noBorder(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get padding() {
  		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set padding(value) {
  		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\col.svelte generated by Svelte v3.29.4 */
  const file$9 = "node_modules\\framework7-svelte\\components\\col.svelte";

  // (76:25) 
  function create_if_block_2$1(ctx) {
  	let span;
  	let t;
  	let current;
  	let mounted;
  	let dispose;
  	const default_slot_template = /*#slots*/ ctx[17].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
  	let if_block = /*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2] && create_if_block_3(ctx);
  	let span_levels = [{ class: /*classes*/ ctx[4] }, restProps(/*$$restProps*/ ctx[6])];
  	let span_data = {};

  	for (let i = 0; i < span_levels.length; i += 1) {
  		span_data = assign(span_data, span_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			span = element("span");
  			if (default_slot) default_slot.c();
  			t = space();
  			if (if_block) if_block.c();
  			set_attributes(span, span_data);
  			add_location(span, file$9, 76, 2, 1941);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);

  			if (default_slot) {
  				default_slot.m(span, null);
  			}

  			append_dev(span, t);
  			if (if_block) if_block.m(span, null);
  			/*span_binding*/ ctx[19](span);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(span, "click", /*onClick*/ ctx[5], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 65536) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
  				}
  			}

  			if (/*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2]) {
  				if (if_block) ; else {
  					if_block = create_if_block_3(ctx);
  					if_block.c();
  					if_block.m(span, null);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			set_attributes(span, span_data = get_spread_update(span_levels, [
  				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
  				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  			if (default_slot) default_slot.d(detaching);
  			if (if_block) if_block.d();
  			/*span_binding*/ ctx[19](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$1.name,
  		type: "if",
  		source: "(76:25) ",
  		ctx
  	});

  	return block;
  }

  // (64:0) {#if tag === 'div'}
  function create_if_block$1(ctx) {
  	let div;
  	let t;
  	let current;
  	let mounted;
  	let dispose;
  	const default_slot_template = /*#slots*/ ctx[17].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
  	let if_block = /*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2] && create_if_block_1$1(ctx);
  	let div_levels = [{ class: /*classes*/ ctx[4] }, restProps(/*$$restProps*/ ctx[6])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			t = space();
  			if (if_block) if_block.c();
  			set_attributes(div, div_data);
  			add_location(div, file$9, 64, 2, 1695);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			append_dev(div, t);
  			if (if_block) if_block.m(div, null);
  			/*div_binding*/ ctx[18](div);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(div, "click", /*onClick*/ ctx[5], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 65536) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
  				}
  			}

  			if (/*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2]) {
  				if (if_block) ; else {
  					if_block = create_if_block_1$1(ctx);
  					if_block.c();
  					if_block.m(div, null);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
  				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  			if (if_block) if_block.d();
  			/*div_binding*/ ctx[18](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$1.name,
  		type: "if",
  		source: "(64:0) {#if tag === 'div'}",
  		ctx
  	});

  	return block;
  }

  // (84:4) {#if resizable && resizableHandler}
  function create_if_block_3(ctx) {
  	let span;

  	const block = {
  		c: function create() {
  			span = element("span");
  			attr_dev(span, "class", "resize-handler");
  			add_location(span, file$9, 84, 6, 2104);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_3.name,
  		type: "if",
  		source: "(84:4) {#if resizable && resizableHandler}",
  		ctx
  	});

  	return block;
  }

  // (72:4) {#if resizable && resizableHandler}
  function create_if_block_1$1(ctx) {
  	let span;

  	const block = {
  		c: function create() {
  			span = element("span");
  			attr_dev(span, "class", "resize-handler");
  			add_location(span, file$9, 72, 6, 1857);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$1.name,
  		type: "if",
  		source: "(72:4) {#if resizable && resizableHandler}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$9(ctx) {
  	let current_block_type_index;
  	let if_block;
  	let if_block_anchor;
  	let current;
  	const if_block_creators = [create_if_block$1, create_if_block_2$1];
  	const if_blocks = [];

  	function select_block_type(ctx, dirty) {
  		if (/*tag*/ ctx[0] === "div") return 0;
  		if (/*tag*/ ctx[0] === "span") return 1;
  		return -1;
  	}

  	if (~(current_block_type_index = select_block_type(ctx))) {
  		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	}

  	const block = {
  		c: function create() {
  			if (if_block) if_block.c();
  			if_block_anchor = empty$1();
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			if (~current_block_type_index) {
  				if_blocks[current_block_type_index].m(target, anchor);
  			}

  			insert_dev(target, if_block_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if (~current_block_type_index) {
  					if_blocks[current_block_type_index].p(ctx, dirty);
  				}
  			} else {
  				if (if_block) {
  					group_outros();

  					transition_out(if_blocks[previous_block_index], 1, 1, () => {
  						if_blocks[previous_block_index] = null;
  					});

  					check_outros();
  				}

  				if (~current_block_type_index) {
  					if_block = if_blocks[current_block_type_index];

  					if (!if_block) {
  						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  						if_block.c();
  					}

  					transition_in(if_block, 1);
  					if_block.m(if_block_anchor.parentNode, if_block_anchor);
  				} else {
  					if_block = null;
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (~current_block_type_index) {
  				if_blocks[current_block_type_index].d(detaching);
  			}

  			if (detaching) detach_dev(if_block_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$9.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$9($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"class","tag","width","xsmall","small","medium","large","xlarge","resizable","resizableFixed","resizableAbsolute","resizableHandler"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Col", slots, ['default']);
  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { tag = "div" } = $$props;
  	let { width = "auto" } = $$props;
  	let { xsmall = undefined } = $$props;
  	let { small = undefined } = $$props;
  	let { medium = undefined } = $$props;
  	let { large = undefined } = $$props;
  	let { xlarge = undefined } = $$props;
  	let { resizable = false } = $$props;
  	let { resizableFixed = false } = $$props;
  	let { resizableAbsolute = false } = $$props;
  	let { resizableHandler = true } = $$props;
  	let el;

  	function onClick() {
  		dispatch("click");
  		if (typeof $$props.onClick === "function") $$props.onClick();
  	}

  	function onResize(targetEl) {
  		if (el !== targetEl) return;
  		dispatch("gridResize");
  		if (typeof $$props.onGridResize === "function") $$props.onGridResize();
  	}

  	onMount(() => {
  		f7.ready(() => {
  			f7.instance.on("gridResize", onResize);
  		});
  	});

  	onDestroy(() => {
  		if (!f7.instance) return;
  		f7.instance.off("gridResize", onResize);
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(3, el);
  		});
  	}

  	function span_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(3, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(22, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
  		if ("tag" in $$new_props) $$invalidate(0, tag = $$new_props.tag);
  		if ("width" in $$new_props) $$invalidate(8, width = $$new_props.width);
  		if ("xsmall" in $$new_props) $$invalidate(9, xsmall = $$new_props.xsmall);
  		if ("small" in $$new_props) $$invalidate(10, small = $$new_props.small);
  		if ("medium" in $$new_props) $$invalidate(11, medium = $$new_props.medium);
  		if ("large" in $$new_props) $$invalidate(12, large = $$new_props.large);
  		if ("xlarge" in $$new_props) $$invalidate(13, xlarge = $$new_props.xlarge);
  		if ("resizable" in $$new_props) $$invalidate(1, resizable = $$new_props.resizable);
  		if ("resizableFixed" in $$new_props) $$invalidate(14, resizableFixed = $$new_props.resizableFixed);
  		if ("resizableAbsolute" in $$new_props) $$invalidate(15, resizableAbsolute = $$new_props.resizableAbsolute);
  		if ("resizableHandler" in $$new_props) $$invalidate(2, resizableHandler = $$new_props.resizableHandler);
  		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		onMount,
  		onDestroy,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		dispatch,
  		className,
  		tag,
  		width,
  		xsmall,
  		small,
  		medium,
  		large,
  		xlarge,
  		resizable,
  		resizableFixed,
  		resizableAbsolute,
  		resizableHandler,
  		el,
  		onClick,
  		onResize,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(22, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(7, className = $$new_props.className);
  		if ("tag" in $$props) $$invalidate(0, tag = $$new_props.tag);
  		if ("width" in $$props) $$invalidate(8, width = $$new_props.width);
  		if ("xsmall" in $$props) $$invalidate(9, xsmall = $$new_props.xsmall);
  		if ("small" in $$props) $$invalidate(10, small = $$new_props.small);
  		if ("medium" in $$props) $$invalidate(11, medium = $$new_props.medium);
  		if ("large" in $$props) $$invalidate(12, large = $$new_props.large);
  		if ("xlarge" in $$props) $$invalidate(13, xlarge = $$new_props.xlarge);
  		if ("resizable" in $$props) $$invalidate(1, resizable = $$new_props.resizable);
  		if ("resizableFixed" in $$props) $$invalidate(14, resizableFixed = $$new_props.resizableFixed);
  		if ("resizableAbsolute" in $$props) $$invalidate(15, resizableAbsolute = $$new_props.resizableAbsolute);
  		if ("resizableHandler" in $$props) $$invalidate(2, resizableHandler = $$new_props.resizableHandler);
  		if ("el" in $$props) $$invalidate(3, el = $$new_props.el);
  		if ("classes" in $$props) $$invalidate(4, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(4, classes = Utils$1.classNames(
  			className,
  			{
  				col: width === "auto",
  				[`col-${width}`]: width !== "auto",
  				[`xsmall-${xsmall}`]: xsmall,
  				[`small-${small}`]: small,
  				[`medium-${medium}`]: medium,
  				[`large-${large}`]: large,
  				[`xlarge-${xlarge}`]: xlarge,
  				resizable,
  				"resizable-fixed": resizableFixed,
  				"resizable-absolute": resizableAbsolute
  			},
  			Mixins.colorClasses($$props)
  		));
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		tag,
  		resizable,
  		resizableHandler,
  		el,
  		classes,
  		onClick,
  		$$restProps,
  		className,
  		width,
  		xsmall,
  		small,
  		medium,
  		large,
  		xlarge,
  		resizableFixed,
  		resizableAbsolute,
  		$$scope,
  		slots,
  		div_binding,
  		span_binding
  	];
  }

  class Col extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
  			class: 7,
  			tag: 0,
  			width: 8,
  			xsmall: 9,
  			small: 10,
  			medium: 11,
  			large: 12,
  			xlarge: 13,
  			resizable: 1,
  			resizableFixed: 14,
  			resizableAbsolute: 15,
  			resizableHandler: 2
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Col",
  			options,
  			id: create_fragment$9.name
  		});
  	}

  	get class() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tag() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tag(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get width() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set width(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get xsmall() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set xsmall(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get small() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set small(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get medium() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set medium(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get large() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set large(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get xlarge() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set xlarge(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizable() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizable(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizableFixed() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizableFixed(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizableAbsolute() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizableAbsolute(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizableHandler() {
  		throw new Error("<Col>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizableHandler(value) {
  		throw new Error("<Col>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\link.svelte generated by Svelte v3.29.4 */
  const file$a = "node_modules\\framework7-svelte\\components\\link.svelte";

  // (159:2) {#if hasIcon}
  function create_if_block_2$2(ctx) {
  	let icon;
  	let current;

  	icon = new Icon({
  			props: {
  				material: /*$$props*/ ctx[10].iconMaterial,
  				f7: /*$$props*/ ctx[10].iconF7,
  				icon: /*$$props*/ ctx[10].icon,
  				md: /*$$props*/ ctx[10].iconMd,
  				ios: /*$$props*/ ctx[10].iconIos,
  				aurora: /*$$props*/ ctx[10].iconAurora,
  				color: /*$$props*/ ctx[10].iconColor,
  				size: /*$$props*/ ctx[10].iconSize,
  				$$slots: { default: [create_default_slot_1$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(icon.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(icon, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const icon_changes = {};
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.material = /*$$props*/ ctx[10].iconMaterial;
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.f7 = /*$$props*/ ctx[10].iconF7;
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.icon = /*$$props*/ ctx[10].icon;
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.md = /*$$props*/ ctx[10].iconMd;
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.ios = /*$$props*/ ctx[10].iconIos;
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.aurora = /*$$props*/ ctx[10].iconAurora;
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.color = /*$$props*/ ctx[10].iconColor;
  			if (dirty[0] & /*$$props*/ 1024) icon_changes.size = /*$$props*/ ctx[10].iconSize;

  			if (dirty[0] & /*$$scope, badgeColor, iconBadge*/ 33554444) {
  				icon_changes.$$scope = { dirty, ctx };
  			}

  			icon.$set(icon_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(icon.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(icon.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(icon, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$2.name,
  		type: "if",
  		source: "(159:2) {#if hasIcon}",
  		ctx
  	});

  	return block;
  }

  // (169:5) {#if iconBadge}
  function create_if_block_3$1(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[2],
  				$$slots: { default: [create_default_slot_2$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 4) badge_1_changes.color = /*badgeColor*/ ctx[2];

  			if (dirty[0] & /*$$scope, iconBadge*/ 33554440) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_3$1.name,
  		type: "if",
  		source: "(169:5) {#if iconBadge}",
  		ctx
  	});

  	return block;
  }

  // (169:20) <Badge color={badgeColor}>
  function create_default_slot_2$1(ctx) {
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(/*iconBadge*/ ctx[3]);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*iconBadge*/ 8) set_data_dev(t, /*iconBadge*/ ctx[3]);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_2$1.name,
  		type: "slot",
  		source: "(169:20) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (160:4) <Icon       material={$$props.iconMaterial}       f7={$$props.iconF7}       icon={$$props.icon}       md={$$props.iconMd}       ios={$$props.iconIos}       aurora={$$props.iconAurora}       color={$$props.iconColor}       size={$$props.iconSize}     >
  function create_default_slot_1$1(ctx) {
  	let if_block_anchor;
  	let current;
  	let if_block = /*iconBadge*/ ctx[3] && create_if_block_3$1(ctx);

  	const block = {
  		c: function create() {
  			if (if_block) if_block.c();
  			if_block_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if (if_block) if_block.m(target, anchor);
  			insert_dev(target, if_block_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*iconBadge*/ ctx[3]) {
  				if (if_block) {
  					if_block.p(ctx, dirty);

  					if (dirty[0] & /*iconBadge*/ 8) {
  						transition_in(if_block, 1);
  					}
  				} else {
  					if_block = create_if_block_3$1(ctx);
  					if_block.c();
  					transition_in(if_block, 1);
  					if_block.m(if_block_anchor.parentNode, if_block_anchor);
  				}
  			} else if (if_block) {
  				group_outros();

  				transition_out(if_block, 1, 1, () => {
  					if_block = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (if_block) if_block.d(detaching);
  			if (detaching) detach_dev(if_block_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_1$1.name,
  		type: "slot",
  		source: "(160:4) <Icon       material={$$props.iconMaterial}       f7={$$props.iconF7}       icon={$$props.icon}       md={$$props.iconMd}       ios={$$props.iconIos}       aurora={$$props.iconAurora}       color={$$props.iconColor}       size={$$props.iconSize}     >",
  		ctx
  	});

  	return block;
  }

  // (172:2) {#if typeof text !== 'undefined' || typeof badge !== 'undefined'}
  function create_if_block$2(ctx) {
  	let span;
  	let t0_value = Utils$1.text(/*text*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	let if_block = typeof /*badge*/ ctx[1] !== "undefined" && create_if_block_1$2(ctx);

  	const block = {
  		c: function create() {
  			span = element("span");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (if_block) if_block.c();
  			toggle_class(span, "tabbar-label", /*isTabbarLabel*/ ctx[5]);
  			add_location(span, file$a, 172, 4, 4480);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t0);
  			append_dev(span, t1);
  			if (if_block) if_block.m(span, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*text*/ 1) && t0_value !== (t0_value = Utils$1.text(/*text*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (typeof /*badge*/ ctx[1] !== "undefined") {
  				if (if_block) {
  					if_block.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 2) {
  						transition_in(if_block, 1);
  					}
  				} else {
  					if_block = create_if_block_1$2(ctx);
  					if_block.c();
  					transition_in(if_block, 1);
  					if_block.m(span, null);
  				}
  			} else if (if_block) {
  				group_outros();

  				transition_out(if_block, 1, 1, () => {
  					if_block = null;
  				});

  				check_outros();
  			}

  			if (dirty[0] & /*isTabbarLabel*/ 32) {
  				toggle_class(span, "tabbar-label", /*isTabbarLabel*/ ctx[5]);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  			if (if_block) if_block.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$2.name,
  		type: "if",
  		source: "(172:2) {#if typeof text !== 'undefined' || typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (175:6) {#if typeof badge !== 'undefined'}
  function create_if_block_1$2(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[2],
  				$$slots: { default: [create_default_slot$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 4) badge_1_changes.color = /*badgeColor*/ ctx[2];

  			if (dirty[0] & /*$$scope, badge*/ 33554434) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$2.name,
  		type: "if",
  		source: "(175:6) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (175:40) <Badge color={badgeColor}>
  function create_default_slot$1(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[1]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 2 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[1]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot$1.name,
  		type: "slot",
  		source: "(175:40) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  function create_fragment$a(ctx) {
  	let a;
  	let t0;
  	let t1;
  	let current;
  	let mounted;
  	let dispose;
  	let if_block0 = /*hasIcon*/ ctx[8] && create_if_block_2$2(ctx);
  	const default_slot_template = /*#slots*/ ctx[23].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);
  	let if_block1 = (typeof /*text*/ ctx[0] !== "undefined" || typeof /*badge*/ ctx[1] !== "undefined") && create_if_block$2(ctx);
  	let a_levels = [{ class: /*classes*/ ctx[7] }, /*attrs*/ ctx[6]];
  	let a_data = {};

  	for (let i = 0; i < a_levels.length; i += 1) {
  		a_data = assign(a_data, a_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			a = element("a");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			if (default_slot) default_slot.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			set_attributes(a, a_data);
  			add_location(a, file$a, 152, 0, 3971);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, a, anchor);
  			if (if_block0) if_block0.m(a, null);
  			append_dev(a, t0);

  			if (default_slot) {
  				default_slot.m(a, null);
  			}

  			append_dev(a, t1);
  			if (if_block1) if_block1.m(a, null);
  			/*a_binding*/ ctx[24](a);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(a, "click", /*onClick*/ ctx[9], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasIcon*/ ctx[8]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[0] & /*hasIcon*/ 256) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_2$2(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(a, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[0] & /*$$scope*/ 33554432) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[25], dirty, null, null);
  				}
  			}

  			if (typeof /*text*/ ctx[0] !== "undefined" || typeof /*badge*/ ctx[1] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*text, badge*/ 3) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block$2(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(a, null);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			set_attributes(a, a_data = get_spread_update(a_levels, [
  				(!current || dirty[0] & /*classes*/ 128) && { class: /*classes*/ ctx[7] },
  				dirty[0] & /*attrs*/ 64 && /*attrs*/ ctx[6]
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(default_slot, local);
  			transition_in(if_block1);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(default_slot, local);
  			transition_out(if_block1);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(a);
  			if (if_block0) if_block0.d();
  			if (default_slot) default_slot.d(detaching);
  			if (if_block1) if_block1.d();
  			/*a_binding*/ ctx[24](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$a.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$a($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"class","noLinkClass","text","tabLink","tabLinkActive","tabbarLabel","iconOnly","badge","badgeColor","iconBadge","href","target","tooltip","tooltipTrigger","smartSelect","smartSelectParams"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Link", slots, ['default']);
  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { noLinkClass = false } = $$props;
  	let { text = undefined } = $$props;
  	let { tabLink = undefined } = $$props;
  	let { tabLinkActive = false } = $$props;
  	let { tabbarLabel = false } = $$props;
  	let { iconOnly = false } = $$props;
  	let { badge = undefined } = $$props;
  	let { badgeColor = undefined } = $$props;
  	let { iconBadge = undefined } = $$props;
  	let { href = "#" } = $$props;
  	let { target = undefined } = $$props;
  	let { tooltip = undefined } = $$props;
  	let { tooltipTrigger = undefined } = $$props;
  	let { smartSelect = false } = $$props;
  	let { smartSelectParams = undefined } = $$props;
  	let el;
  	let f7Tooltip;
  	let f7SmartSelect;
  	let isTabbarLabel = tabbarLabel;
  	let tooltipText = tooltip;

  	function watchTooltip(newText) {
  		const oldText = tooltipText;
  		if (oldText === newText) return;
  		tooltipText = newText;

  		if (!newText && f7Tooltip) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  			return;
  		}

  		if (newText && !f7Tooltip && f7.instance) {
  			f7Tooltip = f7.instance.tooltip.create({
  				targetEl: el,
  				text: newText,
  				trigger: tooltipTrigger
  			});

  			return;
  		}

  		if (!newText || !f7Tooltip) return;
  		f7Tooltip.setText(newText);
  	}

  	function onClick() {
  		dispatch("click");
  		if (typeof $$props.onClick === "function") $$props.onClick();
  	}

  	onMount(() => {
  		if ($$props.routeProps) {
  			$$invalidate(4, el.f7RouteProps = $$props.routeProps, el);
  		}

  		f7.ready(() => {
  			if (tabbarLabel || (tabLink || tabLink === "") && f7.instance.$(el).parents(".tabbar-labels").length) {
  				$$invalidate(5, isTabbarLabel = true);
  			}

  			if (smartSelect) {
  				const ssParams = Utils$1.extend({ el }, smartSelectParams || {});
  				f7SmartSelect = f7.instance.smartSelect.create(ssParams);
  			}

  			if (tooltip) {
  				f7Tooltip = f7.instance.tooltip.create({
  					targetEl: el,
  					text: tooltip,
  					trigger: tooltipTrigger
  				});
  			}
  		});
  	});

  	afterUpdate(() => {
  		if ($$props.routeProps) {
  			$$invalidate(4, el.f7RouteProps = $$props.routeProps, el);
  		}
  	});

  	onDestroy(() => {
  		if (el) delete el.f7RouteProps;

  		if (f7SmartSelect && f7SmartSelect.destroy) {
  			f7SmartSelect.destroy();
  			f7SmartSelect = null;
  		}

  		if (f7Tooltip && f7Tooltip.destroy) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  		}
  	});

  	function a_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(4, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(35, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(11, className = $$new_props.class);
  		if ("noLinkClass" in $$new_props) $$invalidate(12, noLinkClass = $$new_props.noLinkClass);
  		if ("text" in $$new_props) $$invalidate(0, text = $$new_props.text);
  		if ("tabLink" in $$new_props) $$invalidate(13, tabLink = $$new_props.tabLink);
  		if ("tabLinkActive" in $$new_props) $$invalidate(14, tabLinkActive = $$new_props.tabLinkActive);
  		if ("tabbarLabel" in $$new_props) $$invalidate(15, tabbarLabel = $$new_props.tabbarLabel);
  		if ("iconOnly" in $$new_props) $$invalidate(16, iconOnly = $$new_props.iconOnly);
  		if ("badge" in $$new_props) $$invalidate(1, badge = $$new_props.badge);
  		if ("badgeColor" in $$new_props) $$invalidate(2, badgeColor = $$new_props.badgeColor);
  		if ("iconBadge" in $$new_props) $$invalidate(3, iconBadge = $$new_props.iconBadge);
  		if ("href" in $$new_props) $$invalidate(17, href = $$new_props.href);
  		if ("target" in $$new_props) $$invalidate(18, target = $$new_props.target);
  		if ("tooltip" in $$new_props) $$invalidate(19, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$new_props) $$invalidate(20, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("smartSelect" in $$new_props) $$invalidate(21, smartSelect = $$new_props.smartSelect);
  		if ("smartSelectParams" in $$new_props) $$invalidate(22, smartSelectParams = $$new_props.smartSelectParams);
  		if ("$$scope" in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		onMount,
  		afterUpdate,
  		onDestroy,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		hasSlots,
  		Badge,
  		Icon,
  		dispatch,
  		className,
  		noLinkClass,
  		text,
  		tabLink,
  		tabLinkActive,
  		tabbarLabel,
  		iconOnly,
  		badge,
  		badgeColor,
  		iconBadge,
  		href,
  		target,
  		tooltip,
  		tooltipTrigger,
  		smartSelect,
  		smartSelectParams,
  		el,
  		f7Tooltip,
  		f7SmartSelect,
  		isTabbarLabel,
  		tooltipText,
  		watchTooltip,
  		onClick,
  		hrefComputed,
  		attrs,
  		hasDefaultSlots,
  		iconOnlyComputed,
  		classes,
  		hasIcon,
  		hasIconBadge
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(10, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(11, className = $$new_props.className);
  		if ("noLinkClass" in $$props) $$invalidate(12, noLinkClass = $$new_props.noLinkClass);
  		if ("text" in $$props) $$invalidate(0, text = $$new_props.text);
  		if ("tabLink" in $$props) $$invalidate(13, tabLink = $$new_props.tabLink);
  		if ("tabLinkActive" in $$props) $$invalidate(14, tabLinkActive = $$new_props.tabLinkActive);
  		if ("tabbarLabel" in $$props) $$invalidate(15, tabbarLabel = $$new_props.tabbarLabel);
  		if ("iconOnly" in $$props) $$invalidate(16, iconOnly = $$new_props.iconOnly);
  		if ("badge" in $$props) $$invalidate(1, badge = $$new_props.badge);
  		if ("badgeColor" in $$props) $$invalidate(2, badgeColor = $$new_props.badgeColor);
  		if ("iconBadge" in $$props) $$invalidate(3, iconBadge = $$new_props.iconBadge);
  		if ("href" in $$props) $$invalidate(17, href = $$new_props.href);
  		if ("target" in $$props) $$invalidate(18, target = $$new_props.target);
  		if ("tooltip" in $$props) $$invalidate(19, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$props) $$invalidate(20, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("smartSelect" in $$props) $$invalidate(21, smartSelect = $$new_props.smartSelect);
  		if ("smartSelectParams" in $$props) $$invalidate(22, smartSelectParams = $$new_props.smartSelectParams);
  		if ("el" in $$props) $$invalidate(4, el = $$new_props.el);
  		if ("f7Tooltip" in $$props) f7Tooltip = $$new_props.f7Tooltip;
  		if ("f7SmartSelect" in $$props) f7SmartSelect = $$new_props.f7SmartSelect;
  		if ("isTabbarLabel" in $$props) $$invalidate(5, isTabbarLabel = $$new_props.isTabbarLabel);
  		if ("tooltipText" in $$props) tooltipText = $$new_props.tooltipText;
  		if ("hrefComputed" in $$props) $$invalidate(29, hrefComputed = $$new_props.hrefComputed);
  		if ("attrs" in $$props) $$invalidate(6, attrs = $$new_props.attrs);
  		if ("hasDefaultSlots" in $$props) $$invalidate(30, hasDefaultSlots = $$new_props.hasDefaultSlots);
  		if ("iconOnlyComputed" in $$props) $$invalidate(31, iconOnlyComputed = $$new_props.iconOnlyComputed);
  		if ("classes" in $$props) $$invalidate(7, classes = $$new_props.classes);
  		if ("hasIcon" in $$props) $$invalidate(8, hasIcon = $$new_props.hasIcon);
  		if ("hasIconBadge" in $$props) hasIconBadge = $$new_props.hasIconBadge;
  	};

  	let hrefComputed;
  	let attrs;
  	let hasDefaultSlots;
  	let iconOnlyComputed;
  	let classes;
  	let hasIcon;
  	let hasIconBadge;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		if ($$self.$$.dirty[0] & /*href*/ 131072) {
  			 $$invalidate(29, hrefComputed = href === true ? "#" : href || undefined);
  		}

  		 $$invalidate(6, attrs = Utils$1.extend(
  			{
  				href: hrefComputed,
  				target,
  				"data-tab": Utils$1.isStringProp(tabLink) && tabLink || undefined,
  				...restProps($$restProps)
  			},
  			Mixins.linkRouterAttrs($$props),
  			Mixins.linkActionsAttrs($$props)
  		));

  		if ($$self.$$.dirty[0] & /*iconOnly, text, hasDefaultSlots*/ 1073807361) {
  			 $$invalidate(31, iconOnlyComputed = iconOnly || !text && !hasDefaultSlots);
  		}

  		 $$invalidate(7, classes = Utils$1.classNames(
  			className,
  			{
  				link: !(noLinkClass || isTabbarLabel),
  				"icon-only": iconOnlyComputed,
  				"tab-link": tabLink || tabLink === "",
  				"tab-link-active": tabLinkActive,
  				"smart-select": smartSelect
  			},
  			Mixins.colorClasses($$props),
  			Mixins.linkRouterClasses($$props),
  			Mixins.linkActionsClasses($$props)
  		));

  		 $$invalidate(8, hasIcon = $$props.icon || $$props.iconMaterial || $$props.iconF7 || $$props.iconMd || $$props.iconIos || $$props.iconAurora);
  		 hasIconBadge = $$props.hasIconBadge;

  		if ($$self.$$.dirty[0] & /*tooltip*/ 524288) {
  			 watchTooltip(tooltip);
  		}
  	};

  	 $$invalidate(30, hasDefaultSlots = hasSlots(arguments, "default"));
  	$$props = exclude_internal_props($$props);

  	return [
  		text,
  		badge,
  		badgeColor,
  		iconBadge,
  		el,
  		isTabbarLabel,
  		attrs,
  		classes,
  		hasIcon,
  		onClick,
  		$$props,
  		className,
  		noLinkClass,
  		tabLink,
  		tabLinkActive,
  		tabbarLabel,
  		iconOnly,
  		href,
  		target,
  		tooltip,
  		tooltipTrigger,
  		smartSelect,
  		smartSelectParams,
  		slots,
  		a_binding,
  		$$scope
  	];
  }

  class Link extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(
  			this,
  			options,
  			instance$a,
  			create_fragment$a,
  			safe_not_equal,
  			{
  				class: 11,
  				noLinkClass: 12,
  				text: 0,
  				tabLink: 13,
  				tabLinkActive: 14,
  				tabbarLabel: 15,
  				iconOnly: 16,
  				badge: 1,
  				badgeColor: 2,
  				iconBadge: 3,
  				href: 17,
  				target: 18,
  				tooltip: 19,
  				tooltipTrigger: 20,
  				smartSelect: 21,
  				smartSelectParams: 22
  			},
  			[-1, -1]
  		);

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Link",
  			options,
  			id: create_fragment$a.name
  		});
  	}

  	get class() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noLinkClass() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noLinkClass(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get text() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set text(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabLink() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabLink(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabLinkActive() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabLinkActive(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabbarLabel() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabbarLabel(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get iconOnly() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set iconOnly(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get badge() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set badge(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get badgeColor() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set badgeColor(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get iconBadge() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set iconBadge(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get href() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set href(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get target() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set target(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltip() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltip(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltipTrigger() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltipTrigger(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get smartSelect() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set smartSelect(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get smartSelectParams() {
  		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set smartSelectParams(value) {
  		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\list-item.svelte generated by Svelte v3.29.4 */
  const file$b = "node_modules\\framework7-svelte\\components\\list-item.svelte";
  const get_root_end_slot_changes = dirty => ({});
  const get_root_end_slot_context = ctx => ({});
  const get_root_slot_changes = dirty => ({});
  const get_root_slot_context = ctx => ({});
  const get_content_end_slot_changes_5 = dirty => ({});
  const get_content_end_slot_context_5 = ctx => ({});
  const get_content_slot_changes_5 = dirty => ({});
  const get_content_slot_context_5 = ctx => ({});
  const get_inner_end_slot_changes_5 = dirty => ({});
  const get_inner_end_slot_context_5 = ctx => ({});
  const get_inner_slot_changes_11 = dirty => ({});
  const get_inner_slot_context_11 = ctx => ({});
  const get_after_end_slot_changes_11 = dirty => ({});
  const get_after_end_slot_context_11 = ctx => ({});
  const get_after_slot_changes_11 = dirty => ({});
  const get_after_slot_context_11 = ctx => ({});
  const get_after_start_slot_changes_11 = dirty => ({});
  const get_after_start_slot_context_11 = ctx => ({});
  const get_after_title_slot_changes_11 = dirty => ({});
  const get_after_title_slot_context_11 = ctx => ({});
  const get_footer_slot_changes_11 = dirty => ({});
  const get_footer_slot_context_11 = ctx => ({});
  const get_title_slot_changes_11 = dirty => ({});
  const get_title_slot_context_11 = ctx => ({});
  const get_header_slot_changes_11 = dirty => ({});
  const get_header_slot_context_11 = ctx => ({});
  const get_before_title_slot_changes_11 = dirty => ({});
  const get_before_title_slot_context_11 = ctx => ({});
  const get_footer_slot_changes_10 = dirty => ({});
  const get_footer_slot_context_10 = ctx => ({});
  const get_inner_slot_changes_10 = dirty => ({});
  const get_inner_slot_context_10 = ctx => ({});
  const get_text_slot_changes_5 = dirty => ({});
  const get_text_slot_context_5 = ctx => ({});
  const get_subtitle_slot_changes_5 = dirty => ({});
  const get_subtitle_slot_context_5 = ctx => ({});
  const get_after_end_slot_changes_10 = dirty => ({});
  const get_after_end_slot_context_10 = ctx => ({});
  const get_after_slot_changes_10 = dirty => ({});
  const get_after_slot_context_10 = ctx => ({});
  const get_after_start_slot_changes_10 = dirty => ({});
  const get_after_start_slot_context_10 = ctx => ({});
  const get_after_title_slot_changes_10 = dirty => ({});
  const get_after_title_slot_context_10 = ctx => ({});
  const get_title_slot_changes_10 = dirty => ({});
  const get_title_slot_context_10 = ctx => ({});
  const get_before_title_slot_changes_10 = dirty => ({});
  const get_before_title_slot_context_10 = ctx => ({});
  const get_header_slot_changes_10 = dirty => ({});
  const get_header_slot_context_10 = ctx => ({});
  const get_inner_start_slot_changes_5 = dirty => ({});
  const get_inner_start_slot_context_5 = ctx => ({});
  const get_media_slot_changes_5 = dirty => ({});
  const get_media_slot_context_5 = ctx => ({});
  const get_content_start_slot_changes_5 = dirty => ({});
  const get_content_start_slot_context_5 = ctx => ({});
  const get_content_end_slot_changes_4 = dirty => ({});
  const get_content_end_slot_context_4 = ctx => ({});
  const get_content_slot_changes_4 = dirty => ({});
  const get_content_slot_context_4 = ctx => ({});
  const get_inner_end_slot_changes_4 = dirty => ({});
  const get_inner_end_slot_context_4 = ctx => ({});
  const get_inner_slot_changes_9 = dirty => ({});
  const get_inner_slot_context_9 = ctx => ({});
  const get_after_end_slot_changes_9 = dirty => ({});
  const get_after_end_slot_context_9 = ctx => ({});
  const get_after_slot_changes_9 = dirty => ({});
  const get_after_slot_context_9 = ctx => ({});
  const get_after_start_slot_changes_9 = dirty => ({});
  const get_after_start_slot_context_9 = ctx => ({});
  const get_after_title_slot_changes_9 = dirty => ({});
  const get_after_title_slot_context_9 = ctx => ({});
  const get_footer_slot_changes_9 = dirty => ({});
  const get_footer_slot_context_9 = ctx => ({});
  const get_title_slot_changes_9 = dirty => ({});
  const get_title_slot_context_9 = ctx => ({});
  const get_header_slot_changes_9 = dirty => ({});
  const get_header_slot_context_9 = ctx => ({});
  const get_before_title_slot_changes_9 = dirty => ({});
  const get_before_title_slot_context_9 = ctx => ({});
  const get_footer_slot_changes_8 = dirty => ({});
  const get_footer_slot_context_8 = ctx => ({});
  const get_inner_slot_changes_8 = dirty => ({});
  const get_inner_slot_context_8 = ctx => ({});
  const get_text_slot_changes_4 = dirty => ({});
  const get_text_slot_context_4 = ctx => ({});
  const get_subtitle_slot_changes_4 = dirty => ({});
  const get_subtitle_slot_context_4 = ctx => ({});
  const get_after_end_slot_changes_8 = dirty => ({});
  const get_after_end_slot_context_8 = ctx => ({});
  const get_after_slot_changes_8 = dirty => ({});
  const get_after_slot_context_8 = ctx => ({});
  const get_after_start_slot_changes_8 = dirty => ({});
  const get_after_start_slot_context_8 = ctx => ({});
  const get_after_title_slot_changes_8 = dirty => ({});
  const get_after_title_slot_context_8 = ctx => ({});
  const get_title_slot_changes_8 = dirty => ({});
  const get_title_slot_context_8 = ctx => ({});
  const get_before_title_slot_changes_8 = dirty => ({});
  const get_before_title_slot_context_8 = ctx => ({});
  const get_header_slot_changes_8 = dirty => ({});
  const get_header_slot_context_8 = ctx => ({});
  const get_inner_start_slot_changes_4 = dirty => ({});
  const get_inner_start_slot_context_4 = ctx => ({});
  const get_media_slot_changes_4 = dirty => ({});
  const get_media_slot_context_4 = ctx => ({});
  const get_content_start_slot_changes_4 = dirty => ({});
  const get_content_start_slot_context_4 = ctx => ({});
  const get_content_end_slot_changes_3 = dirty => ({});
  const get_content_end_slot_context_3 = ctx => ({});
  const get_content_slot_changes_3 = dirty => ({});
  const get_content_slot_context_3 = ctx => ({});
  const get_inner_end_slot_changes_3 = dirty => ({});
  const get_inner_end_slot_context_3 = ctx => ({});
  const get_inner_slot_changes_7 = dirty => ({});
  const get_inner_slot_context_7 = ctx => ({});
  const get_after_end_slot_changes_7 = dirty => ({});
  const get_after_end_slot_context_7 = ctx => ({});
  const get_after_slot_changes_7 = dirty => ({});
  const get_after_slot_context_7 = ctx => ({});
  const get_after_start_slot_changes_7 = dirty => ({});
  const get_after_start_slot_context_7 = ctx => ({});
  const get_after_title_slot_changes_7 = dirty => ({});
  const get_after_title_slot_context_7 = ctx => ({});
  const get_footer_slot_changes_7 = dirty => ({});
  const get_footer_slot_context_7 = ctx => ({});
  const get_title_slot_changes_7 = dirty => ({});
  const get_title_slot_context_7 = ctx => ({});
  const get_header_slot_changes_7 = dirty => ({});
  const get_header_slot_context_7 = ctx => ({});
  const get_before_title_slot_changes_7 = dirty => ({});
  const get_before_title_slot_context_7 = ctx => ({});
  const get_footer_slot_changes_6 = dirty => ({});
  const get_footer_slot_context_6 = ctx => ({});
  const get_inner_slot_changes_6 = dirty => ({});
  const get_inner_slot_context_6 = ctx => ({});
  const get_text_slot_changes_3 = dirty => ({});
  const get_text_slot_context_3 = ctx => ({});
  const get_subtitle_slot_changes_3 = dirty => ({});
  const get_subtitle_slot_context_3 = ctx => ({});
  const get_after_end_slot_changes_6 = dirty => ({});
  const get_after_end_slot_context_6 = ctx => ({});
  const get_after_slot_changes_6 = dirty => ({});
  const get_after_slot_context_6 = ctx => ({});
  const get_after_start_slot_changes_6 = dirty => ({});
  const get_after_start_slot_context_6 = ctx => ({});
  const get_after_title_slot_changes_6 = dirty => ({});
  const get_after_title_slot_context_6 = ctx => ({});
  const get_title_slot_changes_6 = dirty => ({});
  const get_title_slot_context_6 = ctx => ({});
  const get_before_title_slot_changes_6 = dirty => ({});
  const get_before_title_slot_context_6 = ctx => ({});
  const get_header_slot_changes_6 = dirty => ({});
  const get_header_slot_context_6 = ctx => ({});
  const get_inner_start_slot_changes_3 = dirty => ({});
  const get_inner_start_slot_context_3 = ctx => ({});
  const get_media_slot_changes_3 = dirty => ({});
  const get_media_slot_context_3 = ctx => ({});
  const get_content_start_slot_changes_3 = dirty => ({});
  const get_content_start_slot_context_3 = ctx => ({});
  const get_content_end_slot_changes_2 = dirty => ({});
  const get_content_end_slot_context_2 = ctx => ({});
  const get_content_slot_changes_2 = dirty => ({});
  const get_content_slot_context_2 = ctx => ({});
  const get_inner_end_slot_changes_2 = dirty => ({});
  const get_inner_end_slot_context_2 = ctx => ({});
  const get_inner_slot_changes_5 = dirty => ({});
  const get_inner_slot_context_5 = ctx => ({});
  const get_after_end_slot_changes_5 = dirty => ({});
  const get_after_end_slot_context_5 = ctx => ({});
  const get_after_slot_changes_5 = dirty => ({});
  const get_after_slot_context_5 = ctx => ({});
  const get_after_start_slot_changes_5 = dirty => ({});
  const get_after_start_slot_context_5 = ctx => ({});
  const get_after_title_slot_changes_5 = dirty => ({});
  const get_after_title_slot_context_5 = ctx => ({});
  const get_footer_slot_changes_5 = dirty => ({});
  const get_footer_slot_context_5 = ctx => ({});
  const get_title_slot_changes_5 = dirty => ({});
  const get_title_slot_context_5 = ctx => ({});
  const get_header_slot_changes_5 = dirty => ({});
  const get_header_slot_context_5 = ctx => ({});
  const get_before_title_slot_changes_5 = dirty => ({});
  const get_before_title_slot_context_5 = ctx => ({});
  const get_footer_slot_changes_4 = dirty => ({});
  const get_footer_slot_context_4 = ctx => ({});
  const get_inner_slot_changes_4 = dirty => ({});
  const get_inner_slot_context_4 = ctx => ({});
  const get_text_slot_changes_2 = dirty => ({});
  const get_text_slot_context_2 = ctx => ({});
  const get_subtitle_slot_changes_2 = dirty => ({});
  const get_subtitle_slot_context_2 = ctx => ({});
  const get_after_end_slot_changes_4 = dirty => ({});
  const get_after_end_slot_context_4 = ctx => ({});
  const get_after_slot_changes_4 = dirty => ({});
  const get_after_slot_context_4 = ctx => ({});
  const get_after_start_slot_changes_4 = dirty => ({});
  const get_after_start_slot_context_4 = ctx => ({});
  const get_after_title_slot_changes_4 = dirty => ({});
  const get_after_title_slot_context_4 = ctx => ({});
  const get_title_slot_changes_4 = dirty => ({});
  const get_title_slot_context_4 = ctx => ({});
  const get_before_title_slot_changes_4 = dirty => ({});
  const get_before_title_slot_context_4 = ctx => ({});
  const get_header_slot_changes_4 = dirty => ({});
  const get_header_slot_context_4 = ctx => ({});
  const get_inner_start_slot_changes_2 = dirty => ({});
  const get_inner_start_slot_context_2 = ctx => ({});
  const get_media_slot_changes_2 = dirty => ({});
  const get_media_slot_context_2 = ctx => ({});
  const get_content_start_slot_changes_2 = dirty => ({});
  const get_content_start_slot_context_2 = ctx => ({});
  const get_content_end_slot_changes_1 = dirty => ({});
  const get_content_end_slot_context_1 = ctx => ({});
  const get_content_slot_changes_1 = dirty => ({});
  const get_content_slot_context_1 = ctx => ({});
  const get_inner_end_slot_changes_1 = dirty => ({});
  const get_inner_end_slot_context_1 = ctx => ({});
  const get_inner_slot_changes_3 = dirty => ({});
  const get_inner_slot_context_3 = ctx => ({});
  const get_after_end_slot_changes_3 = dirty => ({});
  const get_after_end_slot_context_3 = ctx => ({});
  const get_after_slot_changes_3 = dirty => ({});
  const get_after_slot_context_3 = ctx => ({});
  const get_after_start_slot_changes_3 = dirty => ({});
  const get_after_start_slot_context_3 = ctx => ({});
  const get_after_title_slot_changes_3 = dirty => ({});
  const get_after_title_slot_context_3 = ctx => ({});
  const get_footer_slot_changes_3 = dirty => ({});
  const get_footer_slot_context_3 = ctx => ({});
  const get_title_slot_changes_3 = dirty => ({});
  const get_title_slot_context_3 = ctx => ({});
  const get_header_slot_changes_3 = dirty => ({});
  const get_header_slot_context_3 = ctx => ({});
  const get_before_title_slot_changes_3 = dirty => ({});
  const get_before_title_slot_context_3 = ctx => ({});
  const get_footer_slot_changes_2 = dirty => ({});
  const get_footer_slot_context_2 = ctx => ({});
  const get_inner_slot_changes_2 = dirty => ({});
  const get_inner_slot_context_2 = ctx => ({});
  const get_text_slot_changes_1 = dirty => ({});
  const get_text_slot_context_1 = ctx => ({});
  const get_subtitle_slot_changes_1 = dirty => ({});
  const get_subtitle_slot_context_1 = ctx => ({});
  const get_after_end_slot_changes_2 = dirty => ({});
  const get_after_end_slot_context_2 = ctx => ({});
  const get_after_slot_changes_2 = dirty => ({});
  const get_after_slot_context_2 = ctx => ({});
  const get_after_start_slot_changes_2 = dirty => ({});
  const get_after_start_slot_context_2 = ctx => ({});
  const get_after_title_slot_changes_2 = dirty => ({});
  const get_after_title_slot_context_2 = ctx => ({});
  const get_title_slot_changes_2 = dirty => ({});
  const get_title_slot_context_2 = ctx => ({});
  const get_before_title_slot_changes_2 = dirty => ({});
  const get_before_title_slot_context_2 = ctx => ({});
  const get_header_slot_changes_2 = dirty => ({});
  const get_header_slot_context_2 = ctx => ({});
  const get_inner_start_slot_changes_1 = dirty => ({});
  const get_inner_start_slot_context_1 = ctx => ({});
  const get_media_slot_changes_1 = dirty => ({});
  const get_media_slot_context_1 = ctx => ({});
  const get_content_start_slot_changes_1 = dirty => ({});
  const get_content_start_slot_context_1 = ctx => ({});
  const get_content_end_slot_changes = dirty => ({});
  const get_content_end_slot_context = ctx => ({});
  const get_content_slot_changes$1 = dirty => ({});
  const get_content_slot_context$1 = ctx => ({});
  const get_inner_end_slot_changes = dirty => ({});
  const get_inner_end_slot_context = ctx => ({});
  const get_inner_slot_changes_1 = dirty => ({});
  const get_inner_slot_context_1 = ctx => ({});
  const get_after_end_slot_changes_1 = dirty => ({});
  const get_after_end_slot_context_1 = ctx => ({});
  const get_after_slot_changes_1 = dirty => ({});
  const get_after_slot_context_1 = ctx => ({});
  const get_after_start_slot_changes_1 = dirty => ({});
  const get_after_start_slot_context_1 = ctx => ({});
  const get_after_title_slot_changes_1 = dirty => ({});
  const get_after_title_slot_context_1 = ctx => ({});
  const get_footer_slot_changes_1 = dirty => ({});
  const get_footer_slot_context_1 = ctx => ({});
  const get_title_slot_changes_1 = dirty => ({});
  const get_title_slot_context_1 = ctx => ({});
  const get_header_slot_changes_1 = dirty => ({});
  const get_header_slot_context_1 = ctx => ({});
  const get_before_title_slot_changes_1 = dirty => ({});
  const get_before_title_slot_context_1 = ctx => ({});
  const get_footer_slot_changes$1 = dirty => ({});
  const get_footer_slot_context$1 = ctx => ({});
  const get_inner_slot_changes = dirty => ({});
  const get_inner_slot_context = ctx => ({});
  const get_text_slot_changes = dirty => ({});
  const get_text_slot_context = ctx => ({});
  const get_subtitle_slot_changes = dirty => ({});
  const get_subtitle_slot_context = ctx => ({});
  const get_after_end_slot_changes = dirty => ({});
  const get_after_end_slot_context = ctx => ({});
  const get_after_slot_changes = dirty => ({});
  const get_after_slot_context = ctx => ({});
  const get_after_start_slot_changes = dirty => ({});
  const get_after_start_slot_context = ctx => ({});
  const get_after_title_slot_changes = dirty => ({});
  const get_after_title_slot_context = ctx => ({});
  const get_title_slot_changes = dirty => ({});
  const get_title_slot_context = ctx => ({});
  const get_before_title_slot_changes = dirty => ({});
  const get_before_title_slot_context = ctx => ({});
  const get_header_slot_changes$1 = dirty => ({});
  const get_header_slot_context$1 = ctx => ({});
  const get_inner_start_slot_changes = dirty => ({});
  const get_inner_start_slot_context = ctx => ({});
  const get_media_slot_changes = dirty => ({});
  const get_media_slot_context = ctx => ({});
  const get_content_start_slot_changes = dirty => ({});
  const get_content_start_slot_context = ctx => ({});
  const get_root_start_slot_changes = dirty => ({});
  const get_root_start_slot_context = ctx => ({});

  // (370:0) {:else}
  function create_else_block(ctx) {
  	let li;
  	let t0;
  	let current_block_type_index;
  	let if_block0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let current;
  	const root_start_slot_template = /*#slots*/ ctx[66]["root-start"];
  	const root_start_slot = create_slot(root_start_slot_template, ctx, /*$$scope*/ ctx[80], get_root_start_slot_context);
  	const if_block_creators = [create_if_block_4, create_if_block_67, create_else_block_7];
  	const if_blocks = [];

  	function select_block_type_1(ctx, dirty) {
  		if (/*swipeout*/ ctx[11]) return 0;
  		if (/*isLink*/ ctx[35]) return 1;
  		return 2;
  	}

  	current_block_type_index = select_block_type_1(ctx);
  	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	let if_block1 = /*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && !/*isSortableOpposite*/ ctx[29] && create_if_block_3$2(ctx);
  	let if_block2 = (/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_2$3(ctx);
  	const root_slot_template = /*#slots*/ ctx[66].root;
  	const root_slot = create_slot(root_slot_template, ctx, /*$$scope*/ ctx[80], get_root_slot_context);
  	const root_end_slot_template = /*#slots*/ ctx[66]["root-end"];
  	const root_end_slot = create_slot(root_end_slot_template, ctx, /*$$scope*/ ctx[80], get_root_end_slot_context);

  	let li_levels = [
  		{ class: /*liClasses*/ ctx[31] },
  		{
  			"data-virtual-list-index": /*virtualListIndex*/ ctx[22]
  		},
  		restProps(/*$$restProps*/ ctx[45])
  	];

  	let li_data = {};

  	for (let i = 0; i < li_levels.length; i += 1) {
  		li_data = assign(li_data, li_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			li = element("li");
  			if (root_start_slot) root_start_slot.c();
  			t0 = space();
  			if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (if_block2) if_block2.c();
  			t3 = space();
  			if (root_slot) root_slot.c();
  			t4 = space();
  			if (root_end_slot) root_end_slot.c();
  			set_attributes(li, li_data);
  			add_location(li, file$b, 370, 2, 12202);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, li, anchor);

  			if (root_start_slot) {
  				root_start_slot.m(li, null);
  			}

  			append_dev(li, t0);
  			if_blocks[current_block_type_index].m(li, null);
  			append_dev(li, t1);
  			if (if_block1) if_block1.m(li, null);
  			append_dev(li, t2);
  			if (if_block2) if_block2.m(li, null);
  			append_dev(li, t3);

  			if (root_slot) {
  				root_slot.m(li, null);
  			}

  			append_dev(li, t4);

  			if (root_end_slot) {
  				root_end_slot.m(li, null);
  			}

  			/*li_binding_2*/ ctx[79](li);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (root_start_slot) {
  				if (root_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(root_start_slot, root_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_root_start_slot_changes, get_root_start_slot_context);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_1(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block0 = if_blocks[current_block_type_index];

  				if (!if_block0) {
  					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block0.c();
  				}

  				transition_in(if_block0, 1);
  				if_block0.m(li, t1);
  			}

  			if (/*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && !/*isSortableOpposite*/ ctx[29]) {
  				if (if_block1) ; else {
  					if_block1 = create_if_block_3$2(ctx);
  					if_block1.c();
  					if_block1.m(li, t2);
  				}
  			} else if (if_block1) {
  				if_block1.d(1);
  				if_block1 = null;
  			}

  			if (/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_2$3(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(li, t3);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (root_slot) {
  				if (root_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(root_slot, root_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_root_slot_changes, get_root_slot_context);
  				}
  			}

  			if (root_end_slot) {
  				if (root_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(root_end_slot, root_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_root_end_slot_changes, get_root_end_slot_context);
  				}
  			}

  			set_attributes(li, li_data = get_spread_update(li_levels, [
  				(!current || dirty[1] & /*liClasses*/ 1) && { class: /*liClasses*/ ctx[31] },
  				(!current || dirty[0] & /*virtualListIndex*/ 4194304) && {
  					"data-virtual-list-index": /*virtualListIndex*/ ctx[22]
  				},
  				dirty[1] & /*$$restProps*/ 16384 && restProps(/*$$restProps*/ ctx[45])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(root_start_slot, local);
  			transition_in(if_block0);
  			transition_in(if_block2);
  			transition_in(root_slot, local);
  			transition_in(root_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(root_start_slot, local);
  			transition_out(if_block0);
  			transition_out(if_block2);
  			transition_out(root_slot, local);
  			transition_out(root_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(li);
  			if (root_start_slot) root_start_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (if_block1) if_block1.d();
  			if (if_block2) if_block2.d();
  			if (root_slot) root_slot.d(detaching);
  			if (root_end_slot) root_end_slot.d(detaching);
  			/*li_binding_2*/ ctx[79](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block.name,
  		type: "else",
  		source: "(370:0) {:else}",
  		ctx
  	});

  	return block;
  }

  // (365:19) 
  function create_if_block_1$3(ctx) {
  	let li;
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	let mounted;
  	let dispose;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	let li_levels = [
  		{ class: /*liClasses*/ ctx[31] },
  		{
  			"data-virtual-list-index": /*virtualListIndex*/ ctx[22]
  		},
  		restProps(/*$$restProps*/ ctx[45])
  	];

  	let li_data = {};

  	for (let i = 0; i < li_levels.length; i += 1) {
  		li_data = assign(li_data, li_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			li = element("li");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (default_slot) default_slot.c();
  			set_attributes(li, li_data);
  			add_location(li, file$b, 365, 2, 12017);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, li, anchor);
  			append_dev(li, t0);
  			append_dev(li, t1);

  			if (default_slot) {
  				default_slot.m(li, null);
  			}

  			/*li_binding_1*/ ctx[68](li);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(li, "click", /*onClick*/ ctx[43], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}

  			set_attributes(li, li_data = get_spread_update(li_levels, [
  				(!current || dirty[1] & /*liClasses*/ 1) && { class: /*liClasses*/ ctx[31] },
  				(!current || dirty[0] & /*virtualListIndex*/ 4194304) && {
  					"data-virtual-list-index": /*virtualListIndex*/ ctx[22]
  				},
  				dirty[1] & /*$$restProps*/ 16384 && restProps(/*$$restProps*/ ctx[45])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(li);
  			if (default_slot) default_slot.d(detaching);
  			/*li_binding_1*/ ctx[68](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$3.name,
  		type: "if",
  		source: "(365:19) ",
  		ctx
  	});

  	return block;
  }

  // (361:0) {#if (divider || groupTitle)}
  function create_if_block$3(ctx) {
  	let li;
  	let span;
  	let current;
  	let mounted;
  	let dispose;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);
  	const default_slot_or_fallback = default_slot || fallback_block(ctx);

  	let li_levels = [
  		{ class: /*liClasses*/ ctx[31] },
  		{
  			"data-virtual-list-index": /*virtualListIndex*/ ctx[22]
  		},
  		restProps(/*$$restProps*/ ctx[45])
  	];

  	let li_data = {};

  	for (let i = 0; i < li_levels.length; i += 1) {
  		li_data = assign(li_data, li_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			li = element("li");
  			span = element("span");
  			if (default_slot_or_fallback) default_slot_or_fallback.c();
  			add_location(span, file$b, 362, 4, 11941);
  			set_attributes(li, li_data);
  			add_location(li, file$b, 361, 2, 11807);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, li, anchor);
  			append_dev(li, span);

  			if (default_slot_or_fallback) {
  				default_slot_or_fallback.m(span, null);
  			}

  			/*li_binding*/ ctx[67](li);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(li, "click", /*onClick*/ ctx[43], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			} else {
  				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty[0] & /*title*/ 1) {
  					default_slot_or_fallback.p(ctx, dirty);
  				}
  			}

  			set_attributes(li, li_data = get_spread_update(li_levels, [
  				(!current || dirty[1] & /*liClasses*/ 1) && { class: /*liClasses*/ ctx[31] },
  				(!current || dirty[0] & /*virtualListIndex*/ 4194304) && {
  					"data-virtual-list-index": /*virtualListIndex*/ ctx[22]
  				},
  				dirty[1] & /*$$restProps*/ 16384 && restProps(/*$$restProps*/ ctx[45])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot_or_fallback, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot_or_fallback, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(li);
  			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
  			/*li_binding*/ ctx[67](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$3.name,
  		type: "if",
  		source: "(361:0) {#if (divider || groupTitle)}",
  		ctx
  	});

  	return block;
  }

  // (850:6) {:else}
  function create_else_block_7(ctx) {
  	let current_block_type_index;
  	let if_block;
  	let if_block_anchor;
  	let current;
  	const if_block_creators = [create_if_block_88, create_else_block_9];
  	const if_blocks = [];

  	function select_block_type_8(ctx, dirty) {
  		if (/*checkbox*/ ctx[14] || /*radio*/ ctx[15]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_8(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

  	const block = {
  		c: function create() {
  			if_block.c();
  			if_block_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if_blocks[current_block_type_index].m(target, anchor);
  			insert_dev(target, if_block_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_8(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(if_block_anchor.parentNode, if_block_anchor);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if_blocks[current_block_type_index].d(detaching);
  			if (detaching) detach_dev(if_block_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_7.name,
  		type: "else",
  		source: "(850:6) {:else}",
  		ctx
  	});

  	return block;
  }

  // (734:6) {#if isLink}
  function create_if_block_67(ctx) {
  	let a;
  	let div1;
  	let t0;
  	let t1;
  	let t2;
  	let div0;
  	let t3;
  	let current_block_type_index;
  	let if_block2;
  	let t4;
  	let t5;
  	let t6;
  	let current;
  	let mounted;
  	let dispose;
  	const content_start_slot_template = /*#slots*/ ctx[66]["content-start"];
  	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[80], get_content_start_slot_context_3);
  	let if_block0 = /*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29] && create_if_block_87(ctx);
  	let if_block1 = /*hasMedia*/ ctx[36] && create_if_block_85(ctx);
  	const inner_start_slot_template = /*#slots*/ ctx[66]["inner-start"];
  	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_start_slot_context_3);
  	const if_block_creators = [create_if_block_68, create_else_block_6];
  	const if_blocks = [];

  	function select_block_type_7(ctx, dirty) {
  		if (/*isMedia*/ ctx[27]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_7(ctx);
  	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const inner_end_slot_template = /*#slots*/ ctx[66]["inner-end"];
  	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_end_slot_context_3);
  	const content_slot_template = /*#slots*/ ctx[66].content;
  	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[80], get_content_slot_context_3);
  	const content_end_slot_template = /*#slots*/ ctx[66]["content-end"];
  	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[80], get_content_end_slot_context_3);
  	let a_levels = [{ class: /*linkClasses*/ ctx[33] }, /*linkAttrs*/ ctx[34]];
  	let a_data = {};

  	for (let i = 0; i < a_levels.length; i += 1) {
  		a_data = assign(a_data, a_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			a = element("a");
  			div1 = element("div");
  			if (content_start_slot) content_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			div0 = element("div");
  			if (inner_start_slot) inner_start_slot.c();
  			t3 = space();
  			if_block2.c();
  			t4 = space();
  			if (inner_end_slot) inner_end_slot.c();
  			t5 = space();
  			if (content_slot) content_slot.c();
  			t6 = space();
  			if (content_end_slot) content_end_slot.c();
  			attr_dev(div0, "class", "item-inner");
  			add_location(div0, file$b, 749, 12, 27154);
  			attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			add_location(div1, file$b, 736, 10, 26679);
  			set_attributes(a, a_data);
  			add_location(a, file$b, 734, 8, 26554);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, a, anchor);
  			append_dev(a, div1);

  			if (content_start_slot) {
  				content_start_slot.m(div1, null);
  			}

  			append_dev(div1, t0);
  			if (if_block0) if_block0.m(div1, null);
  			append_dev(div1, t1);
  			if (if_block1) if_block1.m(div1, null);
  			append_dev(div1, t2);
  			append_dev(div1, div0);

  			if (inner_start_slot) {
  				inner_start_slot.m(div0, null);
  			}

  			append_dev(div0, t3);
  			if_blocks[current_block_type_index].m(div0, null);
  			append_dev(div0, t4);

  			if (inner_end_slot) {
  				inner_end_slot.m(div0, null);
  			}

  			/*div0_binding_2*/ ctx[74](div0);
  			append_dev(div1, t5);

  			if (content_slot) {
  				content_slot.m(div1, null);
  			}

  			append_dev(div1, t6);

  			if (content_end_slot) {
  				content_end_slot.m(div1, null);
  			}

  			/*a_binding_1*/ ctx[75](a);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(a, "click", /*onClick*/ ctx[43], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (content_start_slot) {
  				if (content_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_start_slot_changes_3, get_content_start_slot_context_3);
  				}
  			}

  			if (/*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29]) {
  				if (if_block0) ; else {
  					if_block0 = create_if_block_87(ctx);
  					if_block0.c();
  					if_block0.m(div1, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (/*hasMedia*/ ctx[36]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasMedia*/ 32) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_85(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div1, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_start_slot) {
  				if (inner_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_start_slot_changes_3, get_inner_start_slot_context_3);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_7(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block2 = if_blocks[current_block_type_index];

  				if (!if_block2) {
  					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block2.c();
  				}

  				transition_in(if_block2, 1);
  				if_block2.m(div0, t4);
  			}

  			if (inner_end_slot) {
  				if (inner_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_end_slot_changes_3, get_inner_end_slot_context_3);
  				}
  			}

  			if (content_slot) {
  				if (content_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_slot_changes_3, get_content_slot_context_3);
  				}
  			}

  			if (content_end_slot) {
  				if (content_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_end_slot_changes_3, get_content_end_slot_context_3);
  				}
  			}

  			if (!current || dirty[1] & /*contentClasses*/ 2) {
  				attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			}

  			set_attributes(a, a_data = get_spread_update(a_levels, [
  				(!current || dirty[1] & /*linkClasses*/ 4) && { class: /*linkClasses*/ ctx[33] },
  				dirty[1] & /*linkAttrs*/ 8 && /*linkAttrs*/ ctx[34]
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(content_start_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_start_slot, local);
  			transition_in(if_block2);
  			transition_in(inner_end_slot, local);
  			transition_in(content_slot, local);
  			transition_in(content_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(content_start_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_start_slot, local);
  			transition_out(if_block2);
  			transition_out(inner_end_slot, local);
  			transition_out(content_slot, local);
  			transition_out(content_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(a);
  			if (content_start_slot) content_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (inner_start_slot) inner_start_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (inner_end_slot) inner_end_slot.d(detaching);
  			/*div0_binding_2*/ ctx[74](null);
  			if (content_slot) content_slot.d(detaching);
  			if (content_end_slot) content_end_slot.d(detaching);
  			/*a_binding_1*/ ctx[75](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_67.name,
  		type: "if",
  		source: "(734:6) {#if isLink}",
  		ctx
  	});

  	return block;
  }

  // (373:4) {#if swipeout}
  function create_if_block_4(ctx) {
  	let div;
  	let current_block_type_index;
  	let if_block;
  	let current;
  	const if_block_creators = [create_if_block_5, create_else_block_2];
  	const if_blocks = [];

  	function select_block_type_2(ctx, dirty) {
  		if (/*isLink*/ ctx[35]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_2(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if_block.c();
  			attr_dev(div, "class", "swipeout-content");
  			add_location(div, file$b, 373, 6, 12367);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if_blocks[current_block_type_index].m(div, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_2(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(div, null);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if_blocks[current_block_type_index].d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_4.name,
  		type: "if",
  		source: "(373:4) {#if swipeout}",
  		ctx
  	});

  	return block;
  }

  // (976:8) {:else}
  function create_else_block_9(ctx) {
  	let div1;
  	let t0;
  	let t1;
  	let t2;
  	let div0;
  	let t3;
  	let current_block_type_index;
  	let if_block2;
  	let t4;
  	let t5;
  	let t6;
  	let current;
  	let mounted;
  	let dispose;
  	const content_start_slot_template = /*#slots*/ ctx[66]["content-start"];
  	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[80], get_content_start_slot_context_5);
  	let if_block0 = /*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29] && create_if_block_128(ctx);
  	let if_block1 = /*hasMedia*/ ctx[36] && create_if_block_126(ctx);
  	const inner_start_slot_template = /*#slots*/ ctx[66]["inner-start"];
  	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_start_slot_context_5);
  	const if_block_creators = [create_if_block_109, create_else_block_10];
  	const if_blocks = [];

  	function select_block_type_10(ctx, dirty) {
  		if (/*isMedia*/ ctx[27]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_10(ctx);
  	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const inner_end_slot_template = /*#slots*/ ctx[66]["inner-end"];
  	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_end_slot_context_5);
  	const content_slot_template = /*#slots*/ ctx[66].content;
  	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[80], get_content_slot_context_5);
  	const content_end_slot_template = /*#slots*/ ctx[66]["content-end"];
  	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[80], get_content_end_slot_context_5);

  	const block = {
  		c: function create() {
  			div1 = element("div");
  			if (content_start_slot) content_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			div0 = element("div");
  			if (inner_start_slot) inner_start_slot.c();
  			t3 = space();
  			if_block2.c();
  			t4 = space();
  			if (inner_end_slot) inner_end_slot.c();
  			t5 = space();
  			if (content_slot) content_slot.c();
  			t6 = space();
  			if (content_end_slot) content_end_slot.c();
  			attr_dev(div0, "class", "item-inner");
  			add_location(div0, file$b, 989, 12, 36158);
  			attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			add_location(div1, file$b, 976, 10, 35664);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div1, anchor);

  			if (content_start_slot) {
  				content_start_slot.m(div1, null);
  			}

  			append_dev(div1, t0);
  			if (if_block0) if_block0.m(div1, null);
  			append_dev(div1, t1);
  			if (if_block1) if_block1.m(div1, null);
  			append_dev(div1, t2);
  			append_dev(div1, div0);

  			if (inner_start_slot) {
  				inner_start_slot.m(div0, null);
  			}

  			append_dev(div0, t3);
  			if_blocks[current_block_type_index].m(div0, null);
  			append_dev(div0, t4);

  			if (inner_end_slot) {
  				inner_end_slot.m(div0, null);
  			}

  			/*div0_binding_3*/ ctx[78](div0);
  			append_dev(div1, t5);

  			if (content_slot) {
  				content_slot.m(div1, null);
  			}

  			append_dev(div1, t6);

  			if (content_end_slot) {
  				content_end_slot.m(div1, null);
  			}

  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(div1, "click", /*onClick*/ ctx[43], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (content_start_slot) {
  				if (content_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_start_slot_changes_5, get_content_start_slot_context_5);
  				}
  			}

  			if (/*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29]) {
  				if (if_block0) ; else {
  					if_block0 = create_if_block_128(ctx);
  					if_block0.c();
  					if_block0.m(div1, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (/*hasMedia*/ ctx[36]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasMedia*/ 32) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_126(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div1, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_start_slot) {
  				if (inner_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_start_slot_changes_5, get_inner_start_slot_context_5);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_10(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block2 = if_blocks[current_block_type_index];

  				if (!if_block2) {
  					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block2.c();
  				}

  				transition_in(if_block2, 1);
  				if_block2.m(div0, t4);
  			}

  			if (inner_end_slot) {
  				if (inner_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_end_slot_changes_5, get_inner_end_slot_context_5);
  				}
  			}

  			if (content_slot) {
  				if (content_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_slot_changes_5, get_content_slot_context_5);
  				}
  			}

  			if (content_end_slot) {
  				if (content_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_end_slot_changes_5, get_content_end_slot_context_5);
  				}
  			}

  			if (!current || dirty[1] & /*contentClasses*/ 2) {
  				attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(content_start_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_start_slot, local);
  			transition_in(if_block2);
  			transition_in(inner_end_slot, local);
  			transition_in(content_slot, local);
  			transition_in(content_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(content_start_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_start_slot, local);
  			transition_out(if_block2);
  			transition_out(inner_end_slot, local);
  			transition_out(content_slot, local);
  			transition_out(content_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div1);
  			if (content_start_slot) content_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (inner_start_slot) inner_start_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (inner_end_slot) inner_end_slot.d(detaching);
  			/*div0_binding_3*/ ctx[78](null);
  			if (content_slot) content_slot.d(detaching);
  			if (content_end_slot) content_end_slot.d(detaching);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_9.name,
  		type: "else",
  		source: "(976:8) {:else}",
  		ctx
  	});

  	return block;
  }

  // (852:8) {#if checkbox || radio}
  function create_if_block_88(ctx) {
  	let label;
  	let t0;
  	let t1;
  	let input;
  	let input_value_value;
  	let input_type_value;
  	let t2;
  	let i;
  	let i_class_value;
  	let t3;
  	let t4;
  	let div;
  	let t5;
  	let current_block_type_index;
  	let if_block2;
  	let t6;
  	let t7;
  	let t8;
  	let current;
  	let mounted;
  	let dispose;
  	const content_start_slot_template = /*#slots*/ ctx[66]["content-start"];
  	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[80], get_content_start_slot_context_4);
  	let if_block0 = /*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29] && create_if_block_108(ctx);
  	let if_block1 = /*hasMedia*/ ctx[36] && create_if_block_106(ctx);
  	const inner_start_slot_template = /*#slots*/ ctx[66]["inner-start"];
  	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_start_slot_context_4);
  	const if_block_creators = [create_if_block_89, create_else_block_8];
  	const if_blocks = [];

  	function select_block_type_9(ctx, dirty) {
  		if (/*isMedia*/ ctx[27]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_9(ctx);
  	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const inner_end_slot_template = /*#slots*/ ctx[66]["inner-end"];
  	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_end_slot_context_4);
  	const content_slot_template = /*#slots*/ ctx[66].content;
  	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[80], get_content_slot_context_4);
  	const content_end_slot_template = /*#slots*/ ctx[66]["content-end"];
  	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[80], get_content_end_slot_context_4);

  	const block = {
  		c: function create() {
  			label = element("label");
  			if (content_start_slot) content_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			input = element("input");
  			t2 = space();
  			i = element("i");
  			t3 = space();
  			if (if_block1) if_block1.c();
  			t4 = space();
  			div = element("div");
  			if (inner_start_slot) inner_start_slot.c();
  			t5 = space();
  			if_block2.c();
  			t6 = space();
  			if (inner_end_slot) inner_end_slot.c();
  			t7 = space();
  			if (content_slot) content_slot.c();
  			t8 = space();
  			if (content_end_slot) content_end_slot.c();

  			input.value = input_value_value = typeof /*value*/ ctx[18] === "undefined"
  			? ""
  			: /*value*/ ctx[18];

  			attr_dev(input, "name", /*name*/ ctx[17]);
  			input.checked = /*checked*/ ctx[16];
  			input.readOnly = /*readonly*/ ctx[19];
  			input.disabled = /*disabled*/ ctx[21];
  			input.required = /*required*/ ctx[20];
  			attr_dev(input, "type", input_type_value = /*radio*/ ctx[15] ? "radio" : "checkbox");
  			add_location(input, file$b, 857, 12, 31236);
  			attr_dev(i, "class", i_class_value = `icon icon-${/*radio*/ ctx[15] ? "radio" : "checkbox"}`);
  			add_location(i, file$b, 868, 12, 31613);
  			attr_dev(div, "class", "item-inner");
  			add_location(div, file$b, 877, 12, 31937);
  			attr_dev(label, "class", /*contentClasses*/ ctx[32]);
  			add_location(label, file$b, 852, 10, 30994);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, label, anchor);

  			if (content_start_slot) {
  				content_start_slot.m(label, null);
  			}

  			append_dev(label, t0);
  			if (if_block0) if_block0.m(label, null);
  			append_dev(label, t1);
  			append_dev(label, input);
  			/*input_binding_1*/ ctx[76](input);
  			append_dev(label, t2);
  			append_dev(label, i);
  			append_dev(label, t3);
  			if (if_block1) if_block1.m(label, null);
  			append_dev(label, t4);
  			append_dev(label, div);

  			if (inner_start_slot) {
  				inner_start_slot.m(div, null);
  			}

  			append_dev(div, t5);
  			if_blocks[current_block_type_index].m(div, null);
  			append_dev(div, t6);

  			if (inner_end_slot) {
  				inner_end_slot.m(div, null);
  			}

  			/*div_binding_1*/ ctx[77](div);
  			append_dev(label, t7);

  			if (content_slot) {
  				content_slot.m(label, null);
  			}

  			append_dev(label, t8);

  			if (content_end_slot) {
  				content_end_slot.m(label, null);
  			}

  			current = true;

  			if (!mounted) {
  				dispose = [
  					listen_dev(input, "change", /*onChange*/ ctx[44], false, false, false),
  					listen_dev(label, "click", /*onClick*/ ctx[43], false, false, false)
  				];

  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (content_start_slot) {
  				if (content_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_start_slot_changes_4, get_content_start_slot_context_4);
  				}
  			}

  			if (/*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29]) {
  				if (if_block0) ; else {
  					if_block0 = create_if_block_108(ctx);
  					if_block0.c();
  					if_block0.m(label, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (!current || dirty[0] & /*value*/ 262144 && input_value_value !== (input_value_value = typeof /*value*/ ctx[18] === "undefined"
  			? ""
  			: /*value*/ ctx[18]) && input.value !== input_value_value) {
  				prop_dev(input, "value", input_value_value);
  			}

  			if (!current || dirty[0] & /*name*/ 131072) {
  				attr_dev(input, "name", /*name*/ ctx[17]);
  			}

  			if (!current || dirty[0] & /*checked*/ 65536) {
  				prop_dev(input, "checked", /*checked*/ ctx[16]);
  			}

  			if (!current || dirty[0] & /*readonly*/ 524288) {
  				prop_dev(input, "readOnly", /*readonly*/ ctx[19]);
  			}

  			if (!current || dirty[0] & /*disabled*/ 2097152) {
  				prop_dev(input, "disabled", /*disabled*/ ctx[21]);
  			}

  			if (!current || dirty[0] & /*required*/ 1048576) {
  				prop_dev(input, "required", /*required*/ ctx[20]);
  			}

  			if (!current || dirty[0] & /*radio*/ 32768 && input_type_value !== (input_type_value = /*radio*/ ctx[15] ? "radio" : "checkbox")) {
  				attr_dev(input, "type", input_type_value);
  			}

  			if (!current || dirty[0] & /*radio*/ 32768 && i_class_value !== (i_class_value = `icon icon-${/*radio*/ ctx[15] ? "radio" : "checkbox"}`)) {
  				attr_dev(i, "class", i_class_value);
  			}

  			if (/*hasMedia*/ ctx[36]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasMedia*/ 32) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_106(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(label, t4);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_start_slot) {
  				if (inner_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_start_slot_changes_4, get_inner_start_slot_context_4);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_9(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block2 = if_blocks[current_block_type_index];

  				if (!if_block2) {
  					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block2.c();
  				}

  				transition_in(if_block2, 1);
  				if_block2.m(div, t6);
  			}

  			if (inner_end_slot) {
  				if (inner_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_end_slot_changes_4, get_inner_end_slot_context_4);
  				}
  			}

  			if (content_slot) {
  				if (content_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_slot_changes_4, get_content_slot_context_4);
  				}
  			}

  			if (content_end_slot) {
  				if (content_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_end_slot_changes_4, get_content_end_slot_context_4);
  				}
  			}

  			if (!current || dirty[1] & /*contentClasses*/ 2) {
  				attr_dev(label, "class", /*contentClasses*/ ctx[32]);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(content_start_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_start_slot, local);
  			transition_in(if_block2);
  			transition_in(inner_end_slot, local);
  			transition_in(content_slot, local);
  			transition_in(content_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(content_start_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_start_slot, local);
  			transition_out(if_block2);
  			transition_out(inner_end_slot, local);
  			transition_out(content_slot, local);
  			transition_out(content_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(label);
  			if (content_start_slot) content_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			/*input_binding_1*/ ctx[76](null);
  			if (if_block1) if_block1.d();
  			if (inner_start_slot) inner_start_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (inner_end_slot) inner_end_slot.d(detaching);
  			/*div_binding_1*/ ctx[77](null);
  			if (content_slot) content_slot.d(detaching);
  			if (content_end_slot) content_end_slot.d(detaching);
  			mounted = false;
  			run_all(dispose);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_88.name,
  		type: "if",
  		source: "(852:8) {#if checkbox || radio}",
  		ctx
  	});

  	return block;
  }

  // (979:12) {#if isSortable && sortable !== false && isSortableOpposite}
  function create_if_block_128(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "sortable-handler");
  			add_location(div, file$b, 979, 14, 35841);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_128.name,
  		type: "if",
  		source: "(979:12) {#if isSortable && sortable !== false && isSortableOpposite}",
  		ctx
  	});

  	return block;
  }

  // (982:12) {#if hasMedia}
  function create_if_block_126(ctx) {
  	let div;
  	let t;
  	let current;
  	let if_block = typeof /*media*/ ctx[2] !== "undefined" && create_if_block_127(ctx);
  	const media_slot_template = /*#slots*/ ctx[66].media;
  	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[80], get_media_slot_context_5);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block) if_block.c();
  			t = space();
  			if (media_slot) media_slot.c();
  			attr_dev(div, "class", "item-media");
  			add_location(div, file$b, 982, 14, 35933);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block) if_block.m(div, null);
  			append_dev(div, t);

  			if (media_slot) {
  				media_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (typeof /*media*/ ctx[2] !== "undefined") {
  				if (if_block) {
  					if_block.p(ctx, dirty);
  				} else {
  					if_block = create_if_block_127(ctx);
  					if_block.c();
  					if_block.m(div, t);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			if (media_slot) {
  				if (media_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_media_slot_changes_5, get_media_slot_context_5);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(media_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(media_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block) if_block.d();
  			if (media_slot) media_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_126.name,
  		type: "if",
  		source: "(982:12) {#if hasMedia}",
  		ctx
  	});

  	return block;
  }

  // (984:16) {#if typeof media !== 'undefined'}
  function create_if_block_127(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			if (img.src !== (img_src_value = /*media*/ ctx[2])) attr_dev(img, "src", img_src_value);
  			add_location(img, file$b, 984, 18, 36027);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*media*/ 4 && img.src !== (img_src_value = /*media*/ ctx[2])) {
  				attr_dev(img, "src", img_src_value);
  			}
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_127.name,
  		type: "if",
  		source: "(984:16) {#if typeof media !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (1044:14) {:else}
  function create_else_block_10(ctx) {
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let if_block2_anchor;
  	let current;
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_11);
  	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) && create_if_block_123(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_11);
  	let if_block1 = /*hasAfter*/ ctx[42] && create_if_block_120(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_11);
  	let if_block2 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_119(ctx);

  	const block = {
  		c: function create() {
  			if (before_title_slot) before_title_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (after_title_slot) after_title_slot.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (inner_slot) inner_slot.c();
  			t4 = space();
  			if (if_block2) if_block2.c();
  			if_block2_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if (before_title_slot) {
  				before_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t0, anchor);
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t1, anchor);

  			if (after_title_slot) {
  				after_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t2, anchor);
  			if (if_block1) if_block1.m(target, anchor);
  			insert_dev(target, t3, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t4, anchor);
  			if (if_block2) if_block2.m(target, anchor);
  			insert_dev(target, if_block2_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_11, get_before_title_slot_context_11);
  				}
  			}

  			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 448) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_123(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t1.parentNode, t1);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_11, get_after_title_slot_context_11);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_120(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(t3.parentNode, t3);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_11, get_inner_slot_context_11);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_119(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_title_slot, local);
  			transition_in(if_block0);
  			transition_in(after_title_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_slot, local);
  			transition_in(if_block2);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_title_slot, local);
  			transition_out(if_block0);
  			transition_out(after_title_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_slot, local);
  			transition_out(if_block2);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t1);
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (detaching) detach_dev(t2);
  			if (if_block1) if_block1.d(detaching);
  			if (detaching) detach_dev(t3);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t4);
  			if (if_block2) if_block2.d(detaching);
  			if (detaching) detach_dev(if_block2_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_10.name,
  		type: "else",
  		source: "(1044:14) {:else}",
  		ctx
  	});

  	return block;
  }

  // (992:14) {#if isMedia}
  function create_if_block_109(ctx) {
  	let t0;
  	let div;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let t5;
  	let t6;
  	let t7;
  	let t8;
  	let if_block6_anchor;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_118(ctx);
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_10);
  	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_117(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_10);
  	let if_block2 = /*hasAfter*/ ctx[42] && create_if_block_114(ctx);
  	let if_block3 = /*hasSubtitle*/ ctx[40] && create_if_block_113(ctx);
  	let if_block4 = /*hasText*/ ctx[41] && create_if_block_112(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_10);
  	let if_block5 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_111(ctx);
  	let if_block6 = /*hasFooter*/ ctx[39] && create_if_block_110(ctx);

  	const block = {
  		c: function create() {
  			if (if_block0) if_block0.c();
  			t0 = space();
  			div = element("div");
  			if (before_title_slot) before_title_slot.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_title_slot) after_title_slot.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (if_block3) if_block3.c();
  			t5 = space();
  			if (if_block4) if_block4.c();
  			t6 = space();
  			if (inner_slot) inner_slot.c();
  			t7 = space();
  			if (if_block5) if_block5.c();
  			t8 = space();
  			if (if_block6) if_block6.c();
  			if_block6_anchor = empty$1();
  			attr_dev(div, "class", "item-title-row");
  			add_location(div, file$b, 998, 16, 36496);
  		},
  		m: function mount(target, anchor) {
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div, anchor);

  			if (before_title_slot) {
  				before_title_slot.m(div, null);
  			}

  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_title_slot) {
  				after_title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block2) if_block2.m(div, null);
  			insert_dev(target, t4, anchor);
  			if (if_block3) if_block3.m(target, anchor);
  			insert_dev(target, t5, anchor);
  			if (if_block4) if_block4.m(target, anchor);
  			insert_dev(target, t6, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t7, anchor);
  			if (if_block5) if_block5.m(target, anchor);
  			insert_dev(target, t8, anchor);
  			if (if_block6) if_block6.m(target, anchor);
  			insert_dev(target, if_block6_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_118(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t0.parentNode, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_10, get_before_title_slot_context_10);
  				}
  			}

  			if (/*hasTitle*/ ctx[37]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle*/ 64) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_117(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_10, get_after_title_slot_context_10);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_114(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, null);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*hasSubtitle*/ ctx[40]) {
  				if (if_block3) {
  					if_block3.p(ctx, dirty);

  					if (dirty[1] & /*hasSubtitle*/ 512) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block_113(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(t5.parentNode, t5);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			if (/*hasText*/ ctx[41]) {
  				if (if_block4) {
  					if_block4.p(ctx, dirty);

  					if (dirty[1] & /*hasText*/ 1024) {
  						transition_in(if_block4, 1);
  					}
  				} else {
  					if_block4 = create_if_block_112(ctx);
  					if_block4.c();
  					transition_in(if_block4, 1);
  					if_block4.m(t6.parentNode, t6);
  				}
  			} else if (if_block4) {
  				group_outros();

  				transition_out(if_block4, 1, 1, () => {
  					if_block4 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_10, get_inner_slot_context_10);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block5) {
  					if_block5.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block5, 1);
  					}
  				} else {
  					if_block5 = create_if_block_111(ctx);
  					if_block5.c();
  					transition_in(if_block5, 1);
  					if_block5.m(t8.parentNode, t8);
  				}
  			} else if (if_block5) {
  				group_outros();

  				transition_out(if_block5, 1, 1, () => {
  					if_block5 = null;
  				});

  				check_outros();
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block6) {
  					if_block6.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block6, 1);
  					}
  				} else {
  					if_block6 = create_if_block_110(ctx);
  					if_block6.c();
  					transition_in(if_block6, 1);
  					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
  				}
  			} else if (if_block6) {
  				group_outros();

  				transition_out(if_block6, 1, 1, () => {
  					if_block6 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(before_title_slot, local);
  			transition_in(if_block1);
  			transition_in(after_title_slot, local);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			transition_in(if_block4);
  			transition_in(inner_slot, local);
  			transition_in(if_block5);
  			transition_in(if_block6);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(before_title_slot, local);
  			transition_out(if_block1);
  			transition_out(after_title_slot, local);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			transition_out(if_block4);
  			transition_out(inner_slot, local);
  			transition_out(if_block5);
  			transition_out(if_block6);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div);
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (if_block2) if_block2.d();
  			if (detaching) detach_dev(t4);
  			if (if_block3) if_block3.d(detaching);
  			if (detaching) detach_dev(t5);
  			if (if_block4) if_block4.d(detaching);
  			if (detaching) detach_dev(t6);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t7);
  			if (if_block5) if_block5.d(detaching);
  			if (detaching) detach_dev(t8);
  			if (if_block6) if_block6.d(detaching);
  			if (detaching) detach_dev(if_block6_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_109.name,
  		type: "if",
  		source: "(992:14) {#if isMedia}",
  		ctx
  	});

  	return block;
  }

  // (1046:16) {#if (hasTitle || hasHeader || hasFooter)}
  function create_if_block_123(ctx) {
  	let div;
  	let t0;
  	let t1_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_125(ctx);
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_11);
  	let if_block1 = /*hasFooter*/ ctx[39] && create_if_block_124(ctx);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			t1 = text$1(t1_value);
  			t2 = space();
  			if (title_slot) title_slot.c();
  			t3 = space();
  			if (if_block1) if_block1.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 1046, 18, 38337);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			append_dev(div, t1);
  			append_dev(div, t2);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block1) if_block1.m(div, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_125(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if ((!current || dirty[0] & /*title*/ 1) && t1_value !== (t1_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_11, get_title_slot_context_11);
  				}
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_124(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, null);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(title_slot, local);
  			transition_in(if_block1);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(title_slot, local);
  			transition_out(if_block1);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (title_slot) title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_123.name,
  		type: "if",
  		source: "(1046:16) {#if (hasTitle || hasHeader || hasFooter)}",
  		ctx
  	});

  	return block;
  }

  // (1048:20) {#if hasHeader}
  function create_if_block_125(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_11);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 1048, 22, 38420);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_11, get_header_slot_context_11);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_125.name,
  		type: "if",
  		source: "(1048:20) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (1056:20) {#if hasFooter}
  function create_if_block_124(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_11);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 1056, 22, 38733);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_11, get_footer_slot_context_11);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_124.name,
  		type: "if",
  		source: "(1056:20) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (1065:16) {#if hasAfter}
  function create_if_block_120(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_11);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_122(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_121(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_11);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_11);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 1065, 18, 39046);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_11, get_after_start_slot_context_11);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_122(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_121(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_11, get_after_slot_context_11);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_11, get_after_end_slot_context_11);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_120.name,
  		type: "if",
  		source: "(1065:16) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (1068:20) {#if typeof after !== 'undefined'}
  function create_if_block_122(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 1068, 22, 39196);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_122.name,
  		type: "if",
  		source: "(1068:20) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (1071:20) {#if typeof badge !== 'undefined'}
  function create_if_block_121(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_11] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_121.name,
  		type: "if",
  		source: "(1071:20) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (1072:22) <Badge color={badgeColor}>
  function create_default_slot_11(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_11.name,
  		type: "slot",
  		source: "(1072:22) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (1079:16) {#if !(swipeout || accordionItem)}
  function create_if_block_119(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_119.name,
  		type: "if",
  		source: "(1079:16) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (993:16) {#if hasHeader}
  function create_if_block_118(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_10);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 993, 18, 36323);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_10, get_header_slot_context_10);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_118.name,
  		type: "if",
  		source: "(993:16) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (1001:18) {#if (hasTitle)}
  function create_if_block_117(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_10);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (title_slot) title_slot.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 1001, 20, 36627);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_10, get_title_slot_context_10);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (title_slot) title_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_117.name,
  		type: "if",
  		source: "(1001:18) {#if (hasTitle)}",
  		ctx
  	});

  	return block;
  }

  // (1008:18) {#if hasAfter}
  function create_if_block_114(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_10);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_116(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_115(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_10);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_10);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 1008, 20, 36888);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_10, get_after_start_slot_context_10);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_116(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_115(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_10, get_after_slot_context_10);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_10, get_after_end_slot_context_10);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_114.name,
  		type: "if",
  		source: "(1008:18) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (1011:22) {#if typeof after !== 'undefined'}
  function create_if_block_116(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 1011, 24, 37044);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_116.name,
  		type: "if",
  		source: "(1011:22) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (1014:22) {#if typeof badge !== 'undefined'}
  function create_if_block_115(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_10] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_115.name,
  		type: "if",
  		source: "(1014:22) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (1015:24) <Badge color={badgeColor}>
  function create_default_slot_10(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_10.name,
  		type: "slot",
  		source: "(1015:24) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (1022:16) {#if hasSubtitle}
  function create_if_block_113(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "";
  	let t0;
  	let t1;
  	let current;
  	const subtitle_slot_template = /*#slots*/ ctx[66].subtitle;
  	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[80], get_subtitle_slot_context_5);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (subtitle_slot) subtitle_slot.c();
  			attr_dev(div, "class", "item-subtitle");
  			add_location(div, file$b, 1022, 18, 37486);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (subtitle_slot) {
  				subtitle_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*subtitle*/ 8) && t0_value !== (t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "")) set_data_dev(t0, t0_value);

  			if (subtitle_slot) {
  				if (subtitle_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(subtitle_slot, subtitle_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_subtitle_slot_changes_5, get_subtitle_slot_context_5);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(subtitle_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(subtitle_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (subtitle_slot) subtitle_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_113.name,
  		type: "if",
  		source: "(1022:16) {#if hasSubtitle}",
  		ctx
  	});

  	return block;
  }

  // (1028:16) {#if hasText}
  function create_if_block_112(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*text*/ ctx[1]) + "";
  	let t0;
  	let t1;
  	let current;
  	const text_slot_template = /*#slots*/ ctx[66].text;
  	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[80], get_text_slot_context_5);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (text_slot) text_slot.c();
  			attr_dev(div, "class", "item-text");
  			add_location(div, file$b, 1028, 18, 37697);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (text_slot) {
  				text_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*text*/ 2) && t0_value !== (t0_value = Utils$1.text(/*text*/ ctx[1]) + "")) set_data_dev(t0, t0_value);

  			if (text_slot) {
  				if (text_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_text_slot_changes_5, get_text_slot_context_5);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(text_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(text_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (text_slot) text_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_112.name,
  		type: "if",
  		source: "(1028:16) {#if hasText}",
  		ctx
  	});

  	return block;
  }

  // (1035:16) {#if !(swipeout || accordionItem)}
  function create_if_block_111(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_111.name,
  		type: "if",
  		source: "(1035:16) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (1038:16) {#if hasFooter}
  function create_if_block_110(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_10);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 1038, 18, 38036);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_10, get_footer_slot_context_10);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_110.name,
  		type: "if",
  		source: "(1038:16) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (855:12) {#if isSortable && sortable !== false && isSortableOpposite}
  function create_if_block_108(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "sortable-handler");
  			add_location(div, file$b, 855, 14, 31173);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_108.name,
  		type: "if",
  		source: "(855:12) {#if isSortable && sortable !== false && isSortableOpposite}",
  		ctx
  	});

  	return block;
  }

  // (870:12) {#if hasMedia}
  function create_if_block_106(ctx) {
  	let div;
  	let t;
  	let current;
  	let if_block = typeof /*media*/ ctx[2] !== "undefined" && create_if_block_107(ctx);
  	const media_slot_template = /*#slots*/ ctx[66].media;
  	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[80], get_media_slot_context_4);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block) if_block.c();
  			t = space();
  			if (media_slot) media_slot.c();
  			attr_dev(div, "class", "item-media");
  			add_location(div, file$b, 870, 14, 31712);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block) if_block.m(div, null);
  			append_dev(div, t);

  			if (media_slot) {
  				media_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (typeof /*media*/ ctx[2] !== "undefined") {
  				if (if_block) {
  					if_block.p(ctx, dirty);
  				} else {
  					if_block = create_if_block_107(ctx);
  					if_block.c();
  					if_block.m(div, t);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			if (media_slot) {
  				if (media_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_media_slot_changes_4, get_media_slot_context_4);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(media_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(media_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block) if_block.d();
  			if (media_slot) media_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_106.name,
  		type: "if",
  		source: "(870:12) {#if hasMedia}",
  		ctx
  	});

  	return block;
  }

  // (872:16) {#if typeof media !== 'undefined'}
  function create_if_block_107(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			if (img.src !== (img_src_value = /*media*/ ctx[2])) attr_dev(img, "src", img_src_value);
  			add_location(img, file$b, 872, 18, 31806);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*media*/ 4 && img.src !== (img_src_value = /*media*/ ctx[2])) {
  				attr_dev(img, "src", img_src_value);
  			}
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_107.name,
  		type: "if",
  		source: "(872:16) {#if typeof media !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (932:14) {:else}
  function create_else_block_8(ctx) {
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let if_block2_anchor;
  	let current;
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_9);
  	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) && create_if_block_103(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_9);
  	let if_block1 = /*hasAfter*/ ctx[42] && create_if_block_100(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_9);
  	let if_block2 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_99(ctx);

  	const block = {
  		c: function create() {
  			if (before_title_slot) before_title_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (after_title_slot) after_title_slot.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (inner_slot) inner_slot.c();
  			t4 = space();
  			if (if_block2) if_block2.c();
  			if_block2_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if (before_title_slot) {
  				before_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t0, anchor);
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t1, anchor);

  			if (after_title_slot) {
  				after_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t2, anchor);
  			if (if_block1) if_block1.m(target, anchor);
  			insert_dev(target, t3, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t4, anchor);
  			if (if_block2) if_block2.m(target, anchor);
  			insert_dev(target, if_block2_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_9, get_before_title_slot_context_9);
  				}
  			}

  			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 448) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_103(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t1.parentNode, t1);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_9, get_after_title_slot_context_9);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_100(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(t3.parentNode, t3);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_9, get_inner_slot_context_9);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_99(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_title_slot, local);
  			transition_in(if_block0);
  			transition_in(after_title_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_slot, local);
  			transition_in(if_block2);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_title_slot, local);
  			transition_out(if_block0);
  			transition_out(after_title_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_slot, local);
  			transition_out(if_block2);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t1);
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (detaching) detach_dev(t2);
  			if (if_block1) if_block1.d(detaching);
  			if (detaching) detach_dev(t3);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t4);
  			if (if_block2) if_block2.d(detaching);
  			if (detaching) detach_dev(if_block2_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_8.name,
  		type: "else",
  		source: "(932:14) {:else}",
  		ctx
  	});

  	return block;
  }

  // (880:14) {#if isMedia}
  function create_if_block_89(ctx) {
  	let t0;
  	let div;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let t5;
  	let t6;
  	let t7;
  	let t8;
  	let if_block6_anchor;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_98(ctx);
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_8);
  	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_97(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_8);
  	let if_block2 = /*hasAfter*/ ctx[42] && create_if_block_94(ctx);
  	let if_block3 = /*hasSubtitle*/ ctx[40] && create_if_block_93(ctx);
  	let if_block4 = /*hasText*/ ctx[41] && create_if_block_92(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_8);
  	let if_block5 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_91(ctx);
  	let if_block6 = /*hasFooter*/ ctx[39] && create_if_block_90(ctx);

  	const block = {
  		c: function create() {
  			if (if_block0) if_block0.c();
  			t0 = space();
  			div = element("div");
  			if (before_title_slot) before_title_slot.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_title_slot) after_title_slot.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (if_block3) if_block3.c();
  			t5 = space();
  			if (if_block4) if_block4.c();
  			t6 = space();
  			if (inner_slot) inner_slot.c();
  			t7 = space();
  			if (if_block5) if_block5.c();
  			t8 = space();
  			if (if_block6) if_block6.c();
  			if_block6_anchor = empty$1();
  			attr_dev(div, "class", "item-title-row");
  			add_location(div, file$b, 886, 16, 32275);
  		},
  		m: function mount(target, anchor) {
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div, anchor);

  			if (before_title_slot) {
  				before_title_slot.m(div, null);
  			}

  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_title_slot) {
  				after_title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block2) if_block2.m(div, null);
  			insert_dev(target, t4, anchor);
  			if (if_block3) if_block3.m(target, anchor);
  			insert_dev(target, t5, anchor);
  			if (if_block4) if_block4.m(target, anchor);
  			insert_dev(target, t6, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t7, anchor);
  			if (if_block5) if_block5.m(target, anchor);
  			insert_dev(target, t8, anchor);
  			if (if_block6) if_block6.m(target, anchor);
  			insert_dev(target, if_block6_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_98(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t0.parentNode, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_8, get_before_title_slot_context_8);
  				}
  			}

  			if (/*hasTitle*/ ctx[37]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle*/ 64) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_97(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_8, get_after_title_slot_context_8);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_94(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, null);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*hasSubtitle*/ ctx[40]) {
  				if (if_block3) {
  					if_block3.p(ctx, dirty);

  					if (dirty[1] & /*hasSubtitle*/ 512) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block_93(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(t5.parentNode, t5);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			if (/*hasText*/ ctx[41]) {
  				if (if_block4) {
  					if_block4.p(ctx, dirty);

  					if (dirty[1] & /*hasText*/ 1024) {
  						transition_in(if_block4, 1);
  					}
  				} else {
  					if_block4 = create_if_block_92(ctx);
  					if_block4.c();
  					transition_in(if_block4, 1);
  					if_block4.m(t6.parentNode, t6);
  				}
  			} else if (if_block4) {
  				group_outros();

  				transition_out(if_block4, 1, 1, () => {
  					if_block4 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_8, get_inner_slot_context_8);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block5) {
  					if_block5.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block5, 1);
  					}
  				} else {
  					if_block5 = create_if_block_91(ctx);
  					if_block5.c();
  					transition_in(if_block5, 1);
  					if_block5.m(t8.parentNode, t8);
  				}
  			} else if (if_block5) {
  				group_outros();

  				transition_out(if_block5, 1, 1, () => {
  					if_block5 = null;
  				});

  				check_outros();
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block6) {
  					if_block6.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block6, 1);
  					}
  				} else {
  					if_block6 = create_if_block_90(ctx);
  					if_block6.c();
  					transition_in(if_block6, 1);
  					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
  				}
  			} else if (if_block6) {
  				group_outros();

  				transition_out(if_block6, 1, 1, () => {
  					if_block6 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(before_title_slot, local);
  			transition_in(if_block1);
  			transition_in(after_title_slot, local);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			transition_in(if_block4);
  			transition_in(inner_slot, local);
  			transition_in(if_block5);
  			transition_in(if_block6);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(before_title_slot, local);
  			transition_out(if_block1);
  			transition_out(after_title_slot, local);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			transition_out(if_block4);
  			transition_out(inner_slot, local);
  			transition_out(if_block5);
  			transition_out(if_block6);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div);
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (if_block2) if_block2.d();
  			if (detaching) detach_dev(t4);
  			if (if_block3) if_block3.d(detaching);
  			if (detaching) detach_dev(t5);
  			if (if_block4) if_block4.d(detaching);
  			if (detaching) detach_dev(t6);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t7);
  			if (if_block5) if_block5.d(detaching);
  			if (detaching) detach_dev(t8);
  			if (if_block6) if_block6.d(detaching);
  			if (detaching) detach_dev(if_block6_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_89.name,
  		type: "if",
  		source: "(880:14) {#if isMedia}",
  		ctx
  	});

  	return block;
  }

  // (934:16) {#if (hasTitle || hasHeader || hasFooter)}
  function create_if_block_103(ctx) {
  	let div;
  	let t0;
  	let t1_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_105(ctx);
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_9);
  	let if_block1 = /*hasFooter*/ ctx[39] && create_if_block_104(ctx);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			t1 = text$1(t1_value);
  			t2 = space();
  			if (title_slot) title_slot.c();
  			t3 = space();
  			if (if_block1) if_block1.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 934, 18, 34116);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			append_dev(div, t1);
  			append_dev(div, t2);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block1) if_block1.m(div, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_105(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if ((!current || dirty[0] & /*title*/ 1) && t1_value !== (t1_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_9, get_title_slot_context_9);
  				}
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_104(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, null);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(title_slot, local);
  			transition_in(if_block1);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(title_slot, local);
  			transition_out(if_block1);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (title_slot) title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_103.name,
  		type: "if",
  		source: "(934:16) {#if (hasTitle || hasHeader || hasFooter)}",
  		ctx
  	});

  	return block;
  }

  // (936:20) {#if hasHeader}
  function create_if_block_105(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_9);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 936, 22, 34199);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_9, get_header_slot_context_9);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_105.name,
  		type: "if",
  		source: "(936:20) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (944:20) {#if hasFooter}
  function create_if_block_104(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_9);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 944, 22, 34512);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_9, get_footer_slot_context_9);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_104.name,
  		type: "if",
  		source: "(944:20) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (953:16) {#if hasAfter}
  function create_if_block_100(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_9);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_102(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_101(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_9);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_9);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 953, 18, 34825);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_9, get_after_start_slot_context_9);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_102(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_101(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_9, get_after_slot_context_9);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_9, get_after_end_slot_context_9);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_100.name,
  		type: "if",
  		source: "(953:16) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (956:20) {#if typeof after !== 'undefined'}
  function create_if_block_102(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 956, 22, 34975);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_102.name,
  		type: "if",
  		source: "(956:20) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (959:20) {#if typeof badge !== 'undefined'}
  function create_if_block_101(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_9] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_101.name,
  		type: "if",
  		source: "(959:20) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (960:22) <Badge color={badgeColor}>
  function create_default_slot_9(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_9.name,
  		type: "slot",
  		source: "(960:22) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (967:16) {#if !(swipeout || accordionItem)}
  function create_if_block_99(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_99.name,
  		type: "if",
  		source: "(967:16) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (881:16) {#if hasHeader}
  function create_if_block_98(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_8);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 881, 18, 32102);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_8, get_header_slot_context_8);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_98.name,
  		type: "if",
  		source: "(881:16) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (889:18) {#if (hasTitle)}
  function create_if_block_97(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_8);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (title_slot) title_slot.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 889, 20, 32406);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_8, get_title_slot_context_8);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (title_slot) title_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_97.name,
  		type: "if",
  		source: "(889:18) {#if (hasTitle)}",
  		ctx
  	});

  	return block;
  }

  // (896:18) {#if hasAfter}
  function create_if_block_94(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_8);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_96(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_95(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_8);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_8);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 896, 20, 32667);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_8, get_after_start_slot_context_8);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_96(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_95(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_8, get_after_slot_context_8);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_8, get_after_end_slot_context_8);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_94.name,
  		type: "if",
  		source: "(896:18) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (899:22) {#if typeof after !== 'undefined'}
  function create_if_block_96(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 899, 24, 32823);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_96.name,
  		type: "if",
  		source: "(899:22) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (902:22) {#if typeof badge !== 'undefined'}
  function create_if_block_95(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_8] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_95.name,
  		type: "if",
  		source: "(902:22) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (903:24) <Badge color={badgeColor}>
  function create_default_slot_8(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_8.name,
  		type: "slot",
  		source: "(903:24) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (910:16) {#if hasSubtitle}
  function create_if_block_93(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "";
  	let t0;
  	let t1;
  	let current;
  	const subtitle_slot_template = /*#slots*/ ctx[66].subtitle;
  	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[80], get_subtitle_slot_context_4);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (subtitle_slot) subtitle_slot.c();
  			attr_dev(div, "class", "item-subtitle");
  			add_location(div, file$b, 910, 18, 33265);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (subtitle_slot) {
  				subtitle_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*subtitle*/ 8) && t0_value !== (t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "")) set_data_dev(t0, t0_value);

  			if (subtitle_slot) {
  				if (subtitle_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(subtitle_slot, subtitle_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_subtitle_slot_changes_4, get_subtitle_slot_context_4);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(subtitle_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(subtitle_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (subtitle_slot) subtitle_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_93.name,
  		type: "if",
  		source: "(910:16) {#if hasSubtitle}",
  		ctx
  	});

  	return block;
  }

  // (916:16) {#if hasText}
  function create_if_block_92(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*text*/ ctx[1]) + "";
  	let t0;
  	let t1;
  	let current;
  	const text_slot_template = /*#slots*/ ctx[66].text;
  	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[80], get_text_slot_context_4);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (text_slot) text_slot.c();
  			attr_dev(div, "class", "item-text");
  			add_location(div, file$b, 916, 18, 33476);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (text_slot) {
  				text_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*text*/ 2) && t0_value !== (t0_value = Utils$1.text(/*text*/ ctx[1]) + "")) set_data_dev(t0, t0_value);

  			if (text_slot) {
  				if (text_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_text_slot_changes_4, get_text_slot_context_4);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(text_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(text_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (text_slot) text_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_92.name,
  		type: "if",
  		source: "(916:16) {#if hasText}",
  		ctx
  	});

  	return block;
  }

  // (923:16) {#if !(swipeout || accordionItem)}
  function create_if_block_91(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_91.name,
  		type: "if",
  		source: "(923:16) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (926:16) {#if hasFooter}
  function create_if_block_90(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_8);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 926, 18, 33815);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_8, get_footer_slot_context_8);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_90.name,
  		type: "if",
  		source: "(926:16) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (739:12) {#if isSortable && sortable !== false && isSortableOpposite}
  function create_if_block_87(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "sortable-handler");
  			add_location(div, file$b, 739, 14, 26837);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_87.name,
  		type: "if",
  		source: "(739:12) {#if isSortable && sortable !== false && isSortableOpposite}",
  		ctx
  	});

  	return block;
  }

  // (742:12) {#if hasMedia}
  function create_if_block_85(ctx) {
  	let div;
  	let t;
  	let current;
  	let if_block = typeof /*media*/ ctx[2] !== "undefined" && create_if_block_86(ctx);
  	const media_slot_template = /*#slots*/ ctx[66].media;
  	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[80], get_media_slot_context_3);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block) if_block.c();
  			t = space();
  			if (media_slot) media_slot.c();
  			attr_dev(div, "class", "item-media");
  			add_location(div, file$b, 742, 14, 26929);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block) if_block.m(div, null);
  			append_dev(div, t);

  			if (media_slot) {
  				media_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (typeof /*media*/ ctx[2] !== "undefined") {
  				if (if_block) {
  					if_block.p(ctx, dirty);
  				} else {
  					if_block = create_if_block_86(ctx);
  					if_block.c();
  					if_block.m(div, t);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			if (media_slot) {
  				if (media_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_media_slot_changes_3, get_media_slot_context_3);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(media_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(media_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block) if_block.d();
  			if (media_slot) media_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_85.name,
  		type: "if",
  		source: "(742:12) {#if hasMedia}",
  		ctx
  	});

  	return block;
  }

  // (744:16) {#if typeof media !== 'undefined'}
  function create_if_block_86(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			if (img.src !== (img_src_value = /*media*/ ctx[2])) attr_dev(img, "src", img_src_value);
  			add_location(img, file$b, 744, 18, 27023);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*media*/ 4 && img.src !== (img_src_value = /*media*/ ctx[2])) {
  				attr_dev(img, "src", img_src_value);
  			}
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_86.name,
  		type: "if",
  		source: "(744:16) {#if typeof media !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (804:14) {:else}
  function create_else_block_6(ctx) {
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let if_block2_anchor;
  	let current;
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_7);
  	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) && create_if_block_82(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_7);
  	let if_block1 = /*hasAfter*/ ctx[42] && create_if_block_79(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_7);
  	let if_block2 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_78(ctx);

  	const block = {
  		c: function create() {
  			if (before_title_slot) before_title_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (after_title_slot) after_title_slot.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (inner_slot) inner_slot.c();
  			t4 = space();
  			if (if_block2) if_block2.c();
  			if_block2_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if (before_title_slot) {
  				before_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t0, anchor);
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t1, anchor);

  			if (after_title_slot) {
  				after_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t2, anchor);
  			if (if_block1) if_block1.m(target, anchor);
  			insert_dev(target, t3, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t4, anchor);
  			if (if_block2) if_block2.m(target, anchor);
  			insert_dev(target, if_block2_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_7, get_before_title_slot_context_7);
  				}
  			}

  			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 448) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_82(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t1.parentNode, t1);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_7, get_after_title_slot_context_7);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_79(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(t3.parentNode, t3);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_7, get_inner_slot_context_7);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_78(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_title_slot, local);
  			transition_in(if_block0);
  			transition_in(after_title_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_slot, local);
  			transition_in(if_block2);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_title_slot, local);
  			transition_out(if_block0);
  			transition_out(after_title_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_slot, local);
  			transition_out(if_block2);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t1);
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (detaching) detach_dev(t2);
  			if (if_block1) if_block1.d(detaching);
  			if (detaching) detach_dev(t3);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t4);
  			if (if_block2) if_block2.d(detaching);
  			if (detaching) detach_dev(if_block2_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_6.name,
  		type: "else",
  		source: "(804:14) {:else}",
  		ctx
  	});

  	return block;
  }

  // (752:14) {#if isMedia}
  function create_if_block_68(ctx) {
  	let t0;
  	let div;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let t5;
  	let t6;
  	let t7;
  	let t8;
  	let if_block6_anchor;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_77(ctx);
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_6);
  	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_76(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_6);
  	let if_block2 = /*hasAfter*/ ctx[42] && create_if_block_73(ctx);
  	let if_block3 = /*hasSubtitle*/ ctx[40] && create_if_block_72(ctx);
  	let if_block4 = /*hasText*/ ctx[41] && create_if_block_71(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_6);
  	let if_block5 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_70(ctx);
  	let if_block6 = /*hasFooter*/ ctx[39] && create_if_block_69(ctx);

  	const block = {
  		c: function create() {
  			if (if_block0) if_block0.c();
  			t0 = space();
  			div = element("div");
  			if (before_title_slot) before_title_slot.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_title_slot) after_title_slot.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (if_block3) if_block3.c();
  			t5 = space();
  			if (if_block4) if_block4.c();
  			t6 = space();
  			if (inner_slot) inner_slot.c();
  			t7 = space();
  			if (if_block5) if_block5.c();
  			t8 = space();
  			if (if_block6) if_block6.c();
  			if_block6_anchor = empty$1();
  			attr_dev(div, "class", "item-title-row");
  			add_location(div, file$b, 758, 16, 27492);
  		},
  		m: function mount(target, anchor) {
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div, anchor);

  			if (before_title_slot) {
  				before_title_slot.m(div, null);
  			}

  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_title_slot) {
  				after_title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block2) if_block2.m(div, null);
  			insert_dev(target, t4, anchor);
  			if (if_block3) if_block3.m(target, anchor);
  			insert_dev(target, t5, anchor);
  			if (if_block4) if_block4.m(target, anchor);
  			insert_dev(target, t6, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t7, anchor);
  			if (if_block5) if_block5.m(target, anchor);
  			insert_dev(target, t8, anchor);
  			if (if_block6) if_block6.m(target, anchor);
  			insert_dev(target, if_block6_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_77(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t0.parentNode, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_6, get_before_title_slot_context_6);
  				}
  			}

  			if (/*hasTitle*/ ctx[37]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle*/ 64) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_76(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_6, get_after_title_slot_context_6);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_73(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, null);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*hasSubtitle*/ ctx[40]) {
  				if (if_block3) {
  					if_block3.p(ctx, dirty);

  					if (dirty[1] & /*hasSubtitle*/ 512) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block_72(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(t5.parentNode, t5);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			if (/*hasText*/ ctx[41]) {
  				if (if_block4) {
  					if_block4.p(ctx, dirty);

  					if (dirty[1] & /*hasText*/ 1024) {
  						transition_in(if_block4, 1);
  					}
  				} else {
  					if_block4 = create_if_block_71(ctx);
  					if_block4.c();
  					transition_in(if_block4, 1);
  					if_block4.m(t6.parentNode, t6);
  				}
  			} else if (if_block4) {
  				group_outros();

  				transition_out(if_block4, 1, 1, () => {
  					if_block4 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_6, get_inner_slot_context_6);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block5) {
  					if_block5.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block5, 1);
  					}
  				} else {
  					if_block5 = create_if_block_70(ctx);
  					if_block5.c();
  					transition_in(if_block5, 1);
  					if_block5.m(t8.parentNode, t8);
  				}
  			} else if (if_block5) {
  				group_outros();

  				transition_out(if_block5, 1, 1, () => {
  					if_block5 = null;
  				});

  				check_outros();
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block6) {
  					if_block6.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block6, 1);
  					}
  				} else {
  					if_block6 = create_if_block_69(ctx);
  					if_block6.c();
  					transition_in(if_block6, 1);
  					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
  				}
  			} else if (if_block6) {
  				group_outros();

  				transition_out(if_block6, 1, 1, () => {
  					if_block6 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(before_title_slot, local);
  			transition_in(if_block1);
  			transition_in(after_title_slot, local);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			transition_in(if_block4);
  			transition_in(inner_slot, local);
  			transition_in(if_block5);
  			transition_in(if_block6);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(before_title_slot, local);
  			transition_out(if_block1);
  			transition_out(after_title_slot, local);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			transition_out(if_block4);
  			transition_out(inner_slot, local);
  			transition_out(if_block5);
  			transition_out(if_block6);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div);
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (if_block2) if_block2.d();
  			if (detaching) detach_dev(t4);
  			if (if_block3) if_block3.d(detaching);
  			if (detaching) detach_dev(t5);
  			if (if_block4) if_block4.d(detaching);
  			if (detaching) detach_dev(t6);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t7);
  			if (if_block5) if_block5.d(detaching);
  			if (detaching) detach_dev(t8);
  			if (if_block6) if_block6.d(detaching);
  			if (detaching) detach_dev(if_block6_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_68.name,
  		type: "if",
  		source: "(752:14) {#if isMedia}",
  		ctx
  	});

  	return block;
  }

  // (806:16) {#if (hasTitle || hasHeader || hasFooter)}
  function create_if_block_82(ctx) {
  	let div;
  	let t0;
  	let t1_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_84(ctx);
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_7);
  	let if_block1 = /*hasFooter*/ ctx[39] && create_if_block_83(ctx);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			t1 = text$1(t1_value);
  			t2 = space();
  			if (title_slot) title_slot.c();
  			t3 = space();
  			if (if_block1) if_block1.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 806, 18, 29333);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			append_dev(div, t1);
  			append_dev(div, t2);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block1) if_block1.m(div, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_84(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if ((!current || dirty[0] & /*title*/ 1) && t1_value !== (t1_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_7, get_title_slot_context_7);
  				}
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_83(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, null);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(title_slot, local);
  			transition_in(if_block1);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(title_slot, local);
  			transition_out(if_block1);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (title_slot) title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_82.name,
  		type: "if",
  		source: "(806:16) {#if (hasTitle || hasHeader || hasFooter)}",
  		ctx
  	});

  	return block;
  }

  // (808:20) {#if hasHeader}
  function create_if_block_84(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_7);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 808, 22, 29416);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_7, get_header_slot_context_7);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_84.name,
  		type: "if",
  		source: "(808:20) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (816:20) {#if hasFooter}
  function create_if_block_83(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_7);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 816, 22, 29729);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_7, get_footer_slot_context_7);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_83.name,
  		type: "if",
  		source: "(816:20) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (825:16) {#if hasAfter}
  function create_if_block_79(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_7);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_81(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_80(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_7);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_7);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 825, 18, 30042);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_7, get_after_start_slot_context_7);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_81(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_80(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_7, get_after_slot_context_7);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_7, get_after_end_slot_context_7);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_79.name,
  		type: "if",
  		source: "(825:16) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (828:20) {#if typeof after !== 'undefined'}
  function create_if_block_81(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 828, 22, 30192);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_81.name,
  		type: "if",
  		source: "(828:20) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (831:20) {#if typeof badge !== 'undefined'}
  function create_if_block_80(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_7] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_80.name,
  		type: "if",
  		source: "(831:20) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (832:22) <Badge color={badgeColor}>
  function create_default_slot_7(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_7.name,
  		type: "slot",
  		source: "(832:22) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (839:16) {#if !(swipeout || accordionItem)}
  function create_if_block_78(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_78.name,
  		type: "if",
  		source: "(839:16) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (753:16) {#if hasHeader}
  function create_if_block_77(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_6);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 753, 18, 27319);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_6, get_header_slot_context_6);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_77.name,
  		type: "if",
  		source: "(753:16) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (761:18) {#if (hasTitle)}
  function create_if_block_76(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_6);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (title_slot) title_slot.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 761, 20, 27623);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_6, get_title_slot_context_6);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (title_slot) title_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_76.name,
  		type: "if",
  		source: "(761:18) {#if (hasTitle)}",
  		ctx
  	});

  	return block;
  }

  // (768:18) {#if hasAfter}
  function create_if_block_73(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_6);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_75(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_74(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_6);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_6);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 768, 20, 27884);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_6, get_after_start_slot_context_6);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_75(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_74(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_6, get_after_slot_context_6);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_6, get_after_end_slot_context_6);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_73.name,
  		type: "if",
  		source: "(768:18) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (771:22) {#if typeof after !== 'undefined'}
  function create_if_block_75(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 771, 24, 28040);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_75.name,
  		type: "if",
  		source: "(771:22) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (774:22) {#if typeof badge !== 'undefined'}
  function create_if_block_74(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_6] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_74.name,
  		type: "if",
  		source: "(774:22) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (775:24) <Badge color={badgeColor}>
  function create_default_slot_6(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_6.name,
  		type: "slot",
  		source: "(775:24) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (782:16) {#if hasSubtitle}
  function create_if_block_72(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "";
  	let t0;
  	let t1;
  	let current;
  	const subtitle_slot_template = /*#slots*/ ctx[66].subtitle;
  	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[80], get_subtitle_slot_context_3);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (subtitle_slot) subtitle_slot.c();
  			attr_dev(div, "class", "item-subtitle");
  			add_location(div, file$b, 782, 18, 28482);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (subtitle_slot) {
  				subtitle_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*subtitle*/ 8) && t0_value !== (t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "")) set_data_dev(t0, t0_value);

  			if (subtitle_slot) {
  				if (subtitle_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(subtitle_slot, subtitle_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_subtitle_slot_changes_3, get_subtitle_slot_context_3);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(subtitle_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(subtitle_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (subtitle_slot) subtitle_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_72.name,
  		type: "if",
  		source: "(782:16) {#if hasSubtitle}",
  		ctx
  	});

  	return block;
  }

  // (788:16) {#if hasText}
  function create_if_block_71(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*text*/ ctx[1]) + "";
  	let t0;
  	let t1;
  	let current;
  	const text_slot_template = /*#slots*/ ctx[66].text;
  	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[80], get_text_slot_context_3);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (text_slot) text_slot.c();
  			attr_dev(div, "class", "item-text");
  			add_location(div, file$b, 788, 18, 28693);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (text_slot) {
  				text_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*text*/ 2) && t0_value !== (t0_value = Utils$1.text(/*text*/ ctx[1]) + "")) set_data_dev(t0, t0_value);

  			if (text_slot) {
  				if (text_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_text_slot_changes_3, get_text_slot_context_3);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(text_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(text_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (text_slot) text_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_71.name,
  		type: "if",
  		source: "(788:16) {#if hasText}",
  		ctx
  	});

  	return block;
  }

  // (795:16) {#if !(swipeout || accordionItem)}
  function create_if_block_70(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_70.name,
  		type: "if",
  		source: "(795:16) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (798:16) {#if hasFooter}
  function create_if_block_69(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_6);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 798, 18, 29032);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_6, get_footer_slot_context_6);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_69.name,
  		type: "if",
  		source: "(798:16) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (491:8) {:else}
  function create_else_block_2(ctx) {
  	let current_block_type_index;
  	let if_block;
  	let if_block_anchor;
  	let current;
  	const if_block_creators = [create_if_block_26, create_else_block_4];
  	const if_blocks = [];

  	function select_block_type_4(ctx, dirty) {
  		if (/*checkbox*/ ctx[14] || /*radio*/ ctx[15]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_4(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

  	const block = {
  		c: function create() {
  			if_block.c();
  			if_block_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if_blocks[current_block_type_index].m(target, anchor);
  			insert_dev(target, if_block_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_4(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(if_block_anchor.parentNode, if_block_anchor);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if_blocks[current_block_type_index].d(detaching);
  			if (detaching) detach_dev(if_block_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_2.name,
  		type: "else",
  		source: "(491:8) {:else}",
  		ctx
  	});

  	return block;
  }

  // (375:8) {#if isLink}
  function create_if_block_5(ctx) {
  	let a;
  	let div1;
  	let t0;
  	let t1;
  	let t2;
  	let div0;
  	let t3;
  	let current_block_type_index;
  	let if_block2;
  	let t4;
  	let t5;
  	let t6;
  	let current;
  	let mounted;
  	let dispose;
  	const content_start_slot_template = /*#slots*/ ctx[66]["content-start"];
  	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[80], get_content_start_slot_context);
  	let if_block0 = /*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29] && create_if_block_25(ctx);
  	let if_block1 = /*hasMedia*/ ctx[36] && create_if_block_23(ctx);
  	const inner_start_slot_template = /*#slots*/ ctx[66]["inner-start"];
  	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_start_slot_context);
  	const if_block_creators = [create_if_block_6, create_else_block_1];
  	const if_blocks = [];

  	function select_block_type_3(ctx, dirty) {
  		if (/*isMedia*/ ctx[27]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_3(ctx);
  	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const inner_end_slot_template = /*#slots*/ ctx[66]["inner-end"];
  	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_end_slot_context);
  	const content_slot_template = /*#slots*/ ctx[66].content;
  	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[80], get_content_slot_context$1);
  	const content_end_slot_template = /*#slots*/ ctx[66]["content-end"];
  	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[80], get_content_end_slot_context);
  	let a_levels = [{ class: /*linkClasses*/ ctx[33] }, /*linkAttrs*/ ctx[34]];
  	let a_data = {};

  	for (let i = 0; i < a_levels.length; i += 1) {
  		a_data = assign(a_data, a_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			a = element("a");
  			div1 = element("div");
  			if (content_start_slot) content_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			div0 = element("div");
  			if (inner_start_slot) inner_start_slot.c();
  			t3 = space();
  			if_block2.c();
  			t4 = space();
  			if (inner_end_slot) inner_end_slot.c();
  			t5 = space();
  			if (content_slot) content_slot.c();
  			t6 = space();
  			if (content_end_slot) content_end_slot.c();
  			attr_dev(div0, "class", "item-inner");
  			add_location(div0, file$b, 390, 14, 13059);
  			attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			add_location(div1, file$b, 377, 12, 12558);
  			set_attributes(a, a_data);
  			add_location(a, file$b, 375, 10, 12429);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, a, anchor);
  			append_dev(a, div1);

  			if (content_start_slot) {
  				content_start_slot.m(div1, null);
  			}

  			append_dev(div1, t0);
  			if (if_block0) if_block0.m(div1, null);
  			append_dev(div1, t1);
  			if (if_block1) if_block1.m(div1, null);
  			append_dev(div1, t2);
  			append_dev(div1, div0);

  			if (inner_start_slot) {
  				inner_start_slot.m(div0, null);
  			}

  			append_dev(div0, t3);
  			if_blocks[current_block_type_index].m(div0, null);
  			append_dev(div0, t4);

  			if (inner_end_slot) {
  				inner_end_slot.m(div0, null);
  			}

  			/*div0_binding*/ ctx[69](div0);
  			append_dev(div1, t5);

  			if (content_slot) {
  				content_slot.m(div1, null);
  			}

  			append_dev(div1, t6);

  			if (content_end_slot) {
  				content_end_slot.m(div1, null);
  			}

  			/*a_binding*/ ctx[70](a);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(a, "click", /*onClick*/ ctx[43], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (content_start_slot) {
  				if (content_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_start_slot_changes, get_content_start_slot_context);
  				}
  			}

  			if (/*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29]) {
  				if (if_block0) ; else {
  					if_block0 = create_if_block_25(ctx);
  					if_block0.c();
  					if_block0.m(div1, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (/*hasMedia*/ ctx[36]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasMedia*/ 32) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_23(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div1, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_start_slot) {
  				if (inner_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_start_slot_changes, get_inner_start_slot_context);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_3(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block2 = if_blocks[current_block_type_index];

  				if (!if_block2) {
  					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block2.c();
  				}

  				transition_in(if_block2, 1);
  				if_block2.m(div0, t4);
  			}

  			if (inner_end_slot) {
  				if (inner_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_end_slot_changes, get_inner_end_slot_context);
  				}
  			}

  			if (content_slot) {
  				if (content_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_slot_changes$1, get_content_slot_context$1);
  				}
  			}

  			if (content_end_slot) {
  				if (content_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_end_slot_changes, get_content_end_slot_context);
  				}
  			}

  			if (!current || dirty[1] & /*contentClasses*/ 2) {
  				attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			}

  			set_attributes(a, a_data = get_spread_update(a_levels, [
  				(!current || dirty[1] & /*linkClasses*/ 4) && { class: /*linkClasses*/ ctx[33] },
  				dirty[1] & /*linkAttrs*/ 8 && /*linkAttrs*/ ctx[34]
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(content_start_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_start_slot, local);
  			transition_in(if_block2);
  			transition_in(inner_end_slot, local);
  			transition_in(content_slot, local);
  			transition_in(content_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(content_start_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_start_slot, local);
  			transition_out(if_block2);
  			transition_out(inner_end_slot, local);
  			transition_out(content_slot, local);
  			transition_out(content_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(a);
  			if (content_start_slot) content_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (inner_start_slot) inner_start_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (inner_end_slot) inner_end_slot.d(detaching);
  			/*div0_binding*/ ctx[69](null);
  			if (content_slot) content_slot.d(detaching);
  			if (content_end_slot) content_end_slot.d(detaching);
  			/*a_binding*/ ctx[70](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_5.name,
  		type: "if",
  		source: "(375:8) {#if isLink}",
  		ctx
  	});

  	return block;
  }

  // (617:10) {:else}
  function create_else_block_4(ctx) {
  	let div1;
  	let t0;
  	let t1;
  	let t2;
  	let div0;
  	let t3;
  	let current_block_type_index;
  	let if_block2;
  	let t4;
  	let t5;
  	let t6;
  	let current;
  	let mounted;
  	let dispose;
  	const content_start_slot_template = /*#slots*/ ctx[66]["content-start"];
  	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[80], get_content_start_slot_context_2);
  	let if_block0 = /*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29] && create_if_block_66(ctx);
  	let if_block1 = /*hasMedia*/ ctx[36] && create_if_block_64(ctx);
  	const inner_start_slot_template = /*#slots*/ ctx[66]["inner-start"];
  	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_start_slot_context_2);
  	const if_block_creators = [create_if_block_47, create_else_block_5];
  	const if_blocks = [];

  	function select_block_type_6(ctx, dirty) {
  		if (/*isMedia*/ ctx[27]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_6(ctx);
  	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const inner_end_slot_template = /*#slots*/ ctx[66]["inner-end"];
  	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_end_slot_context_2);
  	const content_slot_template = /*#slots*/ ctx[66].content;
  	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[80], get_content_slot_context_2);
  	const content_end_slot_template = /*#slots*/ ctx[66]["content-end"];
  	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[80], get_content_end_slot_context_2);

  	const block = {
  		c: function create() {
  			div1 = element("div");
  			if (content_start_slot) content_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			div0 = element("div");
  			if (inner_start_slot) inner_start_slot.c();
  			t3 = space();
  			if_block2.c();
  			t4 = space();
  			if (inner_end_slot) inner_end_slot.c();
  			t5 = space();
  			if (content_slot) content_slot.c();
  			t6 = space();
  			if (content_end_slot) content_end_slot.c();
  			attr_dev(div0, "class", "item-inner");
  			add_location(div0, file$b, 630, 14, 22543);
  			attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			add_location(div1, file$b, 617, 12, 22023);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div1, anchor);

  			if (content_start_slot) {
  				content_start_slot.m(div1, null);
  			}

  			append_dev(div1, t0);
  			if (if_block0) if_block0.m(div1, null);
  			append_dev(div1, t1);
  			if (if_block1) if_block1.m(div1, null);
  			append_dev(div1, t2);
  			append_dev(div1, div0);

  			if (inner_start_slot) {
  				inner_start_slot.m(div0, null);
  			}

  			append_dev(div0, t3);
  			if_blocks[current_block_type_index].m(div0, null);
  			append_dev(div0, t4);

  			if (inner_end_slot) {
  				inner_end_slot.m(div0, null);
  			}

  			/*div0_binding_1*/ ctx[73](div0);
  			append_dev(div1, t5);

  			if (content_slot) {
  				content_slot.m(div1, null);
  			}

  			append_dev(div1, t6);

  			if (content_end_slot) {
  				content_end_slot.m(div1, null);
  			}

  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(div1, "click", /*onClick*/ ctx[43], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (content_start_slot) {
  				if (content_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_start_slot_changes_2, get_content_start_slot_context_2);
  				}
  			}

  			if (/*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29]) {
  				if (if_block0) ; else {
  					if_block0 = create_if_block_66(ctx);
  					if_block0.c();
  					if_block0.m(div1, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (/*hasMedia*/ ctx[36]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasMedia*/ 32) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_64(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div1, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_start_slot) {
  				if (inner_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_start_slot_changes_2, get_inner_start_slot_context_2);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_6(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block2 = if_blocks[current_block_type_index];

  				if (!if_block2) {
  					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block2.c();
  				}

  				transition_in(if_block2, 1);
  				if_block2.m(div0, t4);
  			}

  			if (inner_end_slot) {
  				if (inner_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_end_slot_changes_2, get_inner_end_slot_context_2);
  				}
  			}

  			if (content_slot) {
  				if (content_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_slot_changes_2, get_content_slot_context_2);
  				}
  			}

  			if (content_end_slot) {
  				if (content_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_end_slot_changes_2, get_content_end_slot_context_2);
  				}
  			}

  			if (!current || dirty[1] & /*contentClasses*/ 2) {
  				attr_dev(div1, "class", /*contentClasses*/ ctx[32]);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(content_start_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_start_slot, local);
  			transition_in(if_block2);
  			transition_in(inner_end_slot, local);
  			transition_in(content_slot, local);
  			transition_in(content_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(content_start_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_start_slot, local);
  			transition_out(if_block2);
  			transition_out(inner_end_slot, local);
  			transition_out(content_slot, local);
  			transition_out(content_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div1);
  			if (content_start_slot) content_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (inner_start_slot) inner_start_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (inner_end_slot) inner_end_slot.d(detaching);
  			/*div0_binding_1*/ ctx[73](null);
  			if (content_slot) content_slot.d(detaching);
  			if (content_end_slot) content_end_slot.d(detaching);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_4.name,
  		type: "else",
  		source: "(617:10) {:else}",
  		ctx
  	});

  	return block;
  }

  // (493:10) {#if checkbox || radio}
  function create_if_block_26(ctx) {
  	let label;
  	let t0;
  	let t1;
  	let input;
  	let input_value_value;
  	let input_type_value;
  	let t2;
  	let i;
  	let i_class_value;
  	let t3;
  	let t4;
  	let div;
  	let t5;
  	let current_block_type_index;
  	let if_block2;
  	let t6;
  	let t7;
  	let t8;
  	let current;
  	let mounted;
  	let dispose;
  	const content_start_slot_template = /*#slots*/ ctx[66]["content-start"];
  	const content_start_slot = create_slot(content_start_slot_template, ctx, /*$$scope*/ ctx[80], get_content_start_slot_context_1);
  	let if_block0 = /*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29] && create_if_block_46(ctx);
  	let if_block1 = /*hasMedia*/ ctx[36] && create_if_block_44(ctx);
  	const inner_start_slot_template = /*#slots*/ ctx[66]["inner-start"];
  	const inner_start_slot = create_slot(inner_start_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_start_slot_context_1);
  	const if_block_creators = [create_if_block_27, create_else_block_3];
  	const if_blocks = [];

  	function select_block_type_5(ctx, dirty) {
  		if (/*isMedia*/ ctx[27]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_5(ctx);
  	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const inner_end_slot_template = /*#slots*/ ctx[66]["inner-end"];
  	const inner_end_slot = create_slot(inner_end_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_end_slot_context_1);
  	const content_slot_template = /*#slots*/ ctx[66].content;
  	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[80], get_content_slot_context_1);
  	const content_end_slot_template = /*#slots*/ ctx[66]["content-end"];
  	const content_end_slot = create_slot(content_end_slot_template, ctx, /*$$scope*/ ctx[80], get_content_end_slot_context_1);

  	const block = {
  		c: function create() {
  			label = element("label");
  			if (content_start_slot) content_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			input = element("input");
  			t2 = space();
  			i = element("i");
  			t3 = space();
  			if (if_block1) if_block1.c();
  			t4 = space();
  			div = element("div");
  			if (inner_start_slot) inner_start_slot.c();
  			t5 = space();
  			if_block2.c();
  			t6 = space();
  			if (inner_end_slot) inner_end_slot.c();
  			t7 = space();
  			if (content_slot) content_slot.c();
  			t8 = space();
  			if (content_end_slot) content_end_slot.c();

  			input.value = input_value_value = typeof /*value*/ ctx[18] === "undefined"
  			? ""
  			: /*value*/ ctx[18];

  			attr_dev(input, "name", /*name*/ ctx[17]);
  			input.checked = /*checked*/ ctx[16];
  			input.readOnly = /*readonly*/ ctx[19];
  			input.disabled = /*disabled*/ ctx[21];
  			input.required = /*required*/ ctx[20];
  			attr_dev(input, "type", input_type_value = /*radio*/ ctx[15] ? "radio" : "checkbox");
  			add_location(input, file$b, 498, 14, 17357);
  			attr_dev(i, "class", i_class_value = `icon icon-${/*radio*/ ctx[15] ? "radio" : "checkbox"}`);
  			add_location(i, file$b, 509, 14, 17756);
  			attr_dev(div, "class", "item-inner");
  			add_location(div, file$b, 518, 14, 18098);
  			attr_dev(label, "class", /*contentClasses*/ ctx[32]);
  			add_location(label, file$b, 493, 12, 17105);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, label, anchor);

  			if (content_start_slot) {
  				content_start_slot.m(label, null);
  			}

  			append_dev(label, t0);
  			if (if_block0) if_block0.m(label, null);
  			append_dev(label, t1);
  			append_dev(label, input);
  			/*input_binding*/ ctx[71](input);
  			append_dev(label, t2);
  			append_dev(label, i);
  			append_dev(label, t3);
  			if (if_block1) if_block1.m(label, null);
  			append_dev(label, t4);
  			append_dev(label, div);

  			if (inner_start_slot) {
  				inner_start_slot.m(div, null);
  			}

  			append_dev(div, t5);
  			if_blocks[current_block_type_index].m(div, null);
  			append_dev(div, t6);

  			if (inner_end_slot) {
  				inner_end_slot.m(div, null);
  			}

  			/*div_binding*/ ctx[72](div);
  			append_dev(label, t7);

  			if (content_slot) {
  				content_slot.m(label, null);
  			}

  			append_dev(label, t8);

  			if (content_end_slot) {
  				content_end_slot.m(label, null);
  			}

  			current = true;

  			if (!mounted) {
  				dispose = [
  					listen_dev(input, "change", /*onChange*/ ctx[44], false, false, false),
  					listen_dev(label, "click", /*onClick*/ ctx[43], false, false, false)
  				];

  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (content_start_slot) {
  				if (content_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_start_slot, content_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_start_slot_changes_1, get_content_start_slot_context_1);
  				}
  			}

  			if (/*isSortable*/ ctx[28] && /*sortable*/ ctx[12] !== false && /*isSortableOpposite*/ ctx[29]) {
  				if (if_block0) ; else {
  					if_block0 = create_if_block_46(ctx);
  					if_block0.c();
  					if_block0.m(label, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (!current || dirty[0] & /*value*/ 262144 && input_value_value !== (input_value_value = typeof /*value*/ ctx[18] === "undefined"
  			? ""
  			: /*value*/ ctx[18]) && input.value !== input_value_value) {
  				prop_dev(input, "value", input_value_value);
  			}

  			if (!current || dirty[0] & /*name*/ 131072) {
  				attr_dev(input, "name", /*name*/ ctx[17]);
  			}

  			if (!current || dirty[0] & /*checked*/ 65536) {
  				prop_dev(input, "checked", /*checked*/ ctx[16]);
  			}

  			if (!current || dirty[0] & /*readonly*/ 524288) {
  				prop_dev(input, "readOnly", /*readonly*/ ctx[19]);
  			}

  			if (!current || dirty[0] & /*disabled*/ 2097152) {
  				prop_dev(input, "disabled", /*disabled*/ ctx[21]);
  			}

  			if (!current || dirty[0] & /*required*/ 1048576) {
  				prop_dev(input, "required", /*required*/ ctx[20]);
  			}

  			if (!current || dirty[0] & /*radio*/ 32768 && input_type_value !== (input_type_value = /*radio*/ ctx[15] ? "radio" : "checkbox")) {
  				attr_dev(input, "type", input_type_value);
  			}

  			if (!current || dirty[0] & /*radio*/ 32768 && i_class_value !== (i_class_value = `icon icon-${/*radio*/ ctx[15] ? "radio" : "checkbox"}`)) {
  				attr_dev(i, "class", i_class_value);
  			}

  			if (/*hasMedia*/ ctx[36]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasMedia*/ 32) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_44(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(label, t4);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_start_slot) {
  				if (inner_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_start_slot, inner_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_start_slot_changes_1, get_inner_start_slot_context_1);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_5(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block2 = if_blocks[current_block_type_index];

  				if (!if_block2) {
  					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block2.c();
  				}

  				transition_in(if_block2, 1);
  				if_block2.m(div, t6);
  			}

  			if (inner_end_slot) {
  				if (inner_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_end_slot, inner_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_end_slot_changes_1, get_inner_end_slot_context_1);
  				}
  			}

  			if (content_slot) {
  				if (content_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_slot_changes_1, get_content_slot_context_1);
  				}
  			}

  			if (content_end_slot) {
  				if (content_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(content_end_slot, content_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_content_end_slot_changes_1, get_content_end_slot_context_1);
  				}
  			}

  			if (!current || dirty[1] & /*contentClasses*/ 2) {
  				attr_dev(label, "class", /*contentClasses*/ ctx[32]);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(content_start_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_start_slot, local);
  			transition_in(if_block2);
  			transition_in(inner_end_slot, local);
  			transition_in(content_slot, local);
  			transition_in(content_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(content_start_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_start_slot, local);
  			transition_out(if_block2);
  			transition_out(inner_end_slot, local);
  			transition_out(content_slot, local);
  			transition_out(content_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(label);
  			if (content_start_slot) content_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			/*input_binding*/ ctx[71](null);
  			if (if_block1) if_block1.d();
  			if (inner_start_slot) inner_start_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (inner_end_slot) inner_end_slot.d(detaching);
  			/*div_binding*/ ctx[72](null);
  			if (content_slot) content_slot.d(detaching);
  			if (content_end_slot) content_end_slot.d(detaching);
  			mounted = false;
  			run_all(dispose);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_26.name,
  		type: "if",
  		source: "(493:10) {#if checkbox || radio}",
  		ctx
  	});

  	return block;
  }

  // (620:14) {#if isSortable && sortable !== false && isSortableOpposite}
  function create_if_block_66(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "sortable-handler");
  			add_location(div, file$b, 620, 16, 22206);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_66.name,
  		type: "if",
  		source: "(620:14) {#if isSortable && sortable !== false && isSortableOpposite}",
  		ctx
  	});

  	return block;
  }

  // (623:14) {#if hasMedia}
  function create_if_block_64(ctx) {
  	let div;
  	let t;
  	let current;
  	let if_block = typeof /*media*/ ctx[2] !== "undefined" && create_if_block_65(ctx);
  	const media_slot_template = /*#slots*/ ctx[66].media;
  	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[80], get_media_slot_context_2);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block) if_block.c();
  			t = space();
  			if (media_slot) media_slot.c();
  			attr_dev(div, "class", "item-media");
  			add_location(div, file$b, 623, 16, 22304);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block) if_block.m(div, null);
  			append_dev(div, t);

  			if (media_slot) {
  				media_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (typeof /*media*/ ctx[2] !== "undefined") {
  				if (if_block) {
  					if_block.p(ctx, dirty);
  				} else {
  					if_block = create_if_block_65(ctx);
  					if_block.c();
  					if_block.m(div, t);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			if (media_slot) {
  				if (media_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_media_slot_changes_2, get_media_slot_context_2);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(media_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(media_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block) if_block.d();
  			if (media_slot) media_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_64.name,
  		type: "if",
  		source: "(623:14) {#if hasMedia}",
  		ctx
  	});

  	return block;
  }

  // (625:18) {#if typeof media !== 'undefined'}
  function create_if_block_65(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			if (img.src !== (img_src_value = /*media*/ ctx[2])) attr_dev(img, "src", img_src_value);
  			add_location(img, file$b, 625, 20, 22402);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*media*/ 4 && img.src !== (img_src_value = /*media*/ ctx[2])) {
  				attr_dev(img, "src", img_src_value);
  			}
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_65.name,
  		type: "if",
  		source: "(625:18) {#if typeof media !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (685:16) {:else}
  function create_else_block_5(ctx) {
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let if_block2_anchor;
  	let current;
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_5);
  	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) && create_if_block_61(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_5);
  	let if_block1 = /*hasAfter*/ ctx[42] && create_if_block_58(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_5);
  	let if_block2 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_57(ctx);

  	const block = {
  		c: function create() {
  			if (before_title_slot) before_title_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (after_title_slot) after_title_slot.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (inner_slot) inner_slot.c();
  			t4 = space();
  			if (if_block2) if_block2.c();
  			if_block2_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if (before_title_slot) {
  				before_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t0, anchor);
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t1, anchor);

  			if (after_title_slot) {
  				after_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t2, anchor);
  			if (if_block1) if_block1.m(target, anchor);
  			insert_dev(target, t3, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t4, anchor);
  			if (if_block2) if_block2.m(target, anchor);
  			insert_dev(target, if_block2_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_5, get_before_title_slot_context_5);
  				}
  			}

  			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 448) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_61(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t1.parentNode, t1);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_5, get_after_title_slot_context_5);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_58(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(t3.parentNode, t3);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_5, get_inner_slot_context_5);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_57(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_title_slot, local);
  			transition_in(if_block0);
  			transition_in(after_title_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_slot, local);
  			transition_in(if_block2);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_title_slot, local);
  			transition_out(if_block0);
  			transition_out(after_title_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_slot, local);
  			transition_out(if_block2);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t1);
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (detaching) detach_dev(t2);
  			if (if_block1) if_block1.d(detaching);
  			if (detaching) detach_dev(t3);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t4);
  			if (if_block2) if_block2.d(detaching);
  			if (detaching) detach_dev(if_block2_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_5.name,
  		type: "else",
  		source: "(685:16) {:else}",
  		ctx
  	});

  	return block;
  }

  // (633:16) {#if isMedia}
  function create_if_block_47(ctx) {
  	let t0;
  	let div;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let t5;
  	let t6;
  	let t7;
  	let t8;
  	let if_block6_anchor;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_56(ctx);
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_4);
  	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_55(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_4);
  	let if_block2 = /*hasAfter*/ ctx[42] && create_if_block_52(ctx);
  	let if_block3 = /*hasSubtitle*/ ctx[40] && create_if_block_51(ctx);
  	let if_block4 = /*hasText*/ ctx[41] && create_if_block_50(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_4);
  	let if_block5 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_49(ctx);
  	let if_block6 = /*hasFooter*/ ctx[39] && create_if_block_48(ctx);

  	const block = {
  		c: function create() {
  			if (if_block0) if_block0.c();
  			t0 = space();
  			div = element("div");
  			if (before_title_slot) before_title_slot.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_title_slot) after_title_slot.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (if_block3) if_block3.c();
  			t5 = space();
  			if (if_block4) if_block4.c();
  			t6 = space();
  			if (inner_slot) inner_slot.c();
  			t7 = space();
  			if (if_block5) if_block5.c();
  			t8 = space();
  			if (if_block6) if_block6.c();
  			if_block6_anchor = empty$1();
  			attr_dev(div, "class", "item-title-row");
  			add_location(div, file$b, 639, 18, 22899);
  		},
  		m: function mount(target, anchor) {
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div, anchor);

  			if (before_title_slot) {
  				before_title_slot.m(div, null);
  			}

  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_title_slot) {
  				after_title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block2) if_block2.m(div, null);
  			insert_dev(target, t4, anchor);
  			if (if_block3) if_block3.m(target, anchor);
  			insert_dev(target, t5, anchor);
  			if (if_block4) if_block4.m(target, anchor);
  			insert_dev(target, t6, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t7, anchor);
  			if (if_block5) if_block5.m(target, anchor);
  			insert_dev(target, t8, anchor);
  			if (if_block6) if_block6.m(target, anchor);
  			insert_dev(target, if_block6_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_56(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t0.parentNode, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_4, get_before_title_slot_context_4);
  				}
  			}

  			if (/*hasTitle*/ ctx[37]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle*/ 64) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_55(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_4, get_after_title_slot_context_4);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_52(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, null);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*hasSubtitle*/ ctx[40]) {
  				if (if_block3) {
  					if_block3.p(ctx, dirty);

  					if (dirty[1] & /*hasSubtitle*/ 512) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block_51(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(t5.parentNode, t5);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			if (/*hasText*/ ctx[41]) {
  				if (if_block4) {
  					if_block4.p(ctx, dirty);

  					if (dirty[1] & /*hasText*/ 1024) {
  						transition_in(if_block4, 1);
  					}
  				} else {
  					if_block4 = create_if_block_50(ctx);
  					if_block4.c();
  					transition_in(if_block4, 1);
  					if_block4.m(t6.parentNode, t6);
  				}
  			} else if (if_block4) {
  				group_outros();

  				transition_out(if_block4, 1, 1, () => {
  					if_block4 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_4, get_inner_slot_context_4);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block5) {
  					if_block5.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block5, 1);
  					}
  				} else {
  					if_block5 = create_if_block_49(ctx);
  					if_block5.c();
  					transition_in(if_block5, 1);
  					if_block5.m(t8.parentNode, t8);
  				}
  			} else if (if_block5) {
  				group_outros();

  				transition_out(if_block5, 1, 1, () => {
  					if_block5 = null;
  				});

  				check_outros();
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block6) {
  					if_block6.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block6, 1);
  					}
  				} else {
  					if_block6 = create_if_block_48(ctx);
  					if_block6.c();
  					transition_in(if_block6, 1);
  					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
  				}
  			} else if (if_block6) {
  				group_outros();

  				transition_out(if_block6, 1, 1, () => {
  					if_block6 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(before_title_slot, local);
  			transition_in(if_block1);
  			transition_in(after_title_slot, local);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			transition_in(if_block4);
  			transition_in(inner_slot, local);
  			transition_in(if_block5);
  			transition_in(if_block6);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(before_title_slot, local);
  			transition_out(if_block1);
  			transition_out(after_title_slot, local);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			transition_out(if_block4);
  			transition_out(inner_slot, local);
  			transition_out(if_block5);
  			transition_out(if_block6);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div);
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (if_block2) if_block2.d();
  			if (detaching) detach_dev(t4);
  			if (if_block3) if_block3.d(detaching);
  			if (detaching) detach_dev(t5);
  			if (if_block4) if_block4.d(detaching);
  			if (detaching) detach_dev(t6);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t7);
  			if (if_block5) if_block5.d(detaching);
  			if (detaching) detach_dev(t8);
  			if (if_block6) if_block6.d(detaching);
  			if (detaching) detach_dev(if_block6_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_47.name,
  		type: "if",
  		source: "(633:16) {#if isMedia}",
  		ctx
  	});

  	return block;
  }

  // (687:18) {#if (hasTitle || hasHeader || hasFooter)}
  function create_if_block_61(ctx) {
  	let div;
  	let t0;
  	let t1_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_63(ctx);
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_5);
  	let if_block1 = /*hasFooter*/ ctx[39] && create_if_block_62(ctx);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			t1 = text$1(t1_value);
  			t2 = space();
  			if (title_slot) title_slot.c();
  			t3 = space();
  			if (if_block1) if_block1.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 687, 20, 24836);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			append_dev(div, t1);
  			append_dev(div, t2);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block1) if_block1.m(div, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_63(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if ((!current || dirty[0] & /*title*/ 1) && t1_value !== (t1_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_5, get_title_slot_context_5);
  				}
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_62(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, null);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(title_slot, local);
  			transition_in(if_block1);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(title_slot, local);
  			transition_out(if_block1);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (title_slot) title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_61.name,
  		type: "if",
  		source: "(687:18) {#if (hasTitle || hasHeader || hasFooter)}",
  		ctx
  	});

  	return block;
  }

  // (689:22) {#if hasHeader}
  function create_if_block_63(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_5);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 689, 24, 24923);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_5, get_header_slot_context_5);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_63.name,
  		type: "if",
  		source: "(689:22) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (697:22) {#if hasFooter}
  function create_if_block_62(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_5);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 697, 24, 25252);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_5, get_footer_slot_context_5);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_62.name,
  		type: "if",
  		source: "(697:22) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (706:18) {#if hasAfter}
  function create_if_block_58(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_5);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_60(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_59(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_5);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_5);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 706, 20, 25583);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_5, get_after_start_slot_context_5);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_60(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_59(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_5, get_after_slot_context_5);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_5, get_after_end_slot_context_5);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_58.name,
  		type: "if",
  		source: "(706:18) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (709:22) {#if typeof after !== 'undefined'}
  function create_if_block_60(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 709, 24, 25739);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_60.name,
  		type: "if",
  		source: "(709:22) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (712:22) {#if typeof badge !== 'undefined'}
  function create_if_block_59(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_5] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_59.name,
  		type: "if",
  		source: "(712:22) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (713:24) <Badge color={badgeColor}>
  function create_default_slot_5(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_5.name,
  		type: "slot",
  		source: "(713:24) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (720:18) {#if !(swipeout || accordionItem)}
  function create_if_block_57(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_57.name,
  		type: "if",
  		source: "(720:18) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (634:18) {#if hasHeader}
  function create_if_block_56(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_4);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 634, 20, 22716);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_4, get_header_slot_context_4);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_56.name,
  		type: "if",
  		source: "(634:18) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (642:20) {#if (hasTitle)}
  function create_if_block_55(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_4);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (title_slot) title_slot.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 642, 22, 23036);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_4, get_title_slot_context_4);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (title_slot) title_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_55.name,
  		type: "if",
  		source: "(642:20) {#if (hasTitle)}",
  		ctx
  	});

  	return block;
  }

  // (649:20) {#if hasAfter}
  function create_if_block_52(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_4);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_54(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_53(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_4);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_4);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 649, 22, 23311);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_4, get_after_start_slot_context_4);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_54(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_53(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_4, get_after_slot_context_4);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_4, get_after_end_slot_context_4);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_52.name,
  		type: "if",
  		source: "(649:20) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (652:24) {#if typeof after !== 'undefined'}
  function create_if_block_54(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 652, 26, 23473);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_54.name,
  		type: "if",
  		source: "(652:24) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (655:24) {#if typeof badge !== 'undefined'}
  function create_if_block_53(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_4] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_53.name,
  		type: "if",
  		source: "(655:24) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (656:26) <Badge color={badgeColor}>
  function create_default_slot_4(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_4.name,
  		type: "slot",
  		source: "(656:26) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (663:18) {#if hasSubtitle}
  function create_if_block_51(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "";
  	let t0;
  	let t1;
  	let current;
  	const subtitle_slot_template = /*#slots*/ ctx[66].subtitle;
  	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[80], get_subtitle_slot_context_2);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (subtitle_slot) subtitle_slot.c();
  			attr_dev(div, "class", "item-subtitle");
  			add_location(div, file$b, 663, 20, 23937);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (subtitle_slot) {
  				subtitle_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*subtitle*/ 8) && t0_value !== (t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "")) set_data_dev(t0, t0_value);

  			if (subtitle_slot) {
  				if (subtitle_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(subtitle_slot, subtitle_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_subtitle_slot_changes_2, get_subtitle_slot_context_2);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(subtitle_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(subtitle_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (subtitle_slot) subtitle_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_51.name,
  		type: "if",
  		source: "(663:18) {#if hasSubtitle}",
  		ctx
  	});

  	return block;
  }

  // (669:18) {#if hasText}
  function create_if_block_50(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*text*/ ctx[1]) + "";
  	let t0;
  	let t1;
  	let current;
  	const text_slot_template = /*#slots*/ ctx[66].text;
  	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[80], get_text_slot_context_2);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (text_slot) text_slot.c();
  			attr_dev(div, "class", "item-text");
  			add_location(div, file$b, 669, 20, 24160);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (text_slot) {
  				text_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*text*/ 2) && t0_value !== (t0_value = Utils$1.text(/*text*/ ctx[1]) + "")) set_data_dev(t0, t0_value);

  			if (text_slot) {
  				if (text_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_text_slot_changes_2, get_text_slot_context_2);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(text_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(text_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (text_slot) text_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_50.name,
  		type: "if",
  		source: "(669:18) {#if hasText}",
  		ctx
  	});

  	return block;
  }

  // (676:18) {#if !(swipeout || accordionItem)}
  function create_if_block_49(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_49.name,
  		type: "if",
  		source: "(676:18) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (679:18) {#if hasFooter}
  function create_if_block_48(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_4);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 679, 20, 24519);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_4, get_footer_slot_context_4);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_48.name,
  		type: "if",
  		source: "(679:18) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (496:14) {#if isSortable && sortable !== false && isSortableOpposite}
  function create_if_block_46(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "sortable-handler");
  			add_location(div, file$b, 496, 16, 17290);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_46.name,
  		type: "if",
  		source: "(496:14) {#if isSortable && sortable !== false && isSortableOpposite}",
  		ctx
  	});

  	return block;
  }

  // (511:14) {#if hasMedia}
  function create_if_block_44(ctx) {
  	let div;
  	let t;
  	let current;
  	let if_block = typeof /*media*/ ctx[2] !== "undefined" && create_if_block_45(ctx);
  	const media_slot_template = /*#slots*/ ctx[66].media;
  	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[80], get_media_slot_context_1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block) if_block.c();
  			t = space();
  			if (media_slot) media_slot.c();
  			attr_dev(div, "class", "item-media");
  			add_location(div, file$b, 511, 16, 17859);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block) if_block.m(div, null);
  			append_dev(div, t);

  			if (media_slot) {
  				media_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (typeof /*media*/ ctx[2] !== "undefined") {
  				if (if_block) {
  					if_block.p(ctx, dirty);
  				} else {
  					if_block = create_if_block_45(ctx);
  					if_block.c();
  					if_block.m(div, t);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			if (media_slot) {
  				if (media_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_media_slot_changes_1, get_media_slot_context_1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(media_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(media_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block) if_block.d();
  			if (media_slot) media_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_44.name,
  		type: "if",
  		source: "(511:14) {#if hasMedia}",
  		ctx
  	});

  	return block;
  }

  // (513:18) {#if typeof media !== 'undefined'}
  function create_if_block_45(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			if (img.src !== (img_src_value = /*media*/ ctx[2])) attr_dev(img, "src", img_src_value);
  			add_location(img, file$b, 513, 20, 17957);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*media*/ 4 && img.src !== (img_src_value = /*media*/ ctx[2])) {
  				attr_dev(img, "src", img_src_value);
  			}
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_45.name,
  		type: "if",
  		source: "(513:18) {#if typeof media !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (573:16) {:else}
  function create_else_block_3(ctx) {
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let if_block2_anchor;
  	let current;
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_3);
  	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) && create_if_block_41(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_3);
  	let if_block1 = /*hasAfter*/ ctx[42] && create_if_block_38(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_3);
  	let if_block2 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_37(ctx);

  	const block = {
  		c: function create() {
  			if (before_title_slot) before_title_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (after_title_slot) after_title_slot.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (inner_slot) inner_slot.c();
  			t4 = space();
  			if (if_block2) if_block2.c();
  			if_block2_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if (before_title_slot) {
  				before_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t0, anchor);
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t1, anchor);

  			if (after_title_slot) {
  				after_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t2, anchor);
  			if (if_block1) if_block1.m(target, anchor);
  			insert_dev(target, t3, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t4, anchor);
  			if (if_block2) if_block2.m(target, anchor);
  			insert_dev(target, if_block2_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_3, get_before_title_slot_context_3);
  				}
  			}

  			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 448) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_41(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t1.parentNode, t1);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_3, get_after_title_slot_context_3);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_38(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(t3.parentNode, t3);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_3, get_inner_slot_context_3);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_37(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_title_slot, local);
  			transition_in(if_block0);
  			transition_in(after_title_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_slot, local);
  			transition_in(if_block2);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_title_slot, local);
  			transition_out(if_block0);
  			transition_out(after_title_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_slot, local);
  			transition_out(if_block2);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t1);
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (detaching) detach_dev(t2);
  			if (if_block1) if_block1.d(detaching);
  			if (detaching) detach_dev(t3);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t4);
  			if (if_block2) if_block2.d(detaching);
  			if (detaching) detach_dev(if_block2_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_3.name,
  		type: "else",
  		source: "(573:16) {:else}",
  		ctx
  	});

  	return block;
  }

  // (521:16) {#if isMedia}
  function create_if_block_27(ctx) {
  	let t0;
  	let div;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let t5;
  	let t6;
  	let t7;
  	let t8;
  	let if_block6_anchor;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_36(ctx);
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_2);
  	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_35(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_2);
  	let if_block2 = /*hasAfter*/ ctx[42] && create_if_block_32(ctx);
  	let if_block3 = /*hasSubtitle*/ ctx[40] && create_if_block_31(ctx);
  	let if_block4 = /*hasText*/ ctx[41] && create_if_block_30(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_2);
  	let if_block5 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_29(ctx);
  	let if_block6 = /*hasFooter*/ ctx[39] && create_if_block_28(ctx);

  	const block = {
  		c: function create() {
  			if (if_block0) if_block0.c();
  			t0 = space();
  			div = element("div");
  			if (before_title_slot) before_title_slot.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_title_slot) after_title_slot.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (if_block3) if_block3.c();
  			t5 = space();
  			if (if_block4) if_block4.c();
  			t6 = space();
  			if (inner_slot) inner_slot.c();
  			t7 = space();
  			if (if_block5) if_block5.c();
  			t8 = space();
  			if (if_block6) if_block6.c();
  			if_block6_anchor = empty$1();
  			attr_dev(div, "class", "item-title-row");
  			add_location(div, file$b, 527, 18, 18454);
  		},
  		m: function mount(target, anchor) {
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div, anchor);

  			if (before_title_slot) {
  				before_title_slot.m(div, null);
  			}

  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_title_slot) {
  				after_title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block2) if_block2.m(div, null);
  			insert_dev(target, t4, anchor);
  			if (if_block3) if_block3.m(target, anchor);
  			insert_dev(target, t5, anchor);
  			if (if_block4) if_block4.m(target, anchor);
  			insert_dev(target, t6, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t7, anchor);
  			if (if_block5) if_block5.m(target, anchor);
  			insert_dev(target, t8, anchor);
  			if (if_block6) if_block6.m(target, anchor);
  			insert_dev(target, if_block6_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_36(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t0.parentNode, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_2, get_before_title_slot_context_2);
  				}
  			}

  			if (/*hasTitle*/ ctx[37]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle*/ 64) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_35(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_2, get_after_title_slot_context_2);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_32(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, null);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*hasSubtitle*/ ctx[40]) {
  				if (if_block3) {
  					if_block3.p(ctx, dirty);

  					if (dirty[1] & /*hasSubtitle*/ 512) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block_31(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(t5.parentNode, t5);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			if (/*hasText*/ ctx[41]) {
  				if (if_block4) {
  					if_block4.p(ctx, dirty);

  					if (dirty[1] & /*hasText*/ 1024) {
  						transition_in(if_block4, 1);
  					}
  				} else {
  					if_block4 = create_if_block_30(ctx);
  					if_block4.c();
  					transition_in(if_block4, 1);
  					if_block4.m(t6.parentNode, t6);
  				}
  			} else if (if_block4) {
  				group_outros();

  				transition_out(if_block4, 1, 1, () => {
  					if_block4 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_2, get_inner_slot_context_2);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block5) {
  					if_block5.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block5, 1);
  					}
  				} else {
  					if_block5 = create_if_block_29(ctx);
  					if_block5.c();
  					transition_in(if_block5, 1);
  					if_block5.m(t8.parentNode, t8);
  				}
  			} else if (if_block5) {
  				group_outros();

  				transition_out(if_block5, 1, 1, () => {
  					if_block5 = null;
  				});

  				check_outros();
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block6) {
  					if_block6.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block6, 1);
  					}
  				} else {
  					if_block6 = create_if_block_28(ctx);
  					if_block6.c();
  					transition_in(if_block6, 1);
  					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
  				}
  			} else if (if_block6) {
  				group_outros();

  				transition_out(if_block6, 1, 1, () => {
  					if_block6 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(before_title_slot, local);
  			transition_in(if_block1);
  			transition_in(after_title_slot, local);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			transition_in(if_block4);
  			transition_in(inner_slot, local);
  			transition_in(if_block5);
  			transition_in(if_block6);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(before_title_slot, local);
  			transition_out(if_block1);
  			transition_out(after_title_slot, local);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			transition_out(if_block4);
  			transition_out(inner_slot, local);
  			transition_out(if_block5);
  			transition_out(if_block6);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div);
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (if_block2) if_block2.d();
  			if (detaching) detach_dev(t4);
  			if (if_block3) if_block3.d(detaching);
  			if (detaching) detach_dev(t5);
  			if (if_block4) if_block4.d(detaching);
  			if (detaching) detach_dev(t6);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t7);
  			if (if_block5) if_block5.d(detaching);
  			if (detaching) detach_dev(t8);
  			if (if_block6) if_block6.d(detaching);
  			if (detaching) detach_dev(if_block6_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_27.name,
  		type: "if",
  		source: "(521:16) {#if isMedia}",
  		ctx
  	});

  	return block;
  }

  // (575:18) {#if (hasTitle || hasHeader || hasFooter)}
  function create_if_block_41(ctx) {
  	let div;
  	let t0;
  	let t1_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_43(ctx);
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_3);
  	let if_block1 = /*hasFooter*/ ctx[39] && create_if_block_42(ctx);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			t1 = text$1(t1_value);
  			t2 = space();
  			if (title_slot) title_slot.c();
  			t3 = space();
  			if (if_block1) if_block1.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 575, 20, 20391);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			append_dev(div, t1);
  			append_dev(div, t2);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block1) if_block1.m(div, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_43(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if ((!current || dirty[0] & /*title*/ 1) && t1_value !== (t1_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_3, get_title_slot_context_3);
  				}
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_42(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, null);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(title_slot, local);
  			transition_in(if_block1);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(title_slot, local);
  			transition_out(if_block1);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (title_slot) title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_41.name,
  		type: "if",
  		source: "(575:18) {#if (hasTitle || hasHeader || hasFooter)}",
  		ctx
  	});

  	return block;
  }

  // (577:22) {#if hasHeader}
  function create_if_block_43(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_3);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 577, 24, 20478);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_3, get_header_slot_context_3);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_43.name,
  		type: "if",
  		source: "(577:22) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (585:22) {#if hasFooter}
  function create_if_block_42(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_3);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 585, 24, 20807);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_3, get_footer_slot_context_3);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_42.name,
  		type: "if",
  		source: "(585:22) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (594:18) {#if hasAfter}
  function create_if_block_38(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_3);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_40(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_39(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_3);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_3);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 594, 20, 21138);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_3, get_after_start_slot_context_3);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_40(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_39(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_3, get_after_slot_context_3);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_3, get_after_end_slot_context_3);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_38.name,
  		type: "if",
  		source: "(594:18) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (597:22) {#if typeof after !== 'undefined'}
  function create_if_block_40(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 597, 24, 21294);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_40.name,
  		type: "if",
  		source: "(597:22) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (600:22) {#if typeof badge !== 'undefined'}
  function create_if_block_39(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_3] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_39.name,
  		type: "if",
  		source: "(600:22) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (601:24) <Badge color={badgeColor}>
  function create_default_slot_3(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_3.name,
  		type: "slot",
  		source: "(601:24) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (608:18) {#if !(swipeout || accordionItem)}
  function create_if_block_37(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_37.name,
  		type: "if",
  		source: "(608:18) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (522:18) {#if hasHeader}
  function create_if_block_36(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_2);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 522, 20, 18271);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_2, get_header_slot_context_2);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_36.name,
  		type: "if",
  		source: "(522:18) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (530:20) {#if (hasTitle)}
  function create_if_block_35(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_2);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (title_slot) title_slot.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 530, 22, 18591);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_2, get_title_slot_context_2);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (title_slot) title_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_35.name,
  		type: "if",
  		source: "(530:20) {#if (hasTitle)}",
  		ctx
  	});

  	return block;
  }

  // (537:20) {#if hasAfter}
  function create_if_block_32(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_2);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_34(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_33(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_2);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_2);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 537, 22, 18866);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_2, get_after_start_slot_context_2);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_34(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_33(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_2, get_after_slot_context_2);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_2, get_after_end_slot_context_2);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_32.name,
  		type: "if",
  		source: "(537:20) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (540:24) {#if typeof after !== 'undefined'}
  function create_if_block_34(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 540, 26, 19028);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_34.name,
  		type: "if",
  		source: "(540:24) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (543:24) {#if typeof badge !== 'undefined'}
  function create_if_block_33(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_2$2] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_33.name,
  		type: "if",
  		source: "(543:24) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (544:26) <Badge color={badgeColor}>
  function create_default_slot_2$2(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_2$2.name,
  		type: "slot",
  		source: "(544:26) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (551:18) {#if hasSubtitle}
  function create_if_block_31(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "";
  	let t0;
  	let t1;
  	let current;
  	const subtitle_slot_template = /*#slots*/ ctx[66].subtitle;
  	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[80], get_subtitle_slot_context_1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (subtitle_slot) subtitle_slot.c();
  			attr_dev(div, "class", "item-subtitle");
  			add_location(div, file$b, 551, 20, 19492);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (subtitle_slot) {
  				subtitle_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*subtitle*/ 8) && t0_value !== (t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "")) set_data_dev(t0, t0_value);

  			if (subtitle_slot) {
  				if (subtitle_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(subtitle_slot, subtitle_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_subtitle_slot_changes_1, get_subtitle_slot_context_1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(subtitle_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(subtitle_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (subtitle_slot) subtitle_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_31.name,
  		type: "if",
  		source: "(551:18) {#if hasSubtitle}",
  		ctx
  	});

  	return block;
  }

  // (557:18) {#if hasText}
  function create_if_block_30(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*text*/ ctx[1]) + "";
  	let t0;
  	let t1;
  	let current;
  	const text_slot_template = /*#slots*/ ctx[66].text;
  	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[80], get_text_slot_context_1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (text_slot) text_slot.c();
  			attr_dev(div, "class", "item-text");
  			add_location(div, file$b, 557, 20, 19715);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (text_slot) {
  				text_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*text*/ 2) && t0_value !== (t0_value = Utils$1.text(/*text*/ ctx[1]) + "")) set_data_dev(t0, t0_value);

  			if (text_slot) {
  				if (text_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_text_slot_changes_1, get_text_slot_context_1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(text_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(text_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (text_slot) text_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_30.name,
  		type: "if",
  		source: "(557:18) {#if hasText}",
  		ctx
  	});

  	return block;
  }

  // (564:18) {#if !(swipeout || accordionItem)}
  function create_if_block_29(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_29.name,
  		type: "if",
  		source: "(564:18) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (567:18) {#if hasFooter}
  function create_if_block_28(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_2);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 567, 20, 20074);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_2, get_footer_slot_context_2);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_28.name,
  		type: "if",
  		source: "(567:18) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (380:14) {#if isSortable && sortable !== false && isSortableOpposite}
  function create_if_block_25(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "sortable-handler");
  			add_location(div, file$b, 380, 16, 12722);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_25.name,
  		type: "if",
  		source: "(380:14) {#if isSortable && sortable !== false && isSortableOpposite}",
  		ctx
  	});

  	return block;
  }

  // (383:14) {#if hasMedia}
  function create_if_block_23(ctx) {
  	let div;
  	let t;
  	let current;
  	let if_block = typeof /*media*/ ctx[2] !== "undefined" && create_if_block_24(ctx);
  	const media_slot_template = /*#slots*/ ctx[66].media;
  	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[80], get_media_slot_context);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block) if_block.c();
  			t = space();
  			if (media_slot) media_slot.c();
  			attr_dev(div, "class", "item-media");
  			add_location(div, file$b, 383, 16, 12820);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block) if_block.m(div, null);
  			append_dev(div, t);

  			if (media_slot) {
  				media_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (typeof /*media*/ ctx[2] !== "undefined") {
  				if (if_block) {
  					if_block.p(ctx, dirty);
  				} else {
  					if_block = create_if_block_24(ctx);
  					if_block.c();
  					if_block.m(div, t);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			if (media_slot) {
  				if (media_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_media_slot_changes, get_media_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(media_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(media_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block) if_block.d();
  			if (media_slot) media_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_23.name,
  		type: "if",
  		source: "(383:14) {#if hasMedia}",
  		ctx
  	});

  	return block;
  }

  // (385:18) {#if typeof media !== 'undefined'}
  function create_if_block_24(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			if (img.src !== (img_src_value = /*media*/ ctx[2])) attr_dev(img, "src", img_src_value);
  			add_location(img, file$b, 385, 20, 12918);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*media*/ 4 && img.src !== (img_src_value = /*media*/ ctx[2])) {
  				attr_dev(img, "src", img_src_value);
  			}
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_24.name,
  		type: "if",
  		source: "(385:18) {#if typeof media !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (445:16) {:else}
  function create_else_block_1(ctx) {
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let if_block2_anchor;
  	let current;
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context_1);
  	let if_block0 = (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) && create_if_block_20(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context_1);
  	let if_block1 = /*hasAfter*/ ctx[42] && create_if_block_17(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context_1);
  	let if_block2 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_16(ctx);

  	const block = {
  		c: function create() {
  			if (before_title_slot) before_title_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (after_title_slot) after_title_slot.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (inner_slot) inner_slot.c();
  			t4 = space();
  			if (if_block2) if_block2.c();
  			if_block2_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			if (before_title_slot) {
  				before_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t0, anchor);
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t1, anchor);

  			if (after_title_slot) {
  				after_title_slot.m(target, anchor);
  			}

  			insert_dev(target, t2, anchor);
  			if (if_block1) if_block1.m(target, anchor);
  			insert_dev(target, t3, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t4, anchor);
  			if (if_block2) if_block2.m(target, anchor);
  			insert_dev(target, if_block2_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes_1, get_before_title_slot_context_1);
  				}
  			}

  			if (/*hasTitle*/ ctx[37] || /*hasHeader*/ ctx[38] || /*hasFooter*/ ctx[39]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle, hasHeader, hasFooter*/ 448) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_20(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t1.parentNode, t1);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes_1, get_after_title_slot_context_1);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_17(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(t3.parentNode, t3);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes_1, get_inner_slot_context_1);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_16(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_title_slot, local);
  			transition_in(if_block0);
  			transition_in(after_title_slot, local);
  			transition_in(if_block1);
  			transition_in(inner_slot, local);
  			transition_in(if_block2);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_title_slot, local);
  			transition_out(if_block0);
  			transition_out(after_title_slot, local);
  			transition_out(if_block1);
  			transition_out(inner_slot, local);
  			transition_out(if_block2);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t1);
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (detaching) detach_dev(t2);
  			if (if_block1) if_block1.d(detaching);
  			if (detaching) detach_dev(t3);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t4);
  			if (if_block2) if_block2.d(detaching);
  			if (detaching) detach_dev(if_block2_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_1.name,
  		type: "else",
  		source: "(445:16) {:else}",
  		ctx
  	});

  	return block;
  }

  // (393:16) {#if isMedia}
  function create_if_block_6(ctx) {
  	let t0;
  	let div;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let t5;
  	let t6;
  	let t7;
  	let t8;
  	let if_block6_anchor;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_15(ctx);
  	const before_title_slot_template = /*#slots*/ ctx[66]["before-title"];
  	const before_title_slot = create_slot(before_title_slot_template, ctx, /*$$scope*/ ctx[80], get_before_title_slot_context);
  	let if_block1 = /*hasTitle*/ ctx[37] && create_if_block_14(ctx);
  	const after_title_slot_template = /*#slots*/ ctx[66]["after-title"];
  	const after_title_slot = create_slot(after_title_slot_template, ctx, /*$$scope*/ ctx[80], get_after_title_slot_context);
  	let if_block2 = /*hasAfter*/ ctx[42] && create_if_block_11(ctx);
  	let if_block3 = /*hasSubtitle*/ ctx[40] && create_if_block_10(ctx);
  	let if_block4 = /*hasText*/ ctx[41] && create_if_block_9(ctx);
  	const inner_slot_template = /*#slots*/ ctx[66].inner;
  	const inner_slot = create_slot(inner_slot_template, ctx, /*$$scope*/ ctx[80], get_inner_slot_context);
  	let if_block5 = !(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13]) && create_if_block_8(ctx);
  	let if_block6 = /*hasFooter*/ ctx[39] && create_if_block_7(ctx);

  	const block = {
  		c: function create() {
  			if (if_block0) if_block0.c();
  			t0 = space();
  			div = element("div");
  			if (before_title_slot) before_title_slot.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_title_slot) after_title_slot.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (if_block3) if_block3.c();
  			t5 = space();
  			if (if_block4) if_block4.c();
  			t6 = space();
  			if (inner_slot) inner_slot.c();
  			t7 = space();
  			if (if_block5) if_block5.c();
  			t8 = space();
  			if (if_block6) if_block6.c();
  			if_block6_anchor = empty$1();
  			attr_dev(div, "class", "item-title-row");
  			add_location(div, file$b, 399, 18, 13415);
  		},
  		m: function mount(target, anchor) {
  			if (if_block0) if_block0.m(target, anchor);
  			insert_dev(target, t0, anchor);
  			insert_dev(target, div, anchor);

  			if (before_title_slot) {
  				before_title_slot.m(div, null);
  			}

  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_title_slot) {
  				after_title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block2) if_block2.m(div, null);
  			insert_dev(target, t4, anchor);
  			if (if_block3) if_block3.m(target, anchor);
  			insert_dev(target, t5, anchor);
  			if (if_block4) if_block4.m(target, anchor);
  			insert_dev(target, t6, anchor);

  			if (inner_slot) {
  				inner_slot.m(target, anchor);
  			}

  			insert_dev(target, t7, anchor);
  			if (if_block5) if_block5.m(target, anchor);
  			insert_dev(target, t8, anchor);
  			if (if_block6) if_block6.m(target, anchor);
  			insert_dev(target, if_block6_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_15(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(t0.parentNode, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (before_title_slot) {
  				if (before_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(before_title_slot, before_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_before_title_slot_changes, get_before_title_slot_context);
  				}
  			}

  			if (/*hasTitle*/ ctx[37]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasTitle*/ 64) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_14(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_title_slot) {
  				if (after_title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_title_slot, after_title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_title_slot_changes, get_after_title_slot_context);
  				}
  			}

  			if (/*hasAfter*/ ctx[42]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[1] & /*hasAfter*/ 2048) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_11(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, null);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*hasSubtitle*/ ctx[40]) {
  				if (if_block3) {
  					if_block3.p(ctx, dirty);

  					if (dirty[1] & /*hasSubtitle*/ 512) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block_10(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(t5.parentNode, t5);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			if (/*hasText*/ ctx[41]) {
  				if (if_block4) {
  					if_block4.p(ctx, dirty);

  					if (dirty[1] & /*hasText*/ 1024) {
  						transition_in(if_block4, 1);
  					}
  				} else {
  					if_block4 = create_if_block_9(ctx);
  					if_block4.c();
  					transition_in(if_block4, 1);
  					if_block4.m(t6.parentNode, t6);
  				}
  			} else if (if_block4) {
  				group_outros();

  				transition_out(if_block4, 1, 1, () => {
  					if_block4 = null;
  				});

  				check_outros();
  			}

  			if (inner_slot) {
  				if (inner_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(inner_slot, inner_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_inner_slot_changes, get_inner_slot_context);
  				}
  			}

  			if (!(/*swipeout*/ ctx[11] || /*accordionItem*/ ctx[13])) {
  				if (if_block5) {
  					if_block5.p(ctx, dirty);

  					if (dirty[0] & /*swipeout, accordionItem*/ 10240) {
  						transition_in(if_block5, 1);
  					}
  				} else {
  					if_block5 = create_if_block_8(ctx);
  					if_block5.c();
  					transition_in(if_block5, 1);
  					if_block5.m(t8.parentNode, t8);
  				}
  			} else if (if_block5) {
  				group_outros();

  				transition_out(if_block5, 1, 1, () => {
  					if_block5 = null;
  				});

  				check_outros();
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block6) {
  					if_block6.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block6, 1);
  					}
  				} else {
  					if_block6 = create_if_block_7(ctx);
  					if_block6.c();
  					transition_in(if_block6, 1);
  					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
  				}
  			} else if (if_block6) {
  				group_outros();

  				transition_out(if_block6, 1, 1, () => {
  					if_block6 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(before_title_slot, local);
  			transition_in(if_block1);
  			transition_in(after_title_slot, local);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			transition_in(if_block4);
  			transition_in(inner_slot, local);
  			transition_in(if_block5);
  			transition_in(if_block6);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(before_title_slot, local);
  			transition_out(if_block1);
  			transition_out(after_title_slot, local);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			transition_out(if_block4);
  			transition_out(inner_slot, local);
  			transition_out(if_block5);
  			transition_out(if_block6);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (if_block0) if_block0.d(detaching);
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(div);
  			if (before_title_slot) before_title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  			if (after_title_slot) after_title_slot.d(detaching);
  			if (if_block2) if_block2.d();
  			if (detaching) detach_dev(t4);
  			if (if_block3) if_block3.d(detaching);
  			if (detaching) detach_dev(t5);
  			if (if_block4) if_block4.d(detaching);
  			if (detaching) detach_dev(t6);
  			if (inner_slot) inner_slot.d(detaching);
  			if (detaching) detach_dev(t7);
  			if (if_block5) if_block5.d(detaching);
  			if (detaching) detach_dev(t8);
  			if (if_block6) if_block6.d(detaching);
  			if (detaching) detach_dev(if_block6_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_6.name,
  		type: "if",
  		source: "(393:16) {#if isMedia}",
  		ctx
  	});

  	return block;
  }

  // (447:18) {#if (hasTitle || hasHeader || hasFooter)}
  function create_if_block_20(ctx) {
  	let div;
  	let t0;
  	let t1_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	let if_block0 = /*hasHeader*/ ctx[38] && create_if_block_22(ctx);
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context_1);
  	let if_block1 = /*hasFooter*/ ctx[39] && create_if_block_21(ctx);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			t1 = text$1(t1_value);
  			t2 = space();
  			if (title_slot) title_slot.c();
  			t3 = space();
  			if (if_block1) if_block1.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 447, 20, 15352);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			append_dev(div, t1);
  			append_dev(div, t2);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			append_dev(div, t3);
  			if (if_block1) if_block1.m(div, null);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*hasHeader*/ ctx[38]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[1] & /*hasHeader*/ 128) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_22(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if ((!current || dirty[0] & /*title*/ 1) && t1_value !== (t1_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes_1, get_title_slot_context_1);
  				}
  			}

  			if (/*hasFooter*/ ctx[39]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[1] & /*hasFooter*/ 256) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_21(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, null);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(title_slot, local);
  			transition_in(if_block1);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(title_slot, local);
  			transition_out(if_block1);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (title_slot) title_slot.d(detaching);
  			if (if_block1) if_block1.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_20.name,
  		type: "if",
  		source: "(447:18) {#if (hasTitle || hasHeader || hasFooter)}",
  		ctx
  	});

  	return block;
  }

  // (449:22) {#if hasHeader}
  function create_if_block_22(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context_1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 449, 24, 15439);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes_1, get_header_slot_context_1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_22.name,
  		type: "if",
  		source: "(449:22) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (457:22) {#if hasFooter}
  function create_if_block_21(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context_1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 457, 24, 15768);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes_1, get_footer_slot_context_1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_21.name,
  		type: "if",
  		source: "(457:22) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (466:18) {#if hasAfter}
  function create_if_block_17(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context_1);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_19(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_18(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context_1);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context_1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 466, 20, 16099);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes_1, get_after_start_slot_context_1);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_19(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_18(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes_1, get_after_slot_context_1);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes_1, get_after_end_slot_context_1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_17.name,
  		type: "if",
  		source: "(466:18) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (469:22) {#if typeof after !== 'undefined'}
  function create_if_block_19(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 469, 24, 16255);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_19.name,
  		type: "if",
  		source: "(469:22) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (472:22) {#if typeof badge !== 'undefined'}
  function create_if_block_18(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot_1$2] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_18.name,
  		type: "if",
  		source: "(472:22) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (473:24) <Badge color={badgeColor}>
  function create_default_slot_1$2(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_1$2.name,
  		type: "slot",
  		source: "(473:24) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (480:18) {#if !(swipeout || accordionItem)}
  function create_if_block_16(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_16.name,
  		type: "if",
  		source: "(480:18) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (394:18) {#if hasHeader}
  function create_if_block_15(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*header*/ ctx[4]) + "";
  	let t0;
  	let t1;
  	let current;
  	const header_slot_template = /*#slots*/ ctx[66].header;
  	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[80], get_header_slot_context$1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (header_slot) header_slot.c();
  			attr_dev(div, "class", "item-header");
  			add_location(div, file$b, 394, 20, 13232);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (header_slot) {
  				header_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*header*/ 16) && t0_value !== (t0_value = Utils$1.text(/*header*/ ctx[4]) + "")) set_data_dev(t0, t0_value);

  			if (header_slot) {
  				if (header_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(header_slot, header_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_header_slot_changes$1, get_header_slot_context$1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(header_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(header_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (header_slot) header_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_15.name,
  		type: "if",
  		source: "(394:18) {#if hasHeader}",
  		ctx
  	});

  	return block;
  }

  // (402:20) {#if (hasTitle)}
  function create_if_block_14(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t0;
  	let t1;
  	let current;
  	const title_slot_template = /*#slots*/ ctx[66].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[80], get_title_slot_context);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (title_slot) title_slot.c();
  			attr_dev(div, "class", "item-title");
  			add_location(div, file$b, 402, 22, 13552);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (title_slot) {
  				title_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*title*/ 1) && t0_value !== (t0_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t0, t0_value);

  			if (title_slot) {
  				if (title_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_title_slot_changes, get_title_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (title_slot) title_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_14.name,
  		type: "if",
  		source: "(402:20) {#if (hasTitle)}",
  		ctx
  	});

  	return block;
  }

  // (409:20) {#if hasAfter}
  function create_if_block_11(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let current;
  	const after_start_slot_template = /*#slots*/ ctx[66]["after-start"];
  	const after_start_slot = create_slot(after_start_slot_template, ctx, /*$$scope*/ ctx[80], get_after_start_slot_context);
  	let if_block0 = typeof /*after*/ ctx[6] !== "undefined" && create_if_block_13(ctx);
  	let if_block1 = typeof /*badge*/ ctx[7] !== "undefined" && create_if_block_12(ctx);
  	const after_slot_template = /*#slots*/ ctx[66].after;
  	const after_slot = create_slot(after_slot_template, ctx, /*$$scope*/ ctx[80], get_after_slot_context);
  	const after_end_slot_template = /*#slots*/ ctx[66]["after-end"];
  	const after_end_slot = create_slot(after_end_slot_template, ctx, /*$$scope*/ ctx[80], get_after_end_slot_context);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (after_start_slot) after_start_slot.c();
  			t0 = space();
  			if (if_block0) if_block0.c();
  			t1 = space();
  			if (if_block1) if_block1.c();
  			t2 = space();
  			if (after_slot) after_slot.c();
  			t3 = space();
  			if (after_end_slot) after_end_slot.c();
  			attr_dev(div, "class", "item-after");
  			add_location(div, file$b, 409, 22, 13827);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (after_start_slot) {
  				after_start_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t1);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t2);

  			if (after_slot) {
  				after_slot.m(div, null);
  			}

  			append_dev(div, t3);

  			if (after_end_slot) {
  				after_end_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (after_start_slot) {
  				if (after_start_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_start_slot, after_start_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_start_slot_changes, get_after_start_slot_context);
  				}
  			}

  			if (typeof /*after*/ ctx[6] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_13(ctx);
  					if_block0.c();
  					if_block0.m(div, t1);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*badge*/ ctx[7] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*badge*/ 128) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_12(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t2);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (after_slot) {
  				if (after_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_slot, after_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_slot_changes, get_after_slot_context);
  				}
  			}

  			if (after_end_slot) {
  				if (after_end_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(after_end_slot, after_end_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_after_end_slot_changes, get_after_end_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(after_start_slot, local);
  			transition_in(if_block1);
  			transition_in(after_slot, local);
  			transition_in(after_end_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(after_start_slot, local);
  			transition_out(if_block1);
  			transition_out(after_slot, local);
  			transition_out(after_end_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (after_start_slot) after_start_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (after_slot) after_slot.d(detaching);
  			if (after_end_slot) after_end_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_11.name,
  		type: "if",
  		source: "(409:20) {#if hasAfter}",
  		ctx
  	});

  	return block;
  }

  // (412:24) {#if typeof after !== 'undefined'}
  function create_if_block_13(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*after*/ ctx[6]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			add_location(span, file$b, 412, 26, 13989);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*after*/ 64 && t_value !== (t_value = Utils$1.text(/*after*/ ctx[6]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_13.name,
  		type: "if",
  		source: "(412:24) {#if typeof after !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (415:24) {#if typeof badge !== 'undefined'}
  function create_if_block_12(ctx) {
  	let badge_1;
  	let current;

  	badge_1 = new Badge({
  			props: {
  				color: /*badgeColor*/ ctx[8],
  				$$slots: { default: [create_default_slot$2] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(badge_1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(badge_1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const badge_1_changes = {};
  			if (dirty[0] & /*badgeColor*/ 256) badge_1_changes.color = /*badgeColor*/ ctx[8];

  			if (dirty[0] & /*badge*/ 128 | dirty[2] & /*$$scope*/ 262144) {
  				badge_1_changes.$$scope = { dirty, ctx };
  			}

  			badge_1.$set(badge_1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(badge_1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(badge_1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(badge_1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_12.name,
  		type: "if",
  		source: "(415:24) {#if typeof badge !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (416:26) <Badge color={badgeColor}>
  function create_default_slot$2(ctx) {
  	let t_value = Utils$1.text(/*badge*/ ctx[7]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*badge*/ 128 && t_value !== (t_value = Utils$1.text(/*badge*/ ctx[7]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot$2.name,
  		type: "slot",
  		source: "(416:26) <Badge color={badgeColor}>",
  		ctx
  	});

  	return block;
  }

  // (423:18) {#if hasSubtitle}
  function create_if_block_10(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "";
  	let t0;
  	let t1;
  	let current;
  	const subtitle_slot_template = /*#slots*/ ctx[66].subtitle;
  	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[80], get_subtitle_slot_context);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (subtitle_slot) subtitle_slot.c();
  			attr_dev(div, "class", "item-subtitle");
  			add_location(div, file$b, 423, 20, 14453);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (subtitle_slot) {
  				subtitle_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*subtitle*/ 8) && t0_value !== (t0_value = Utils$1.text(/*subtitle*/ ctx[3]) + "")) set_data_dev(t0, t0_value);

  			if (subtitle_slot) {
  				if (subtitle_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(subtitle_slot, subtitle_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_subtitle_slot_changes, get_subtitle_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(subtitle_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(subtitle_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (subtitle_slot) subtitle_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_10.name,
  		type: "if",
  		source: "(423:18) {#if hasSubtitle}",
  		ctx
  	});

  	return block;
  }

  // (429:18) {#if hasText}
  function create_if_block_9(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*text*/ ctx[1]) + "";
  	let t0;
  	let t1;
  	let current;
  	const text_slot_template = /*#slots*/ ctx[66].text;
  	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[80], get_text_slot_context);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (text_slot) text_slot.c();
  			attr_dev(div, "class", "item-text");
  			add_location(div, file$b, 429, 20, 14676);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (text_slot) {
  				text_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*text*/ 2) && t0_value !== (t0_value = Utils$1.text(/*text*/ ctx[1]) + "")) set_data_dev(t0, t0_value);

  			if (text_slot) {
  				if (text_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_text_slot_changes, get_text_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(text_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(text_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (text_slot) text_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_9.name,
  		type: "if",
  		source: "(429:18) {#if hasText}",
  		ctx
  	});

  	return block;
  }

  // (436:18) {#if !(swipeout || accordionItem)}
  function create_if_block_8(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_8.name,
  		type: "if",
  		source: "(436:18) {#if !(swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (439:18) {#if hasFooter}
  function create_if_block_7(ctx) {
  	let div;
  	let t0_value = Utils$1.text(/*footer*/ ctx[5]) + "";
  	let t0;
  	let t1;
  	let current;
  	const footer_slot_template = /*#slots*/ ctx[66].footer;
  	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[80], get_footer_slot_context$1);

  	const block = {
  		c: function create() {
  			div = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (footer_slot) footer_slot.c();
  			attr_dev(div, "class", "item-footer");
  			add_location(div, file$b, 439, 20, 15035);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			append_dev(div, t0);
  			append_dev(div, t1);

  			if (footer_slot) {
  				footer_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*footer*/ 32) && t0_value !== (t0_value = Utils$1.text(/*footer*/ ctx[5]) + "")) set_data_dev(t0, t0_value);

  			if (footer_slot) {
  				if (footer_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(footer_slot, footer_slot_template, ctx, /*$$scope*/ ctx[80], dirty, get_footer_slot_changes$1, get_footer_slot_context$1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(footer_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(footer_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (footer_slot) footer_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_7.name,
  		type: "if",
  		source: "(439:18) {#if hasFooter}",
  		ctx
  	});

  	return block;
  }

  // (1092:4) {#if (isSortable && sortable !== false && !isSortableOpposite)}
  function create_if_block_3$2(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "sortable-handler");
  			add_location(div, file$b, 1092, 6, 40001);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_3$2.name,
  		type: "if",
  		source: "(1092:4) {#if (isSortable && sortable !== false && !isSortableOpposite)}",
  		ctx
  	});

  	return block;
  }

  // (1095:4) {#if (swipeout || accordionItem)}
  function create_if_block_2$3(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[66].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[80], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[2] & /*$$scope*/ 262144) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[80], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$3.name,
  		type: "if",
  		source: "(1095:4) {#if (swipeout || accordionItem)}",
  		ctx
  	});

  	return block;
  }

  // (363:16) {Utils.text(title)}
  function fallback_block(ctx) {
  	let t_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty[0] & /*title*/ 1 && t_value !== (t_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: fallback_block.name,
  		type: "fallback",
  		source: "(363:16) {Utils.text(title)}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$b(ctx) {
  	let current_block_type_index;
  	let if_block;
  	let if_block_anchor;
  	let current;
  	const if_block_creators = [create_if_block$3, create_if_block_1$3, create_else_block];
  	const if_blocks = [];

  	function select_block_type(ctx, dirty) {
  		if (/*divider*/ ctx[9] || /*groupTitle*/ ctx[10]) return 0;
  		if (/*isSimple*/ ctx[30]) return 1;
  		return 2;
  	}

  	current_block_type_index = select_block_type(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

  	const block = {
  		c: function create() {
  			if_block.c();
  			if_block_anchor = empty$1();
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			if_blocks[current_block_type_index].m(target, anchor);
  			insert_dev(target, if_block_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(if_block_anchor.parentNode, if_block_anchor);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if_blocks[current_block_type_index].d(detaching);
  			if (detaching) detach_dev(if_block_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$b.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$b($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"class","title","text","media","subtitle","header","footer","tooltip","tooltipTrigger","link","tabLink","tabLinkActive","href","target","after","badge","badgeColor","mediaItem","mediaList","divider","groupTitle","swipeout","swipeoutOpened","sortable","sortableOpposite","accordionItem","accordionItemOpened","smartSelect","smartSelectParams","noChevron","chevronCenter","checkbox","radio","radioIcon","checked","indeterminate","name","value","readonly","required","disabled","virtualListIndex","smartSelectInstance"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;

  	validate_slots("List_item", slots, [
  		'default','root-start','content-start','media','inner-start','header','before-title','title','after-title','after-start','after','after-end','subtitle','text','inner','footer','inner-end','content','content-end','root','root-end'
  	]);

  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { title = undefined } = $$props;
  	let { text = undefined } = $$props;
  	let { media = undefined } = $$props;
  	let { subtitle = undefined } = $$props;
  	let { header = undefined } = $$props;
  	let { footer = undefined } = $$props;
  	let { tooltip = undefined } = $$props;
  	let { tooltipTrigger = undefined } = $$props;
  	let { link = undefined } = $$props;
  	let { tabLink = undefined } = $$props;
  	let { tabLinkActive = false } = $$props;
  	let { href = undefined } = $$props;
  	let { target = undefined } = $$props;
  	let { after = undefined } = $$props;
  	let { badge = undefined } = $$props;
  	let { badgeColor = undefined } = $$props;
  	let { mediaItem = false } = $$props;
  	let { mediaList = false } = $$props;
  	let { divider = false } = $$props;
  	let { groupTitle = false } = $$props;
  	let { swipeout = false } = $$props;
  	let { swipeoutOpened = false } = $$props;
  	let { sortable = undefined } = $$props;
  	let { sortableOpposite = undefined } = $$props;
  	let { accordionItem = false } = $$props;
  	let { accordionItemOpened = false } = $$props;
  	let { smartSelect = false } = $$props;
  	let { smartSelectParams = undefined } = $$props;
  	let { noChevron = undefined } = $$props;
  	let { chevronCenter = undefined } = $$props;
  	let { checkbox = undefined } = $$props;
  	let { radio = undefined } = $$props;
  	let { radioIcon = undefined } = $$props;
  	let { checked = undefined } = $$props;
  	let { indeterminate = undefined } = $$props;
  	let { name = undefined } = $$props;
  	let { value = undefined } = $$props;
  	let { readonly = undefined } = $$props;
  	let { required = undefined } = $$props;
  	let { disabled = undefined } = $$props;
  	let { virtualListIndex = undefined } = $$props;
  	let el;
  	let linkEl;
  	let innerEl;
  	let inputEl;
  	let f7SmartSelect;
  	let f7Tooltip;

  	function smartSelectInstance() {
  		return f7SmartSelect;
  	}

  	/* eslint-enable no-undef */
  	let tooltipText = tooltip;

  	function watchTooltip(newText) {
  		const oldText = tooltipText;
  		if (oldText === newText) return;
  		tooltipText = newText;

  		if (!newText && f7Tooltip) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  			return;
  		}

  		if (newText && !f7Tooltip && f7.instance) {
  			f7Tooltip = f7.instance.tooltip.create({
  				targetEl: el,
  				text: newText,
  				trigger: tooltipTrigger
  			});

  			return;
  		}

  		if (!newText || !f7Tooltip) return;
  		f7Tooltip.setText(newText);
  	}

  	let initialWatchedOpened = false;

  	function watchSwipeoutOpened(opened) {
  		if (!initialWatchedOpened) {
  			initialWatchedOpened = true;
  			return;
  		}

  		if (!swipeout) return;

  		if (opened) {
  			f7.instance.swipeout.open(el);
  		} else {
  			f7.instance.swipeout.close(el);
  		}
  	}

  	function onClick(event) {
  		if (event.target.tagName.toLowerCase() !== "input") {
  			dispatch("click", event);
  			if (typeof $$props.onClick === "function") $$props.onClick(event);
  		}
  	}

  	function onSwipeoutOverswipeEnter(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutOverswipeEnter");
  		if (typeof $$props.onSwipeoutOverswipeEnter === "function") $$props.onSwipeoutOverswipeEnter();
  	}

  	function onSwipeoutOverswipeExit(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutOverswipeExit");
  		if (typeof $$props.onSwipeoutOverswipeExit === "function") $$props.onSwipeoutOverswipeExit();
  	}

  	function onSwipeoutDeleted(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutDeleted");
  		if (typeof $$props.onSwipeoutDeleted === "function") $$props.onSwipeoutDeleted();
  	}

  	function onSwipeoutDelete(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutDelete");
  		if (typeof $$props.onSwipeoutDelete === "function") $$props.onSwipeoutDelete();
  	}

  	function onSwipeoutClose(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutClose");
  		if (typeof $$props.onSwipeoutClose === "function") $$props.onSwipeoutClose();
  	}

  	function onSwipeoutClosed(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutClosed");
  		if (typeof $$props.onSwipeoutClosed === "function") $$props.onSwipeoutClosed();
  	}

  	function onSwipeoutOpen(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutOpen");
  		if (typeof $$props.onSwipeoutOpen === "function") $$props.onSwipeoutOpen();
  	}

  	function onSwipeoutOpened(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("swipeoutOpened");
  		if (typeof $$props.onSwipeoutOpened === "function") $$props.onSwipeoutOpened();
  	}

  	function onSwipeout(eventEl, progress) {
  		if (eventEl !== el) return;
  		dispatch("swipeout", progress);
  	}

  	function onAccBeforeClose(eventEl, prevent) {
  		if (eventEl !== el) return;
  		dispatch("accordionBeforeClose", [prevent]);
  		if (typeof $$props.onAccordionBeforeClose === "function") $$props.onAccordionBeforeClose(prevent);
  	}

  	function onAccClose(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("accordionClose");
  		if (typeof $$props.onAccordionClose === "function") $$props.onAccordionClose();
  	}

  	function onAccClosed(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("accordionClosed");
  		if (typeof $$props.onAccordionClosed === "function") $$props.onAccordionClosed();
  	}

  	function onAccBeforeOpen(eventEl, prevent) {
  		if (eventEl !== el) return;
  		dispatch("accordionBeforeOpen", [prevent]);
  		if (typeof $$props.onAccordionBeforeOpen === "function") $$props.onAccordionBeforeOpen(prevent);
  	}

  	function onAccOpen(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("accordionOpen");
  		if (typeof $$props.onAccordionOpen === "function") $$props.onAccordionOpen();
  	}

  	function onAccOpened(eventEl) {
  		if (eventEl !== el) return;
  		dispatch("accordionOpened");
  		if (typeof $$props.onAccordionOpened === "function") $$props.onAccordionOpened();
  	}

  	function onChange(event) {
  		dispatch("change", [event]);
  		if (typeof $$props.onChange === "function") $$props.onChange(event);
  	}

  	onMount(() => {
  		if (linkEl && $$props.routeProps) {
  			$$invalidate(24, linkEl.f7RouteProps = $$props.routeProps, linkEl);
  		}

  		if (indeterminate && inputEl) {
  			$$invalidate(26, inputEl.indeterminate = true, inputEl);
  		}

  		f7.ready(() => {
  			if (swipeout) {
  				f7.instance.on("swipeoutOpen", onSwipeoutOpen);
  				f7.instance.on("swipeoutOpened", onSwipeoutOpened);
  				f7.instance.on("swipeoutClose", onSwipeoutClose);
  				f7.instance.on("swipeoutClosed", onSwipeoutClosed);
  				f7.instance.on("swipeoutDelete", onSwipeoutDelete);
  				f7.instance.on("swipeoutDeleted", onSwipeoutDeleted);
  				f7.instance.on("swipeoutOverswipeEnter", onSwipeoutOverswipeEnter);
  				f7.instance.on("swipeoutOverswipeExit", onSwipeoutOverswipeExit);
  				f7.instance.on("swipeout", onSwipeout);
  			}

  			if (accordionItem) {
  				f7.instance.on("accordionBeforeOpen", onAccBeforeOpen);
  				f7.instance.on("accordionOpen", onAccOpen);
  				f7.instance.on("accordionOpened", onAccOpened);
  				f7.instance.on("accordionBeforeClose", onAccBeforeClose);
  				f7.instance.on("accordionClose", onAccClose);
  				f7.instance.on("accordionClosed", onAccClosed);
  			}

  			if (linkEl && smartSelect) {
  				const ssParams = Utils$1.extend({ el: linkEl }, smartSelectParams || {});
  				f7SmartSelect = f7.instance.smartSelect.create(ssParams);
  			}

  			if (swipeoutOpened) {
  				f7.instance.swipeout.open(el);
  			}

  			if (tooltip) {
  				f7Tooltip = f7.instance.tooltip.create({
  					targetEl: el,
  					text: tooltip,
  					trigger: tooltipTrigger
  				});
  			}
  		});
  	});

  	afterUpdate(() => {
  		if (linkEl && $$props.routeProps) {
  			$$invalidate(24, linkEl.f7RouteProps = $$props.routeProps, linkEl);
  		}

  		if (inputEl) {
  			$$invalidate(26, inputEl.indeterminate = indeterminate, inputEl);
  		}
  	});

  	onDestroy(() => {
  		if (linkEl) {
  			delete linkEl.f7RouteProps;
  		}

  		if (!f7.instance) return;

  		if (swipeout) {
  			f7.instance.off("swipeoutOpen", onSwipeoutOpen);
  			f7.instance.off("swipeoutOpened", onSwipeoutOpened);
  			f7.instance.off("swipeoutClose", onSwipeoutClose);
  			f7.instance.off("swipeoutClosed", onSwipeoutClosed);
  			f7.instance.off("swipeoutDelete", onSwipeoutDelete);
  			f7.instance.off("swipeoutDeleted", onSwipeoutDeleted);
  			f7.instance.off("swipeoutOverswipeEnter", onSwipeoutOverswipeEnter);
  			f7.instance.off("swipeoutOverswipeExit", onSwipeoutOverswipeExit);
  			f7.instance.off("swipeout", onSwipeout);
  		}

  		if (accordionItem) {
  			f7.instance.off("accordionBeforeOpen", onAccBeforeOpen);
  			f7.instance.off("accordionOpen", onAccOpen);
  			f7.instance.off("accordionOpened", onAccOpened);
  			f7.instance.off("accordionBeforeClose", onAccBeforeClose);
  			f7.instance.off("accordionClose", onAccClose);
  			f7.instance.off("accordionClosed", onAccClosed);
  		}

  		if (f7SmartSelect && f7SmartSelect.destroy) {
  			f7SmartSelect.destroy();
  			f7SmartSelect = null;
  		}

  		if (f7Tooltip && f7Tooltip.destroy) {
  			f7Tooltip.destroy();
  			f7Tooltip = null;
  		}
  	});

  	function li_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(23, el);
  		});
  	}

  	function li_binding_1($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(23, el);
  		});
  	}

  	function div0_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			innerEl = $$value;
  			$$invalidate(25, innerEl);
  		});
  	}

  	function a_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			linkEl = $$value;
  			$$invalidate(24, linkEl);
  		});
  	}

  	function input_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			inputEl = $$value;
  			$$invalidate(26, inputEl);
  		});
  	}

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			innerEl = $$value;
  			$$invalidate(25, innerEl);
  		});
  	}

  	function div0_binding_1($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			innerEl = $$value;
  			$$invalidate(25, innerEl);
  		});
  	}

  	function div0_binding_2($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			innerEl = $$value;
  			$$invalidate(25, innerEl);
  		});
  	}

  	function a_binding_1($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			linkEl = $$value;
  			$$invalidate(24, linkEl);
  		});
  	}

  	function input_binding_1($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			inputEl = $$value;
  			$$invalidate(26, inputEl);
  		});
  	}

  	function div_binding_1($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			innerEl = $$value;
  			$$invalidate(25, innerEl);
  		});
  	}

  	function div0_binding_3($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			innerEl = $$value;
  			$$invalidate(25, innerEl);
  		});
  	}

  	function li_binding_2($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(23, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(103, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(45, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(46, className = $$new_props.class);
  		if ("title" in $$new_props) $$invalidate(0, title = $$new_props.title);
  		if ("text" in $$new_props) $$invalidate(1, text = $$new_props.text);
  		if ("media" in $$new_props) $$invalidate(2, media = $$new_props.media);
  		if ("subtitle" in $$new_props) $$invalidate(3, subtitle = $$new_props.subtitle);
  		if ("header" in $$new_props) $$invalidate(4, header = $$new_props.header);
  		if ("footer" in $$new_props) $$invalidate(5, footer = $$new_props.footer);
  		if ("tooltip" in $$new_props) $$invalidate(47, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$new_props) $$invalidate(48, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("link" in $$new_props) $$invalidate(49, link = $$new_props.link);
  		if ("tabLink" in $$new_props) $$invalidate(50, tabLink = $$new_props.tabLink);
  		if ("tabLinkActive" in $$new_props) $$invalidate(51, tabLinkActive = $$new_props.tabLinkActive);
  		if ("href" in $$new_props) $$invalidate(52, href = $$new_props.href);
  		if ("target" in $$new_props) $$invalidate(53, target = $$new_props.target);
  		if ("after" in $$new_props) $$invalidate(6, after = $$new_props.after);
  		if ("badge" in $$new_props) $$invalidate(7, badge = $$new_props.badge);
  		if ("badgeColor" in $$new_props) $$invalidate(8, badgeColor = $$new_props.badgeColor);
  		if ("mediaItem" in $$new_props) $$invalidate(54, mediaItem = $$new_props.mediaItem);
  		if ("mediaList" in $$new_props) $$invalidate(55, mediaList = $$new_props.mediaList);
  		if ("divider" in $$new_props) $$invalidate(9, divider = $$new_props.divider);
  		if ("groupTitle" in $$new_props) $$invalidate(10, groupTitle = $$new_props.groupTitle);
  		if ("swipeout" in $$new_props) $$invalidate(11, swipeout = $$new_props.swipeout);
  		if ("swipeoutOpened" in $$new_props) $$invalidate(56, swipeoutOpened = $$new_props.swipeoutOpened);
  		if ("sortable" in $$new_props) $$invalidate(12, sortable = $$new_props.sortable);
  		if ("sortableOpposite" in $$new_props) $$invalidate(57, sortableOpposite = $$new_props.sortableOpposite);
  		if ("accordionItem" in $$new_props) $$invalidate(13, accordionItem = $$new_props.accordionItem);
  		if ("accordionItemOpened" in $$new_props) $$invalidate(58, accordionItemOpened = $$new_props.accordionItemOpened);
  		if ("smartSelect" in $$new_props) $$invalidate(59, smartSelect = $$new_props.smartSelect);
  		if ("smartSelectParams" in $$new_props) $$invalidate(60, smartSelectParams = $$new_props.smartSelectParams);
  		if ("noChevron" in $$new_props) $$invalidate(61, noChevron = $$new_props.noChevron);
  		if ("chevronCenter" in $$new_props) $$invalidate(62, chevronCenter = $$new_props.chevronCenter);
  		if ("checkbox" in $$new_props) $$invalidate(14, checkbox = $$new_props.checkbox);
  		if ("radio" in $$new_props) $$invalidate(15, radio = $$new_props.radio);
  		if ("radioIcon" in $$new_props) $$invalidate(63, radioIcon = $$new_props.radioIcon);
  		if ("checked" in $$new_props) $$invalidate(16, checked = $$new_props.checked);
  		if ("indeterminate" in $$new_props) $$invalidate(64, indeterminate = $$new_props.indeterminate);
  		if ("name" in $$new_props) $$invalidate(17, name = $$new_props.name);
  		if ("value" in $$new_props) $$invalidate(18, value = $$new_props.value);
  		if ("readonly" in $$new_props) $$invalidate(19, readonly = $$new_props.readonly);
  		if ("required" in $$new_props) $$invalidate(20, required = $$new_props.required);
  		if ("disabled" in $$new_props) $$invalidate(21, disabled = $$new_props.disabled);
  		if ("virtualListIndex" in $$new_props) $$invalidate(22, virtualListIndex = $$new_props.virtualListIndex);
  		if ("$$scope" in $$new_props) $$invalidate(80, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		onMount,
  		onDestroy,
  		afterUpdate,
  		getContext,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		hasSlots,
  		Badge,
  		dispatch,
  		className,
  		title,
  		text,
  		media,
  		subtitle,
  		header,
  		footer,
  		tooltip,
  		tooltipTrigger,
  		link,
  		tabLink,
  		tabLinkActive,
  		href,
  		target,
  		after,
  		badge,
  		badgeColor,
  		mediaItem,
  		mediaList,
  		divider,
  		groupTitle,
  		swipeout,
  		swipeoutOpened,
  		sortable,
  		sortableOpposite,
  		accordionItem,
  		accordionItemOpened,
  		smartSelect,
  		smartSelectParams,
  		noChevron,
  		chevronCenter,
  		checkbox,
  		radio,
  		radioIcon,
  		checked,
  		indeterminate,
  		name,
  		value,
  		readonly,
  		required,
  		disabled,
  		virtualListIndex,
  		el,
  		linkEl,
  		innerEl,
  		inputEl,
  		f7SmartSelect,
  		f7Tooltip,
  		smartSelectInstance,
  		tooltipText,
  		watchTooltip,
  		initialWatchedOpened,
  		watchSwipeoutOpened,
  		onClick,
  		onSwipeoutOverswipeEnter,
  		onSwipeoutOverswipeExit,
  		onSwipeoutDeleted,
  		onSwipeoutDelete,
  		onSwipeoutClose,
  		onSwipeoutClosed,
  		onSwipeoutOpen,
  		onSwipeoutOpened,
  		onSwipeout,
  		onAccBeforeClose,
  		onAccClose,
  		onAccClosed,
  		onAccBeforeOpen,
  		onAccOpen,
  		onAccOpened,
  		onChange,
  		isMedia,
  		isSortable,
  		isSortableOpposite,
  		isSimple,
  		liClasses,
  		contentClasses,
  		linkClasses,
  		linkAttrs,
  		isLink,
  		hasMedia,
  		hasTitle,
  		hasHeader,
  		hasFooter,
  		hasSubtitle,
  		hasText,
  		hasAfter
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(103, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(46, className = $$new_props.className);
  		if ("title" in $$props) $$invalidate(0, title = $$new_props.title);
  		if ("text" in $$props) $$invalidate(1, text = $$new_props.text);
  		if ("media" in $$props) $$invalidate(2, media = $$new_props.media);
  		if ("subtitle" in $$props) $$invalidate(3, subtitle = $$new_props.subtitle);
  		if ("header" in $$props) $$invalidate(4, header = $$new_props.header);
  		if ("footer" in $$props) $$invalidate(5, footer = $$new_props.footer);
  		if ("tooltip" in $$props) $$invalidate(47, tooltip = $$new_props.tooltip);
  		if ("tooltipTrigger" in $$props) $$invalidate(48, tooltipTrigger = $$new_props.tooltipTrigger);
  		if ("link" in $$props) $$invalidate(49, link = $$new_props.link);
  		if ("tabLink" in $$props) $$invalidate(50, tabLink = $$new_props.tabLink);
  		if ("tabLinkActive" in $$props) $$invalidate(51, tabLinkActive = $$new_props.tabLinkActive);
  		if ("href" in $$props) $$invalidate(52, href = $$new_props.href);
  		if ("target" in $$props) $$invalidate(53, target = $$new_props.target);
  		if ("after" in $$props) $$invalidate(6, after = $$new_props.after);
  		if ("badge" in $$props) $$invalidate(7, badge = $$new_props.badge);
  		if ("badgeColor" in $$props) $$invalidate(8, badgeColor = $$new_props.badgeColor);
  		if ("mediaItem" in $$props) $$invalidate(54, mediaItem = $$new_props.mediaItem);
  		if ("mediaList" in $$props) $$invalidate(55, mediaList = $$new_props.mediaList);
  		if ("divider" in $$props) $$invalidate(9, divider = $$new_props.divider);
  		if ("groupTitle" in $$props) $$invalidate(10, groupTitle = $$new_props.groupTitle);
  		if ("swipeout" in $$props) $$invalidate(11, swipeout = $$new_props.swipeout);
  		if ("swipeoutOpened" in $$props) $$invalidate(56, swipeoutOpened = $$new_props.swipeoutOpened);
  		if ("sortable" in $$props) $$invalidate(12, sortable = $$new_props.sortable);
  		if ("sortableOpposite" in $$props) $$invalidate(57, sortableOpposite = $$new_props.sortableOpposite);
  		if ("accordionItem" in $$props) $$invalidate(13, accordionItem = $$new_props.accordionItem);
  		if ("accordionItemOpened" in $$props) $$invalidate(58, accordionItemOpened = $$new_props.accordionItemOpened);
  		if ("smartSelect" in $$props) $$invalidate(59, smartSelect = $$new_props.smartSelect);
  		if ("smartSelectParams" in $$props) $$invalidate(60, smartSelectParams = $$new_props.smartSelectParams);
  		if ("noChevron" in $$props) $$invalidate(61, noChevron = $$new_props.noChevron);
  		if ("chevronCenter" in $$props) $$invalidate(62, chevronCenter = $$new_props.chevronCenter);
  		if ("checkbox" in $$props) $$invalidate(14, checkbox = $$new_props.checkbox);
  		if ("radio" in $$props) $$invalidate(15, radio = $$new_props.radio);
  		if ("radioIcon" in $$props) $$invalidate(63, radioIcon = $$new_props.radioIcon);
  		if ("checked" in $$props) $$invalidate(16, checked = $$new_props.checked);
  		if ("indeterminate" in $$props) $$invalidate(64, indeterminate = $$new_props.indeterminate);
  		if ("name" in $$props) $$invalidate(17, name = $$new_props.name);
  		if ("value" in $$props) $$invalidate(18, value = $$new_props.value);
  		if ("readonly" in $$props) $$invalidate(19, readonly = $$new_props.readonly);
  		if ("required" in $$props) $$invalidate(20, required = $$new_props.required);
  		if ("disabled" in $$props) $$invalidate(21, disabled = $$new_props.disabled);
  		if ("virtualListIndex" in $$props) $$invalidate(22, virtualListIndex = $$new_props.virtualListIndex);
  		if ("el" in $$props) $$invalidate(23, el = $$new_props.el);
  		if ("linkEl" in $$props) $$invalidate(24, linkEl = $$new_props.linkEl);
  		if ("innerEl" in $$props) $$invalidate(25, innerEl = $$new_props.innerEl);
  		if ("inputEl" in $$props) $$invalidate(26, inputEl = $$new_props.inputEl);
  		if ("f7SmartSelect" in $$props) f7SmartSelect = $$new_props.f7SmartSelect;
  		if ("f7Tooltip" in $$props) f7Tooltip = $$new_props.f7Tooltip;
  		if ("tooltipText" in $$props) tooltipText = $$new_props.tooltipText;
  		if ("initialWatchedOpened" in $$props) initialWatchedOpened = $$new_props.initialWatchedOpened;
  		if ("isMedia" in $$props) $$invalidate(27, isMedia = $$new_props.isMedia);
  		if ("isSortable" in $$props) $$invalidate(28, isSortable = $$new_props.isSortable);
  		if ("isSortableOpposite" in $$props) $$invalidate(29, isSortableOpposite = $$new_props.isSortableOpposite);
  		if ("isSimple" in $$props) $$invalidate(30, isSimple = $$new_props.isSimple);
  		if ("liClasses" in $$props) $$invalidate(31, liClasses = $$new_props.liClasses);
  		if ("contentClasses" in $$props) $$invalidate(32, contentClasses = $$new_props.contentClasses);
  		if ("linkClasses" in $$props) $$invalidate(33, linkClasses = $$new_props.linkClasses);
  		if ("linkAttrs" in $$props) $$invalidate(34, linkAttrs = $$new_props.linkAttrs);
  		if ("isLink" in $$props) $$invalidate(35, isLink = $$new_props.isLink);
  		if ("hasMedia" in $$props) $$invalidate(36, hasMedia = $$new_props.hasMedia);
  		if ("hasTitle" in $$props) $$invalidate(37, hasTitle = $$new_props.hasTitle);
  		if ("hasHeader" in $$props) $$invalidate(38, hasHeader = $$new_props.hasHeader);
  		if ("hasFooter" in $$props) $$invalidate(39, hasFooter = $$new_props.hasFooter);
  		if ("hasSubtitle" in $$props) $$invalidate(40, hasSubtitle = $$new_props.hasSubtitle);
  		if ("hasText" in $$props) $$invalidate(41, hasText = $$new_props.hasText);
  		if ("hasAfter" in $$props) $$invalidate(42, hasAfter = $$new_props.hasAfter);
  	};

  	let isMedia;
  	let isSortable;
  	let isSortableOpposite;
  	let isSimple;
  	let liClasses;
  	let contentClasses;
  	let linkClasses;
  	let linkAttrs;
  	let isLink;
  	let hasMedia;
  	let hasTitle;
  	let hasHeader;
  	let hasFooter;
  	let hasSubtitle;
  	let hasText;
  	let hasAfter;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		if ($$self.$$.dirty[1] & /*mediaList, mediaItem*/ 25165824) {
  			 $$invalidate(27, isMedia = mediaList || mediaItem || getContext("f7ListMedia"));
  		}

  		if ($$self.$$.dirty[0] & /*sortable*/ 4096) {
  			 $$invalidate(28, isSortable = sortable || getContext("f7ListSortable"));
  		}

  		if ($$self.$$.dirty[1] & /*sortableOpposite*/ 67108864) {
  			 $$invalidate(29, isSortableOpposite = sortableOpposite || getContext("f7ListSortableOpposite"));
  		}

  		 $$invalidate(31, liClasses = Utils$1.classNames(
  			className,
  			{
  				"item-divider": divider,
  				"list-group-title": groupTitle,
  				"media-item": isMedia,
  				swipeout,
  				"accordion-item": accordionItem,
  				"accordion-item-opened": accordionItemOpened,
  				disabled: disabled && !(radio || checkbox),
  				"no-chevron": noChevron,
  				"chevron-center": chevronCenter,
  				"disallow-sorting": sortable === false
  			},
  			Mixins.colorClasses($$props)
  		));

  		 $$invalidate(32, contentClasses = Utils$1.classNames(
  			className,
  			"item-content",
  			{
  				"item-checkbox": checkbox,
  				"item-radio": radio,
  				"item-radio-icon-start": radio && radioIcon === "start",
  				"item-radio-icon-end": radio && radioIcon === "end"
  			},
  			Mixins.colorClasses($$props)
  		));

  		 $$invalidate(33, linkClasses = Utils$1.classNames(
  			{
  				"item-link": true,
  				"smart-select": smartSelect,
  				"tab-link": tabLink || tabLink === "",
  				"tab-link-active": tabLinkActive
  			},
  			Mixins.linkRouterClasses($$props),
  			Mixins.linkActionsClasses($$props)
  		));

  		 $$invalidate(34, linkAttrs = {
  			href: link === true ? "" : link || href,
  			target,
  			"data-tab": Utils$1.isStringProp(tabLink) && tabLink || undefined,
  			...Mixins.linkRouterAttrs($$props),
  			...Mixins.linkActionsAttrs($$props)
  		});

  		if ($$self.$$.dirty[0] & /*accordionItem*/ 8192 | $$self.$$.dirty[1] & /*link, href, smartSelect*/ 270794752) {
  			 $$invalidate(35, isLink = link || href || smartSelect || accordionItem);
  		}

  		if ($$self.$$.dirty[0] & /*media*/ 4) {
  			/* eslint-disable no-undef */
  			 $$invalidate(36, hasMedia = typeof media !== "undefined" || hasSlots(arguments, "media"));
  		}

  		if ($$self.$$.dirty[0] & /*title*/ 1) {
  			 $$invalidate(37, hasTitle = typeof title !== "undefined" || hasSlots(arguments, "title"));
  		}

  		if ($$self.$$.dirty[0] & /*header*/ 16) {
  			 $$invalidate(38, hasHeader = typeof header !== "undefined" || hasSlots(arguments, "header"));
  		}

  		if ($$self.$$.dirty[0] & /*footer*/ 32) {
  			 $$invalidate(39, hasFooter = typeof footer !== "undefined" || hasSlots(arguments, "footer"));
  		}

  		if ($$self.$$.dirty[0] & /*subtitle*/ 8) {
  			 $$invalidate(40, hasSubtitle = typeof subtitle !== "undefined" || hasSlots(arguments, "subtitle"));
  		}

  		if ($$self.$$.dirty[0] & /*text*/ 2) {
  			 $$invalidate(41, hasText = typeof text !== "undefined" || hasSlots(arguments, "text"));
  		}

  		if ($$self.$$.dirty[0] & /*after, badge*/ 192) {
  			 $$invalidate(42, hasAfter = typeof after !== "undefined" || typeof badge !== "undefined" || hasSlots(arguments, "after"));
  		}

  		if ($$self.$$.dirty[1] & /*tooltip*/ 65536) {
  			 watchTooltip(tooltip);
  		}

  		if ($$self.$$.dirty[1] & /*swipeoutOpened*/ 33554432) {
  			 watchSwipeoutOpened(swipeoutOpened);
  		}
  	};

  	 $$invalidate(30, isSimple = getContext("f7ListSimple"));
  	$$props = exclude_internal_props($$props);

  	return [
  		title,
  		text,
  		media,
  		subtitle,
  		header,
  		footer,
  		after,
  		badge,
  		badgeColor,
  		divider,
  		groupTitle,
  		swipeout,
  		sortable,
  		accordionItem,
  		checkbox,
  		radio,
  		checked,
  		name,
  		value,
  		readonly,
  		required,
  		disabled,
  		virtualListIndex,
  		el,
  		linkEl,
  		innerEl,
  		inputEl,
  		isMedia,
  		isSortable,
  		isSortableOpposite,
  		isSimple,
  		liClasses,
  		contentClasses,
  		linkClasses,
  		linkAttrs,
  		isLink,
  		hasMedia,
  		hasTitle,
  		hasHeader,
  		hasFooter,
  		hasSubtitle,
  		hasText,
  		hasAfter,
  		onClick,
  		onChange,
  		$$restProps,
  		className,
  		tooltip,
  		tooltipTrigger,
  		link,
  		tabLink,
  		tabLinkActive,
  		href,
  		target,
  		mediaItem,
  		mediaList,
  		swipeoutOpened,
  		sortableOpposite,
  		accordionItemOpened,
  		smartSelect,
  		smartSelectParams,
  		noChevron,
  		chevronCenter,
  		radioIcon,
  		indeterminate,
  		smartSelectInstance,
  		slots,
  		li_binding,
  		li_binding_1,
  		div0_binding,
  		a_binding,
  		input_binding,
  		div_binding,
  		div0_binding_1,
  		div0_binding_2,
  		a_binding_1,
  		input_binding_1,
  		div_binding_1,
  		div0_binding_3,
  		li_binding_2,
  		$$scope
  	];
  }

  class List_item extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(
  			this,
  			options,
  			instance$b,
  			create_fragment$b,
  			safe_not_equal,
  			{
  				class: 46,
  				title: 0,
  				text: 1,
  				media: 2,
  				subtitle: 3,
  				header: 4,
  				footer: 5,
  				tooltip: 47,
  				tooltipTrigger: 48,
  				link: 49,
  				tabLink: 50,
  				tabLinkActive: 51,
  				href: 52,
  				target: 53,
  				after: 6,
  				badge: 7,
  				badgeColor: 8,
  				mediaItem: 54,
  				mediaList: 55,
  				divider: 9,
  				groupTitle: 10,
  				swipeout: 11,
  				swipeoutOpened: 56,
  				sortable: 12,
  				sortableOpposite: 57,
  				accordionItem: 13,
  				accordionItemOpened: 58,
  				smartSelect: 59,
  				smartSelectParams: 60,
  				noChevron: 61,
  				chevronCenter: 62,
  				checkbox: 14,
  				radio: 15,
  				radioIcon: 63,
  				checked: 16,
  				indeterminate: 64,
  				name: 17,
  				value: 18,
  				readonly: 19,
  				required: 20,
  				disabled: 21,
  				virtualListIndex: 22,
  				smartSelectInstance: 65
  			},
  			[-1, -1, -1, -1]
  		);

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "List_item",
  			options,
  			id: create_fragment$b.name
  		});
  	}

  	get class() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get title() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set title(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get text() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set text(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get media() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set media(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get subtitle() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set subtitle(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get header() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set header(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get footer() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set footer(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltip() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltip(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tooltipTrigger() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tooltipTrigger(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get link() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set link(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabLink() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabLink(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabLinkActive() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabLinkActive(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get href() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set href(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get target() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set target(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get after() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set after(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get badge() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set badge(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get badgeColor() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set badgeColor(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get mediaItem() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set mediaItem(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get mediaList() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set mediaList(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get divider() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set divider(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get groupTitle() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set groupTitle(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get swipeout() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set swipeout(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get swipeoutOpened() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set swipeoutOpened(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sortable() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sortable(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sortableOpposite() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sortableOpposite(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get accordionItem() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set accordionItem(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get accordionItemOpened() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set accordionItemOpened(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get smartSelect() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set smartSelect(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get smartSelectParams() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set smartSelectParams(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noChevron() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noChevron(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get chevronCenter() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set chevronCenter(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get checkbox() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set checkbox(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get radio() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set radio(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get radioIcon() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set radioIcon(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get checked() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set checked(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get indeterminate() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set indeterminate(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get name() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set name(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get value() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set value(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get readonly() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set readonly(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get required() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set required(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get disabled() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set disabled(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get virtualListIndex() {
  		throw new Error("<List_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set virtualListIndex(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get smartSelectInstance() {
  		return this.$$.ctx[65];
  	}

  	set smartSelectInstance(value) {
  		throw new Error("<List_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\list.svelte generated by Svelte v3.29.4 */
  const file$c = "node_modules\\framework7-svelte\\components\\list.svelte";
  const get_after_list_slot_changes_1 = dirty => ({});
  const get_after_list_slot_context_1 = ctx => ({});
  const get_list_slot_changes_1 = dirty => ({});
  const get_list_slot_context_1 = ctx => ({});
  const get_before_list_slot_changes_1 = dirty => ({});
  const get_before_list_slot_context_1 = ctx => ({});
  const get_after_list_slot_changes = dirty => ({});
  const get_after_list_slot_context = ctx => ({});
  const get_list_slot_changes = dirty => ({});
  const get_list_slot_context = ctx => ({});
  const get_before_list_slot_changes = dirty => ({});
  const get_before_list_slot_context = ctx => ({});

  // (219:0) {:else}
  function create_else_block_1$1(ctx) {
  	let div;
  	let t0;
  	let current_block_type_index;
  	let if_block;
  	let t1;
  	let div_data_sortable_move_elements_value;
  	let current;
  	const before_list_slot_template = /*#slots*/ ctx[43]["before-list"];
  	const before_list_slot = create_slot(before_list_slot_template, ctx, /*$$scope*/ ctx[42], get_before_list_slot_context_1);
  	const if_block_creators = [create_if_block_2$4, create_else_block_2$1];
  	const if_blocks = [];

  	function select_block_type_2(ctx, dirty) {
  		if (/*hasUlSlots*/ ctx[4] && /*ul*/ ctx[0]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_2(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const after_list_slot_template = /*#slots*/ ctx[43]["after-list"];
  	const after_list_slot = create_slot(after_list_slot_template, ctx, /*$$scope*/ ctx[42], get_after_list_slot_context_1);

  	let div_levels = [
  		{ class: /*classes*/ ctx[5] },
  		{
  			"data-sortable-move-elements": div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
  			? /*sortableMoveElements*/ ctx[1].toString()
  			: undefined
  		},
  		restProps(/*$$restProps*/ ctx[7])
  	];

  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (before_list_slot) before_list_slot.c();
  			t0 = space();
  			if_block.c();
  			t1 = space();
  			if (after_list_slot) after_list_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$c, 219, 2, 7137);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (before_list_slot) {
  				before_list_slot.m(div, null);
  			}

  			append_dev(div, t0);
  			if_blocks[current_block_type_index].m(div, null);
  			append_dev(div, t1);

  			if (after_list_slot) {
  				after_list_slot.m(div, null);
  			}

  			/*div_binding*/ ctx[45](div);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_list_slot) {
  				if (before_list_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(before_list_slot, before_list_slot_template, ctx, /*$$scope*/ ctx[42], dirty, get_before_list_slot_changes_1, get_before_list_slot_context_1);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_2(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(div, t1);
  			}

  			if (after_list_slot) {
  				if (after_list_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(after_list_slot, after_list_slot_template, ctx, /*$$scope*/ ctx[42], dirty, get_after_list_slot_changes_1, get_after_list_slot_context_1);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty[0] & /*classes*/ 32) && { class: /*classes*/ ctx[5] },
  				(!current || dirty[0] & /*sortableMoveElements*/ 2 && div_data_sortable_move_elements_value !== (div_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
  				? /*sortableMoveElements*/ ctx[1].toString()
  				: undefined)) && {
  					"data-sortable-move-elements": div_data_sortable_move_elements_value
  				},
  				dirty[0] & /*$$restProps*/ 128 && restProps(/*$$restProps*/ ctx[7])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_list_slot, local);
  			transition_in(if_block);
  			transition_in(after_list_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_list_slot, local);
  			transition_out(if_block);
  			transition_out(after_list_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (before_list_slot) before_list_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (after_list_slot) after_list_slot.d(detaching);
  			/*div_binding*/ ctx[45](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_1$1.name,
  		type: "else",
  		source: "(219:0) {:else}",
  		ctx
  	});

  	return block;
  }

  // (200:0) {#if form}
  function create_if_block$4(ctx) {
  	let form_1;
  	let t0;
  	let current_block_type_index;
  	let if_block;
  	let t1;
  	let form_1_data_sortable_move_elements_value;
  	let current;
  	let mounted;
  	let dispose;
  	const before_list_slot_template = /*#slots*/ ctx[43]["before-list"];
  	const before_list_slot = create_slot(before_list_slot_template, ctx, /*$$scope*/ ctx[42], get_before_list_slot_context);
  	const if_block_creators = [create_if_block_1$4, create_else_block$1];
  	const if_blocks = [];

  	function select_block_type_1(ctx, dirty) {
  		if (/*hasUlSlots*/ ctx[4] && /*ul*/ ctx[0]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type_1(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	const after_list_slot_template = /*#slots*/ ctx[43]["after-list"];
  	const after_list_slot = create_slot(after_list_slot_template, ctx, /*$$scope*/ ctx[42], get_after_list_slot_context);

  	let form_1_levels = [
  		{ class: /*classes*/ ctx[5] },
  		{
  			"data-sortable-move-elements": form_1_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
  			? /*sortableMoveElements*/ ctx[1].toString()
  			: undefined
  		},
  		restProps(/*$$restProps*/ ctx[7])
  	];

  	let form_1_data = {};

  	for (let i = 0; i < form_1_levels.length; i += 1) {
  		form_1_data = assign(form_1_data, form_1_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			form_1 = element("form");
  			if (before_list_slot) before_list_slot.c();
  			t0 = space();
  			if_block.c();
  			t1 = space();
  			if (after_list_slot) after_list_slot.c();
  			set_attributes(form_1, form_1_data);
  			add_location(form_1, file$c, 200, 2, 6701);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, form_1, anchor);

  			if (before_list_slot) {
  				before_list_slot.m(form_1, null);
  			}

  			append_dev(form_1, t0);
  			if_blocks[current_block_type_index].m(form_1, null);
  			append_dev(form_1, t1);

  			if (after_list_slot) {
  				after_list_slot.m(form_1, null);
  			}

  			/*form_1_binding*/ ctx[44](form_1);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(form_1, "submit", /*onSubmit*/ ctx[6], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (before_list_slot) {
  				if (before_list_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(before_list_slot, before_list_slot_template, ctx, /*$$scope*/ ctx[42], dirty, get_before_list_slot_changes, get_before_list_slot_context);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type_1(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(form_1, t1);
  			}

  			if (after_list_slot) {
  				if (after_list_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(after_list_slot, after_list_slot_template, ctx, /*$$scope*/ ctx[42], dirty, get_after_list_slot_changes, get_after_list_slot_context);
  				}
  			}

  			set_attributes(form_1, form_1_data = get_spread_update(form_1_levels, [
  				(!current || dirty[0] & /*classes*/ 32) && { class: /*classes*/ ctx[5] },
  				(!current || dirty[0] & /*sortableMoveElements*/ 2 && form_1_data_sortable_move_elements_value !== (form_1_data_sortable_move_elements_value = typeof /*sortableMoveElements*/ ctx[1] !== "undefined"
  				? /*sortableMoveElements*/ ctx[1].toString()
  				: undefined)) && {
  					"data-sortable-move-elements": form_1_data_sortable_move_elements_value
  				},
  				dirty[0] & /*$$restProps*/ 128 && restProps(/*$$restProps*/ ctx[7])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_list_slot, local);
  			transition_in(if_block);
  			transition_in(after_list_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_list_slot, local);
  			transition_out(if_block);
  			transition_out(after_list_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(form_1);
  			if (before_list_slot) before_list_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			if (after_list_slot) after_list_slot.d(detaching);
  			/*form_1_binding*/ ctx[44](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$4.name,
  		type: "if",
  		source: "(200:0) {#if form}",
  		ctx
  	});

  	return block;
  }

  // (232:4) {:else}
  function create_else_block_2$1(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[43].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[42], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[42], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block_2$1.name,
  		type: "else",
  		source: "(232:4) {:else}",
  		ctx
  	});

  	return block;
  }

  // (227:4) {#if hasUlSlots && ul}
  function create_if_block_2$4(ctx) {
  	let ul_1;
  	let t;
  	let current;
  	const list_slot_template = /*#slots*/ ctx[43].list;
  	const list_slot = create_slot(list_slot_template, ctx, /*$$scope*/ ctx[42], get_list_slot_context_1);
  	const default_slot_template = /*#slots*/ ctx[43].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[42], null);

  	const block = {
  		c: function create() {
  			ul_1 = element("ul");
  			if (list_slot) list_slot.c();
  			t = space();
  			if (default_slot) default_slot.c();
  			add_location(ul_1, file$c, 227, 4, 7404);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, ul_1, anchor);

  			if (list_slot) {
  				list_slot.m(ul_1, null);
  			}

  			append_dev(ul_1, t);

  			if (default_slot) {
  				default_slot.m(ul_1, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (list_slot) {
  				if (list_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(list_slot, list_slot_template, ctx, /*$$scope*/ ctx[42], dirty, get_list_slot_changes_1, get_list_slot_context_1);
  				}
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[42], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(list_slot, local);
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(list_slot, local);
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(ul_1);
  			if (list_slot) list_slot.d(detaching);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$4.name,
  		type: "if",
  		source: "(227:4) {#if hasUlSlots && ul}",
  		ctx
  	});

  	return block;
  }

  // (214:4) {:else}
  function create_else_block$1(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[43].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[42], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[42], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block$1.name,
  		type: "else",
  		source: "(214:4) {:else}",
  		ctx
  	});

  	return block;
  }

  // (209:4) {#if hasUlSlots && ul}
  function create_if_block_1$4(ctx) {
  	let ul_1;
  	let t;
  	let current;
  	const list_slot_template = /*#slots*/ ctx[43].list;
  	const list_slot = create_slot(list_slot_template, ctx, /*$$scope*/ ctx[42], get_list_slot_context);
  	const default_slot_template = /*#slots*/ ctx[43].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[42], null);

  	const block = {
  		c: function create() {
  			ul_1 = element("ul");
  			if (list_slot) list_slot.c();
  			t = space();
  			if (default_slot) default_slot.c();
  			add_location(ul_1, file$c, 209, 4, 6994);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, ul_1, anchor);

  			if (list_slot) {
  				list_slot.m(ul_1, null);
  			}

  			append_dev(ul_1, t);

  			if (default_slot) {
  				default_slot.m(ul_1, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (list_slot) {
  				if (list_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(list_slot, list_slot_template, ctx, /*$$scope*/ ctx[42], dirty, get_list_slot_changes, get_list_slot_context);
  				}
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[1] & /*$$scope*/ 2048) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[42], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(list_slot, local);
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(list_slot, local);
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(ul_1);
  			if (list_slot) list_slot.d(detaching);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$4.name,
  		type: "if",
  		source: "(209:4) {#if hasUlSlots && ul}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$c(ctx) {
  	let current_block_type_index;
  	let if_block;
  	let if_block_anchor;
  	let current;
  	const if_block_creators = [create_if_block$4, create_else_block_1$1];
  	const if_blocks = [];

  	function select_block_type(ctx, dirty) {
  		if (/*form*/ ctx[2]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

  	const block = {
  		c: function create() {
  			if_block.c();
  			if_block_anchor = empty$1();
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			if_blocks[current_block_type_index].m(target, anchor);
  			insert_dev(target, if_block_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(if_block_anchor.parentNode, if_block_anchor);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if_blocks[current_block_type_index].d(detaching);
  			if (detaching) detach_dev(if_block_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$c.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$c($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"class","ul","inset","xsmallInset","smallInset","mediumInset","largeInset","xlargeInset","mediaList","sortable","sortableTapHold","sortableEnabled","sortableMoveElements","sortableOpposite","accordionList","accordionOpposite","contactsList","simpleList","linksList","noHairlines","noHairlinesBetween","noHairlinesMd","noHairlinesBetweenMd","noHairlinesIos","noHairlinesBetweenIos","noHairlinesAurora","noHairlinesBetweenAurora","noChevron","chevronCenter","tab","tabActive","form","formStoreData","inlineLabels","virtualList","virtualListParams","virtualListInstance"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("List", slots, ['before-list','list','default','after-list']);
  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { ul = true } = $$props;
  	let { inset = false } = $$props;
  	let { xsmallInset = false } = $$props;
  	let { smallInset = false } = $$props;
  	let { mediumInset = false } = $$props;
  	let { largeInset = false } = $$props;
  	let { xlargeInset = false } = $$props;
  	let { mediaList = false } = $$props;
  	let { sortable = false } = $$props;
  	let { sortableTapHold = false } = $$props;
  	let { sortableEnabled = false } = $$props;
  	let { sortableMoveElements = undefined } = $$props;
  	let { sortableOpposite = false } = $$props;
  	let { accordionList = false } = $$props;
  	let { accordionOpposite = false } = $$props;
  	let { contactsList = false } = $$props;
  	let { simpleList = false } = $$props;
  	let { linksList = false } = $$props;
  	let { noHairlines = false } = $$props;
  	let { noHairlinesBetween = false } = $$props;
  	let { noHairlinesMd = false } = $$props;
  	let { noHairlinesBetweenMd = false } = $$props;
  	let { noHairlinesIos = false } = $$props;
  	let { noHairlinesBetweenIos = false } = $$props;
  	let { noHairlinesAurora = false } = $$props;
  	let { noHairlinesBetweenAurora = false } = $$props;
  	let { noChevron = false } = $$props;
  	let { chevronCenter = false } = $$props;
  	let { tab = false } = $$props;
  	let { tabActive = false } = $$props;
  	let { form = false } = $$props;
  	let { formStoreData = false } = $$props;
  	let { inlineLabels = false } = $$props;
  	let { virtualList = false } = $$props;
  	let { virtualListParams = undefined } = $$props;
  	let el;
  	let f7VirtualList;

  	function virtualListInstance() {
  		return f7VirtualList;
  	}

  	setContext("f7ListMedia", mediaList);
  	setContext("f7ListSortable", sortable);
  	setContext("f7ListSortableOpposite", sortableOpposite);
  	setContext("f7ListSimple", simpleList);

  	function onSubmit(event) {
  		dispatch("submit", [event]);
  		if (typeof $$props.onSubmit === "function") $$props.onSubmit(event);
  	}

  	function onSortableEnable(sortableEl) {
  		if (sortableEl !== el) return;
  		dispatch("sortableEnable");
  		if (typeof $$props.onSortableEnable === "function") $$props.onSortableEnable();
  	}

  	function onSortableDisable(sortableEl) {
  		if (sortableEl !== el) return;
  		dispatch("sortableDisable");
  		if (typeof $$props.onSortableDisable === "function") $$props.onSortableDisable();
  	}

  	function onSortableSort(listItemEl, sortData, listEl) {
  		if (listEl !== el) return;
  		dispatch("sortableSort", [sortData]);
  		if (typeof $$props.onSortableSort === "function") $$props.onSortableSort(sortData);
  	}

  	function onTabShow(tabEl) {
  		if (tabEl !== el) return;
  		dispatch("tabShow");
  		if (typeof $$props.onTabShow === "function") $$props.onTabShow(tabEl);
  	}

  	function onTabHide(tabEl) {
  		if (tabEl !== el) return;
  		dispatch("tabHide");
  		if (typeof $$props.onTabHide === "function") $$props.onTabHide(tabEl);
  	}

  	onMount(() => {
  		f7.ready(() => {
  			f7.instance.on("sortableEnable", onSortableEnable);
  			f7.instance.on("sortableDisable", onSortableDisable);
  			f7.instance.on("sortableSort", onSortableSort);
  			f7.instance.on("tabShow", onTabShow);
  			f7.instance.on("tabHide", onTabHide);
  			if (!virtualList) return;
  			const vlParams = virtualListParams || {};
  			if (!vlParams.renderItem && !vlParams.itemTemplate && !vlParams.renderExternal) return;

  			f7VirtualList = f7.instance.virtualList.create(Utils$1.extend(
  				{
  					el,
  					on: {
  						itemBeforeInsert(itemEl, item) {
  							const vl = this;
  							dispatch("virtualItemBeforeInsert", [vl, itemEl, item]);
  							if (typeof $$props.onVirtualItemBeforeInsert === "function") $$props.onVirtualItemBeforeInsert(vl, itemEl, item);
  						},
  						beforeClear(fragment) {
  							const vl = this;
  							dispatch("virtualBeforeClear", [vl, fragment]);
  							if (typeof $$props.onVirtualBeforeClear === "function") $$props.onVirtualBeforeClear(vl, fragment);
  						},
  						itemsBeforeInsert(fragment) {
  							const vl = this;
  							dispatch("virtualItemsBeforeInsert", [vl, fragment]);
  							if (typeof $$props.onVirtualItemsBeforeInsert === "function") $$props.onVirtualItemsBeforeInsert(vl, fragment);
  						},
  						itemsAfterInsert(fragment) {
  							const vl = this;
  							dispatch("virtualItemsAfterInsert", [vl, fragment]);
  							if (typeof $$props.onVirtualItemsAfterInsert === "function") $$props.onVirtualItemsAfterInsert(vl, fragment);
  						}
  					}
  				},
  				vlParams
  			));
  		});
  	});

  	onDestroy(() => {
  		if (!f7.instance) return;
  		f7.instance.off("sortableEnable", onSortableEnable);
  		f7.instance.off("sortableDisable", onSortableDisable);
  		f7.instance.off("sortableSort", onSortableSort);
  		f7.instance.off("tabShow", onTabShow);
  		f7.instance.off("tabHide", onTabHide);
  		if (f7VirtualList && f7VirtualList.destroy) f7VirtualList.destroy();
  	});

  	function form_1_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(3, el);
  		});
  	}

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(3, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(53, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(8, className = $$new_props.class);
  		if ("ul" in $$new_props) $$invalidate(0, ul = $$new_props.ul);
  		if ("inset" in $$new_props) $$invalidate(9, inset = $$new_props.inset);
  		if ("xsmallInset" in $$new_props) $$invalidate(10, xsmallInset = $$new_props.xsmallInset);
  		if ("smallInset" in $$new_props) $$invalidate(11, smallInset = $$new_props.smallInset);
  		if ("mediumInset" in $$new_props) $$invalidate(12, mediumInset = $$new_props.mediumInset);
  		if ("largeInset" in $$new_props) $$invalidate(13, largeInset = $$new_props.largeInset);
  		if ("xlargeInset" in $$new_props) $$invalidate(14, xlargeInset = $$new_props.xlargeInset);
  		if ("mediaList" in $$new_props) $$invalidate(15, mediaList = $$new_props.mediaList);
  		if ("sortable" in $$new_props) $$invalidate(16, sortable = $$new_props.sortable);
  		if ("sortableTapHold" in $$new_props) $$invalidate(17, sortableTapHold = $$new_props.sortableTapHold);
  		if ("sortableEnabled" in $$new_props) $$invalidate(18, sortableEnabled = $$new_props.sortableEnabled);
  		if ("sortableMoveElements" in $$new_props) $$invalidate(1, sortableMoveElements = $$new_props.sortableMoveElements);
  		if ("sortableOpposite" in $$new_props) $$invalidate(19, sortableOpposite = $$new_props.sortableOpposite);
  		if ("accordionList" in $$new_props) $$invalidate(20, accordionList = $$new_props.accordionList);
  		if ("accordionOpposite" in $$new_props) $$invalidate(21, accordionOpposite = $$new_props.accordionOpposite);
  		if ("contactsList" in $$new_props) $$invalidate(22, contactsList = $$new_props.contactsList);
  		if ("simpleList" in $$new_props) $$invalidate(23, simpleList = $$new_props.simpleList);
  		if ("linksList" in $$new_props) $$invalidate(24, linksList = $$new_props.linksList);
  		if ("noHairlines" in $$new_props) $$invalidate(25, noHairlines = $$new_props.noHairlines);
  		if ("noHairlinesBetween" in $$new_props) $$invalidate(26, noHairlinesBetween = $$new_props.noHairlinesBetween);
  		if ("noHairlinesMd" in $$new_props) $$invalidate(27, noHairlinesMd = $$new_props.noHairlinesMd);
  		if ("noHairlinesBetweenMd" in $$new_props) $$invalidate(28, noHairlinesBetweenMd = $$new_props.noHairlinesBetweenMd);
  		if ("noHairlinesIos" in $$new_props) $$invalidate(29, noHairlinesIos = $$new_props.noHairlinesIos);
  		if ("noHairlinesBetweenIos" in $$new_props) $$invalidate(30, noHairlinesBetweenIos = $$new_props.noHairlinesBetweenIos);
  		if ("noHairlinesAurora" in $$new_props) $$invalidate(31, noHairlinesAurora = $$new_props.noHairlinesAurora);
  		if ("noHairlinesBetweenAurora" in $$new_props) $$invalidate(32, noHairlinesBetweenAurora = $$new_props.noHairlinesBetweenAurora);
  		if ("noChevron" in $$new_props) $$invalidate(33, noChevron = $$new_props.noChevron);
  		if ("chevronCenter" in $$new_props) $$invalidate(34, chevronCenter = $$new_props.chevronCenter);
  		if ("tab" in $$new_props) $$invalidate(35, tab = $$new_props.tab);
  		if ("tabActive" in $$new_props) $$invalidate(36, tabActive = $$new_props.tabActive);
  		if ("form" in $$new_props) $$invalidate(2, form = $$new_props.form);
  		if ("formStoreData" in $$new_props) $$invalidate(37, formStoreData = $$new_props.formStoreData);
  		if ("inlineLabels" in $$new_props) $$invalidate(38, inlineLabels = $$new_props.inlineLabels);
  		if ("virtualList" in $$new_props) $$invalidate(39, virtualList = $$new_props.virtualList);
  		if ("virtualListParams" in $$new_props) $$invalidate(40, virtualListParams = $$new_props.virtualListParams);
  		if ("$$scope" in $$new_props) $$invalidate(42, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		onMount,
  		onDestroy,
  		setContext,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		hasSlots,
  		dispatch,
  		className,
  		ul,
  		inset,
  		xsmallInset,
  		smallInset,
  		mediumInset,
  		largeInset,
  		xlargeInset,
  		mediaList,
  		sortable,
  		sortableTapHold,
  		sortableEnabled,
  		sortableMoveElements,
  		sortableOpposite,
  		accordionList,
  		accordionOpposite,
  		contactsList,
  		simpleList,
  		linksList,
  		noHairlines,
  		noHairlinesBetween,
  		noHairlinesMd,
  		noHairlinesBetweenMd,
  		noHairlinesIos,
  		noHairlinesBetweenIos,
  		noHairlinesAurora,
  		noHairlinesBetweenAurora,
  		noChevron,
  		chevronCenter,
  		tab,
  		tabActive,
  		form,
  		formStoreData,
  		inlineLabels,
  		virtualList,
  		virtualListParams,
  		el,
  		f7VirtualList,
  		virtualListInstance,
  		onSubmit,
  		onSortableEnable,
  		onSortableDisable,
  		onSortableSort,
  		onTabShow,
  		onTabHide,
  		hasUlSlots,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(53, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(8, className = $$new_props.className);
  		if ("ul" in $$props) $$invalidate(0, ul = $$new_props.ul);
  		if ("inset" in $$props) $$invalidate(9, inset = $$new_props.inset);
  		if ("xsmallInset" in $$props) $$invalidate(10, xsmallInset = $$new_props.xsmallInset);
  		if ("smallInset" in $$props) $$invalidate(11, smallInset = $$new_props.smallInset);
  		if ("mediumInset" in $$props) $$invalidate(12, mediumInset = $$new_props.mediumInset);
  		if ("largeInset" in $$props) $$invalidate(13, largeInset = $$new_props.largeInset);
  		if ("xlargeInset" in $$props) $$invalidate(14, xlargeInset = $$new_props.xlargeInset);
  		if ("mediaList" in $$props) $$invalidate(15, mediaList = $$new_props.mediaList);
  		if ("sortable" in $$props) $$invalidate(16, sortable = $$new_props.sortable);
  		if ("sortableTapHold" in $$props) $$invalidate(17, sortableTapHold = $$new_props.sortableTapHold);
  		if ("sortableEnabled" in $$props) $$invalidate(18, sortableEnabled = $$new_props.sortableEnabled);
  		if ("sortableMoveElements" in $$props) $$invalidate(1, sortableMoveElements = $$new_props.sortableMoveElements);
  		if ("sortableOpposite" in $$props) $$invalidate(19, sortableOpposite = $$new_props.sortableOpposite);
  		if ("accordionList" in $$props) $$invalidate(20, accordionList = $$new_props.accordionList);
  		if ("accordionOpposite" in $$props) $$invalidate(21, accordionOpposite = $$new_props.accordionOpposite);
  		if ("contactsList" in $$props) $$invalidate(22, contactsList = $$new_props.contactsList);
  		if ("simpleList" in $$props) $$invalidate(23, simpleList = $$new_props.simpleList);
  		if ("linksList" in $$props) $$invalidate(24, linksList = $$new_props.linksList);
  		if ("noHairlines" in $$props) $$invalidate(25, noHairlines = $$new_props.noHairlines);
  		if ("noHairlinesBetween" in $$props) $$invalidate(26, noHairlinesBetween = $$new_props.noHairlinesBetween);
  		if ("noHairlinesMd" in $$props) $$invalidate(27, noHairlinesMd = $$new_props.noHairlinesMd);
  		if ("noHairlinesBetweenMd" in $$props) $$invalidate(28, noHairlinesBetweenMd = $$new_props.noHairlinesBetweenMd);
  		if ("noHairlinesIos" in $$props) $$invalidate(29, noHairlinesIos = $$new_props.noHairlinesIos);
  		if ("noHairlinesBetweenIos" in $$props) $$invalidate(30, noHairlinesBetweenIos = $$new_props.noHairlinesBetweenIos);
  		if ("noHairlinesAurora" in $$props) $$invalidate(31, noHairlinesAurora = $$new_props.noHairlinesAurora);
  		if ("noHairlinesBetweenAurora" in $$props) $$invalidate(32, noHairlinesBetweenAurora = $$new_props.noHairlinesBetweenAurora);
  		if ("noChevron" in $$props) $$invalidate(33, noChevron = $$new_props.noChevron);
  		if ("chevronCenter" in $$props) $$invalidate(34, chevronCenter = $$new_props.chevronCenter);
  		if ("tab" in $$props) $$invalidate(35, tab = $$new_props.tab);
  		if ("tabActive" in $$props) $$invalidate(36, tabActive = $$new_props.tabActive);
  		if ("form" in $$props) $$invalidate(2, form = $$new_props.form);
  		if ("formStoreData" in $$props) $$invalidate(37, formStoreData = $$new_props.formStoreData);
  		if ("inlineLabels" in $$props) $$invalidate(38, inlineLabels = $$new_props.inlineLabels);
  		if ("virtualList" in $$props) $$invalidate(39, virtualList = $$new_props.virtualList);
  		if ("virtualListParams" in $$props) $$invalidate(40, virtualListParams = $$new_props.virtualListParams);
  		if ("el" in $$props) $$invalidate(3, el = $$new_props.el);
  		if ("f7VirtualList" in $$props) f7VirtualList = $$new_props.f7VirtualList;
  		if ("hasUlSlots" in $$props) $$invalidate(4, hasUlSlots = $$new_props.hasUlSlots);
  		if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
  	};

  	let hasUlSlots;
  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(5, classes = Utils$1.classNames(
  			className,
  			"list",
  			{
  				inset,
  				"xsmall-inset": xsmallInset,
  				"small-inset": smallInset,
  				"medium-inset": mediumInset,
  				"large-inset": largeInset,
  				"xlarge-inset": xlargeInset,
  				"media-list": mediaList,
  				"simple-list": simpleList,
  				"links-list": linksList,
  				sortable,
  				"sortable-tap-hold": sortableTapHold,
  				"sortable-enabled": sortableEnabled,
  				"sortable-opposite": sortableOpposite,
  				"accordion-list": accordionList,
  				"accordion-opposite": accordionOpposite,
  				"contacts-list": contactsList,
  				"virtual-list": virtualList,
  				tab,
  				"tab-active": tabActive,
  				"no-hairlines": noHairlines,
  				"no-hairlines-md": noHairlinesMd,
  				"no-hairlines-ios": noHairlinesIos,
  				"no-hairlines-aurora": noHairlinesAurora,
  				"no-hairlines-between": noHairlinesBetween,
  				"no-hairlines-between-md": noHairlinesBetweenMd,
  				"no-hairlines-between-ios": noHairlinesBetweenIos,
  				"no-hairlines-between-aurora": noHairlinesBetweenAurora,
  				"form-store-data": formStoreData,
  				"inline-labels": inlineLabels,
  				"no-chevron": noChevron,
  				"chevron-center": chevronCenter
  			},
  			Mixins.colorClasses($$props)
  		));
  	};

  	 $$invalidate(4, hasUlSlots = hasSlots(arguments, "default") || hasSlots(arguments, "list"));
  	$$props = exclude_internal_props($$props);

  	return [
  		ul,
  		sortableMoveElements,
  		form,
  		el,
  		hasUlSlots,
  		classes,
  		onSubmit,
  		$$restProps,
  		className,
  		inset,
  		xsmallInset,
  		smallInset,
  		mediumInset,
  		largeInset,
  		xlargeInset,
  		mediaList,
  		sortable,
  		sortableTapHold,
  		sortableEnabled,
  		sortableOpposite,
  		accordionList,
  		accordionOpposite,
  		contactsList,
  		simpleList,
  		linksList,
  		noHairlines,
  		noHairlinesBetween,
  		noHairlinesMd,
  		noHairlinesBetweenMd,
  		noHairlinesIos,
  		noHairlinesBetweenIos,
  		noHairlinesAurora,
  		noHairlinesBetweenAurora,
  		noChevron,
  		chevronCenter,
  		tab,
  		tabActive,
  		formStoreData,
  		inlineLabels,
  		virtualList,
  		virtualListParams,
  		virtualListInstance,
  		$$scope,
  		slots,
  		form_1_binding,
  		div_binding
  	];
  }

  class List extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(
  			this,
  			options,
  			instance$c,
  			create_fragment$c,
  			safe_not_equal,
  			{
  				class: 8,
  				ul: 0,
  				inset: 9,
  				xsmallInset: 10,
  				smallInset: 11,
  				mediumInset: 12,
  				largeInset: 13,
  				xlargeInset: 14,
  				mediaList: 15,
  				sortable: 16,
  				sortableTapHold: 17,
  				sortableEnabled: 18,
  				sortableMoveElements: 1,
  				sortableOpposite: 19,
  				accordionList: 20,
  				accordionOpposite: 21,
  				contactsList: 22,
  				simpleList: 23,
  				linksList: 24,
  				noHairlines: 25,
  				noHairlinesBetween: 26,
  				noHairlinesMd: 27,
  				noHairlinesBetweenMd: 28,
  				noHairlinesIos: 29,
  				noHairlinesBetweenIos: 30,
  				noHairlinesAurora: 31,
  				noHairlinesBetweenAurora: 32,
  				noChevron: 33,
  				chevronCenter: 34,
  				tab: 35,
  				tabActive: 36,
  				form: 2,
  				formStoreData: 37,
  				inlineLabels: 38,
  				virtualList: 39,
  				virtualListParams: 40,
  				virtualListInstance: 41
  			},
  			[-1, -1]
  		);

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "List",
  			options,
  			id: create_fragment$c.name
  		});
  	}

  	get class() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ul() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ul(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get inset() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set inset(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get xsmallInset() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set xsmallInset(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get smallInset() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set smallInset(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get mediumInset() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set mediumInset(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get largeInset() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set largeInset(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get xlargeInset() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set xlargeInset(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get mediaList() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set mediaList(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sortable() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sortable(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sortableTapHold() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sortableTapHold(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sortableEnabled() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sortableEnabled(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sortableMoveElements() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sortableMoveElements(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sortableOpposite() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sortableOpposite(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get accordionList() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set accordionList(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get accordionOpposite() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set accordionOpposite(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get contactsList() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set contactsList(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get simpleList() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set simpleList(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get linksList() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set linksList(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlines() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlines(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesBetween() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesBetween(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesMd() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesMd(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesBetweenMd() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesBetweenMd(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesIos() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesIos(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesBetweenIos() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesBetweenIos(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesAurora() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesAurora(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairlinesBetweenAurora() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairlinesBetweenAurora(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noChevron() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noChevron(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get chevronCenter() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set chevronCenter(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tab() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tab(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabActive() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabActive(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get form() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set form(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get formStoreData() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set formStoreData(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get inlineLabels() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set inlineLabels(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get virtualList() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set virtualList(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get virtualListParams() {
  		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set virtualListParams(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get virtualListInstance() {
  		return this.$$.ctx[41];
  	}

  	set virtualListInstance(value) {
  		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\nav-left.svelte generated by Svelte v3.29.4 */
  const file$d = "node_modules\\framework7-svelte\\components\\nav-left.svelte";

  // (55:2) {#if backLink}
  function create_if_block$5(ctx) {
  	let link;
  	let current;

  	link = new Link({
  			props: {
  				href: /*backLinkUrl*/ ctx[1] || "#",
  				back: true,
  				icon: "icon-back",
  				force: /*backLinkForce*/ ctx[2] || undefined,
  				class: !/*backLinkText*/ ctx[4] ? "icon-only" : undefined,
  				text: /*backLinkText*/ ctx[4],
  				onClick: /*onBackClick*/ ctx[5]
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(link.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(link, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const link_changes = {};
  			if (dirty & /*backLinkUrl*/ 2) link_changes.href = /*backLinkUrl*/ ctx[1] || "#";
  			if (dirty & /*backLinkForce*/ 4) link_changes.force = /*backLinkForce*/ ctx[2] || undefined;
  			if (dirty & /*backLinkText*/ 16) link_changes.class = !/*backLinkText*/ ctx[4] ? "icon-only" : undefined;
  			if (dirty & /*backLinkText*/ 16) link_changes.text = /*backLinkText*/ ctx[4];
  			link.$set(link_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(link.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(link.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(link, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$5.name,
  		type: "if",
  		source: "(55:2) {#if backLink}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$d(ctx) {
  	let div;
  	let t;
  	let current;
  	let if_block = /*backLink*/ ctx[0] && create_if_block$5(ctx);
  	const default_slot_template = /*#slots*/ ctx[11].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
  	let div_levels = [{ class: /*classes*/ ctx[3] }, restProps(/*$$restProps*/ ctx[6])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block) if_block.c();
  			t = space();
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$d, 50, 0, 1335);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block) if_block.m(div, null);
  			append_dev(div, t);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (/*backLink*/ ctx[0]) {
  				if (if_block) {
  					if_block.p(ctx, dirty);

  					if (dirty & /*backLink*/ 1) {
  						transition_in(if_block, 1);
  					}
  				} else {
  					if_block = create_if_block$5(ctx);
  					if_block.c();
  					transition_in(if_block, 1);
  					if_block.m(div, t);
  				}
  			} else if (if_block) {
  				group_outros();

  				transition_out(if_block, 1, 1, () => {
  					if_block = null;
  				});

  				check_outros();
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 1024) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 8) && { class: /*classes*/ ctx[3] },
  				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block) if_block.d();
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$d.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$d($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class","backLink","backLinkUrl","backLinkForce","backLinkShowText","sliding"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Nav_left", slots, ['default']);
  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { backLink = undefined } = $$props;
  	let { backLinkUrl = undefined } = $$props;
  	let { backLinkForce = undefined } = $$props;
  	let { backLinkShowText = undefined } = $$props;
  	let { sliding = undefined } = $$props;

  	// eslint-disable-next-line
  	let _theme = f7.instance ? f7Theme : null;

  	if (!f7.instance) {
  		f7.ready(() => {
  			$$invalidate(12, _theme = f7Theme);
  		});
  	}

  	function onBackClick() {
  		dispatch("clickBack");
  		if (typeof $$props.onClickBack === "function") $$props.onClickBack();
  		dispatch("backClick");
  		if (typeof $$props.onBackClick === "function") $$props.onBackClick();
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(15, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
  		if ("backLink" in $$new_props) $$invalidate(0, backLink = $$new_props.backLink);
  		if ("backLinkUrl" in $$new_props) $$invalidate(1, backLinkUrl = $$new_props.backLinkUrl);
  		if ("backLinkForce" in $$new_props) $$invalidate(2, backLinkForce = $$new_props.backLinkForce);
  		if ("backLinkShowText" in $$new_props) $$invalidate(8, backLinkShowText = $$new_props.backLinkShowText);
  		if ("sliding" in $$new_props) $$invalidate(9, sliding = $$new_props.sliding);
  		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		theme: f7Theme,
  		Link,
  		dispatch,
  		className,
  		backLink,
  		backLinkUrl,
  		backLinkForce,
  		backLinkShowText,
  		sliding,
  		_theme,
  		onBackClick,
  		classes,
  		needBackLinkText,
  		backLinkText
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(15, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(7, className = $$new_props.className);
  		if ("backLink" in $$props) $$invalidate(0, backLink = $$new_props.backLink);
  		if ("backLinkUrl" in $$props) $$invalidate(1, backLinkUrl = $$new_props.backLinkUrl);
  		if ("backLinkForce" in $$props) $$invalidate(2, backLinkForce = $$new_props.backLinkForce);
  		if ("backLinkShowText" in $$props) $$invalidate(8, backLinkShowText = $$new_props.backLinkShowText);
  		if ("sliding" in $$props) $$invalidate(9, sliding = $$new_props.sliding);
  		if ("_theme" in $$props) $$invalidate(12, _theme = $$new_props._theme);
  		if ("classes" in $$props) $$invalidate(3, classes = $$new_props.classes);
  		if ("needBackLinkText" in $$props) $$invalidate(13, needBackLinkText = $$new_props.needBackLinkText);
  		if ("backLinkText" in $$props) $$invalidate(4, backLinkText = $$new_props.backLinkText);
  	};

  	let classes;
  	let needBackLinkText;
  	let backLinkText;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(3, classes = Utils$1.classNames(className, "left", { sliding }, Mixins.colorClasses($$props)));

  		if ($$self.$$.dirty & /*backLinkShowText*/ 256) {
  			 $$invalidate(13, needBackLinkText = backLinkShowText);
  		}

  		if ($$self.$$.dirty & /*needBackLinkText, _theme*/ 12288) {
  			 if (typeof needBackLinkText === "undefined") $$invalidate(13, needBackLinkText = _theme && !_theme.md);
  		}

  		if ($$self.$$.dirty & /*backLink, needBackLinkText*/ 8193) {
  			 $$invalidate(4, backLinkText = backLink !== true && needBackLinkText
  			? backLink
  			: undefined);
  		}
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		backLink,
  		backLinkUrl,
  		backLinkForce,
  		classes,
  		backLinkText,
  		onBackClick,
  		$$restProps,
  		className,
  		backLinkShowText,
  		sliding,
  		$$scope,
  		slots
  	];
  }

  class Nav_left extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
  			class: 7,
  			backLink: 0,
  			backLinkUrl: 1,
  			backLinkForce: 2,
  			backLinkShowText: 8,
  			sliding: 9
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Nav_left",
  			options,
  			id: create_fragment$d.name
  		});
  	}

  	get class() {
  		throw new Error("<Nav_left>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Nav_left>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLink() {
  		throw new Error("<Nav_left>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLink(value) {
  		throw new Error("<Nav_left>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLinkUrl() {
  		throw new Error("<Nav_left>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLinkUrl(value) {
  		throw new Error("<Nav_left>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLinkForce() {
  		throw new Error("<Nav_left>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLinkForce(value) {
  		throw new Error("<Nav_left>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLinkShowText() {
  		throw new Error("<Nav_left>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLinkShowText(value) {
  		throw new Error("<Nav_left>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sliding() {
  		throw new Error("<Nav_left>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sliding(value) {
  		throw new Error("<Nav_left>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\nav-right.svelte generated by Svelte v3.29.4 */
  const file$e = "node_modules\\framework7-svelte\\components\\nav-right.svelte";

  function create_fragment$e(ctx) {
  	let div;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[5].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
  	let div_levels = [{ class: /*classes*/ ctx[0] }, restProps(/*$$restProps*/ ctx[1])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$e, 19, 0, 371);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 16) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] },
  				dirty & /*$$restProps*/ 2 && restProps(/*$$restProps*/ ctx[1])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$e.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$e($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class","sliding"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Nav_right", slots, ['default']);
  	let { class: className = undefined } = $$props;
  	let { sliding = undefined } = $$props;

  	$$self.$$set = $$new_props => {
  		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(2, className = $$new_props.class);
  		if ("sliding" in $$new_props) $$invalidate(3, sliding = $$new_props.sliding);
  		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		className,
  		sliding,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(2, className = $$new_props.className);
  		if ("sliding" in $$props) $$invalidate(3, sliding = $$new_props.sliding);
  		if ("classes" in $$props) $$invalidate(0, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(0, classes = Utils$1.classNames(className, "right", { sliding }, Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);
  	return [classes, $$restProps, className, sliding, $$scope, slots];
  }

  class Nav_right extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$e, create_fragment$e, safe_not_equal, { class: 2, sliding: 3 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Nav_right",
  			options,
  			id: create_fragment$e.name
  		});
  	}

  	get class() {
  		throw new Error("<Nav_right>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Nav_right>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sliding() {
  		throw new Error("<Nav_right>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sliding(value) {
  		throw new Error("<Nav_right>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\nav-title.svelte generated by Svelte v3.29.4 */
  const file$f = "node_modules\\framework7-svelte\\components\\nav-title.svelte";

  // (26:2) {#if typeof title !== 'undefined'}
  function create_if_block_1$5(ctx) {
  	let t_value = Utils$1.text(/*title*/ ctx[0]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty & /*title*/ 1 && t_value !== (t_value = Utils$1.text(/*title*/ ctx[0]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$5.name,
  		type: "if",
  		source: "(26:2) {#if typeof title !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  // (27:2) {#if typeof subtitle !== 'undefined'}
  function create_if_block$6(ctx) {
  	let span;
  	let t_value = Utils$1.text(/*subtitle*/ ctx[1]) + "";
  	let t;

  	const block = {
  		c: function create() {
  			span = element("span");
  			t = text$1(t_value);
  			attr_dev(span, "class", "subtitle");
  			add_location(span, file$f, 27, 4, 598);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			append_dev(span, t);
  		},
  		p: function update(ctx, dirty) {
  			if (dirty & /*subtitle*/ 2 && t_value !== (t_value = Utils$1.text(/*subtitle*/ ctx[1]) + "")) set_data_dev(t, t_value);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$6.name,
  		type: "if",
  		source: "(27:2) {#if typeof subtitle !== 'undefined'}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$f(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let current;
  	let if_block0 = typeof /*title*/ ctx[0] !== "undefined" && create_if_block_1$5(ctx);
  	let if_block1 = typeof /*subtitle*/ ctx[1] !== "undefined" && create_if_block$6(ctx);
  	const default_slot_template = /*#slots*/ ctx[7].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
  	let div_levels = [{ class: /*classes*/ ctx[2] }, restProps(/*$$restProps*/ ctx[3])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			if (if_block1) if_block1.c();
  			t1 = space();
  			if (default_slot) default_slot.c();
  			set_attributes(div, div_data);
  			add_location(div, file$f, 21, 0, 438);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t1);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (typeof /*title*/ ctx[0] !== "undefined") {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_1$5(ctx);
  					if_block0.c();
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (typeof /*subtitle*/ ctx[1] !== "undefined") {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);
  				} else {
  					if_block1 = create_if_block$6(ctx);
  					if_block1.c();
  					if_block1.m(div, t1);
  				}
  			} else if (if_block1) {
  				if_block1.d(1);
  				if_block1 = null;
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 64) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
  				}
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] },
  				dirty & /*$$restProps*/ 8 && restProps(/*$$restProps*/ ctx[3])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$f.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$f($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class","title","subtitle","sliding"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Nav_title", slots, ['default']);
  	let { class: className = undefined } = $$props;
  	let { title = undefined } = $$props;
  	let { subtitle = undefined } = $$props;
  	let { sliding = undefined } = $$props;

  	$$self.$$set = $$new_props => {
  		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(4, className = $$new_props.class);
  		if ("title" in $$new_props) $$invalidate(0, title = $$new_props.title);
  		if ("subtitle" in $$new_props) $$invalidate(1, subtitle = $$new_props.subtitle);
  		if ("sliding" in $$new_props) $$invalidate(5, sliding = $$new_props.sliding);
  		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		className,
  		title,
  		subtitle,
  		sliding,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(4, className = $$new_props.className);
  		if ("title" in $$props) $$invalidate(0, title = $$new_props.title);
  		if ("subtitle" in $$props) $$invalidate(1, subtitle = $$new_props.subtitle);
  		if ("sliding" in $$props) $$invalidate(5, sliding = $$new_props.sliding);
  		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(2, classes = Utils$1.classNames(className, "title", { sliding }, Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);
  	return [title, subtitle, classes, $$restProps, className, sliding, $$scope, slots];
  }

  class Nav_title extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
  			class: 4,
  			title: 0,
  			subtitle: 1,
  			sliding: 5
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Nav_title",
  			options,
  			id: create_fragment$f.name
  		});
  	}

  	get class() {
  		throw new Error("<Nav_title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Nav_title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get title() {
  		throw new Error("<Nav_title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set title(value) {
  		throw new Error("<Nav_title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get subtitle() {
  		throw new Error("<Nav_title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set subtitle(value) {
  		throw new Error("<Nav_title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sliding() {
  		throw new Error("<Nav_title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sliding(value) {
  		throw new Error("<Nav_title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\navbar.svelte generated by Svelte v3.29.4 */
  const file$g = "node_modules\\framework7-svelte\\components\\navbar.svelte";
  const get_after_inner_slot_changes = dirty => ({});
  const get_after_inner_slot_context = ctx => ({});
  const get_title_large_slot_changes = dirty => ({});
  const get_title_large_slot_context = ctx => ({});
  const get_right_slot_changes = dirty => ({});
  const get_right_slot_context = ctx => ({});
  const get_nav_right_slot_changes = dirty => ({});
  const get_nav_right_slot_context = ctx => ({});
  const get_title_slot_changes$1 = dirty => ({});
  const get_title_slot_context$1 = ctx => ({});
  const get_left_slot_changes = dirty => ({});
  const get_left_slot_context = ctx => ({});
  const get_nav_left_slot_changes = dirty => ({});
  const get_nav_left_slot_context = ctx => ({});
  const get_before_inner_slot_changes = dirty => ({});
  const get_before_inner_slot_context = ctx => ({});

  // (218:4) {#if backLink || hasLeftSlots}
  function create_if_block_3$3(ctx) {
  	let navleft;
  	let current;

  	navleft = new Nav_left({
  			props: {
  				backLink: /*backLink*/ ctx[0],
  				backLinkUrl: /*backLinkUrl*/ ctx[1],
  				backLinkForce: /*backLinkForce*/ ctx[2],
  				backLinkShowText: /*backLinkShowText*/ ctx[3],
  				onBackClick: /*onBackClick*/ ctx[15],
  				$$slots: { default: [create_default_slot_2$3] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(navleft.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(navleft, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const navleft_changes = {};
  			if (dirty[0] & /*backLink*/ 1) navleft_changes.backLink = /*backLink*/ ctx[0];
  			if (dirty[0] & /*backLinkUrl*/ 2) navleft_changes.backLinkUrl = /*backLinkUrl*/ ctx[1];
  			if (dirty[0] & /*backLinkForce*/ 4) navleft_changes.backLinkForce = /*backLinkForce*/ ctx[2];
  			if (dirty[0] & /*backLinkShowText*/ 8) navleft_changes.backLinkShowText = /*backLinkShowText*/ ctx[3];

  			if (dirty[1] & /*$$scope*/ 4) {
  				navleft_changes.$$scope = { dirty, ctx };
  			}

  			navleft.$set(navleft_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(navleft.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(navleft.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(navleft, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_3$3.name,
  		type: "if",
  		source: "(218:4) {#if backLink || hasLeftSlots}",
  		ctx
  	});

  	return block;
  }

  // (219:6) <NavLeft         backLink={backLink}         backLinkUrl={backLinkUrl}         backLinkForce={backLinkForce}         backLinkShowText={backLinkShowText}         onBackClick={onBackClick}       >
  function create_default_slot_2$3(ctx) {
  	let t;
  	let current;
  	const nav_left_slot_template = /*#slots*/ ctx[31]["nav-left"];
  	const nav_left_slot = create_slot(nav_left_slot_template, ctx, /*$$scope*/ ctx[33], get_nav_left_slot_context);
  	const left_slot_template = /*#slots*/ ctx[31].left;
  	const left_slot = create_slot(left_slot_template, ctx, /*$$scope*/ ctx[33], get_left_slot_context);

  	const block = {
  		c: function create() {
  			if (nav_left_slot) nav_left_slot.c();
  			t = space();
  			if (left_slot) left_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (nav_left_slot) {
  				nav_left_slot.m(target, anchor);
  			}

  			insert_dev(target, t, anchor);

  			if (left_slot) {
  				left_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (nav_left_slot) {
  				if (nav_left_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(nav_left_slot, nav_left_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_nav_left_slot_changes, get_nav_left_slot_context);
  				}
  			}

  			if (left_slot) {
  				if (left_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(left_slot, left_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_left_slot_changes, get_left_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(nav_left_slot, local);
  			transition_in(left_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(nav_left_slot, local);
  			transition_out(left_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (nav_left_slot) nav_left_slot.d(detaching);
  			if (detaching) detach_dev(t);
  			if (left_slot) left_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_2$3.name,
  		type: "slot",
  		source: "(219:6) <NavLeft         backLink={backLink}         backLinkUrl={backLinkUrl}         backLinkForce={backLinkForce}         backLinkShowText={backLinkShowText}         onBackClick={onBackClick}       >",
  		ctx
  	});

  	return block;
  }

  // (230:4) {#if title || subtitle || hasTitleSlots}
  function create_if_block_2$5(ctx) {
  	let navtitle;
  	let current;

  	navtitle = new Nav_title({
  			props: {
  				title: /*title*/ ctx[4],
  				subtitle: /*subtitle*/ ctx[5],
  				$$slots: { default: [create_default_slot_1$3] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(navtitle.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(navtitle, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const navtitle_changes = {};
  			if (dirty[0] & /*title*/ 16) navtitle_changes.title = /*title*/ ctx[4];
  			if (dirty[0] & /*subtitle*/ 32) navtitle_changes.subtitle = /*subtitle*/ ctx[5];

  			if (dirty[1] & /*$$scope*/ 4) {
  				navtitle_changes.$$scope = { dirty, ctx };
  			}

  			navtitle.$set(navtitle_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(navtitle.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(navtitle.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(navtitle, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$5.name,
  		type: "if",
  		source: "(230:4) {#if title || subtitle || hasTitleSlots}",
  		ctx
  	});

  	return block;
  }

  // (231:6) <NavTitle         title={title}         subtitle={subtitle}       >
  function create_default_slot_1$3(ctx) {
  	let current;
  	const title_slot_template = /*#slots*/ ctx[31].title;
  	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[33], get_title_slot_context$1);

  	const block = {
  		c: function create() {
  			if (title_slot) title_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (title_slot) {
  				title_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (title_slot) {
  				if (title_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_title_slot_changes$1, get_title_slot_context$1);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (title_slot) title_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_1$3.name,
  		type: "slot",
  		source: "(231:6) <NavTitle         title={title}         subtitle={subtitle}       >",
  		ctx
  	});

  	return block;
  }

  // (238:4) {#if hasRightSlots}
  function create_if_block_1$6(ctx) {
  	let navright;
  	let current;

  	navright = new Nav_right({
  			props: {
  				$$slots: { default: [create_default_slot$3] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(navright.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(navright, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const navright_changes = {};

  			if (dirty[1] & /*$$scope*/ 4) {
  				navright_changes.$$scope = { dirty, ctx };
  			}

  			navright.$set(navright_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(navright.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(navright.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(navright, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$6.name,
  		type: "if",
  		source: "(238:4) {#if hasRightSlots}",
  		ctx
  	});

  	return block;
  }

  // (239:6) <NavRight>
  function create_default_slot$3(ctx) {
  	let t;
  	let current;
  	const nav_right_slot_template = /*#slots*/ ctx[31]["nav-right"];
  	const nav_right_slot = create_slot(nav_right_slot_template, ctx, /*$$scope*/ ctx[33], get_nav_right_slot_context);
  	const right_slot_template = /*#slots*/ ctx[31].right;
  	const right_slot = create_slot(right_slot_template, ctx, /*$$scope*/ ctx[33], get_right_slot_context);

  	const block = {
  		c: function create() {
  			if (nav_right_slot) nav_right_slot.c();
  			t = space();
  			if (right_slot) right_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (nav_right_slot) {
  				nav_right_slot.m(target, anchor);
  			}

  			insert_dev(target, t, anchor);

  			if (right_slot) {
  				right_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (nav_right_slot) {
  				if (nav_right_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(nav_right_slot, nav_right_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_nav_right_slot_changes, get_nav_right_slot_context);
  				}
  			}

  			if (right_slot) {
  				if (right_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(right_slot, right_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_right_slot_changes, get_right_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(nav_right_slot, local);
  			transition_in(right_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(nav_right_slot, local);
  			transition_out(right_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (nav_right_slot) nav_right_slot.d(detaching);
  			if (detaching) detach_dev(t);
  			if (right_slot) right_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot$3.name,
  		type: "slot",
  		source: "(239:6) <NavRight>",
  		ctx
  	});

  	return block;
  }

  // (244:4) {#if largeTitle || hasTitleLargeSlots}
  function create_if_block$7(ctx) {
  	let div1;
  	let div0;
  	let t0_value = Utils$1.text(/*largeTitle*/ ctx[11]) + "";
  	let t0;
  	let t1;
  	let current;
  	const title_large_slot_template = /*#slots*/ ctx[31]["title-large"];
  	const title_large_slot = create_slot(title_large_slot_template, ctx, /*$$scope*/ ctx[33], get_title_large_slot_context);

  	const block = {
  		c: function create() {
  			div1 = element("div");
  			div0 = element("div");
  			t0 = text$1(t0_value);
  			t1 = space();
  			if (title_large_slot) title_large_slot.c();
  			attr_dev(div0, "class", "title-large-text");
  			add_location(div0, file$g, 245, 8, 7906);
  			attr_dev(div1, "class", "title-large");
  			add_location(div1, file$g, 244, 6, 7872);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div1, anchor);
  			append_dev(div1, div0);
  			append_dev(div0, t0);
  			append_dev(div0, t1);

  			if (title_large_slot) {
  				title_large_slot.m(div0, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if ((!current || dirty[0] & /*largeTitle*/ 2048) && t0_value !== (t0_value = Utils$1.text(/*largeTitle*/ ctx[11]) + "")) set_data_dev(t0, t0_value);

  			if (title_large_slot) {
  				if (title_large_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(title_large_slot, title_large_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_title_large_slot_changes, get_title_large_slot_context);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(title_large_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(title_large_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div1);
  			if (title_large_slot) title_large_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$7.name,
  		type: "if",
  		source: "(244:4) {#if largeTitle || hasTitleLargeSlots}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$g(ctx) {
  	let div2;
  	let div0;
  	let t0;
  	let t1;
  	let div1;
  	let t2;
  	let t3;
  	let t4;
  	let t5;
  	let t6;
  	let current;
  	const before_inner_slot_template = /*#slots*/ ctx[31]["before-inner"];
  	const before_inner_slot = create_slot(before_inner_slot_template, ctx, /*$$scope*/ ctx[33], get_before_inner_slot_context);
  	let if_block0 = (/*backLink*/ ctx[0] || /*hasLeftSlots*/ ctx[8]) && create_if_block_3$3(ctx);
  	let if_block1 = (/*title*/ ctx[4] || /*subtitle*/ ctx[5] || /*hasTitleSlots*/ ctx[10]) && create_if_block_2$5(ctx);
  	let if_block2 = /*hasRightSlots*/ ctx[9] && create_if_block_1$6(ctx);
  	let if_block3 = (/*largeTitle*/ ctx[11] || /*hasTitleLargeSlots*/ ctx[12]) && create_if_block$7(ctx);
  	const default_slot_template = /*#slots*/ ctx[31].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[33], null);
  	const after_inner_slot_template = /*#slots*/ ctx[31]["after-inner"];
  	const after_inner_slot = create_slot(after_inner_slot_template, ctx, /*$$scope*/ ctx[33], get_after_inner_slot_context);

  	let div2_levels = [
  		{ class: /*classes*/ ctx[13] },
  		{ "data-f7-slot": /*f7Slot*/ ctx[6] },
  		restProps(/*$$restProps*/ ctx[16])
  	];

  	let div2_data = {};

  	for (let i = 0; i < div2_levels.length; i += 1) {
  		div2_data = assign(div2_data, div2_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div2 = element("div");
  			div0 = element("div");
  			t0 = space();
  			if (before_inner_slot) before_inner_slot.c();
  			t1 = space();
  			div1 = element("div");
  			if (if_block0) if_block0.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (if_block3) if_block3.c();
  			t5 = space();
  			if (default_slot) default_slot.c();
  			t6 = space();
  			if (after_inner_slot) after_inner_slot.c();
  			attr_dev(div0, "class", "navbar-bg");
  			add_location(div0, file$g, 214, 2, 7093);
  			attr_dev(div1, "class", /*innerClasses*/ ctx[14]);
  			add_location(div1, file$g, 216, 2, 7161);
  			set_attributes(div2, div2_data);
  			add_location(div2, file$g, 208, 0, 6995);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div2, anchor);
  			append_dev(div2, div0);
  			append_dev(div2, t0);

  			if (before_inner_slot) {
  				before_inner_slot.m(div2, null);
  			}

  			append_dev(div2, t1);
  			append_dev(div2, div1);
  			if (if_block0) if_block0.m(div1, null);
  			append_dev(div1, t2);
  			if (if_block1) if_block1.m(div1, null);
  			append_dev(div1, t3);
  			if (if_block2) if_block2.m(div1, null);
  			append_dev(div1, t4);
  			if (if_block3) if_block3.m(div1, null);
  			append_dev(div1, t5);

  			if (default_slot) {
  				default_slot.m(div1, null);
  			}

  			append_dev(div2, t6);

  			if (after_inner_slot) {
  				after_inner_slot.m(div2, null);
  			}

  			/*div2_binding*/ ctx[32](div2);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (before_inner_slot) {
  				if (before_inner_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(before_inner_slot, before_inner_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_before_inner_slot_changes, get_before_inner_slot_context);
  				}
  			}

  			if (/*backLink*/ ctx[0] || /*hasLeftSlots*/ ctx[8]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);

  					if (dirty[0] & /*backLink, hasLeftSlots*/ 257) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_3$3(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div1, t2);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (/*title*/ ctx[4] || /*subtitle*/ ctx[5] || /*hasTitleSlots*/ ctx[10]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);

  					if (dirty[0] & /*title, subtitle, hasTitleSlots*/ 1072) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_2$5(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div1, t3);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (/*hasRightSlots*/ ctx[9]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);

  					if (dirty[0] & /*hasRightSlots*/ 512) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_1$6(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div1, t4);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*largeTitle*/ ctx[11] || /*hasTitleLargeSlots*/ ctx[12]) {
  				if (if_block3) {
  					if_block3.p(ctx, dirty);

  					if (dirty[0] & /*largeTitle, hasTitleLargeSlots*/ 6144) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block$7(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(div1, t5);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[33], dirty, null, null);
  				}
  			}

  			if (!current || dirty[0] & /*innerClasses*/ 16384) {
  				attr_dev(div1, "class", /*innerClasses*/ ctx[14]);
  			}

  			if (after_inner_slot) {
  				if (after_inner_slot.p && dirty[1] & /*$$scope*/ 4) {
  					update_slot(after_inner_slot, after_inner_slot_template, ctx, /*$$scope*/ ctx[33], dirty, get_after_inner_slot_changes, get_after_inner_slot_context);
  				}
  			}

  			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
  				(!current || dirty[0] & /*classes*/ 8192) && { class: /*classes*/ ctx[13] },
  				(!current || dirty[0] & /*f7Slot*/ 64) && { "data-f7-slot": /*f7Slot*/ ctx[6] },
  				dirty[0] & /*$$restProps*/ 65536 && restProps(/*$$restProps*/ ctx[16])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_inner_slot, local);
  			transition_in(if_block0);
  			transition_in(if_block1);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			transition_in(default_slot, local);
  			transition_in(after_inner_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_inner_slot, local);
  			transition_out(if_block0);
  			transition_out(if_block1);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			transition_out(default_slot, local);
  			transition_out(after_inner_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div2);
  			if (before_inner_slot) before_inner_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (if_block2) if_block2.d();
  			if (if_block3) if_block3.d();
  			if (default_slot) default_slot.d(detaching);
  			if (after_inner_slot) after_inner_slot.d(detaching);
  			/*div2_binding*/ ctx[32](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$g.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$g($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"class","backLink","backLinkUrl","backLinkForce","backLinkShowText","sliding","title","subtitle","hidden","noShadow","noHairline","innerClass","innerClassName","large","largeTransparent","transparent","titleLarge","f7Slot","hide","show","size"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;

  	validate_slots("Navbar", slots, [
  		'before-inner','nav-left','left','title','nav-right','right','title-large','default','after-inner'
  	]);

  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { backLink = undefined } = $$props;
  	let { backLinkUrl = undefined } = $$props;
  	let { backLinkForce = false } = $$props;
  	let { backLinkShowText = undefined } = $$props;
  	let { sliding = true } = $$props;
  	let { title = undefined } = $$props;
  	let { subtitle = undefined } = $$props;
  	let { hidden = false } = $$props;
  	let { noShadow = false } = $$props;
  	let { noHairline = false } = $$props;
  	let { innerClass = undefined } = $$props;
  	let { innerClassName = undefined } = $$props;
  	let { large = false } = $$props;
  	let { largeTransparent = false } = $$props;
  	let { transparent = false } = $$props;
  	let { titleLarge = undefined } = $$props;
  	let { f7Slot = "fixed" } = $$props;
  	let el;

  	// eslint-disable-next-line
  	let _theme = f7.instance ? f7Theme : null;

  	let routerPositionClass = "";
  	let largeCollapsed = false;
  	let routerNavbarRole = null;
  	let routerNavbarRoleDetailRoot = false;
  	let routerNavbarMasterStack = false;
  	let transparentVisible = false;

  	function hide(animate) {
  		f7.navbar.hide(el, animate);
  	}

  	function show(animate) {
  		f7.navbar.show(el, animate);
  	}

  	function size() {
  		f7.navbar.size(el);
  	}

  	if (!f7.instance) {
  		f7.ready(() => {
  			$$invalidate(34, _theme = f7Theme);
  		});
  	}

  	function onHide(navbarEl) {
  		if (el !== navbarEl) return;
  		dispatch("navbarHide");
  		if (typeof $$props.onNavbarHide === "function") $$props.onNavbarHide();
  	}

  	function onShow(navbarEl) {
  		if (el !== navbarEl) return;
  		dispatch("navbarShow");
  		if (typeof $$props.onNavbarShow === "function") $$props.onNavbarShow();
  	}

  	function onNavbarTransparentShow(navbarEl) {
  		if (el !== navbarEl) return;
  		$$invalidate(40, transparentVisible = true);
  		dispatch("navbarTransparentShow");
  		if (typeof $$props.onNavbarTransparentShow === "function") $$props.onNavbarTransparentShow();
  	}

  	function onNavbarTransparentHide(navbarEl) {
  		if (el !== navbarEl) return;
  		$$invalidate(40, transparentVisible = false);
  		dispatch("navbarTransparentHide");
  		if (typeof $$props.onNavbarTransparentHide === "function") $$props.onNavbarTransparentHide();
  	}

  	function onExpand(navbarEl) {
  		if (el !== navbarEl) return;
  		$$invalidate(36, largeCollapsed = false);
  		dispatch("navbarExpand");
  		if (typeof $$props.onNavbarExpand === "function") $$props.onNavbarExpand();
  	}

  	function onCollapse(navbarEl) {
  		if (el !== navbarEl) return;
  		$$invalidate(36, largeCollapsed = true);
  		dispatch("navbarCollapse");
  		if (typeof $$props.onNavbarCollapse === "function") $$props.onNavbarCollapse();
  	}

  	function onNavbarPosition(navbarEl, position) {
  		if (el !== navbarEl) return;
  		$$invalidate(35, routerPositionClass = position ? `navbar-${position}` : position);
  	}

  	function onNavbarRole(navbarEl, rolesData) {
  		if (el !== navbarEl) return;
  		$$invalidate(37, routerNavbarRole = rolesData.role);
  		$$invalidate(38, routerNavbarRoleDetailRoot = rolesData.detailRoot);
  	}

  	function onNavbarMasterStack(navbarEl) {
  		if (el !== navbarEl) return;
  		$$invalidate(39, routerNavbarMasterStack = true);
  	}

  	function onNavbarMasterUnstack(navbarEl) {
  		if (el !== navbarEl) return;
  		$$invalidate(39, routerNavbarMasterStack = false);
  	}

  	function onBackClick() {
  		dispatch("clickBack");
  		if (typeof $$props.onClickBack === "function") $$props.onClickBack();
  	}

  	function mountNavbar() {
  		f7.instance.on("navbarShow", onShow);
  		f7.instance.on("navbarHide", onHide);
  		f7.instance.on("navbarCollapse", onCollapse);
  		f7.instance.on("navbarExpand", onExpand);
  		f7.instance.on("navbarPosition", onNavbarPosition);
  		f7.instance.on("navbarRole", onNavbarRole);
  		f7.instance.on("navbarMasterStack", onNavbarMasterStack);
  		f7.instance.on("navbarMasterUnstack", onNavbarMasterUnstack);
  		f7.instance.on("navbarTransparentShow", onNavbarTransparentShow);
  		f7.instance.on("navbarTransparentHide", onNavbarTransparentHide);
  	}

  	function destroyNavbar() {
  		f7.instance.off("navbarShow", onShow);
  		f7.instance.off("navbarHide", onHide);
  		f7.instance.off("navbarCollapse", onCollapse);
  		f7.instance.off("navbarExpand", onExpand);
  		f7.instance.off("navbarPosition", onNavbarPosition);
  		f7.instance.off("navbarRole", onNavbarRole);
  		f7.instance.off("navbarMasterStack", onNavbarMasterStack);
  		f7.instance.off("navbarMasterUnstack", onNavbarMasterUnstack);
  		f7.instance.off("navbarTransparentShow", onNavbarTransparentShow);
  		f7.instance.off("navbarTransparentHide", onNavbarTransparentHide);
  	}

  	onMount(() => {
  		f7.ready(() => {
  			mountNavbar();
  		});
  	});

  	afterUpdate(() => {
  		if (!f7.instance) return;
  		f7.instance.navbar.size(el);
  	});

  	onDestroy(() => {
  		if (!f7.instance) return;
  		destroyNavbar();
  	});

  	function div2_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(7, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(59, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(17, className = $$new_props.class);
  		if ("backLink" in $$new_props) $$invalidate(0, backLink = $$new_props.backLink);
  		if ("backLinkUrl" in $$new_props) $$invalidate(1, backLinkUrl = $$new_props.backLinkUrl);
  		if ("backLinkForce" in $$new_props) $$invalidate(2, backLinkForce = $$new_props.backLinkForce);
  		if ("backLinkShowText" in $$new_props) $$invalidate(3, backLinkShowText = $$new_props.backLinkShowText);
  		if ("sliding" in $$new_props) $$invalidate(18, sliding = $$new_props.sliding);
  		if ("title" in $$new_props) $$invalidate(4, title = $$new_props.title);
  		if ("subtitle" in $$new_props) $$invalidate(5, subtitle = $$new_props.subtitle);
  		if ("hidden" in $$new_props) $$invalidate(19, hidden = $$new_props.hidden);
  		if ("noShadow" in $$new_props) $$invalidate(20, noShadow = $$new_props.noShadow);
  		if ("noHairline" in $$new_props) $$invalidate(21, noHairline = $$new_props.noHairline);
  		if ("innerClass" in $$new_props) $$invalidate(22, innerClass = $$new_props.innerClass);
  		if ("innerClassName" in $$new_props) $$invalidate(23, innerClassName = $$new_props.innerClassName);
  		if ("large" in $$new_props) $$invalidate(24, large = $$new_props.large);
  		if ("largeTransparent" in $$new_props) $$invalidate(25, largeTransparent = $$new_props.largeTransparent);
  		if ("transparent" in $$new_props) $$invalidate(26, transparent = $$new_props.transparent);
  		if ("titleLarge" in $$new_props) $$invalidate(27, titleLarge = $$new_props.titleLarge);
  		if ("f7Slot" in $$new_props) $$invalidate(6, f7Slot = $$new_props.f7Slot);
  		if ("$$scope" in $$new_props) $$invalidate(33, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		onMount,
  		onDestroy,
  		afterUpdate,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		theme: f7Theme,
  		f7,
  		hasSlots,
  		NavLeft: Nav_left,
  		NavTitle: Nav_title,
  		NavRight: Nav_right,
  		dispatch,
  		className,
  		backLink,
  		backLinkUrl,
  		backLinkForce,
  		backLinkShowText,
  		sliding,
  		title,
  		subtitle,
  		hidden,
  		noShadow,
  		noHairline,
  		innerClass,
  		innerClassName,
  		large,
  		largeTransparent,
  		transparent,
  		titleLarge,
  		f7Slot,
  		el,
  		_theme,
  		routerPositionClass,
  		largeCollapsed,
  		routerNavbarRole,
  		routerNavbarRoleDetailRoot,
  		routerNavbarMasterStack,
  		transparentVisible,
  		hide,
  		show,
  		size,
  		onHide,
  		onShow,
  		onNavbarTransparentShow,
  		onNavbarTransparentHide,
  		onExpand,
  		onCollapse,
  		onNavbarPosition,
  		onNavbarRole,
  		onNavbarMasterStack,
  		onNavbarMasterUnstack,
  		onBackClick,
  		mountNavbar,
  		destroyNavbar,
  		hasLeftSlots,
  		hasRightSlots,
  		hasTitleSlots,
  		largeTitle,
  		hasTitleLargeSlots,
  		addLeftTitleClass,
  		addCenterTitleClass,
  		isLarge,
  		isTransparent,
  		isTransparentVisible,
  		classes,
  		innerClasses
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(59, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(17, className = $$new_props.className);
  		if ("backLink" in $$props) $$invalidate(0, backLink = $$new_props.backLink);
  		if ("backLinkUrl" in $$props) $$invalidate(1, backLinkUrl = $$new_props.backLinkUrl);
  		if ("backLinkForce" in $$props) $$invalidate(2, backLinkForce = $$new_props.backLinkForce);
  		if ("backLinkShowText" in $$props) $$invalidate(3, backLinkShowText = $$new_props.backLinkShowText);
  		if ("sliding" in $$props) $$invalidate(18, sliding = $$new_props.sliding);
  		if ("title" in $$props) $$invalidate(4, title = $$new_props.title);
  		if ("subtitle" in $$props) $$invalidate(5, subtitle = $$new_props.subtitle);
  		if ("hidden" in $$props) $$invalidate(19, hidden = $$new_props.hidden);
  		if ("noShadow" in $$props) $$invalidate(20, noShadow = $$new_props.noShadow);
  		if ("noHairline" in $$props) $$invalidate(21, noHairline = $$new_props.noHairline);
  		if ("innerClass" in $$props) $$invalidate(22, innerClass = $$new_props.innerClass);
  		if ("innerClassName" in $$props) $$invalidate(23, innerClassName = $$new_props.innerClassName);
  		if ("large" in $$props) $$invalidate(24, large = $$new_props.large);
  		if ("largeTransparent" in $$props) $$invalidate(25, largeTransparent = $$new_props.largeTransparent);
  		if ("transparent" in $$props) $$invalidate(26, transparent = $$new_props.transparent);
  		if ("titleLarge" in $$props) $$invalidate(27, titleLarge = $$new_props.titleLarge);
  		if ("f7Slot" in $$props) $$invalidate(6, f7Slot = $$new_props.f7Slot);
  		if ("el" in $$props) $$invalidate(7, el = $$new_props.el);
  		if ("_theme" in $$props) $$invalidate(34, _theme = $$new_props._theme);
  		if ("routerPositionClass" in $$props) $$invalidate(35, routerPositionClass = $$new_props.routerPositionClass);
  		if ("largeCollapsed" in $$props) $$invalidate(36, largeCollapsed = $$new_props.largeCollapsed);
  		if ("routerNavbarRole" in $$props) $$invalidate(37, routerNavbarRole = $$new_props.routerNavbarRole);
  		if ("routerNavbarRoleDetailRoot" in $$props) $$invalidate(38, routerNavbarRoleDetailRoot = $$new_props.routerNavbarRoleDetailRoot);
  		if ("routerNavbarMasterStack" in $$props) $$invalidate(39, routerNavbarMasterStack = $$new_props.routerNavbarMasterStack);
  		if ("transparentVisible" in $$props) $$invalidate(40, transparentVisible = $$new_props.transparentVisible);
  		if ("hasLeftSlots" in $$props) $$invalidate(8, hasLeftSlots = $$new_props.hasLeftSlots);
  		if ("hasRightSlots" in $$props) $$invalidate(9, hasRightSlots = $$new_props.hasRightSlots);
  		if ("hasTitleSlots" in $$props) $$invalidate(10, hasTitleSlots = $$new_props.hasTitleSlots);
  		if ("largeTitle" in $$props) $$invalidate(11, largeTitle = $$new_props.largeTitle);
  		if ("hasTitleLargeSlots" in $$props) $$invalidate(12, hasTitleLargeSlots = $$new_props.hasTitleLargeSlots);
  		if ("addLeftTitleClass" in $$props) $$invalidate(41, addLeftTitleClass = $$new_props.addLeftTitleClass);
  		if ("addCenterTitleClass" in $$props) $$invalidate(42, addCenterTitleClass = $$new_props.addCenterTitleClass);
  		if ("isLarge" in $$props) $$invalidate(43, isLarge = $$new_props.isLarge);
  		if ("isTransparent" in $$props) $$invalidate(44, isTransparent = $$new_props.isTransparent);
  		if ("isTransparentVisible" in $$props) $$invalidate(45, isTransparentVisible = $$new_props.isTransparentVisible);
  		if ("classes" in $$props) $$invalidate(13, classes = $$new_props.classes);
  		if ("innerClasses" in $$props) $$invalidate(14, innerClasses = $$new_props.innerClasses);
  	};

  	let hasLeftSlots;
  	let hasRightSlots;
  	let hasTitleSlots;
  	let largeTitle;
  	let hasTitleLargeSlots;
  	let addLeftTitleClass;
  	let addCenterTitleClass;
  	let isLarge;
  	let isTransparent;
  	let isTransparentVisible;
  	let classes;
  	let innerClasses;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		if ($$self.$$.dirty[0] & /*titleLarge, large, title*/ 150994960) {
  			 $$invalidate(11, largeTitle = titleLarge || large && title);
  		}

  		if ($$self.$$.dirty[1] & /*_theme*/ 8) {
  			 $$invalidate(41, addLeftTitleClass = _theme && _theme.ios && f7.instance && !f7.instance.params.navbar.iosCenterTitle);
  		}

  		if ($$self.$$.dirty[1] & /*_theme*/ 8) {
  			 $$invalidate(42, addCenterTitleClass = _theme && _theme.md && f7.instance && f7.instance.params.navbar.mdCenterTitle || _theme && _theme.aurora && f7.instance && f7.instance.params.navbar.auroraCenterTitle);
  		}

  		if ($$self.$$.dirty[0] & /*large, largeTransparent*/ 50331648) {
  			 $$invalidate(43, isLarge = large || largeTransparent);
  		}

  		if ($$self.$$.dirty[0] & /*transparent, largeTransparent*/ 100663296 | $$self.$$.dirty[1] & /*isLarge*/ 4096) {
  			 $$invalidate(44, isTransparent = transparent || isLarge && largeTransparent);
  		}

  		if ($$self.$$.dirty[1] & /*isTransparent, transparentVisible*/ 8704) {
  			 $$invalidate(45, isTransparentVisible = isTransparent && transparentVisible);
  		}

  		 $$invalidate(13, classes = Utils$1.classNames(
  			className,
  			"navbar",
  			routerPositionClass,
  			{
  				"navbar-hidden": hidden,
  				"navbar-large": isLarge,
  				"navbar-large-collapsed": isLarge && largeCollapsed,
  				"navbar-transparent": isTransparent,
  				"navbar-transparent-visible": isTransparentVisible,
  				"navbar-master": routerNavbarRole === "master",
  				"navbar-master-detail": routerNavbarRole === "detail",
  				"navbar-master-detail-root": routerNavbarRoleDetailRoot === true,
  				"navbar-master-stacked": routerNavbarMasterStack === true,
  				"no-shadow": noShadow,
  				"no-hairline": noHairline
  			},
  			Mixins.colorClasses($$props)
  		));

  		if ($$self.$$.dirty[0] & /*innerClass, innerClassName, sliding*/ 12845056 | $$self.$$.dirty[1] & /*addLeftTitleClass, addCenterTitleClass*/ 3072) {
  			 $$invalidate(14, innerClasses = Utils$1.classNames("navbar-inner", innerClass, innerClassName, {
  				sliding,
  				"navbar-inner-left-title": addLeftTitleClass,
  				"navbar-inner-centered-title": addCenterTitleClass
  			}));
  		}
  	};

  	 $$invalidate(8, hasLeftSlots = hasSlots(arguments, "nav-left") || hasSlots(arguments, "left"));

  	// eslint-disable-next-line
  	 $$invalidate(9, hasRightSlots = hasSlots(arguments, "nav-right") || hasSlots(arguments, "right"));

  	// eslint-disable-next-line
  	 $$invalidate(10, hasTitleSlots = hasSlots(arguments, "title"));

  	// eslint-disable-next-line
  	 $$invalidate(12, hasTitleLargeSlots = hasSlots(arguments, "title-large"));

  	$$props = exclude_internal_props($$props);

  	return [
  		backLink,
  		backLinkUrl,
  		backLinkForce,
  		backLinkShowText,
  		title,
  		subtitle,
  		f7Slot,
  		el,
  		hasLeftSlots,
  		hasRightSlots,
  		hasTitleSlots,
  		largeTitle,
  		hasTitleLargeSlots,
  		classes,
  		innerClasses,
  		onBackClick,
  		$$restProps,
  		className,
  		sliding,
  		hidden,
  		noShadow,
  		noHairline,
  		innerClass,
  		innerClassName,
  		large,
  		largeTransparent,
  		transparent,
  		titleLarge,
  		hide,
  		show,
  		size,
  		slots,
  		div2_binding,
  		$$scope
  	];
  }

  class Navbar$2 extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(
  			this,
  			options,
  			instance$g,
  			create_fragment$g,
  			safe_not_equal,
  			{
  				class: 17,
  				backLink: 0,
  				backLinkUrl: 1,
  				backLinkForce: 2,
  				backLinkShowText: 3,
  				sliding: 18,
  				title: 4,
  				subtitle: 5,
  				hidden: 19,
  				noShadow: 20,
  				noHairline: 21,
  				innerClass: 22,
  				innerClassName: 23,
  				large: 24,
  				largeTransparent: 25,
  				transparent: 26,
  				titleLarge: 27,
  				f7Slot: 6,
  				hide: 28,
  				show: 29,
  				size: 30
  			},
  			[-1, -1]
  		);

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Navbar",
  			options,
  			id: create_fragment$g.name
  		});
  	}

  	get class() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLink() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLink(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLinkUrl() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLinkUrl(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLinkForce() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLinkForce(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get backLinkShowText() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set backLinkShowText(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get sliding() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set sliding(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get title() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set title(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get subtitle() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set subtitle(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hidden() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hidden(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noShadow() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noShadow(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noHairline() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noHairline(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get innerClass() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set innerClass(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get innerClassName() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set innerClassName(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get large() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set large(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get largeTransparent() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set largeTransparent(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get transparent() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set transparent(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get titleLarge() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set titleLarge(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get f7Slot() {
  		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set f7Slot(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hide() {
  		return this.$$.ctx[28];
  	}

  	set hide(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get show() {
  		return this.$$.ctx[29];
  	}

  	set show(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get size() {
  		return this.$$.ctx[30];
  	}

  	set size(value) {
  		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\preloader.svelte generated by Svelte v3.29.4 */
  const file$h = "node_modules\\framework7-svelte\\components\\preloader.svelte";

  // (67:2) {:else}
  function create_else_block$2(ctx) {
  	let span;

  	const block = {
  		c: function create() {
  			span = element("span");
  			attr_dev(span, "class", "preloader-inner");
  			add_location(span, file$h, 67, 2, 2080);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block$2.name,
  		type: "else",
  		source: "(67:2) {:else}",
  		ctx
  	});

  	return block;
  }

  // (63:36) 
  function create_if_block_2$6(ctx) {
  	let span1;
  	let span0;

  	const block = {
  		c: function create() {
  			span1 = element("span");
  			span0 = element("span");
  			attr_dev(span0, "class", "preloader-inner-circle");
  			add_location(span0, file$h, 64, 4, 2013);
  			attr_dev(span1, "class", "preloader-inner");
  			add_location(span1, file$h, 63, 2, 1978);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span1, anchor);
  			append_dev(span1, span0);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span1);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$6.name,
  		type: "if",
  		source: "(63:36) ",
  		ctx
  	});

  	return block;
  }

  // (48:33) 
  function create_if_block_1$7(ctx) {
  	let span12;
  	let span0;
  	let t0;
  	let span1;
  	let t1;
  	let span2;
  	let t2;
  	let span3;
  	let t3;
  	let span4;
  	let t4;
  	let span5;
  	let t5;
  	let span6;
  	let t6;
  	let span7;
  	let t7;
  	let span8;
  	let t8;
  	let span9;
  	let t9;
  	let span10;
  	let t10;
  	let span11;

  	const block = {
  		c: function create() {
  			span12 = element("span");
  			span0 = element("span");
  			t0 = space();
  			span1 = element("span");
  			t1 = space();
  			span2 = element("span");
  			t2 = space();
  			span3 = element("span");
  			t3 = space();
  			span4 = element("span");
  			t4 = space();
  			span5 = element("span");
  			t5 = space();
  			span6 = element("span");
  			t6 = space();
  			span7 = element("span");
  			t7 = space();
  			span8 = element("span");
  			t8 = space();
  			span9 = element("span");
  			t9 = space();
  			span10 = element("span");
  			t10 = space();
  			span11 = element("span");
  			attr_dev(span0, "class", "preloader-inner-line");
  			add_location(span0, file$h, 49, 4, 1369);
  			attr_dev(span1, "class", "preloader-inner-line");
  			add_location(span1, file$h, 50, 4, 1416);
  			attr_dev(span2, "class", "preloader-inner-line");
  			add_location(span2, file$h, 51, 4, 1463);
  			attr_dev(span3, "class", "preloader-inner-line");
  			add_location(span3, file$h, 52, 4, 1510);
  			attr_dev(span4, "class", "preloader-inner-line");
  			add_location(span4, file$h, 53, 4, 1557);
  			attr_dev(span5, "class", "preloader-inner-line");
  			add_location(span5, file$h, 54, 4, 1604);
  			attr_dev(span6, "class", "preloader-inner-line");
  			add_location(span6, file$h, 55, 4, 1651);
  			attr_dev(span7, "class", "preloader-inner-line");
  			add_location(span7, file$h, 56, 4, 1698);
  			attr_dev(span8, "class", "preloader-inner-line");
  			add_location(span8, file$h, 57, 4, 1745);
  			attr_dev(span9, "class", "preloader-inner-line");
  			add_location(span9, file$h, 58, 4, 1792);
  			attr_dev(span10, "class", "preloader-inner-line");
  			add_location(span10, file$h, 59, 4, 1839);
  			attr_dev(span11, "class", "preloader-inner-line");
  			add_location(span11, file$h, 60, 4, 1886);
  			attr_dev(span12, "class", "preloader-inner");
  			add_location(span12, file$h, 48, 2, 1334);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span12, anchor);
  			append_dev(span12, span0);
  			append_dev(span12, t0);
  			append_dev(span12, span1);
  			append_dev(span12, t1);
  			append_dev(span12, span2);
  			append_dev(span12, t2);
  			append_dev(span12, span3);
  			append_dev(span12, t3);
  			append_dev(span12, span4);
  			append_dev(span12, t4);
  			append_dev(span12, span5);
  			append_dev(span12, t5);
  			append_dev(span12, span6);
  			append_dev(span12, t6);
  			append_dev(span12, span7);
  			append_dev(span12, t7);
  			append_dev(span12, span8);
  			append_dev(span12, t8);
  			append_dev(span12, span9);
  			append_dev(span12, t9);
  			append_dev(span12, span10);
  			append_dev(span12, t10);
  			append_dev(span12, span11);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span12);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$7.name,
  		type: "if",
  		source: "(48:33) ",
  		ctx
  	});

  	return block;
  }

  // (38:2) {#if _theme && _theme.md}
  function create_if_block$8(ctx) {
  	let span5;
  	let span0;
  	let t0;
  	let span2;
  	let span1;
  	let t1;
  	let span4;
  	let span3;

  	const block = {
  		c: function create() {
  			span5 = element("span");
  			span0 = element("span");
  			t0 = space();
  			span2 = element("span");
  			span1 = element("span");
  			t1 = space();
  			span4 = element("span");
  			span3 = element("span");
  			attr_dev(span0, "class", "preloader-inner-gap");
  			add_location(span0, file$h, 39, 4, 1044);
  			attr_dev(span1, "class", "preloader-inner-half-circle");
  			add_location(span1, file$h, 41, 6, 1127);
  			attr_dev(span2, "class", "preloader-inner-left");
  			add_location(span2, file$h, 40, 4, 1085);
  			attr_dev(span3, "class", "preloader-inner-half-circle");
  			add_location(span3, file$h, 44, 6, 1231);
  			attr_dev(span4, "class", "preloader-inner-right");
  			add_location(span4, file$h, 43, 4, 1188);
  			attr_dev(span5, "class", "preloader-inner");
  			add_location(span5, file$h, 38, 2, 1009);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span5, anchor);
  			append_dev(span5, span0);
  			append_dev(span5, t0);
  			append_dev(span5, span2);
  			append_dev(span2, span1);
  			append_dev(span5, t1);
  			append_dev(span5, span4);
  			append_dev(span4, span3);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span5);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$8.name,
  		type: "if",
  		source: "(38:2) {#if _theme && _theme.md}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$h(ctx) {
  	let span;

  	function select_block_type(ctx, dirty) {
  		if (/*_theme*/ ctx[0] && /*_theme*/ ctx[0].md) return create_if_block$8;
  		if (/*_theme*/ ctx[0] && /*_theme*/ ctx[0].ios) return create_if_block_1$7;
  		if (/*_theme*/ ctx[0] && /*_theme*/ ctx[0].aurora) return create_if_block_2$6;
  		return create_else_block$2;
  	}

  	let current_block_type = select_block_type(ctx);
  	let if_block = current_block_type(ctx);

  	let span_levels = [
  		{ style: /*preloaderStyle*/ ctx[1] },
  		{ class: /*classes*/ ctx[2] },
  		restProps(/*$$restProps*/ ctx[3])
  	];

  	let span_data = {};

  	for (let i = 0; i < span_levels.length; i += 1) {
  		span_data = assign(span_data, span_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			span = element("span");
  			if_block.c();
  			set_attributes(span, span_data);
  			add_location(span, file$h, 36, 0, 905);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  			if_block.m(span, null);
  		},
  		p: function update(ctx, [dirty]) {
  			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
  				if_block.d(1);
  				if_block = current_block_type(ctx);

  				if (if_block) {
  					if_block.c();
  					if_block.m(span, null);
  				}
  			}

  			set_attributes(span, span_data = get_spread_update(span_levels, [
  				dirty & /*preloaderStyle*/ 2 && { style: /*preloaderStyle*/ ctx[1] },
  				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
  				dirty & /*$$restProps*/ 8 && restProps(/*$$restProps*/ ctx[3])
  			]));
  		},
  		i: noop,
  		o: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  			if_block.d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$h.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$h($$self, $$props, $$invalidate) {
  	const omit_props_names = ["style","class","size"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Preloader", slots, []);
  	let { style = undefined } = $$props;
  	let { class: className = undefined } = $$props;
  	let { size = undefined } = $$props;

  	// eslint-disable-next-line
  	let _theme = f7.instance ? f7Theme : null;

  	if (!f7.instance) {
  		f7.ready(() => {
  			$$invalidate(0, _theme = f7Theme);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("style" in $$new_props) $$invalidate(4, style = $$new_props.style);
  		if ("class" in $$new_props) $$invalidate(5, className = $$new_props.class);
  		if ("size" in $$new_props) $$invalidate(6, size = $$new_props.size);
  	};

  	$$self.$capture_state = () => ({
  		theme: f7Theme,
  		Utils: Utils$1,
  		restProps,
  		Mixins,
  		f7,
  		style,
  		className,
  		size,
  		_theme,
  		sizeComputed,
  		preloaderStyle,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
  		if ("style" in $$props) $$invalidate(4, style = $$new_props.style);
  		if ("className" in $$props) $$invalidate(5, className = $$new_props.className);
  		if ("size" in $$props) $$invalidate(6, size = $$new_props.size);
  		if ("_theme" in $$props) $$invalidate(0, _theme = $$new_props._theme);
  		if ("sizeComputed" in $$props) $$invalidate(7, sizeComputed = $$new_props.sizeComputed);
  		if ("preloaderStyle" in $$props) $$invalidate(1, preloaderStyle = $$new_props.preloaderStyle);
  		if ("classes" in $$props) $$invalidate(2, classes = $$new_props.classes);
  	};

  	let sizeComputed;
  	let preloaderStyle;
  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		if ($$self.$$.dirty & /*size*/ 64) {
  			 $$invalidate(7, sizeComputed = size && typeof size === "string" && size.indexOf("px") >= 0
  			? size.replace("px", "")
  			: size);
  		}

  		if ($$self.$$.dirty & /*style, sizeComputed*/ 144) {
  			 $$invalidate(1, preloaderStyle = ((style || "") + (sizeComputed
  			? `;width: ${sizeComputed}px; height: ${sizeComputed}px; --f7-preloader-size: ${sizeComputed}px`
  			: "")).replace(";;", ";"));
  		}

  		 $$invalidate(2, classes = Utils$1.classNames(className, "preloader", Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);
  	return [_theme, preloaderStyle, classes, $$restProps, style, className, size];
  }

  class Preloader extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$h, create_fragment$h, safe_not_equal, { style: 4, class: 5, size: 6 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Preloader",
  			options,
  			id: create_fragment$h.name
  		});
  	}

  	get style() {
  		throw new Error("<Preloader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set style(value) {
  		throw new Error("<Preloader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get class() {
  		throw new Error("<Preloader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Preloader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get size() {
  		throw new Error("<Preloader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set size(value) {
  		throw new Error("<Preloader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\page-content.svelte generated by Svelte v3.29.4 */
  const file$i = "node_modules\\framework7-svelte\\components\\page-content.svelte";

  // (147:2) {#if ptr && ptrPreloader && !ptrBottom}
  function create_if_block_3$4(ctx) {
  	let div1;
  	let preloader;
  	let t;
  	let div0;
  	let current;
  	preloader = new Preloader({ $$inline: true });

  	const block = {
  		c: function create() {
  			div1 = element("div");
  			create_component(preloader.$$.fragment);
  			t = space();
  			div0 = element("div");
  			attr_dev(div0, "class", "ptr-arrow");
  			add_location(div0, file$i, 149, 6, 4501);
  			attr_dev(div1, "class", "ptr-preloader");
  			add_location(div1, file$i, 147, 4, 4447);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div1, anchor);
  			mount_component(preloader, div1, null);
  			append_dev(div1, t);
  			append_dev(div1, div0);
  			current = true;
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(preloader.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(preloader.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div1);
  			destroy_component(preloader);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_3$4.name,
  		type: "if",
  		source: "(147:2) {#if ptr && ptrPreloader && !ptrBottom}",
  		ctx
  	});

  	return block;
  }

  // (153:2) {#if infinite && infiniteTop && infinitePreloader}
  function create_if_block_2$7(ctx) {
  	let preloader;
  	let current;

  	preloader = new Preloader({
  			props: { class: "infinite-scroll-preloader" },
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(preloader.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(preloader, target, anchor);
  			current = true;
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(preloader.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(preloader.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(preloader, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$7.name,
  		type: "if",
  		source: "(153:2) {#if infinite && infiniteTop && infinitePreloader}",
  		ctx
  	});

  	return block;
  }

  // (157:2) {#if infinite && !infiniteTop && infinitePreloader}
  function create_if_block_1$8(ctx) {
  	let preloader;
  	let current;

  	preloader = new Preloader({
  			props: { class: "infinite-scroll-preloader" },
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(preloader.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(preloader, target, anchor);
  			current = true;
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(preloader.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(preloader.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(preloader, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$8.name,
  		type: "if",
  		source: "(157:2) {#if infinite && !infiniteTop && infinitePreloader}",
  		ctx
  	});

  	return block;
  }

  // (160:2) {#if ptr && ptrPreloader && ptrBottom}
  function create_if_block$9(ctx) {
  	let div1;
  	let preloader;
  	let t;
  	let div0;
  	let current;
  	preloader = new Preloader({ $$inline: true });

  	const block = {
  		c: function create() {
  			div1 = element("div");
  			create_component(preloader.$$.fragment);
  			t = space();
  			div0 = element("div");
  			attr_dev(div0, "class", "ptr-arrow");
  			add_location(div0, file$i, 162, 6, 4881);
  			attr_dev(div1, "class", "ptr-preloader");
  			add_location(div1, file$i, 160, 4, 4827);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div1, anchor);
  			mount_component(preloader, div1, null);
  			append_dev(div1, t);
  			append_dev(div1, div0);
  			current = true;
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(preloader.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(preloader.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div1);
  			destroy_component(preloader);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$9.name,
  		type: "if",
  		source: "(160:2) {#if ptr && ptrPreloader && ptrBottom}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$i(ctx) {
  	let div;
  	let t0;
  	let t1;
  	let t2;
  	let t3;
  	let div_data_ptr_mousewheel_value;
  	let div_data_infinite_distance_value;
  	let current;
  	let if_block0 = /*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && !/*ptrBottom*/ ctx[3] && create_if_block_3$4(ctx);
  	let if_block1 = /*infinite*/ ctx[5] && /*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8] && create_if_block_2$7(ctx);
  	const default_slot_template = /*#slots*/ ctx[21].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);
  	let if_block2 = /*infinite*/ ctx[5] && !/*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8] && create_if_block_1$8(ctx);
  	let if_block3 = /*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && /*ptrBottom*/ ctx[3] && create_if_block$9(ctx);

  	let div_levels = [
  		{ class: /*pageContentClasses*/ ctx[10] },
  		{
  			"data-ptr-distance": /*ptrDistance*/ ctx[1]
  		},
  		{
  			"data-ptr-mousewheel": div_data_ptr_mousewheel_value = /*ptrMousewheel*/ ctx[4] || undefined
  		},
  		{
  			"data-infinite-distance": div_data_infinite_distance_value = /*infiniteDistance*/ ctx[7] || undefined
  		},
  		restProps(/*$$restProps*/ ctx[11])
  	];

  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (if_block0) if_block0.c();
  			t0 = space();
  			if (if_block1) if_block1.c();
  			t1 = space();
  			if (default_slot) default_slot.c();
  			t2 = space();
  			if (if_block2) if_block2.c();
  			t3 = space();
  			if (if_block3) if_block3.c();
  			set_attributes(div, div_data);
  			add_location(div, file$i, 138, 0, 4165);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if (if_block0) if_block0.m(div, null);
  			append_dev(div, t0);
  			if (if_block1) if_block1.m(div, null);
  			append_dev(div, t1);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			append_dev(div, t2);
  			if (if_block2) if_block2.m(div, null);
  			append_dev(div, t3);
  			if (if_block3) if_block3.m(div, null);
  			/*div_binding*/ ctx[22](div);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (/*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && !/*ptrBottom*/ ctx[3]) {
  				if (if_block0) {
  					if (dirty[0] & /*ptr, ptrPreloader, ptrBottom*/ 13) {
  						transition_in(if_block0, 1);
  					}
  				} else {
  					if_block0 = create_if_block_3$4(ctx);
  					if_block0.c();
  					transition_in(if_block0, 1);
  					if_block0.m(div, t0);
  				}
  			} else if (if_block0) {
  				group_outros();

  				transition_out(if_block0, 1, 1, () => {
  					if_block0 = null;
  				});

  				check_outros();
  			}

  			if (/*infinite*/ ctx[5] && /*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8]) {
  				if (if_block1) {
  					if (dirty[0] & /*infinite, infiniteTop, infinitePreloader*/ 352) {
  						transition_in(if_block1, 1);
  					}
  				} else {
  					if_block1 = create_if_block_2$7(ctx);
  					if_block1.c();
  					transition_in(if_block1, 1);
  					if_block1.m(div, t1);
  				}
  			} else if (if_block1) {
  				group_outros();

  				transition_out(if_block1, 1, 1, () => {
  					if_block1 = null;
  				});

  				check_outros();
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[0] & /*$$scope*/ 1048576) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[20], dirty, null, null);
  				}
  			}

  			if (/*infinite*/ ctx[5] && !/*infiniteTop*/ ctx[6] && /*infinitePreloader*/ ctx[8]) {
  				if (if_block2) {
  					if (dirty[0] & /*infinite, infiniteTop, infinitePreloader*/ 352) {
  						transition_in(if_block2, 1);
  					}
  				} else {
  					if_block2 = create_if_block_1$8(ctx);
  					if_block2.c();
  					transition_in(if_block2, 1);
  					if_block2.m(div, t3);
  				}
  			} else if (if_block2) {
  				group_outros();

  				transition_out(if_block2, 1, 1, () => {
  					if_block2 = null;
  				});

  				check_outros();
  			}

  			if (/*ptr*/ ctx[0] && /*ptrPreloader*/ ctx[2] && /*ptrBottom*/ ctx[3]) {
  				if (if_block3) {
  					if (dirty[0] & /*ptr, ptrPreloader, ptrBottom*/ 13) {
  						transition_in(if_block3, 1);
  					}
  				} else {
  					if_block3 = create_if_block$9(ctx);
  					if_block3.c();
  					transition_in(if_block3, 1);
  					if_block3.m(div, null);
  				}
  			} else if (if_block3) {
  				group_outros();

  				transition_out(if_block3, 1, 1, () => {
  					if_block3 = null;
  				});

  				check_outros();
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty[0] & /*pageContentClasses*/ 1024) && { class: /*pageContentClasses*/ ctx[10] },
  				(!current || dirty[0] & /*ptrDistance*/ 2) && {
  					"data-ptr-distance": /*ptrDistance*/ ctx[1]
  				},
  				(!current || dirty[0] & /*ptrMousewheel*/ 16 && div_data_ptr_mousewheel_value !== (div_data_ptr_mousewheel_value = /*ptrMousewheel*/ ctx[4] || undefined)) && {
  					"data-ptr-mousewheel": div_data_ptr_mousewheel_value
  				},
  				(!current || dirty[0] & /*infiniteDistance*/ 128 && div_data_infinite_distance_value !== (div_data_infinite_distance_value = /*infiniteDistance*/ ctx[7] || undefined)) && {
  					"data-infinite-distance": div_data_infinite_distance_value
  				},
  				dirty[0] & /*$$restProps*/ 2048 && restProps(/*$$restProps*/ ctx[11])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block0);
  			transition_in(if_block1);
  			transition_in(default_slot, local);
  			transition_in(if_block2);
  			transition_in(if_block3);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block0);
  			transition_out(if_block1);
  			transition_out(default_slot, local);
  			transition_out(if_block2);
  			transition_out(if_block3);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (default_slot) default_slot.d(detaching);
  			if (if_block2) if_block2.d();
  			if (if_block3) if_block3.d();
  			/*div_binding*/ ctx[22](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$i.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$i($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"tab","tabActive","ptr","ptrDistance","ptrPreloader","ptrBottom","ptrMousewheel","infinite","infiniteTop","infiniteDistance","infinitePreloader","hideBarsOnScroll","hideNavbarOnScroll","hideToolbarOnScroll","messagesContent","loginScreen","class"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Page_content", slots, ['default']);
  	const dispatch = createEventDispatcher();
  	let { tab = false } = $$props;
  	let { tabActive = false } = $$props;
  	let { ptr = false } = $$props;
  	let { ptrDistance = undefined } = $$props;
  	let { ptrPreloader = true } = $$props;
  	let { ptrBottom = false } = $$props;
  	let { ptrMousewheel = false } = $$props;
  	let { infinite = false } = $$props;
  	let { infiniteTop = false } = $$props;
  	let { infiniteDistance = undefined } = $$props;
  	let { infinitePreloader = true } = $$props;
  	let { hideBarsOnScroll = false } = $$props;
  	let { hideNavbarOnScroll = false } = $$props;
  	let { hideToolbarOnScroll = false } = $$props;
  	let { messagesContent = false } = $$props;
  	let { loginScreen = false } = $$props;
  	let { class: className = undefined } = $$props;
  	let pageContentEl;

  	// Event handlers
  	function onPtrPullStart(ptrEl) {
  		if (ptrEl !== pageContentEl) return;
  		dispatch("ptrPullStart");
  		if (typeof $$props.onPtrPullStart === "function") $$props.onPtrPullStart();
  	}

  	function onPtrPullMove(ptrEl) {
  		if (ptrEl !== pageContentEl) return;
  		dispatch("ptrPullMove");
  		if (typeof $$props.onPtrPullMove === "function") $$props.onPtrPullMove();
  	}

  	function onPtrPullEnd(ptrEl) {
  		if (ptrEl !== pageContentEl) return;
  		dispatch("ptrPullEnd");
  		if (typeof $$props.onPtrPullEnd === "function") $$props.onPtrPullEnd();
  	}

  	function onPtrRefresh(ptrEl, done) {
  		if (ptrEl !== pageContentEl) return;
  		dispatch("ptrRefresh", [done]);
  		if (typeof $$props.onPtrRefresh === "function") $$props.onPtrRefresh(done);
  	}

  	function onPtrDone(ptrEl) {
  		if (ptrEl !== pageContentEl) return;
  		dispatch("ptrDone");
  		if (typeof $$props.onPtrDone === "function") $$props.onPtrDone();
  	}

  	function onInfinite(infEl) {
  		if (infEl !== pageContentEl) return;
  		dispatch("infinite");
  		if (typeof $$props.onInfinite === "function") $$props.onInfinite();
  	}

  	function onTabShow(tabEl) {
  		if (pageContentEl !== tabEl) return;
  		dispatch("tabShow");
  		if (typeof $$props.onTabShow === "function") $$props.onTabShow(tabEl);
  	}

  	function onTabHide(tabEl) {
  		if (pageContentEl !== tabEl) return;
  		dispatch("tabHide");
  		if (typeof $$props.onTabHide === "function") $$props.onTabHide(tabEl);
  	}

  	function mountPageContent() {
  		if (ptr) {
  			f7.instance.on("ptrPullStart", onPtrPullStart);
  			f7.instance.on("ptrPullMove", onPtrPullMove);
  			f7.instance.on("ptrPullEnd", onPtrPullEnd);
  			f7.instance.on("ptrRefresh", onPtrRefresh);
  			f7.instance.on("ptrDone", onPtrDone);
  		}

  		if (infinite) {
  			f7.instance.on("infinite", onInfinite);
  		}

  		if (tab) {
  			f7.instance.on("tabShow", onTabShow);
  			f7.instance.on("tabHide", onTabHide);
  		}
  	}

  	function destroyPageContent() {
  		if (ptr) {
  			f7.instance.off("ptrPullStart", onPtrPullStart);
  			f7.instance.off("ptrPullMove", onPtrPullMove);
  			f7.instance.off("ptrPullEnd", onPtrPullEnd);
  			f7.instance.off("ptrRefresh", onPtrRefresh);
  			f7.instance.off("ptrDone", onPtrDone);
  		}

  		if (infinite) {
  			f7.instance.off("infinite", onInfinite);
  		}

  		if (tab) {
  			f7.instance.off("tabShow", onTabShow);
  			f7.instance.off("tabHide", onTabHide);
  		}
  	}

  	onMount(() => {
  		f7.ready(() => {
  			mountPageContent();
  		});
  	});

  	onDestroy(() => {
  		if (!f7.instance) return;
  		destroyPageContent();
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			pageContentEl = $$value;
  			$$invalidate(9, pageContentEl);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(34, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("tab" in $$new_props) $$invalidate(12, tab = $$new_props.tab);
  		if ("tabActive" in $$new_props) $$invalidate(13, tabActive = $$new_props.tabActive);
  		if ("ptr" in $$new_props) $$invalidate(0, ptr = $$new_props.ptr);
  		if ("ptrDistance" in $$new_props) $$invalidate(1, ptrDistance = $$new_props.ptrDistance);
  		if ("ptrPreloader" in $$new_props) $$invalidate(2, ptrPreloader = $$new_props.ptrPreloader);
  		if ("ptrBottom" in $$new_props) $$invalidate(3, ptrBottom = $$new_props.ptrBottom);
  		if ("ptrMousewheel" in $$new_props) $$invalidate(4, ptrMousewheel = $$new_props.ptrMousewheel);
  		if ("infinite" in $$new_props) $$invalidate(5, infinite = $$new_props.infinite);
  		if ("infiniteTop" in $$new_props) $$invalidate(6, infiniteTop = $$new_props.infiniteTop);
  		if ("infiniteDistance" in $$new_props) $$invalidate(7, infiniteDistance = $$new_props.infiniteDistance);
  		if ("infinitePreloader" in $$new_props) $$invalidate(8, infinitePreloader = $$new_props.infinitePreloader);
  		if ("hideBarsOnScroll" in $$new_props) $$invalidate(14, hideBarsOnScroll = $$new_props.hideBarsOnScroll);
  		if ("hideNavbarOnScroll" in $$new_props) $$invalidate(15, hideNavbarOnScroll = $$new_props.hideNavbarOnScroll);
  		if ("hideToolbarOnScroll" in $$new_props) $$invalidate(16, hideToolbarOnScroll = $$new_props.hideToolbarOnScroll);
  		if ("messagesContent" in $$new_props) $$invalidate(17, messagesContent = $$new_props.messagesContent);
  		if ("loginScreen" in $$new_props) $$invalidate(18, loginScreen = $$new_props.loginScreen);
  		if ("class" in $$new_props) $$invalidate(19, className = $$new_props.class);
  		if ("$$scope" in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		onDestroy,
  		createEventDispatcher,
  		Utils: Utils$1,
  		restProps,
  		Mixins,
  		f7,
  		Preloader,
  		dispatch,
  		tab,
  		tabActive,
  		ptr,
  		ptrDistance,
  		ptrPreloader,
  		ptrBottom,
  		ptrMousewheel,
  		infinite,
  		infiniteTop,
  		infiniteDistance,
  		infinitePreloader,
  		hideBarsOnScroll,
  		hideNavbarOnScroll,
  		hideToolbarOnScroll,
  		messagesContent,
  		loginScreen,
  		className,
  		pageContentEl,
  		onPtrPullStart,
  		onPtrPullMove,
  		onPtrPullEnd,
  		onPtrRefresh,
  		onPtrDone,
  		onInfinite,
  		onTabShow,
  		onTabHide,
  		mountPageContent,
  		destroyPageContent,
  		pageContentClasses
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(34, $$props = assign(assign({}, $$props), $$new_props));
  		if ("tab" in $$props) $$invalidate(12, tab = $$new_props.tab);
  		if ("tabActive" in $$props) $$invalidate(13, tabActive = $$new_props.tabActive);
  		if ("ptr" in $$props) $$invalidate(0, ptr = $$new_props.ptr);
  		if ("ptrDistance" in $$props) $$invalidate(1, ptrDistance = $$new_props.ptrDistance);
  		if ("ptrPreloader" in $$props) $$invalidate(2, ptrPreloader = $$new_props.ptrPreloader);
  		if ("ptrBottom" in $$props) $$invalidate(3, ptrBottom = $$new_props.ptrBottom);
  		if ("ptrMousewheel" in $$props) $$invalidate(4, ptrMousewheel = $$new_props.ptrMousewheel);
  		if ("infinite" in $$props) $$invalidate(5, infinite = $$new_props.infinite);
  		if ("infiniteTop" in $$props) $$invalidate(6, infiniteTop = $$new_props.infiniteTop);
  		if ("infiniteDistance" in $$props) $$invalidate(7, infiniteDistance = $$new_props.infiniteDistance);
  		if ("infinitePreloader" in $$props) $$invalidate(8, infinitePreloader = $$new_props.infinitePreloader);
  		if ("hideBarsOnScroll" in $$props) $$invalidate(14, hideBarsOnScroll = $$new_props.hideBarsOnScroll);
  		if ("hideNavbarOnScroll" in $$props) $$invalidate(15, hideNavbarOnScroll = $$new_props.hideNavbarOnScroll);
  		if ("hideToolbarOnScroll" in $$props) $$invalidate(16, hideToolbarOnScroll = $$new_props.hideToolbarOnScroll);
  		if ("messagesContent" in $$props) $$invalidate(17, messagesContent = $$new_props.messagesContent);
  		if ("loginScreen" in $$props) $$invalidate(18, loginScreen = $$new_props.loginScreen);
  		if ("className" in $$props) $$invalidate(19, className = $$new_props.className);
  		if ("pageContentEl" in $$props) $$invalidate(9, pageContentEl = $$new_props.pageContentEl);
  		if ("pageContentClasses" in $$props) $$invalidate(10, pageContentClasses = $$new_props.pageContentClasses);
  	};

  	let pageContentClasses;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(10, pageContentClasses = Utils$1.classNames(
  			className,
  			"page-content",
  			{
  				tab,
  				"tab-active": tabActive,
  				"ptr-content": ptr,
  				"ptr-bottom": ptrBottom,
  				"infinite-scroll-content": infinite,
  				"infinite-scroll-top": infiniteTop,
  				"hide-bars-on-scroll": hideBarsOnScroll,
  				"hide-navbar-on-scroll": hideNavbarOnScroll,
  				"hide-toolbar-on-scroll": hideToolbarOnScroll,
  				"messages-content": messagesContent,
  				"login-screen-content": loginScreen
  			},
  			Mixins.colorClasses($$props)
  		));
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		ptr,
  		ptrDistance,
  		ptrPreloader,
  		ptrBottom,
  		ptrMousewheel,
  		infinite,
  		infiniteTop,
  		infiniteDistance,
  		infinitePreloader,
  		pageContentEl,
  		pageContentClasses,
  		$$restProps,
  		tab,
  		tabActive,
  		hideBarsOnScroll,
  		hideNavbarOnScroll,
  		hideToolbarOnScroll,
  		messagesContent,
  		loginScreen,
  		className,
  		$$scope,
  		slots,
  		div_binding
  	];
  }

  class Page_content extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(
  			this,
  			options,
  			instance$i,
  			create_fragment$i,
  			safe_not_equal,
  			{
  				tab: 12,
  				tabActive: 13,
  				ptr: 0,
  				ptrDistance: 1,
  				ptrPreloader: 2,
  				ptrBottom: 3,
  				ptrMousewheel: 4,
  				infinite: 5,
  				infiniteTop: 6,
  				infiniteDistance: 7,
  				infinitePreloader: 8,
  				hideBarsOnScroll: 14,
  				hideNavbarOnScroll: 15,
  				hideToolbarOnScroll: 16,
  				messagesContent: 17,
  				loginScreen: 18,
  				class: 19
  			},
  			[-1, -1]
  		);

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Page_content",
  			options,
  			id: create_fragment$i.name
  		});
  	}

  	get tab() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tab(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabActive() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabActive(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptr() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptr(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrDistance() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrDistance(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrPreloader() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrPreloader(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrBottom() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrBottom(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrMousewheel() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrMousewheel(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infinite() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infinite(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infiniteTop() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infiniteTop(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infiniteDistance() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infiniteDistance(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infinitePreloader() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infinitePreloader(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideBarsOnScroll() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideBarsOnScroll(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideNavbarOnScroll() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideNavbarOnScroll(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideToolbarOnScroll() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideToolbarOnScroll(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get messagesContent() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set messagesContent(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get loginScreen() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set loginScreen(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get class() {
  		throw new Error("<Page_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Page_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\page.svelte generated by Svelte v3.29.4 */
  const file$j = "node_modules\\framework7-svelte\\components\\page.svelte";
  const get_static_slot_changes_1 = dirty => ({});
  const get_static_slot_context_1 = ctx => ({});
  const get_static_slot_changes = dirty => ({});
  const get_static_slot_context = ctx => ({});
  const get_fixed_slot_changes = dirty => ({});
  const get_fixed_slot_context = ctx => ({});

  // (353:2) {:else}
  function create_else_block$3(ctx) {
  	let t;
  	let current;
  	const static_slot_template = /*#slots*/ ctx[35].static;
  	const static_slot = create_slot(static_slot_template, ctx, /*$$scope*/ ctx[37], get_static_slot_context_1);
  	const default_slot_template = /*#slots*/ ctx[35].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);

  	const block = {
  		c: function create() {
  			if (static_slot) static_slot.c();
  			t = space();
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (static_slot) {
  				static_slot.m(target, anchor);
  			}

  			insert_dev(target, t, anchor);

  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (static_slot) {
  				if (static_slot.p && dirty[1] & /*$$scope*/ 64) {
  					update_slot(static_slot, static_slot_template, ctx, /*$$scope*/ ctx[37], dirty, get_static_slot_changes_1, get_static_slot_context_1);
  				}
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[1] & /*$$scope*/ 64) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[37], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(static_slot, local);
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(static_slot, local);
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (static_slot) static_slot.d(detaching);
  			if (detaching) detach_dev(t);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block$3.name,
  		type: "else",
  		source: "(353:2) {:else}",
  		ctx
  	});

  	return block;
  }

  // (327:2) {#if pageContent}
  function create_if_block$a(ctx) {
  	let pagecontent;
  	let current;

  	pagecontent = new Page_content({
  			props: {
  				ptr: /*ptr*/ ctx[2],
  				ptrDistance: /*ptrDistance*/ ctx[3],
  				ptrPreloader: /*ptrPreloader*/ ctx[4],
  				ptrBottom: /*ptrBottom*/ ctx[5],
  				ptrMousewheel: /*ptrMousewheel*/ ctx[6],
  				infinite: /*infinite*/ ctx[7],
  				infiniteTop: /*infiniteTop*/ ctx[8],
  				infiniteDistance: /*infiniteDistance*/ ctx[9],
  				infinitePreloader: /*infinitePreloader*/ ctx[10],
  				hideBarsOnScroll: /*hideBarsOnScroll*/ ctx[11],
  				hideNavbarOnScroll: /*hideNavbarOnScroll*/ ctx[12],
  				hideToolbarOnScroll: /*hideToolbarOnScroll*/ ctx[13],
  				messagesContent: /*messagesContent*/ ctx[14],
  				loginScreen: /*loginScreen*/ ctx[15],
  				onPtrPullStart: /*onPtrPullStart*/ ctx[18],
  				onPtrPullMove: /*onPtrPullMove*/ ctx[19],
  				onPtrPullEnd: /*onPtrPullEnd*/ ctx[20],
  				onPtrRefresh: /*onPtrRefresh*/ ctx[21],
  				onPtrDone: /*onPtrDone*/ ctx[22],
  				onInfinite: /*onInfinite*/ ctx[23],
  				$$slots: { default: [create_default_slot$4] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(pagecontent.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(pagecontent, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const pagecontent_changes = {};
  			if (dirty[0] & /*ptr*/ 4) pagecontent_changes.ptr = /*ptr*/ ctx[2];
  			if (dirty[0] & /*ptrDistance*/ 8) pagecontent_changes.ptrDistance = /*ptrDistance*/ ctx[3];
  			if (dirty[0] & /*ptrPreloader*/ 16) pagecontent_changes.ptrPreloader = /*ptrPreloader*/ ctx[4];
  			if (dirty[0] & /*ptrBottom*/ 32) pagecontent_changes.ptrBottom = /*ptrBottom*/ ctx[5];
  			if (dirty[0] & /*ptrMousewheel*/ 64) pagecontent_changes.ptrMousewheel = /*ptrMousewheel*/ ctx[6];
  			if (dirty[0] & /*infinite*/ 128) pagecontent_changes.infinite = /*infinite*/ ctx[7];
  			if (dirty[0] & /*infiniteTop*/ 256) pagecontent_changes.infiniteTop = /*infiniteTop*/ ctx[8];
  			if (dirty[0] & /*infiniteDistance*/ 512) pagecontent_changes.infiniteDistance = /*infiniteDistance*/ ctx[9];
  			if (dirty[0] & /*infinitePreloader*/ 1024) pagecontent_changes.infinitePreloader = /*infinitePreloader*/ ctx[10];
  			if (dirty[0] & /*hideBarsOnScroll*/ 2048) pagecontent_changes.hideBarsOnScroll = /*hideBarsOnScroll*/ ctx[11];
  			if (dirty[0] & /*hideNavbarOnScroll*/ 4096) pagecontent_changes.hideNavbarOnScroll = /*hideNavbarOnScroll*/ ctx[12];
  			if (dirty[0] & /*hideToolbarOnScroll*/ 8192) pagecontent_changes.hideToolbarOnScroll = /*hideToolbarOnScroll*/ ctx[13];
  			if (dirty[0] & /*messagesContent*/ 16384) pagecontent_changes.messagesContent = /*messagesContent*/ ctx[14];
  			if (dirty[0] & /*loginScreen*/ 32768) pagecontent_changes.loginScreen = /*loginScreen*/ ctx[15];

  			if (dirty[1] & /*$$scope*/ 64) {
  				pagecontent_changes.$$scope = { dirty, ctx };
  			}

  			pagecontent.$set(pagecontent_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(pagecontent.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(pagecontent.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(pagecontent, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$a.name,
  		type: "if",
  		source: "(327:2) {#if pageContent}",
  		ctx
  	});

  	return block;
  }

  // (328:2) <PageContent     ptr={ptr}     ptrDistance={ptrDistance}     ptrPreloader={ptrPreloader}     ptrBottom={ptrBottom}     ptrMousewheel={ptrMousewheel}     infinite={infinite}     infiniteTop={infiniteTop}     infiniteDistance={infiniteDistance}     infinitePreloader={infinitePreloader}     hideBarsOnScroll={hideBarsOnScroll}     hideNavbarOnScroll={hideNavbarOnScroll}     hideToolbarOnScroll={hideToolbarOnScroll}     messagesContent={messagesContent}     loginScreen={loginScreen}     onPtrPullStart={onPtrPullStart}     onPtrPullMove={onPtrPullMove}     onPtrPullEnd={onPtrPullEnd}     onPtrRefresh={onPtrRefresh}     onPtrDone={onPtrDone}     onInfinite={onInfinite}   >
  function create_default_slot$4(ctx) {
  	let t;
  	let current;
  	const static_slot_template = /*#slots*/ ctx[35].static;
  	const static_slot = create_slot(static_slot_template, ctx, /*$$scope*/ ctx[37], get_static_slot_context);
  	const default_slot_template = /*#slots*/ ctx[35].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);

  	const block = {
  		c: function create() {
  			if (static_slot) static_slot.c();
  			t = space();
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (static_slot) {
  				static_slot.m(target, anchor);
  			}

  			insert_dev(target, t, anchor);

  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (static_slot) {
  				if (static_slot.p && dirty[1] & /*$$scope*/ 64) {
  					update_slot(static_slot, static_slot_template, ctx, /*$$scope*/ ctx[37], dirty, get_static_slot_changes, get_static_slot_context);
  				}
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty[1] & /*$$scope*/ 64) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[37], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(static_slot, local);
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(static_slot, local);
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (static_slot) static_slot.d(detaching);
  			if (detaching) detach_dev(t);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot$4.name,
  		type: "slot",
  		source: "(328:2) <PageContent     ptr={ptr}     ptrDistance={ptrDistance}     ptrPreloader={ptrPreloader}     ptrBottom={ptrBottom}     ptrMousewheel={ptrMousewheel}     infinite={infinite}     infiniteTop={infiniteTop}     infiniteDistance={infiniteDistance}     infinitePreloader={infinitePreloader}     hideBarsOnScroll={hideBarsOnScroll}     hideNavbarOnScroll={hideNavbarOnScroll}     hideToolbarOnScroll={hideToolbarOnScroll}     messagesContent={messagesContent}     loginScreen={loginScreen}     onPtrPullStart={onPtrPullStart}     onPtrPullMove={onPtrPullMove}     onPtrPullEnd={onPtrPullEnd}     onPtrRefresh={onPtrRefresh}     onPtrDone={onPtrDone}     onInfinite={onInfinite}   >",
  		ctx
  	});

  	return block;
  }

  function create_fragment$j(ctx) {
  	let div;
  	let t;
  	let current_block_type_index;
  	let if_block;
  	let current;
  	const fixed_slot_template = /*#slots*/ ctx[35].fixed;
  	const fixed_slot = create_slot(fixed_slot_template, ctx, /*$$scope*/ ctx[37], get_fixed_slot_context);
  	const if_block_creators = [create_if_block$a, create_else_block$3];
  	const if_blocks = [];

  	function select_block_type(ctx, dirty) {
  		if (/*pageContent*/ ctx[1]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

  	let div_levels = [
  		{ class: /*classes*/ ctx[17] },
  		{ "data-name": /*name*/ ctx[0] },
  		restProps(/*$$restProps*/ ctx[24])
  	];

  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (fixed_slot) fixed_slot.c();
  			t = space();
  			if_block.c();
  			set_attributes(div, div_data);
  			add_location(div, file$j, 324, 0, 11332);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (fixed_slot) {
  				fixed_slot.m(div, null);
  			}

  			append_dev(div, t);
  			if_blocks[current_block_type_index].m(div, null);
  			/*div_binding*/ ctx[36](div);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (fixed_slot) {
  				if (fixed_slot.p && dirty[1] & /*$$scope*/ 64) {
  					update_slot(fixed_slot, fixed_slot_template, ctx, /*$$scope*/ ctx[37], dirty, get_fixed_slot_changes, get_fixed_slot_context);
  				}
  			}

  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(div, null);
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty[0] & /*classes*/ 131072) && { class: /*classes*/ ctx[17] },
  				(!current || dirty[0] & /*name*/ 1) && { "data-name": /*name*/ ctx[0] },
  				dirty[0] & /*$$restProps*/ 16777216 && restProps(/*$$restProps*/ ctx[24])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(fixed_slot, local);
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(fixed_slot, local);
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (fixed_slot) fixed_slot.d(detaching);
  			if_blocks[current_block_type_index].d();
  			/*div_binding*/ ctx[36](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$j.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$j($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"name","stacked","withSubnavbar","subnavbar","withNavbarLarge","navbarLarge","noNavbar","noToolbar","tabs","pageContent","noSwipeback","ptr","ptrDistance","ptrPreloader","ptrBottom","ptrMousewheel","infinite","infiniteTop","infiniteDistance","infinitePreloader","hideBarsOnScroll","hideNavbarOnScroll","hideToolbarOnScroll","messagesContent","loginScreen","class"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Page", slots, ['fixed','static','default']);
  	const dispatch = createEventDispatcher();
  	let { name = undefined } = $$props;
  	let { stacked = undefined } = $$props;
  	let { withSubnavbar = undefined } = $$props;
  	let { subnavbar = undefined } = $$props;
  	let { withNavbarLarge = undefined } = $$props;
  	let { navbarLarge = undefined } = $$props;
  	let { noNavbar = undefined } = $$props;
  	let { noToolbar = undefined } = $$props;
  	let { tabs = undefined } = $$props;
  	let { pageContent = true } = $$props;
  	let { noSwipeback = undefined } = $$props;
  	let { ptr = undefined } = $$props;
  	let { ptrDistance = undefined } = $$props;
  	let { ptrPreloader = true } = $$props;
  	let { ptrBottom = undefined } = $$props;
  	let { ptrMousewheel = undefined } = $$props;
  	let { infinite = undefined } = $$props;
  	let { infiniteTop = undefined } = $$props;
  	let { infiniteDistance = undefined } = $$props;
  	let { infinitePreloader = true } = $$props;
  	let { hideBarsOnScroll = undefined } = $$props;
  	let { hideNavbarOnScroll = undefined } = $$props;
  	let { hideToolbarOnScroll = undefined } = $$props;
  	let { messagesContent = undefined } = $$props;
  	let { loginScreen = undefined } = $$props;
  	let { class: className = undefined } = $$props;

  	// State
  	let el;

  	let hasSubnavbar = false;
  	let hasNavbarLarge = false;
  	let hasNavbarLargeCollapsed = false;
  	let hasCardExpandableOpened = false;
  	let routerPositionClass = "";
  	let routerForceUnstack = false;
  	let routerPageRole = null;
  	let routerPageRoleDetailRoot = false;
  	let routerPageMasterStack = false;

  	// Handlers
  	function onPtrPullStart() {
  		dispatch("ptrPullStart");
  		if (typeof $$props.onPtrPullStart === "function") $$props.onPtrPullStart();
  	}

  	function onPtrPullMove() {
  		dispatch("ptrPullMove");
  		if (typeof $$props.onPtrPullMove === "function") $$props.onPtrPullMove();
  	}

  	function onPtrPullEnd() {
  		dispatch("ptrPullEnd");
  		if (typeof $$props.onPtrPullEnd === "function") $$props.onPtrPullEnd();
  	}

  	function onPtrRefresh(done) {
  		dispatch("ptrRefresh", [done]);
  		if (typeof $$props.onPtrRefresh === "function") $$props.onPtrRefresh(done);
  	}

  	function onPtrDone() {
  		dispatch("ptrDone");
  		if (typeof $$props.onPtrDone === "function") $$props.onPtrDone();
  	}

  	function onInfinite() {
  		dispatch("infinite");
  		if (typeof $$props.onInfinite === "function") $$props.onInfinite();
  	}

  	// Main Page Events
  	function onPageMounted(page) {
  		if (el !== page.el) return;
  		dispatch("pageMounted", [page]);
  		if (typeof $$props.onPageMounted === "function") $$props.onPageMounted(page);
  	}

  	function onPageInit(page) {
  		if (el !== page.el) return;

  		if (typeof withSubnavbar === "undefined" && typeof subnavbar === "undefined") {
  			if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find(".subnavbar").length || page.$el.children(".navbar").find(".subnavbar").length) {
  				$$invalidate(38, hasSubnavbar = true);
  			}
  		}

  		if (typeof withNavbarLarge === "undefined" && typeof navbarLarge === "undefined") {
  			if (page.$navbarEl && page.$navbarEl.hasClass("navbar-large") || page.$el.children(".navbar-large").length) {
  				$$invalidate(39, hasNavbarLarge = true);
  			}
  		}

  		dispatch("pageInit", [page]);
  		if (typeof $$props.onPageInit === "function") $$props.onPageInit(page);
  	}

  	function onPageReinit(page) {
  		if (el !== page.el) return;
  		dispatch("pageReinit", [page]);
  		if (typeof $$props.onPageReinit === "function") $$props.onPageReinit(page);
  	}

  	function onPageBeforeIn(page) {
  		if (el !== page.el) return;

  		if (!page.swipeBack) {
  			if (page.from === "next") {
  				$$invalidate(42, routerPositionClass = "page-next");
  			}

  			if (page.from === "previous") {
  				$$invalidate(42, routerPositionClass = "page-previous");
  			}
  		}

  		dispatch("pageBeforeIn", [page]);
  		if (typeof $$props.onPageBeforeIn === "function") $$props.onPageBeforeIn(page);
  	}

  	function onPageBeforeOut(page) {
  		if (el !== page.el) return;
  		dispatch("pageBeforeOut", [page]);
  		if (typeof $$props.onPageBeforeOut === "function") $$props.onPageBeforeOut(page);
  	}

  	function onPageAfterOut(page) {
  		if (el !== page.el) return;

  		if (page.to === "next") {
  			$$invalidate(42, routerPositionClass = "page-next");
  		}

  		if (page.to === "previous") {
  			$$invalidate(42, routerPositionClass = "page-previous");
  		}

  		dispatch("pageAfterOut", [page]);
  		if (typeof $$props.onPageAfterOut === "function") $$props.onPageAfterOut(page);
  	}

  	function onPageAfterIn(page) {
  		if (el !== page.el) return;
  		$$invalidate(42, routerPositionClass = "page-current");
  		dispatch("pageAfterIn", [page]);
  		if (typeof $$props.onPageAfterIn === "function") $$props.onPageAfterIn(page);
  	}

  	function onPageBeforeRemove(page) {
  		if (el !== page.el) return;

  		if (page.$navbarEl && page.$navbarEl[0] && page.$navbarEl.parent()[0] && page.$navbarEl.parent()[0] !== el) {
  			page.$el.prepend(page.$navbarEl);
  		}

  		dispatch("pageBeforeRemove", [page]);
  		if (typeof $$props.onPageBeforeRemove === "function") $$props.onPageBeforeRemove(page);
  	}

  	function onPageBeforeUnmount(page) {
  		if (el !== page.el) return;
  		dispatch("pageBeforeUnmount", [page]);
  		if (typeof $$props.onPageBeforeUnmount === "function") $$props.onPageBeforeUnmount(page);
  	}

  	// Helper events
  	function onPageStack(pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(43, routerForceUnstack = false);
  	}

  	function onPageUnstack(pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(43, routerForceUnstack = true);
  	}

  	function onPagePosition(pageEl, position) {
  		if (el !== pageEl) return;
  		$$invalidate(42, routerPositionClass = `page-${position}`);
  	}

  	function onPageRole(pageEl, rolesData) {
  		if (el !== pageEl) return;
  		$$invalidate(44, routerPageRole = rolesData.role);
  		$$invalidate(45, routerPageRoleDetailRoot = rolesData.detailRoot);
  	}

  	function onPageMasterStack(pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(46, routerPageMasterStack = true);
  	}

  	function onPageMasterUnstack(pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(46, routerPageMasterStack = false);
  	}

  	function onPageNavbarLargeCollapsed(pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(40, hasNavbarLargeCollapsed = true);
  	}

  	function onPageNavbarLargeExpanded(pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(40, hasNavbarLargeCollapsed = false);
  	}

  	function onCardOpened(cardEl, pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(41, hasCardExpandableOpened = true);
  	}

  	function onCardClose(cardEl, pageEl) {
  		if (el !== pageEl) return;
  		$$invalidate(41, hasCardExpandableOpened = false);
  	}

  	function onPageTabShow(pageEl) {
  		if (el !== pageEl) return;
  		dispatch("pageTabShow");
  		if (typeof $$props.onPageTabShow === "function") $$props.onPageTabShow();
  	}

  	function onPageTabHide(pageEl) {
  		if (el !== pageEl) return;
  		dispatch("pageTabHide");
  		if (typeof $$props.onPageTabHide === "function") $$props.onPageTabHide();
  	}

  	// Mount/destroy
  	function mountPage() {
  		f7.instance.on("pageMounted", onPageMounted);
  		f7.instance.on("pageInit", onPageInit);
  		f7.instance.on("pageReinit", onPageReinit);
  		f7.instance.on("pageBeforeIn", onPageBeforeIn);
  		f7.instance.on("pageBeforeOut", onPageBeforeOut);
  		f7.instance.on("pageAfterOut", onPageAfterOut);
  		f7.instance.on("pageAfterIn", onPageAfterIn);
  		f7.instance.on("pageBeforeRemove", onPageBeforeRemove);
  		f7.instance.on("pageBeforeUnmount", onPageBeforeUnmount);
  		f7.instance.on("pageStack", onPageStack);
  		f7.instance.on("pageUnstack", onPageUnstack);
  		f7.instance.on("pagePosition", onPagePosition);
  		f7.instance.on("pageRole", onPageRole);
  		f7.instance.on("pageMasterStack", onPageMasterStack);
  		f7.instance.on("pageMasterUnstack", onPageMasterUnstack);
  		f7.instance.on("pageNavbarLargeCollapsed", onPageNavbarLargeCollapsed);
  		f7.instance.on("pageNavbarLargeExpanded", onPageNavbarLargeExpanded);
  		f7.instance.on("cardOpened", onCardOpened);
  		f7.instance.on("cardClose", onCardClose);
  		f7.instance.on("pageTabShow", onPageTabShow);
  		f7.instance.on("pageTabHide", onPageTabHide);
  	}

  	function destroyPage() {
  		f7.instance.off("pageMounted", onPageMounted);
  		f7.instance.off("pageInit", onPageInit);
  		f7.instance.off("pageReinit", onPageReinit);
  		f7.instance.off("pageBeforeIn", onPageBeforeIn);
  		f7.instance.off("pageBeforeOut", onPageBeforeOut);
  		f7.instance.off("pageAfterOut", onPageAfterOut);
  		f7.instance.off("pageAfterIn", onPageAfterIn);
  		f7.instance.off("pageBeforeRemove", onPageBeforeRemove);
  		f7.instance.off("pageBeforeUnmount", onPageBeforeUnmount);
  		f7.instance.off("pageStack", onPageStack);
  		f7.instance.off("pageUnstack", onPageUnstack);
  		f7.instance.off("pagePosition", onPagePosition);
  		f7.instance.off("pageRole", onPageRole);
  		f7.instance.off("pageMasterStack", onPageMasterStack);
  		f7.instance.off("pageMasterUnstack", onPageMasterUnstack);
  		f7.instance.off("pageNavbarLargeCollapsed", onPageNavbarLargeCollapsed);
  		f7.instance.off("pageNavbarLargeExpanded", onPageNavbarLargeExpanded);
  		f7.instance.off("cardOpened", onCardOpened);
  		f7.instance.off("cardClose", onCardClose);
  		f7.instance.off("pageTabShow", onPageTabShow);
  		f7.instance.off("pageTabHide", onPageTabHide);
  	}

  	onMount(() => {
  		f7.ready(() => {
  			if (el) {
  				const dom7 = f7.instance.$;
  				const fixedEls = dom7(el).children(".page-content").children("[data-f7-slot=\"fixed\"]");

  				if (fixedEls.length) {
  					for (let i = fixedEls.length - 1; i >= 0; i -= 1) {
  						dom7(el).prepend(fixedEls[i]);
  					}
  				}
  			}

  			mountPage();
  		});
  	});

  	afterUpdate(() => {
  		if (el && f7.instance) {
  			const dom7 = f7.instance.$;
  			const fixedEls = dom7(el).children(".page-content").children("[data-f7-slot=\"fixed\"]");

  			if (fixedEls.length) {
  				for (let i = fixedEls.length - 1; i >= 0; i -= 1) {
  					dom7(el).prepend(fixedEls[i]);
  				}
  			}
  		}
  	});

  	onDestroy(() => {
  		if (!f7.instance) return;
  		destroyPage();
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(16, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(73, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(24, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("name" in $$new_props) $$invalidate(0, name = $$new_props.name);
  		if ("stacked" in $$new_props) $$invalidate(25, stacked = $$new_props.stacked);
  		if ("withSubnavbar" in $$new_props) $$invalidate(26, withSubnavbar = $$new_props.withSubnavbar);
  		if ("subnavbar" in $$new_props) $$invalidate(27, subnavbar = $$new_props.subnavbar);
  		if ("withNavbarLarge" in $$new_props) $$invalidate(28, withNavbarLarge = $$new_props.withNavbarLarge);
  		if ("navbarLarge" in $$new_props) $$invalidate(29, navbarLarge = $$new_props.navbarLarge);
  		if ("noNavbar" in $$new_props) $$invalidate(30, noNavbar = $$new_props.noNavbar);
  		if ("noToolbar" in $$new_props) $$invalidate(31, noToolbar = $$new_props.noToolbar);
  		if ("tabs" in $$new_props) $$invalidate(32, tabs = $$new_props.tabs);
  		if ("pageContent" in $$new_props) $$invalidate(1, pageContent = $$new_props.pageContent);
  		if ("noSwipeback" in $$new_props) $$invalidate(33, noSwipeback = $$new_props.noSwipeback);
  		if ("ptr" in $$new_props) $$invalidate(2, ptr = $$new_props.ptr);
  		if ("ptrDistance" in $$new_props) $$invalidate(3, ptrDistance = $$new_props.ptrDistance);
  		if ("ptrPreloader" in $$new_props) $$invalidate(4, ptrPreloader = $$new_props.ptrPreloader);
  		if ("ptrBottom" in $$new_props) $$invalidate(5, ptrBottom = $$new_props.ptrBottom);
  		if ("ptrMousewheel" in $$new_props) $$invalidate(6, ptrMousewheel = $$new_props.ptrMousewheel);
  		if ("infinite" in $$new_props) $$invalidate(7, infinite = $$new_props.infinite);
  		if ("infiniteTop" in $$new_props) $$invalidate(8, infiniteTop = $$new_props.infiniteTop);
  		if ("infiniteDistance" in $$new_props) $$invalidate(9, infiniteDistance = $$new_props.infiniteDistance);
  		if ("infinitePreloader" in $$new_props) $$invalidate(10, infinitePreloader = $$new_props.infinitePreloader);
  		if ("hideBarsOnScroll" in $$new_props) $$invalidate(11, hideBarsOnScroll = $$new_props.hideBarsOnScroll);
  		if ("hideNavbarOnScroll" in $$new_props) $$invalidate(12, hideNavbarOnScroll = $$new_props.hideNavbarOnScroll);
  		if ("hideToolbarOnScroll" in $$new_props) $$invalidate(13, hideToolbarOnScroll = $$new_props.hideToolbarOnScroll);
  		if ("messagesContent" in $$new_props) $$invalidate(14, messagesContent = $$new_props.messagesContent);
  		if ("loginScreen" in $$new_props) $$invalidate(15, loginScreen = $$new_props.loginScreen);
  		if ("class" in $$new_props) $$invalidate(34, className = $$new_props.class);
  		if ("$$scope" in $$new_props) $$invalidate(37, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		afterUpdate,
  		onDestroy,
  		createEventDispatcher,
  		Utils: Utils$1,
  		restProps,
  		Mixins,
  		f7,
  		PageContent: Page_content,
  		dispatch,
  		name,
  		stacked,
  		withSubnavbar,
  		subnavbar,
  		withNavbarLarge,
  		navbarLarge,
  		noNavbar,
  		noToolbar,
  		tabs,
  		pageContent,
  		noSwipeback,
  		ptr,
  		ptrDistance,
  		ptrPreloader,
  		ptrBottom,
  		ptrMousewheel,
  		infinite,
  		infiniteTop,
  		infiniteDistance,
  		infinitePreloader,
  		hideBarsOnScroll,
  		hideNavbarOnScroll,
  		hideToolbarOnScroll,
  		messagesContent,
  		loginScreen,
  		className,
  		el,
  		hasSubnavbar,
  		hasNavbarLarge,
  		hasNavbarLargeCollapsed,
  		hasCardExpandableOpened,
  		routerPositionClass,
  		routerForceUnstack,
  		routerPageRole,
  		routerPageRoleDetailRoot,
  		routerPageMasterStack,
  		onPtrPullStart,
  		onPtrPullMove,
  		onPtrPullEnd,
  		onPtrRefresh,
  		onPtrDone,
  		onInfinite,
  		onPageMounted,
  		onPageInit,
  		onPageReinit,
  		onPageBeforeIn,
  		onPageBeforeOut,
  		onPageAfterOut,
  		onPageAfterIn,
  		onPageBeforeRemove,
  		onPageBeforeUnmount,
  		onPageStack,
  		onPageUnstack,
  		onPagePosition,
  		onPageRole,
  		onPageMasterStack,
  		onPageMasterUnstack,
  		onPageNavbarLargeCollapsed,
  		onPageNavbarLargeExpanded,
  		onCardOpened,
  		onCardClose,
  		onPageTabShow,
  		onPageTabHide,
  		mountPage,
  		destroyPage,
  		forceSubnavbar,
  		forceNavbarLarge,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(73, $$props = assign(assign({}, $$props), $$new_props));
  		if ("name" in $$props) $$invalidate(0, name = $$new_props.name);
  		if ("stacked" in $$props) $$invalidate(25, stacked = $$new_props.stacked);
  		if ("withSubnavbar" in $$props) $$invalidate(26, withSubnavbar = $$new_props.withSubnavbar);
  		if ("subnavbar" in $$props) $$invalidate(27, subnavbar = $$new_props.subnavbar);
  		if ("withNavbarLarge" in $$props) $$invalidate(28, withNavbarLarge = $$new_props.withNavbarLarge);
  		if ("navbarLarge" in $$props) $$invalidate(29, navbarLarge = $$new_props.navbarLarge);
  		if ("noNavbar" in $$props) $$invalidate(30, noNavbar = $$new_props.noNavbar);
  		if ("noToolbar" in $$props) $$invalidate(31, noToolbar = $$new_props.noToolbar);
  		if ("tabs" in $$props) $$invalidate(32, tabs = $$new_props.tabs);
  		if ("pageContent" in $$props) $$invalidate(1, pageContent = $$new_props.pageContent);
  		if ("noSwipeback" in $$props) $$invalidate(33, noSwipeback = $$new_props.noSwipeback);
  		if ("ptr" in $$props) $$invalidate(2, ptr = $$new_props.ptr);
  		if ("ptrDistance" in $$props) $$invalidate(3, ptrDistance = $$new_props.ptrDistance);
  		if ("ptrPreloader" in $$props) $$invalidate(4, ptrPreloader = $$new_props.ptrPreloader);
  		if ("ptrBottom" in $$props) $$invalidate(5, ptrBottom = $$new_props.ptrBottom);
  		if ("ptrMousewheel" in $$props) $$invalidate(6, ptrMousewheel = $$new_props.ptrMousewheel);
  		if ("infinite" in $$props) $$invalidate(7, infinite = $$new_props.infinite);
  		if ("infiniteTop" in $$props) $$invalidate(8, infiniteTop = $$new_props.infiniteTop);
  		if ("infiniteDistance" in $$props) $$invalidate(9, infiniteDistance = $$new_props.infiniteDistance);
  		if ("infinitePreloader" in $$props) $$invalidate(10, infinitePreloader = $$new_props.infinitePreloader);
  		if ("hideBarsOnScroll" in $$props) $$invalidate(11, hideBarsOnScroll = $$new_props.hideBarsOnScroll);
  		if ("hideNavbarOnScroll" in $$props) $$invalidate(12, hideNavbarOnScroll = $$new_props.hideNavbarOnScroll);
  		if ("hideToolbarOnScroll" in $$props) $$invalidate(13, hideToolbarOnScroll = $$new_props.hideToolbarOnScroll);
  		if ("messagesContent" in $$props) $$invalidate(14, messagesContent = $$new_props.messagesContent);
  		if ("loginScreen" in $$props) $$invalidate(15, loginScreen = $$new_props.loginScreen);
  		if ("className" in $$props) $$invalidate(34, className = $$new_props.className);
  		if ("el" in $$props) $$invalidate(16, el = $$new_props.el);
  		if ("hasSubnavbar" in $$props) $$invalidate(38, hasSubnavbar = $$new_props.hasSubnavbar);
  		if ("hasNavbarLarge" in $$props) $$invalidate(39, hasNavbarLarge = $$new_props.hasNavbarLarge);
  		if ("hasNavbarLargeCollapsed" in $$props) $$invalidate(40, hasNavbarLargeCollapsed = $$new_props.hasNavbarLargeCollapsed);
  		if ("hasCardExpandableOpened" in $$props) $$invalidate(41, hasCardExpandableOpened = $$new_props.hasCardExpandableOpened);
  		if ("routerPositionClass" in $$props) $$invalidate(42, routerPositionClass = $$new_props.routerPositionClass);
  		if ("routerForceUnstack" in $$props) $$invalidate(43, routerForceUnstack = $$new_props.routerForceUnstack);
  		if ("routerPageRole" in $$props) $$invalidate(44, routerPageRole = $$new_props.routerPageRole);
  		if ("routerPageRoleDetailRoot" in $$props) $$invalidate(45, routerPageRoleDetailRoot = $$new_props.routerPageRoleDetailRoot);
  		if ("routerPageMasterStack" in $$props) $$invalidate(46, routerPageMasterStack = $$new_props.routerPageMasterStack);
  		if ("forceSubnavbar" in $$props) $$invalidate(47, forceSubnavbar = $$new_props.forceSubnavbar);
  		if ("forceNavbarLarge" in $$props) $$invalidate(48, forceNavbarLarge = $$new_props.forceNavbarLarge);
  		if ("classes" in $$props) $$invalidate(17, classes = $$new_props.classes);
  	};

  	let forceSubnavbar;
  	let forceNavbarLarge;
  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		if ($$self.$$.dirty[0] & /*subnavbar, withSubnavbar*/ 201326592 | $$self.$$.dirty[1] & /*hasSubnavbar*/ 128) {
  			 $$invalidate(47, forceSubnavbar = typeof subnavbar === "undefined" && typeof withSubnavbar === "undefined"
  			? hasSubnavbar
  			: false);
  		}

  		if ($$self.$$.dirty[0] & /*navbarLarge, withNavbarLarge*/ 805306368 | $$self.$$.dirty[1] & /*hasNavbarLarge*/ 256) {
  			 $$invalidate(48, forceNavbarLarge = typeof navbarLarge === "undefined" && typeof withNavbarLarge === "undefined"
  			? hasNavbarLarge
  			: false);
  		}

  		 $$invalidate(17, classes = Utils$1.classNames(
  			className,
  			"page",
  			routerPositionClass,
  			{
  				stacked: stacked && !routerForceUnstack,
  				tabs,
  				"page-with-subnavbar": subnavbar || withSubnavbar || forceSubnavbar,
  				"page-with-navbar-large": navbarLarge || withNavbarLarge || forceNavbarLarge,
  				"no-navbar": noNavbar,
  				"no-toolbar": noToolbar,
  				"no-swipeback": noSwipeback,
  				"page-master": routerPageRole === "master",
  				"page-master-detail": routerPageRole === "detail",
  				"page-master-detail-root": routerPageRoleDetailRoot === true,
  				"page-master-stacked": routerPageMasterStack === true,
  				"page-with-navbar-large-collapsed": hasNavbarLargeCollapsed === true,
  				"page-with-card-opened": hasCardExpandableOpened === true,
  				"login-screen-page": loginScreen
  			},
  			Mixins.colorClasses($$props)
  		));
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		name,
  		pageContent,
  		ptr,
  		ptrDistance,
  		ptrPreloader,
  		ptrBottom,
  		ptrMousewheel,
  		infinite,
  		infiniteTop,
  		infiniteDistance,
  		infinitePreloader,
  		hideBarsOnScroll,
  		hideNavbarOnScroll,
  		hideToolbarOnScroll,
  		messagesContent,
  		loginScreen,
  		el,
  		classes,
  		onPtrPullStart,
  		onPtrPullMove,
  		onPtrPullEnd,
  		onPtrRefresh,
  		onPtrDone,
  		onInfinite,
  		$$restProps,
  		stacked,
  		withSubnavbar,
  		subnavbar,
  		withNavbarLarge,
  		navbarLarge,
  		noNavbar,
  		noToolbar,
  		tabs,
  		noSwipeback,
  		className,
  		slots,
  		div_binding,
  		$$scope
  	];
  }

  class Page extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(
  			this,
  			options,
  			instance$j,
  			create_fragment$j,
  			safe_not_equal,
  			{
  				name: 0,
  				stacked: 25,
  				withSubnavbar: 26,
  				subnavbar: 27,
  				withNavbarLarge: 28,
  				navbarLarge: 29,
  				noNavbar: 30,
  				noToolbar: 31,
  				tabs: 32,
  				pageContent: 1,
  				noSwipeback: 33,
  				ptr: 2,
  				ptrDistance: 3,
  				ptrPreloader: 4,
  				ptrBottom: 5,
  				ptrMousewheel: 6,
  				infinite: 7,
  				infiniteTop: 8,
  				infiniteDistance: 9,
  				infinitePreloader: 10,
  				hideBarsOnScroll: 11,
  				hideNavbarOnScroll: 12,
  				hideToolbarOnScroll: 13,
  				messagesContent: 14,
  				loginScreen: 15,
  				class: 34
  			},
  			[-1, -1, -1]
  		);

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Page",
  			options,
  			id: create_fragment$j.name
  		});
  	}

  	get name() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set name(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get stacked() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set stacked(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get withSubnavbar() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set withSubnavbar(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get subnavbar() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set subnavbar(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get withNavbarLarge() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set withNavbarLarge(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get navbarLarge() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set navbarLarge(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noNavbar() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noNavbar(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noToolbar() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noToolbar(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tabs() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tabs(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get pageContent() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set pageContent(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noSwipeback() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noSwipeback(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptr() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptr(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrDistance() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrDistance(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrPreloader() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrPreloader(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrBottom() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrBottom(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get ptrMousewheel() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set ptrMousewheel(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infinite() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infinite(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infiniteTop() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infiniteTop(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infiniteDistance() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infiniteDistance(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get infinitePreloader() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set infinitePreloader(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideBarsOnScroll() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideBarsOnScroll(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideNavbarOnScroll() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideNavbarOnScroll(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get hideToolbarOnScroll() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set hideToolbarOnScroll(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get messagesContent() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set messagesContent(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get loginScreen() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set loginScreen(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get class() {
  		throw new Error("<Page>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Page>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\row.svelte generated by Svelte v3.29.4 */
  const file$k = "node_modules\\framework7-svelte\\components\\row.svelte";

  // (66:22) 
  function create_if_block_2$8(ctx) {
  	let p;
  	let t;
  	let current;
  	let mounted;
  	let dispose;
  	const default_slot_template = /*#slots*/ ctx[12].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
  	let if_block = /*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2] && create_if_block_3$5(ctx);
  	let p_levels = [{ class: /*classes*/ ctx[4] }, restProps(/*$$restProps*/ ctx[6])];
  	let p_data = {};

  	for (let i = 0; i < p_levels.length; i += 1) {
  		p_data = assign(p_data, p_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			p = element("p");
  			if (default_slot) default_slot.c();
  			t = space();
  			if (if_block) if_block.c();
  			set_attributes(p, p_data);
  			add_location(p, file$k, 66, 2, 1563);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, p, anchor);

  			if (default_slot) {
  				default_slot.m(p, null);
  			}

  			append_dev(p, t);
  			if (if_block) if_block.m(p, null);
  			/*p_binding*/ ctx[14](p);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(p, "click", /*onClick*/ ctx[5], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 2048) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
  				}
  			}

  			if (/*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2]) {
  				if (if_block) ; else {
  					if_block = create_if_block_3$5(ctx);
  					if_block.c();
  					if_block.m(p, null);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			set_attributes(p, p_data = get_spread_update(p_levels, [
  				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
  				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(p);
  			if (default_slot) default_slot.d(detaching);
  			if (if_block) if_block.d();
  			/*p_binding*/ ctx[14](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$8.name,
  		type: "if",
  		source: "(66:22) ",
  		ctx
  	});

  	return block;
  }

  // (54:0) {#if tag === 'div'}
  function create_if_block$b(ctx) {
  	let div;
  	let t;
  	let current;
  	let mounted;
  	let dispose;
  	const default_slot_template = /*#slots*/ ctx[12].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
  	let if_block = /*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2] && create_if_block_1$9(ctx);
  	let div_levels = [{ class: /*classes*/ ctx[4] }, restProps(/*$$restProps*/ ctx[6])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			t = space();
  			if (if_block) if_block.c();
  			set_attributes(div, div_data);
  			add_location(div, file$k, 54, 2, 1320);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			append_dev(div, t);
  			if (if_block) if_block.m(div, null);
  			/*div_binding*/ ctx[13](div);
  			current = true;

  			if (!mounted) {
  				dispose = listen_dev(div, "click", /*onClick*/ ctx[5], false, false, false);
  				mounted = true;
  			}
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 2048) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
  				}
  			}

  			if (/*resizable*/ ctx[1] && /*resizableHandler*/ ctx[2]) {
  				if (if_block) ; else {
  					if_block = create_if_block_1$9(ctx);
  					if_block.c();
  					if_block.m(div, null);
  				}
  			} else if (if_block) {
  				if_block.d(1);
  				if_block = null;
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
  				dirty & /*$$restProps*/ 64 && restProps(/*$$restProps*/ ctx[6])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  			if (if_block) if_block.d();
  			/*div_binding*/ ctx[13](null);
  			mounted = false;
  			dispose();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$b.name,
  		type: "if",
  		source: "(54:0) {#if tag === 'div'}",
  		ctx
  	});

  	return block;
  }

  // (74:4) {#if resizable && resizableHandler}
  function create_if_block_3$5(ctx) {
  	let span;

  	const block = {
  		c: function create() {
  			span = element("span");
  			attr_dev(span, "class", "resize-handler");
  			add_location(span, file$k, 74, 6, 1723);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_3$5.name,
  		type: "if",
  		source: "(74:4) {#if resizable && resizableHandler}",
  		ctx
  	});

  	return block;
  }

  // (62:4) {#if resizable && resizableHandler}
  function create_if_block_1$9(ctx) {
  	let span;

  	const block = {
  		c: function create() {
  			span = element("span");
  			attr_dev(span, "class", "resize-handler");
  			add_location(span, file$k, 62, 6, 1482);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, span, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(span);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$9.name,
  		type: "if",
  		source: "(62:4) {#if resizable && resizableHandler}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$k(ctx) {
  	let current_block_type_index;
  	let if_block;
  	let if_block_anchor;
  	let current;
  	const if_block_creators = [create_if_block$b, create_if_block_2$8];
  	const if_blocks = [];

  	function select_block_type(ctx, dirty) {
  		if (/*tag*/ ctx[0] === "div") return 0;
  		if (/*tag*/ ctx[0] === "p") return 1;
  		return -1;
  	}

  	if (~(current_block_type_index = select_block_type(ctx))) {
  		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	}

  	const block = {
  		c: function create() {
  			if (if_block) if_block.c();
  			if_block_anchor = empty$1();
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			if (~current_block_type_index) {
  				if_blocks[current_block_type_index].m(target, anchor);
  			}

  			insert_dev(target, if_block_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if (~current_block_type_index) {
  					if_blocks[current_block_type_index].p(ctx, dirty);
  				}
  			} else {
  				if (if_block) {
  					group_outros();

  					transition_out(if_blocks[previous_block_index], 1, 1, () => {
  						if_blocks[previous_block_index] = null;
  					});

  					check_outros();
  				}

  				if (~current_block_type_index) {
  					if_block = if_blocks[current_block_type_index];

  					if (!if_block) {
  						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  						if_block.c();
  					}

  					transition_in(if_block, 1);
  					if_block.m(if_block_anchor.parentNode, if_block_anchor);
  				} else {
  					if_block = null;
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (~current_block_type_index) {
  				if_blocks[current_block_type_index].d(detaching);
  			}

  			if (detaching) detach_dev(if_block_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$k.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$k($$self, $$props, $$invalidate) {
  	const omit_props_names = [
  		"class","noGap","tag","resizable","resizableFixed","resizableAbsolute","resizableHandler"
  	];

  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Row", slots, ['default']);
  	const dispatch = createEventDispatcher();
  	let { class: className = undefined } = $$props;
  	let { noGap = false } = $$props;
  	let { tag = "div" } = $$props;
  	let { resizable = false } = $$props;
  	let { resizableFixed = false } = $$props;
  	let { resizableAbsolute = false } = $$props;
  	let { resizableHandler = true } = $$props;
  	let el;

  	function onClick() {
  		dispatch("click");
  		if (typeof $$props.onClick === "function") $$props.onClick();
  	}

  	function onResize(targetEl) {
  		if (el !== targetEl) return;
  		dispatch("gridResize");
  		if (typeof $$props.onGridResize === "function") $$props.onGridResize();
  	}

  	onMount(() => {
  		f7.ready(() => {
  			f7.instance.on("gridResize", onResize);
  		});
  	});

  	onDestroy(() => {
  		if (!f7.instance) return;
  		f7.instance.off("gridResize", onResize);
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(3, el);
  		});
  	}

  	function p_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(3, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(17, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(7, className = $$new_props.class);
  		if ("noGap" in $$new_props) $$invalidate(8, noGap = $$new_props.noGap);
  		if ("tag" in $$new_props) $$invalidate(0, tag = $$new_props.tag);
  		if ("resizable" in $$new_props) $$invalidate(1, resizable = $$new_props.resizable);
  		if ("resizableFixed" in $$new_props) $$invalidate(9, resizableFixed = $$new_props.resizableFixed);
  		if ("resizableAbsolute" in $$new_props) $$invalidate(10, resizableAbsolute = $$new_props.resizableAbsolute);
  		if ("resizableHandler" in $$new_props) $$invalidate(2, resizableHandler = $$new_props.resizableHandler);
  		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		createEventDispatcher,
  		onMount,
  		onDestroy,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		dispatch,
  		className,
  		noGap,
  		tag,
  		resizable,
  		resizableFixed,
  		resizableAbsolute,
  		resizableHandler,
  		el,
  		onClick,
  		onResize,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(17, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(7, className = $$new_props.className);
  		if ("noGap" in $$props) $$invalidate(8, noGap = $$new_props.noGap);
  		if ("tag" in $$props) $$invalidate(0, tag = $$new_props.tag);
  		if ("resizable" in $$props) $$invalidate(1, resizable = $$new_props.resizable);
  		if ("resizableFixed" in $$props) $$invalidate(9, resizableFixed = $$new_props.resizableFixed);
  		if ("resizableAbsolute" in $$props) $$invalidate(10, resizableAbsolute = $$new_props.resizableAbsolute);
  		if ("resizableHandler" in $$props) $$invalidate(2, resizableHandler = $$new_props.resizableHandler);
  		if ("el" in $$props) $$invalidate(3, el = $$new_props.el);
  		if ("classes" in $$props) $$invalidate(4, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(4, classes = Utils$1.classNames(
  			className,
  			"row",
  			{
  				"no-gap": noGap,
  				resizable,
  				"resizable-fixed": resizableFixed,
  				"resizable-absolute": resizableAbsolute
  			},
  			Mixins.colorClasses($$props)
  		));
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		tag,
  		resizable,
  		resizableHandler,
  		el,
  		classes,
  		onClick,
  		$$restProps,
  		className,
  		noGap,
  		resizableFixed,
  		resizableAbsolute,
  		$$scope,
  		slots,
  		div_binding,
  		p_binding
  	];
  }

  class Row extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
  			class: 7,
  			noGap: 8,
  			tag: 0,
  			resizable: 1,
  			resizableFixed: 9,
  			resizableAbsolute: 10,
  			resizableHandler: 2
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Row",
  			options,
  			id: create_fragment$k.name
  		});
  	}

  	get class() {
  		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get noGap() {
  		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set noGap(value) {
  		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get tag() {
  		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set tag(value) {
  		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizable() {
  		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizable(value) {
  		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizableFixed() {
  		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizableFixed(value) {
  		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizableAbsolute() {
  		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizableAbsolute(value) {
  		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get resizableHandler() {
  		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set resizableHandler(value) {
  		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\swiper-slide.svelte generated by Svelte v3.29.4 */
  const file$l = "node_modules\\framework7-svelte\\components\\swiper-slide.svelte";

  // (24:2) {:else}
  function create_else_block$4(ctx) {
  	let current;
  	const default_slot_template = /*#slots*/ ctx[5].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

  	const block = {
  		c: function create() {
  			if (default_slot) default_slot.c();
  		},
  		m: function mount(target, anchor) {
  			if (default_slot) {
  				default_slot.m(target, anchor);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 16) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_else_block$4.name,
  		type: "else",
  		source: "(24:2) {:else}",
  		ctx
  	});

  	return block;
  }

  // (20:2) {#if zoom}
  function create_if_block$c(ctx) {
  	let div;
  	let current;
  	const default_slot_template = /*#slots*/ ctx[5].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			attr_dev(div, "class", "swiper-zoom-container");
  			add_location(div, file$l, 20, 4, 416);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 16) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
  				}
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$c.name,
  		type: "if",
  		source: "(20:2) {#if zoom}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$l(ctx) {
  	let div;
  	let current_block_type_index;
  	let if_block;
  	let current;
  	const if_block_creators = [create_if_block$c, create_else_block$4];
  	const if_blocks = [];

  	function select_block_type(ctx, dirty) {
  		if (/*zoom*/ ctx[0]) return 0;
  		return 1;
  	}

  	current_block_type_index = select_block_type(ctx);
  	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  	let div_levels = [{ class: /*classes*/ ctx[1] }, restProps(/*$$restProps*/ ctx[2])];
  	let div_data = {};

  	for (let i = 0; i < div_levels.length; i += 1) {
  		div_data = assign(div_data, div_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if_block.c();
  			set_attributes(div, div_data);
  			add_location(div, file$l, 18, 0, 349);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			if_blocks[current_block_type_index].m(div, null);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			let previous_block_index = current_block_type_index;
  			current_block_type_index = select_block_type(ctx);

  			if (current_block_type_index === previous_block_index) {
  				if_blocks[current_block_type_index].p(ctx, dirty);
  			} else {
  				group_outros();

  				transition_out(if_blocks[previous_block_index], 1, 1, () => {
  					if_blocks[previous_block_index] = null;
  				});

  				check_outros();
  				if_block = if_blocks[current_block_type_index];

  				if (!if_block) {
  					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  					if_block.c();
  				}

  				transition_in(if_block, 1);
  				if_block.m(div, null);
  			}

  			set_attributes(div, div_data = get_spread_update(div_levels, [
  				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
  				dirty & /*$$restProps*/ 4 && restProps(/*$$restProps*/ ctx[2])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(if_block);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(if_block);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if_blocks[current_block_type_index].d();
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$l.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$l($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class","zoom"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Swiper_slide", slots, ['default']);
  	let { class: className = undefined } = $$props;
  	let { zoom = undefined } = $$props;

  	$$self.$$set = $$new_props => {
  		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
  		if ("zoom" in $$new_props) $$invalidate(0, zoom = $$new_props.zoom);
  		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		className,
  		zoom,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
  		if ("zoom" in $$props) $$invalidate(0, zoom = $$new_props.zoom);
  		if ("classes" in $$props) $$invalidate(1, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(1, classes = Utils$1.classNames(className, "swiper-slide", Mixins.colorClasses($$props)));
  	};

  	$$props = exclude_internal_props($$props);
  	return [zoom, classes, $$restProps, className, $$scope, slots];
  }

  class Swiper_slide extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$l, create_fragment$l, safe_not_equal, { class: 3, zoom: 0 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Swiper_slide",
  			options,
  			id: create_fragment$l.name
  		});
  	}

  	get class() {
  		throw new Error("<Swiper_slide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Swiper_slide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get zoom() {
  		throw new Error("<Swiper_slide>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set zoom(value) {
  		throw new Error("<Swiper_slide>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\swiper.svelte generated by Svelte v3.29.4 */
  const file$m = "node_modules\\framework7-svelte\\components\\swiper.svelte";
  const get_after_wrapper_slot_changes = dirty => ({});
  const get_after_wrapper_slot_context = ctx => ({});
  const get_before_wrapper_slot_changes = dirty => ({});
  const get_before_wrapper_slot_context = ctx => ({});

  // (90:2) {#if paginationComputed}
  function create_if_block_2$9(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "swiper-pagination");
  			add_location(div, file$m, 90, 4, 2330);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			/*div_binding*/ ctx[18](div);
  		},
  		p: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			/*div_binding*/ ctx[18](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_2$9.name,
  		type: "if",
  		source: "(90:2) {#if paginationComputed}",
  		ctx
  	});

  	return block;
  }

  // (93:2) {#if scrollbarComputed}
  function create_if_block_1$a(ctx) {
  	let div;

  	const block = {
  		c: function create() {
  			div = element("div");
  			attr_dev(div, "class", "swiper-scrollbar");
  			add_location(div, file$m, 93, 4, 2427);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);
  			/*div_binding_1*/ ctx[19](div);
  		},
  		p: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			/*div_binding_1*/ ctx[19](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block_1$a.name,
  		type: "if",
  		source: "(93:2) {#if scrollbarComputed}",
  		ctx
  	});

  	return block;
  }

  // (96:2) {#if navigationComputed}
  function create_if_block$d(ctx) {
  	let div0;
  	let t;
  	let div1;

  	const block = {
  		c: function create() {
  			div0 = element("div");
  			t = space();
  			div1 = element("div");
  			attr_dev(div0, "class", "swiper-button-prev");
  			add_location(div0, file$m, 96, 4, 2523);
  			attr_dev(div1, "class", "swiper-button-next");
  			add_location(div1, file$m, 97, 4, 2581);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div0, anchor);
  			/*div0_binding*/ ctx[20](div0);
  			insert_dev(target, t, anchor);
  			insert_dev(target, div1, anchor);
  			/*div1_binding*/ ctx[21](div1);
  		},
  		p: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div0);
  			/*div0_binding*/ ctx[20](null);
  			if (detaching) detach_dev(t);
  			if (detaching) detach_dev(div1);
  			/*div1_binding*/ ctx[21](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_if_block$d.name,
  		type: "if",
  		source: "(96:2) {#if navigationComputed}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$m(ctx) {
  	let div1;
  	let t0;
  	let div0;
  	let t1;
  	let t2;
  	let t3;
  	let t4;
  	let current;
  	const before_wrapper_slot_template = /*#slots*/ ctx[17]["before-wrapper"];
  	const before_wrapper_slot = create_slot(before_wrapper_slot_template, ctx, /*$$scope*/ ctx[16], get_before_wrapper_slot_context);
  	const default_slot_template = /*#slots*/ ctx[17].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
  	let if_block0 = /*paginationComputed*/ ctx[6] && create_if_block_2$9(ctx);
  	let if_block1 = /*scrollbarComputed*/ ctx[7] && create_if_block_1$a(ctx);
  	let if_block2 = /*navigationComputed*/ ctx[8] && create_if_block$d(ctx);
  	const after_wrapper_slot_template = /*#slots*/ ctx[17]["after-wrapper"];
  	const after_wrapper_slot = create_slot(after_wrapper_slot_template, ctx, /*$$scope*/ ctx[16], get_after_wrapper_slot_context);
  	let div1_levels = [{ class: /*classes*/ ctx[5] }, restProps(/*$$restProps*/ ctx[9])];
  	let div1_data = {};

  	for (let i = 0; i < div1_levels.length; i += 1) {
  		div1_data = assign(div1_data, div1_levels[i]);
  	}

  	const block = {
  		c: function create() {
  			div1 = element("div");
  			if (before_wrapper_slot) before_wrapper_slot.c();
  			t0 = space();
  			div0 = element("div");
  			if (default_slot) default_slot.c();
  			t1 = space();
  			if (if_block0) if_block0.c();
  			t2 = space();
  			if (if_block1) if_block1.c();
  			t3 = space();
  			if (if_block2) if_block2.c();
  			t4 = space();
  			if (after_wrapper_slot) after_wrapper_slot.c();
  			attr_dev(div0, "class", "swiper-wrapper");
  			add_location(div0, file$m, 86, 2, 2248);
  			set_attributes(div1, div1_data);
  			add_location(div1, file$m, 84, 0, 2148);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div1, anchor);

  			if (before_wrapper_slot) {
  				before_wrapper_slot.m(div1, null);
  			}

  			append_dev(div1, t0);
  			append_dev(div1, div0);

  			if (default_slot) {
  				default_slot.m(div0, null);
  			}

  			append_dev(div1, t1);
  			if (if_block0) if_block0.m(div1, null);
  			append_dev(div1, t2);
  			if (if_block1) if_block1.m(div1, null);
  			append_dev(div1, t3);
  			if (if_block2) if_block2.m(div1, null);
  			append_dev(div1, t4);

  			if (after_wrapper_slot) {
  				after_wrapper_slot.m(div1, null);
  			}

  			/*div1_binding_1*/ ctx[22](div1);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (before_wrapper_slot) {
  				if (before_wrapper_slot.p && dirty & /*$$scope*/ 65536) {
  					update_slot(before_wrapper_slot, before_wrapper_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_before_wrapper_slot_changes, get_before_wrapper_slot_context);
  				}
  			}

  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 65536) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
  				}
  			}

  			if (/*paginationComputed*/ ctx[6]) {
  				if (if_block0) {
  					if_block0.p(ctx, dirty);
  				} else {
  					if_block0 = create_if_block_2$9(ctx);
  					if_block0.c();
  					if_block0.m(div1, t2);
  				}
  			} else if (if_block0) {
  				if_block0.d(1);
  				if_block0 = null;
  			}

  			if (/*scrollbarComputed*/ ctx[7]) {
  				if (if_block1) {
  					if_block1.p(ctx, dirty);
  				} else {
  					if_block1 = create_if_block_1$a(ctx);
  					if_block1.c();
  					if_block1.m(div1, t3);
  				}
  			} else if (if_block1) {
  				if_block1.d(1);
  				if_block1 = null;
  			}

  			if (/*navigationComputed*/ ctx[8]) {
  				if (if_block2) {
  					if_block2.p(ctx, dirty);
  				} else {
  					if_block2 = create_if_block$d(ctx);
  					if_block2.c();
  					if_block2.m(div1, t4);
  				}
  			} else if (if_block2) {
  				if_block2.d(1);
  				if_block2 = null;
  			}

  			if (after_wrapper_slot) {
  				if (after_wrapper_slot.p && dirty & /*$$scope*/ 65536) {
  					update_slot(after_wrapper_slot, after_wrapper_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_after_wrapper_slot_changes, get_after_wrapper_slot_context);
  				}
  			}

  			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
  				(!current || dirty & /*classes*/ 32) && { class: /*classes*/ ctx[5] },
  				dirty & /*$$restProps*/ 512 && restProps(/*$$restProps*/ ctx[9])
  			]));
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(before_wrapper_slot, local);
  			transition_in(default_slot, local);
  			transition_in(after_wrapper_slot, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(before_wrapper_slot, local);
  			transition_out(default_slot, local);
  			transition_out(after_wrapper_slot, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div1);
  			if (before_wrapper_slot) before_wrapper_slot.d(detaching);
  			if (default_slot) default_slot.d(detaching);
  			if (if_block0) if_block0.d();
  			if (if_block1) if_block1.d();
  			if (if_block2) if_block2.d();
  			if (after_wrapper_slot) after_wrapper_slot.d(detaching);
  			/*div1_binding_1*/ ctx[22](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$m.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$m($$self, $$props, $$invalidate) {
  	const omit_props_names = ["class","params","pagination","scrollbar","navigation","init"];
  	let $$restProps = compute_rest_props($$props, omit_props_names);
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Swiper", slots, ['before-wrapper','default','after-wrapper']);
  	let { class: className = undefined } = $$props;
  	let { params = undefined } = $$props;
  	let { pagination = undefined } = $$props;
  	let { scrollbar = undefined } = $$props;
  	let { navigation = undefined } = $$props;
  	let { init = true } = $$props;
  	let el;
  	let swiper;
  	let paginationEl;
  	let nextEl;
  	let prevEl;
  	let scrollbarEl;
  	let initialUpdate = false;

  	onMount(() => {
  		if (!init) return;

  		f7.ready(() => {
  			const newParams = {
  				pagination: {},
  				navigation: {},
  				scrollbar: {}
  			};

  			if (params) Utils$1.extend(newParams, params);
  			if (pagination && !newParams.pagination.el) newParams.pagination.el = paginationEl;

  			if (navigation && !newParams.navigation.nextEl && !newParams.navigation.prevEl) {
  				newParams.navigation.nextEl = nextEl;
  				newParams.navigation.prevEl = prevEl;
  			}

  			if (scrollbar && !newParams.scrollbar.el) newParams.scrollbar.el = scrollbarEl;
  			swiper = f7.instance.swiper.create(el, newParams);
  		});
  	});

  	afterUpdate(() => {
  		if (!initialUpdate) {
  			initialUpdate = true;
  			return;
  		}

  		if (swiper && swiper.update) swiper.update();
  	});

  	onDestroy(() => {
  		if (swiper && swiper.destroy) swiper.destroy();
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			paginationEl = $$value;
  			$$invalidate(1, paginationEl);
  		});
  	}

  	function div_binding_1($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			scrollbarEl = $$value;
  			$$invalidate(4, scrollbarEl);
  		});
  	}

  	function div0_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			prevEl = $$value;
  			$$invalidate(3, prevEl);
  		});
  	}

  	function div1_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			nextEl = $$value;
  			$$invalidate(2, nextEl);
  		});
  	}

  	function div1_binding_1($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(0, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(25, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
  		if ("class" in $$new_props) $$invalidate(10, className = $$new_props.class);
  		if ("params" in $$new_props) $$invalidate(11, params = $$new_props.params);
  		if ("pagination" in $$new_props) $$invalidate(12, pagination = $$new_props.pagination);
  		if ("scrollbar" in $$new_props) $$invalidate(13, scrollbar = $$new_props.scrollbar);
  		if ("navigation" in $$new_props) $$invalidate(14, navigation = $$new_props.navigation);
  		if ("init" in $$new_props) $$invalidate(15, init = $$new_props.init);
  		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		afterUpdate,
  		onDestroy,
  		Mixins,
  		Utils: Utils$1,
  		restProps,
  		f7,
  		className,
  		params,
  		pagination,
  		scrollbar,
  		navigation,
  		init,
  		el,
  		swiper,
  		paginationEl,
  		nextEl,
  		prevEl,
  		scrollbarEl,
  		initialUpdate,
  		classes,
  		paginationComputed,
  		scrollbarComputed,
  		navigationComputed
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(25, $$props = assign(assign({}, $$props), $$new_props));
  		if ("className" in $$props) $$invalidate(10, className = $$new_props.className);
  		if ("params" in $$props) $$invalidate(11, params = $$new_props.params);
  		if ("pagination" in $$props) $$invalidate(12, pagination = $$new_props.pagination);
  		if ("scrollbar" in $$props) $$invalidate(13, scrollbar = $$new_props.scrollbar);
  		if ("navigation" in $$props) $$invalidate(14, navigation = $$new_props.navigation);
  		if ("init" in $$props) $$invalidate(15, init = $$new_props.init);
  		if ("el" in $$props) $$invalidate(0, el = $$new_props.el);
  		if ("swiper" in $$props) swiper = $$new_props.swiper;
  		if ("paginationEl" in $$props) $$invalidate(1, paginationEl = $$new_props.paginationEl);
  		if ("nextEl" in $$props) $$invalidate(2, nextEl = $$new_props.nextEl);
  		if ("prevEl" in $$props) $$invalidate(3, prevEl = $$new_props.prevEl);
  		if ("scrollbarEl" in $$props) $$invalidate(4, scrollbarEl = $$new_props.scrollbarEl);
  		if ("initialUpdate" in $$props) initialUpdate = $$new_props.initialUpdate;
  		if ("classes" in $$props) $$invalidate(5, classes = $$new_props.classes);
  		if ("paginationComputed" in $$props) $$invalidate(6, paginationComputed = $$new_props.paginationComputed);
  		if ("scrollbarComputed" in $$props) $$invalidate(7, scrollbarComputed = $$new_props.scrollbarComputed);
  		if ("navigationComputed" in $$props) $$invalidate(8, navigationComputed = $$new_props.navigationComputed);
  	};

  	let classes;
  	let paginationComputed;
  	let scrollbarComputed;
  	let navigationComputed;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(5, classes = Utils$1.classNames(className, "swiper-container", Mixins.colorClasses($$props)));

  		if ($$self.$$.dirty & /*pagination, params*/ 6144) {
  			 $$invalidate(6, paginationComputed = (() => {
  				if (pagination === true || params && params.pagination && !params.pagination.el) {
  					return true;
  				}

  				return false;
  			})());
  		}

  		if ($$self.$$.dirty & /*scrollbar, params*/ 10240) {
  			 $$invalidate(7, scrollbarComputed = (() => {
  				if (scrollbar === true || params && params.scrollbar && !params.scrollbar.el) {
  					return true;
  				}

  				return false;
  			})());
  		}

  		if ($$self.$$.dirty & /*navigation, params*/ 18432) {
  			 $$invalidate(8, navigationComputed = (() => {
  				if (navigation === true || params && params.navigation && !params.navigation.nextEl && !params.navigation.prevEl) {
  					return true;
  				}

  				return false;
  			})());
  		}
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		el,
  		paginationEl,
  		nextEl,
  		prevEl,
  		scrollbarEl,
  		classes,
  		paginationComputed,
  		scrollbarComputed,
  		navigationComputed,
  		$$restProps,
  		className,
  		params,
  		pagination,
  		scrollbar,
  		navigation,
  		init,
  		$$scope,
  		slots,
  		div_binding,
  		div_binding_1,
  		div0_binding,
  		div1_binding,
  		div1_binding_1
  	];
  }

  class Swiper$2 extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
  			class: 10,
  			params: 11,
  			pagination: 12,
  			scrollbar: 13,
  			navigation: 14,
  			init: 15
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Swiper",
  			options,
  			id: create_fragment$m.name
  		});
  	}

  	get class() {
  		throw new Error("<Swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<Swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get params() {
  		throw new Error("<Swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set params(value) {
  		throw new Error("<Swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get pagination() {
  		throw new Error("<Swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set pagination(value) {
  		throw new Error("<Swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get scrollbar() {
  		throw new Error("<Swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set scrollbar(value) {
  		throw new Error("<Swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get navigation() {
  		throw new Error("<Swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set navigation(value) {
  		throw new Error("<Swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get init() {
  		throw new Error("<Swiper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set init(value) {
  		throw new Error("<Swiper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  /* node_modules\framework7-svelte\components\view.svelte generated by Svelte v3.29.4 */
  const file$n = "node_modules\\framework7-svelte\\components\\view.svelte";

  function get_each_context$1(ctx, list, i) {
  	const child_ctx = ctx.slice();
  	child_ctx[27] = list[i];
  	return child_ctx;
  }

  // (141:2) {#each pages as page (page.id)}
  function create_each_block$1(key_1, ctx) {
  	let first;
  	let switch_instance;
  	let switch_instance_anchor;
  	let current;
  	const switch_instance_spread_levels = [/*page*/ ctx[27].props];
  	var switch_value = /*page*/ ctx[27].component;

  	function switch_props(ctx) {
  		let switch_instance_props = {};

  		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
  			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
  		}

  		return {
  			props: switch_instance_props,
  			$$inline: true
  		};
  	}

  	if (switch_value) {
  		switch_instance = new switch_value(switch_props());
  	}

  	const block = {
  		key: key_1,
  		first: null,
  		c: function create() {
  			first = empty$1();
  			if (switch_instance) create_component(switch_instance.$$.fragment);
  			switch_instance_anchor = empty$1();
  			this.first = first;
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, first, anchor);

  			if (switch_instance) {
  				mount_component(switch_instance, target, anchor);
  			}

  			insert_dev(target, switch_instance_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const switch_instance_changes = (dirty & /*pages*/ 8)
  			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*page*/ ctx[27].props)])
  			: {};

  			if (switch_value !== (switch_value = /*page*/ ctx[27].component)) {
  				if (switch_instance) {
  					group_outros();
  					const old_component = switch_instance;

  					transition_out(old_component.$$.fragment, 1, 0, () => {
  						destroy_component(old_component, 1);
  					});

  					check_outros();
  				}

  				if (switch_value) {
  					switch_instance = new switch_value(switch_props());
  					create_component(switch_instance.$$.fragment);
  					transition_in(switch_instance.$$.fragment, 1);
  					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
  				} else {
  					switch_instance = null;
  				}
  			} else if (switch_value) {
  				switch_instance.$set(switch_instance_changes);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(first);
  			if (detaching) detach_dev(switch_instance_anchor);
  			if (switch_instance) destroy_component(switch_instance, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_each_block$1.name,
  		type: "each",
  		source: "(141:2) {#each pages as page (page.id)}",
  		ctx
  	});

  	return block;
  }

  function create_fragment$n(ctx) {
  	let div;
  	let t;
  	let each_blocks = [];
  	let each_1_lookup = new Map();
  	let current;
  	const default_slot_template = /*#slots*/ ctx[9].default;
  	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
  	let each_value = /*pages*/ ctx[3];
  	validate_each_argument(each_value);
  	const get_key = ctx => /*page*/ ctx[27].id;
  	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

  	for (let i = 0; i < each_value.length; i += 1) {
  		let child_ctx = get_each_context$1(ctx, each_value, i);
  		let key = get_key(child_ctx);
  		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
  	}

  	const block = {
  		c: function create() {
  			div = element("div");
  			if (default_slot) default_slot.c();
  			t = space();

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].c();
  			}

  			attr_dev(div, "class", /*classes*/ ctx[4]);
  			attr_dev(div, "style", /*style*/ ctx[1]);
  			attr_dev(div, "id", /*id*/ ctx[0]);
  			add_location(div, file$n, 138, 0, 4153);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, div, anchor);

  			if (default_slot) {
  				default_slot.m(div, null);
  			}

  			append_dev(div, t);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].m(div, null);
  			}

  			/*div_binding*/ ctx[10](div);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			if (default_slot) {
  				if (default_slot.p && dirty & /*$$scope*/ 256) {
  					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
  				}
  			}

  			if (dirty & /*pages*/ 8) {
  				const each_value = /*pages*/ ctx[3];
  				validate_each_argument(each_value);
  				group_outros();
  				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
  				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block$1, null, get_each_context$1);
  				check_outros();
  			}

  			if (!current || dirty & /*classes*/ 16) {
  				attr_dev(div, "class", /*classes*/ ctx[4]);
  			}

  			if (!current || dirty & /*style*/ 2) {
  				attr_dev(div, "style", /*style*/ ctx[1]);
  			}

  			if (!current || dirty & /*id*/ 1) {
  				attr_dev(div, "id", /*id*/ ctx[0]);
  			}
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(default_slot, local);

  			for (let i = 0; i < each_value.length; i += 1) {
  				transition_in(each_blocks[i]);
  			}

  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(default_slot, local);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				transition_out(each_blocks[i]);
  			}

  			current = false;
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(div);
  			if (default_slot) default_slot.d(detaching);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].d();
  			}

  			/*div_binding*/ ctx[10](null);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$n.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance_1($$self, $$props, $$invalidate) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("View", slots, ['default']);
  	let { id = undefined } = $$props;
  	let { style = undefined } = $$props;
  	let { init = true } = $$props;
  	let { class: className = undefined } = $$props;
  	const dispatch = createEventDispatcher();
  	const { main, tab, tabActive } = $$props;
  	let el;
  	let pages = [];
  	let routerData;
  	let f7View;

  	function instance() {
  		return f7View;
  	}

  	function onResize(view, width) {
  		dispatch("viewResize", [width]);
  		if (typeof $$props.onViewResize === "function") $$props.onViewResize(width);
  	}

  	function onSwipeBackMove(data) {
  		dispatch("swipeBackMove", [data]);
  		if (typeof $$props.onSwipeBackMove === "function") $$props.onSwipeBackMove(data);
  	}

  	function onSwipeBackBeforeChange(data) {
  		dispatch("swipeBackBeforeChange", [data]);
  		if (typeof $$props.onSwipeBackBeforeChange === "function") $$props.onSwipeBackBeforeChange(data);
  	}

  	function onSwipeBackAfterChange(data) {
  		dispatch("swipeBackAfterChange", [data]);
  		if (typeof $$props.onSwipeBackAfterChange === "function") $$props.onSwipeBackAfterChange(data);
  	}

  	function onSwipeBackBeforeReset(data) {
  		dispatch("swipeBackBeforeReset", [data]);
  		if (typeof $$props.onSwipeBackBeforeReset === "function") $$props.onSwipeBackBeforeReset(data);
  	}

  	function onSwipeBackAfterReset(data) {
  		dispatch("swipeBackAfterReset", [data]);
  		if (typeof $$props.onSwipeBackAfterReset === "function") $$props.onSwipeBackAfterReset(data);
  	}

  	function onTabShow(tabEl) {
  		if (el !== tabEl) return;
  		dispatch("tabShow");
  		if (typeof $$props.onTabShow === "function") $$props.onTabShow(tabEl);
  	}

  	function onTabHide(tabEl) {
  		if (el !== tabEl) return;
  		dispatch("tabHide");
  		if (typeof $$props.onTabHide === "function") $$props.onTabHide(tabEl);
  	}

  	function onViewInit(view) {
  		f7View = view;
  		routerData.instance = view;
  		dispatch("viewInit", [view]);
  		if (typeof $$props.onViewInit === "function") $$props.onViewInit(view);
  	}

  	onMount(() => {
  		if (!init) return;

  		f7.ready(() => {
  			f7.instance.on("tabShow", onTabShow);
  			f7.instance.on("tabHide", onTabHide);

  			routerData = {
  				el,
  				instance: null,
  				pages,
  				setPages(p) {
  					tick().then(() => {
  						$$invalidate(3, pages = p);
  					});
  				}
  			};

  			f7.routers.views.push(routerData);

  			routerData.instance = f7.instance.views.create(el, {
  				...Utils$1.noUndefinedProps($$props),
  				on: { init: onViewInit }
  			});

  			if (!f7View) f7View = routerData.instance;
  			f7View.on("resize", onResize);
  			f7View.on("swipebackMove", onSwipeBackMove);
  			f7View.on("swipebackBeforeChange", onSwipeBackBeforeChange);
  			f7View.on("swipebackAfterChange", onSwipeBackAfterChange);
  			f7View.on("swipebackBeforeReset", onSwipeBackBeforeReset);
  			f7View.on("swipebackAfterReset", onSwipeBackAfterReset);
  		});
  	});

  	afterUpdate(() => {
  		if (!routerData) return;
  		f7.events.emit("viewRouterDidUpdate", routerData);
  	});

  	onDestroy(() => {
  		if (!init) return;

  		if (f7.instance) {
  			f7.instance.off("tabShow", onTabShow);
  			f7.instance.off("tabHide", onTabHide);
  		}

  		if (f7View) {
  			f7View.off("resize", onResize);
  			f7View.off("swipebackMove", onSwipeBackMove);
  			f7View.off("swipebackBeforeChange", onSwipeBackBeforeChange);
  			f7View.off("swipebackAfterChange", onSwipeBackAfterChange);
  			f7View.off("swipebackBeforeReset", onSwipeBackBeforeReset);
  			f7View.off("swipebackAfterReset", onSwipeBackAfterReset);

  			if (f7View.destroy) {
  				f7View.destroy();
  			}
  		}

  		f7.routers.views.splice(f7.routers.views.indexOf(routerData), 1);
  		f7View = null;
  		routerData = null;
  	});

  	function div_binding($$value) {
  		binding_callbacks[$$value ? "unshift" : "push"](() => {
  			el = $$value;
  			$$invalidate(2, el);
  		});
  	}

  	$$self.$$set = $$new_props => {
  		$$invalidate(26, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  		if ("id" in $$new_props) $$invalidate(0, id = $$new_props.id);
  		if ("style" in $$new_props) $$invalidate(1, style = $$new_props.style);
  		if ("init" in $$new_props) $$invalidate(5, init = $$new_props.init);
  		if ("class" in $$new_props) $$invalidate(6, className = $$new_props.class);
  		if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
  	};

  	$$self.$capture_state = () => ({
  		onMount,
  		onDestroy,
  		afterUpdate,
  		createEventDispatcher,
  		tick,
  		f7,
  		Mixins,
  		Utils: Utils$1,
  		id,
  		style,
  		init,
  		className,
  		dispatch,
  		main,
  		tab,
  		tabActive,
  		el,
  		pages,
  		routerData,
  		f7View,
  		instance,
  		onResize,
  		onSwipeBackMove,
  		onSwipeBackBeforeChange,
  		onSwipeBackAfterChange,
  		onSwipeBackBeforeReset,
  		onSwipeBackAfterReset,
  		onTabShow,
  		onTabHide,
  		onViewInit,
  		classes
  	});

  	$$self.$inject_state = $$new_props => {
  		$$invalidate(26, $$props = assign(assign({}, $$props), $$new_props));
  		if ("id" in $$props) $$invalidate(0, id = $$new_props.id);
  		if ("style" in $$props) $$invalidate(1, style = $$new_props.style);
  		if ("init" in $$props) $$invalidate(5, init = $$new_props.init);
  		if ("className" in $$props) $$invalidate(6, className = $$new_props.className);
  		if ("el" in $$props) $$invalidate(2, el = $$new_props.el);
  		if ("pages" in $$props) $$invalidate(3, pages = $$new_props.pages);
  		if ("routerData" in $$props) routerData = $$new_props.routerData;
  		if ("f7View" in $$props) f7View = $$new_props.f7View;
  		if ("classes" in $$props) $$invalidate(4, classes = $$new_props.classes);
  	};

  	let classes;

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	$$self.$$.update = () => {
  		 $$invalidate(4, classes = Utils$1.classNames(
  			className,
  			"view",
  			{
  				"view-main": main,
  				"tab-active": tabActive,
  				tab
  			},
  			Mixins.colorClasses($$props)
  		));
  	};

  	$$props = exclude_internal_props($$props);

  	return [
  		id,
  		style,
  		el,
  		pages,
  		classes,
  		init,
  		className,
  		instance,
  		$$scope,
  		slots,
  		div_binding
  	];
  }

  class View$2 extends SvelteComponentDev {
  	constructor(options) {
  		super(options);

  		init(this, options, instance_1, create_fragment$n, safe_not_equal, {
  			id: 0,
  			style: 1,
  			init: 5,
  			class: 6,
  			instance: 7
  		});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "View",
  			options,
  			id: create_fragment$n.name
  		});
  	}

  	get id() {
  		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set id(value) {
  		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get style() {
  		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set style(value) {
  		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get init() {
  		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set init(value) {
  		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get class() {
  		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set class(value) {
  		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	get instance() {
  		return this.$$.ctx[7];
  	}

  	set instance(value) {
  		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = "/**\n * Framework7 5.7.13\n * Full featured mobile HTML framework for building iOS & Android apps\n * https://framework7.io/\n *\n * Copyright 2014-2020 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: October 9, 2020\n */\n/*====================\n  Core\n  ==================== */\n:root {\n  --f7-theme-color: #007aff;\n  --f7-theme-color-rgb: 0, 122, 255;\n  --f7-theme-color-shade: #0066d6;\n  --f7-theme-color-tint: #298fff;\n  --f7-safe-area-left: 0px;\n  --f7-safe-area-right: 0px;\n  --f7-safe-area-top: 0px;\n  --f7-safe-area-bottom: 0px;\n  --f7-safe-area-outer-left: 0px;\n  --f7-safe-area-outer-right: 0px;\n  --f7-device-pixel-ratio: 1;\n}\n@supports (left: env(safe-area-inset-left)) {\n  :root {\n    --f7-safe-area-top: env(safe-area-inset-top);\n    --f7-safe-area-bottom: env(safe-area-inset-bottom);\n  }\n  :root .ios-left-edge,\n  :root .ios-edges,\n  :root .safe-area-left,\n  :root .safe-areas,\n  :root .popup,\n  :root .sheet-modal,\n  :root .panel-left {\n    --f7-safe-area-left: env(safe-area-inset-left);\n    --f7-safe-area-outer-left: env(safe-area-inset-left);\n  }\n  :root .ios-right-edge,\n  :root .ios-edges,\n  :root .safe-area-right,\n  :root .safe-areas,\n  :root .popup,\n  :root .sheet-modal,\n  :root .panel-right {\n    --f7-safe-area-right: env(safe-area-inset-right);\n    --f7-safe-area-outer-right: env(safe-area-inset-right);\n  }\n  :root .no-safe-areas,\n  :root .no-safe-area-left,\n  :root .no-ios-edges,\n  :root .no-ios-left-edge {\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-outer-left: 0px;\n  }\n  :root .no-safe-areas,\n  :root .no-safe-area-right,\n  :root .no-ios-edges,\n  :root .no-ios-right-edge {\n    --f7-safe-area-right: 0px;\n    --f7-safe-area-outer-right: 0px;\n  }\n}\n@media (min-resolution: 2dppx) {\n  :root {\n    --f7-device-pixel-ratio: 2;\n  }\n}\n@media (min-resolution: 3dppx) {\n  :root {\n    --f7-device-pixel-ratio: 3;\n  }\n}\n/*====================\n  Fonts & Bars\n  ==================== */\n:root {\n  --f7-font-size: 14px;\n  /*\n  --f7-bars-link-color: var(--f7-theme-color);\n  */\n  --f7-bars-bg-image: none;\n  --f7-bars-translucent-opacity: 0.8;\n  --f7-bars-translucent-blur: 20px;\n  --f7-bars-shadow-bottom-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, 0.08) 40%, rgba(0, 0, 0, 0.04) 50%, rgba(0, 0, 0, 0) 90%, rgba(0, 0, 0, 0) 100%);\n  --f7-bars-shadow-top-image: linear-gradient(to top, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, 0.08) 40%, rgba(0, 0, 0, 0.04) 50%, rgba(0, 0, 0, 0) 90%, rgba(0, 0, 0, 0) 100%);\n  --f7-bars-text-color: #000;\n  --f7-bars-bg-color: #f7f7f8;\n  --f7-bars-bg-color-rgb: 247, 247, 248;\n}\n:root .theme-dark,\n:root.theme-dark {\n  --f7-bars-text-color: #fff;\n}\n.ios {\n  --f7-font-family: -apple-system, SF Pro Text, SF UI Text, system-ui, Helvetica Neue, Helvetica, Arial, sans-serif;\n  --f7-line-height: 1.4;\n  --f7-text-color: #000;\n  --f7-bars-border-color: rgba(0, 0, 0, 0.25);\n}\n.ios .theme-dark,\n.ios.theme-dark {\n  --f7-text-color: #fff;\n  --f7-bars-bg-color: #121212;\n  --f7-bars-bg-color-rgb: 22, 22, 22;\n  --f7-bars-border-color: rgba(255, 255, 255, 0.16);\n}\n.md {\n  --f7-font-family: Roboto, system-ui, Noto, Helvetica, Arial, sans-serif;\n  --f7-line-height: 1.5;\n  --f7-bars-border-color: transparent;\n  --f7-text-color: #212121;\n}\n.md .theme-dark,\n.md.theme-dark {\n  --f7-text-color: rgba(255, 255, 255, 0.87);\n  --f7-bars-bg-color: #202020;\n}\n.aurora {\n  --f7-font-family: -apple-system, system-ui, Helvetica, Arial, sans-serif;\n  --f7-line-height: 1.5;\n  --f7-text-color: #000;\n  --f7-bars-border-color: rgba(0, 0, 0, 0.2);\n}\n.aurora .theme-dark,\n.aurora.theme-dark {\n  --f7-text-color: #fff;\n  --f7-bars-bg-color: #202020;\n  --f7-bars-border-color: rgba(255, 255, 255, 0.1);\n}\n/*====================\n  Color Themes\n  ==================== */\n.text-color-primary {\n  --f7-theme-color-text-color: var(--f7-theme-color);\n}\n.bg-color-primary {\n  --f7-theme-color-bg-color: var(--f7-theme-color);\n}\n.border-color-primary {\n  --f7-theme-color-border-color: var(--f7-theme-color);\n}\n.ripple-color-primary {\n  --f7-theme-color-ripple-color: rgba(var(--f7-theme-color-rgb), 0.3);\n}\n:root {\n  --f7-color-red: #ff3b30;\n  --f7-color-red-rgb: 255, 59, 48;\n  --f7-color-red-shade: #ff1407;\n  --f7-color-red-tint: #ff6259;\n  --f7-color-green: #4cd964;\n  --f7-color-green-rgb: 76, 217, 100;\n  --f7-color-green-shade: #2cd048;\n  --f7-color-green-tint: #6ee081;\n  --f7-color-blue: #2196f3;\n  --f7-color-blue-rgb: 33, 150, 243;\n  --f7-color-blue-shade: #0c82df;\n  --f7-color-blue-tint: #48a8f5;\n  --f7-color-pink: #ff2d55;\n  --f7-color-pink-rgb: 255, 45, 85;\n  --f7-color-pink-shade: #ff0434;\n  --f7-color-pink-tint: #ff5676;\n  --f7-color-yellow: #ffcc00;\n  --f7-color-yellow-rgb: 255, 204, 0;\n  --f7-color-yellow-shade: #d6ab00;\n  --f7-color-yellow-tint: #ffd429;\n  --f7-color-orange: #ff9500;\n  --f7-color-orange-rgb: 255, 149, 0;\n  --f7-color-orange-shade: #d67d00;\n  --f7-color-orange-tint: #ffa629;\n  --f7-color-purple: #9c27b0;\n  --f7-color-purple-rgb: 156, 39, 176;\n  --f7-color-purple-shade: #7e208f;\n  --f7-color-purple-tint: #b92fd1;\n  --f7-color-deeppurple: #673ab7;\n  --f7-color-deeppurple-rgb: 103, 58, 183;\n  --f7-color-deeppurple-shade: #563098;\n  --f7-color-deeppurple-tint: #7c52c8;\n  --f7-color-lightblue: #5ac8fa;\n  --f7-color-lightblue-rgb: 90, 200, 250;\n  --f7-color-lightblue-shade: #32bbf9;\n  --f7-color-lightblue-tint: #82d5fb;\n  --f7-color-teal: #009688;\n  --f7-color-teal-rgb: 0, 150, 136;\n  --f7-color-teal-shade: #006d63;\n  --f7-color-teal-tint: #00bfad;\n  --f7-color-lime: #cddc39;\n  --f7-color-lime-rgb: 205, 220, 57;\n  --f7-color-lime-shade: #bac923;\n  --f7-color-lime-tint: #d6e25c;\n  --f7-color-deeporange: #ff6b22;\n  --f7-color-deeporange-rgb: 255, 107, 34;\n  --f7-color-deeporange-shade: #f85200;\n  --f7-color-deeporange-tint: #ff864b;\n  --f7-color-gray: #8e8e93;\n  --f7-color-gray-rgb: 142, 142, 147;\n  --f7-color-gray-shade: #79797f;\n  --f7-color-gray-tint: #a3a3a7;\n  --f7-color-white: #ffffff;\n  --f7-color-white-rgb: 255, 255, 255;\n  --f7-color-white-shade: #ebebeb;\n  --f7-color-white-tint: #ffffff;\n  --f7-color-black: #000000;\n  --f7-color-black-rgb: 0, 0, 0;\n  --f7-color-black-shade: #000000;\n  --f7-color-black-tint: #141414;\n}\n.color-theme-red {\n  --f7-theme-color: #ff3b30;\n  --f7-theme-color-rgb: 255, 59, 48;\n  --f7-theme-color-shade: #ff1407;\n  --f7-theme-color-tint: #ff6259;\n}\n.color-theme-green {\n  --f7-theme-color: #4cd964;\n  --f7-theme-color-rgb: 76, 217, 100;\n  --f7-theme-color-shade: #2cd048;\n  --f7-theme-color-tint: #6ee081;\n}\n.color-theme-blue {\n  --f7-theme-color: #2196f3;\n  --f7-theme-color-rgb: 33, 150, 243;\n  --f7-theme-color-shade: #0c82df;\n  --f7-theme-color-tint: #48a8f5;\n}\n.color-theme-pink {\n  --f7-theme-color: #ff2d55;\n  --f7-theme-color-rgb: 255, 45, 85;\n  --f7-theme-color-shade: #ff0434;\n  --f7-theme-color-tint: #ff5676;\n}\n.color-theme-yellow {\n  --f7-theme-color: #ffcc00;\n  --f7-theme-color-rgb: 255, 204, 0;\n  --f7-theme-color-shade: #d6ab00;\n  --f7-theme-color-tint: #ffd429;\n}\n.color-theme-orange {\n  --f7-theme-color: #ff9500;\n  --f7-theme-color-rgb: 255, 149, 0;\n  --f7-theme-color-shade: #d67d00;\n  --f7-theme-color-tint: #ffa629;\n}\n.color-theme-purple {\n  --f7-theme-color: #9c27b0;\n  --f7-theme-color-rgb: 156, 39, 176;\n  --f7-theme-color-shade: #7e208f;\n  --f7-theme-color-tint: #b92fd1;\n}\n.color-theme-deeppurple {\n  --f7-theme-color: #673ab7;\n  --f7-theme-color-rgb: 103, 58, 183;\n  --f7-theme-color-shade: #563098;\n  --f7-theme-color-tint: #7c52c8;\n}\n.color-theme-lightblue {\n  --f7-theme-color: #5ac8fa;\n  --f7-theme-color-rgb: 90, 200, 250;\n  --f7-theme-color-shade: #32bbf9;\n  --f7-theme-color-tint: #82d5fb;\n}\n.color-theme-teal {\n  --f7-theme-color: #009688;\n  --f7-theme-color-rgb: 0, 150, 136;\n  --f7-theme-color-shade: #006d63;\n  --f7-theme-color-tint: #00bfad;\n}\n.color-theme-lime {\n  --f7-theme-color: #cddc39;\n  --f7-theme-color-rgb: 205, 220, 57;\n  --f7-theme-color-shade: #bac923;\n  --f7-theme-color-tint: #d6e25c;\n}\n.color-theme-deeporange {\n  --f7-theme-color: #ff6b22;\n  --f7-theme-color-rgb: 255, 107, 34;\n  --f7-theme-color-shade: #f85200;\n  --f7-theme-color-tint: #ff864b;\n}\n.color-theme-gray {\n  --f7-theme-color: #8e8e93;\n  --f7-theme-color-rgb: 142, 142, 147;\n  --f7-theme-color-shade: #79797f;\n  --f7-theme-color-tint: #a3a3a7;\n}\n.color-theme-white {\n  --f7-theme-color: #ffffff;\n  --f7-theme-color-rgb: 255, 255, 255;\n  --f7-theme-color-shade: #ebebeb;\n  --f7-theme-color-tint: #ffffff;\n}\n.color-theme-black {\n  --f7-theme-color: #000000;\n  --f7-theme-color-rgb: 0, 0, 0;\n  --f7-theme-color-shade: #000000;\n  --f7-theme-color-tint: #141414;\n}\n.color-red {\n  --f7-theme-color: #ff3b30;\n  --f7-theme-color-rgb: 255, 59, 48;\n  --f7-theme-color-shade: #ff1407;\n  --f7-theme-color-tint: #ff6259;\n}\n.text-color-red {\n  --f7-theme-color-text-color: #ff3b30;\n}\n.bg-color-red {\n  --f7-theme-color-bg-color: #ff3b30;\n}\n.border-color-red {\n  --f7-theme-color-border-color: #ff3b30;\n}\n.ripple-color-red,\n.ripple-red {\n  --f7-theme-color-ripple-color: rgba(255, 59, 48, 0.3);\n}\n.color-green {\n  --f7-theme-color: #4cd964;\n  --f7-theme-color-rgb: 76, 217, 100;\n  --f7-theme-color-shade: #2cd048;\n  --f7-theme-color-tint: #6ee081;\n}\n.text-color-green {\n  --f7-theme-color-text-color: #4cd964;\n}\n.bg-color-green {\n  --f7-theme-color-bg-color: #4cd964;\n}\n.border-color-green {\n  --f7-theme-color-border-color: #4cd964;\n}\n.ripple-color-green,\n.ripple-green {\n  --f7-theme-color-ripple-color: rgba(76, 217, 100, 0.3);\n}\n.color-blue {\n  --f7-theme-color: #2196f3;\n  --f7-theme-color-rgb: 33, 150, 243;\n  --f7-theme-color-shade: #0c82df;\n  --f7-theme-color-tint: #48a8f5;\n}\n.text-color-blue {\n  --f7-theme-color-text-color: #2196f3;\n}\n.bg-color-blue {\n  --f7-theme-color-bg-color: #2196f3;\n}\n.border-color-blue {\n  --f7-theme-color-border-color: #2196f3;\n}\n.ripple-color-blue,\n.ripple-blue {\n  --f7-theme-color-ripple-color: rgba(33, 150, 243, 0.3);\n}\n.color-pink {\n  --f7-theme-color: #ff2d55;\n  --f7-theme-color-rgb: 255, 45, 85;\n  --f7-theme-color-shade: #ff0434;\n  --f7-theme-color-tint: #ff5676;\n}\n.text-color-pink {\n  --f7-theme-color-text-color: #ff2d55;\n}\n.bg-color-pink {\n  --f7-theme-color-bg-color: #ff2d55;\n}\n.border-color-pink {\n  --f7-theme-color-border-color: #ff2d55;\n}\n.ripple-color-pink,\n.ripple-pink {\n  --f7-theme-color-ripple-color: rgba(255, 45, 85, 0.3);\n}\n.color-yellow {\n  --f7-theme-color: #ffcc00;\n  --f7-theme-color-rgb: 255, 204, 0;\n  --f7-theme-color-shade: #d6ab00;\n  --f7-theme-color-tint: #ffd429;\n}\n.text-color-yellow {\n  --f7-theme-color-text-color: #ffcc00;\n}\n.bg-color-yellow {\n  --f7-theme-color-bg-color: #ffcc00;\n}\n.border-color-yellow {\n  --f7-theme-color-border-color: #ffcc00;\n}\n.ripple-color-yellow,\n.ripple-yellow {\n  --f7-theme-color-ripple-color: rgba(255, 204, 0, 0.3);\n}\n.color-orange {\n  --f7-theme-color: #ff9500;\n  --f7-theme-color-rgb: 255, 149, 0;\n  --f7-theme-color-shade: #d67d00;\n  --f7-theme-color-tint: #ffa629;\n}\n.text-color-orange {\n  --f7-theme-color-text-color: #ff9500;\n}\n.bg-color-orange {\n  --f7-theme-color-bg-color: #ff9500;\n}\n.border-color-orange {\n  --f7-theme-color-border-color: #ff9500;\n}\n.ripple-color-orange,\n.ripple-orange {\n  --f7-theme-color-ripple-color: rgba(255, 149, 0, 0.3);\n}\n.color-purple {\n  --f7-theme-color: #9c27b0;\n  --f7-theme-color-rgb: 156, 39, 176;\n  --f7-theme-color-shade: #7e208f;\n  --f7-theme-color-tint: #b92fd1;\n}\n.text-color-purple {\n  --f7-theme-color-text-color: #9c27b0;\n}\n.bg-color-purple {\n  --f7-theme-color-bg-color: #9c27b0;\n}\n.border-color-purple {\n  --f7-theme-color-border-color: #9c27b0;\n}\n.ripple-color-purple,\n.ripple-purple {\n  --f7-theme-color-ripple-color: rgba(156, 39, 176, 0.3);\n}\n.color-deeppurple {\n  --f7-theme-color: #673ab7;\n  --f7-theme-color-rgb: 103, 58, 183;\n  --f7-theme-color-shade: #563098;\n  --f7-theme-color-tint: #7c52c8;\n}\n.text-color-deeppurple {\n  --f7-theme-color-text-color: #673ab7;\n}\n.bg-color-deeppurple {\n  --f7-theme-color-bg-color: #673ab7;\n}\n.border-color-deeppurple {\n  --f7-theme-color-border-color: #673ab7;\n}\n.ripple-color-deeppurple,\n.ripple-deeppurple {\n  --f7-theme-color-ripple-color: rgba(103, 58, 183, 0.3);\n}\n.color-lightblue {\n  --f7-theme-color: #5ac8fa;\n  --f7-theme-color-rgb: 90, 200, 250;\n  --f7-theme-color-shade: #32bbf9;\n  --f7-theme-color-tint: #82d5fb;\n}\n.text-color-lightblue {\n  --f7-theme-color-text-color: #5ac8fa;\n}\n.bg-color-lightblue {\n  --f7-theme-color-bg-color: #5ac8fa;\n}\n.border-color-lightblue {\n  --f7-theme-color-border-color: #5ac8fa;\n}\n.ripple-color-lightblue,\n.ripple-lightblue {\n  --f7-theme-color-ripple-color: rgba(90, 200, 250, 0.3);\n}\n.color-teal {\n  --f7-theme-color: #009688;\n  --f7-theme-color-rgb: 0, 150, 136;\n  --f7-theme-color-shade: #006d63;\n  --f7-theme-color-tint: #00bfad;\n}\n.text-color-teal {\n  --f7-theme-color-text-color: #009688;\n}\n.bg-color-teal {\n  --f7-theme-color-bg-color: #009688;\n}\n.border-color-teal {\n  --f7-theme-color-border-color: #009688;\n}\n.ripple-color-teal,\n.ripple-teal {\n  --f7-theme-color-ripple-color: rgba(0, 150, 136, 0.3);\n}\n.color-lime {\n  --f7-theme-color: #cddc39;\n  --f7-theme-color-rgb: 205, 220, 57;\n  --f7-theme-color-shade: #bac923;\n  --f7-theme-color-tint: #d6e25c;\n}\n.text-color-lime {\n  --f7-theme-color-text-color: #cddc39;\n}\n.bg-color-lime {\n  --f7-theme-color-bg-color: #cddc39;\n}\n.border-color-lime {\n  --f7-theme-color-border-color: #cddc39;\n}\n.ripple-color-lime,\n.ripple-lime {\n  --f7-theme-color-ripple-color: rgba(205, 220, 57, 0.3);\n}\n.color-deeporange {\n  --f7-theme-color: #ff6b22;\n  --f7-theme-color-rgb: 255, 107, 34;\n  --f7-theme-color-shade: #f85200;\n  --f7-theme-color-tint: #ff864b;\n}\n.text-color-deeporange {\n  --f7-theme-color-text-color: #ff6b22;\n}\n.bg-color-deeporange {\n  --f7-theme-color-bg-color: #ff6b22;\n}\n.border-color-deeporange {\n  --f7-theme-color-border-color: #ff6b22;\n}\n.ripple-color-deeporange,\n.ripple-deeporange {\n  --f7-theme-color-ripple-color: rgba(255, 107, 34, 0.3);\n}\n.color-gray {\n  --f7-theme-color: #8e8e93;\n  --f7-theme-color-rgb: 142, 142, 147;\n  --f7-theme-color-shade: #79797f;\n  --f7-theme-color-tint: #a3a3a7;\n}\n.text-color-gray {\n  --f7-theme-color-text-color: #8e8e93;\n}\n.bg-color-gray {\n  --f7-theme-color-bg-color: #8e8e93;\n}\n.border-color-gray {\n  --f7-theme-color-border-color: #8e8e93;\n}\n.ripple-color-gray,\n.ripple-gray {\n  --f7-theme-color-ripple-color: rgba(142, 142, 147, 0.3);\n}\n.color-white {\n  --f7-theme-color: #ffffff;\n  --f7-theme-color-rgb: 255, 255, 255;\n  --f7-theme-color-shade: #ebebeb;\n  --f7-theme-color-tint: #ffffff;\n}\n.text-color-white {\n  --f7-theme-color-text-color: #ffffff;\n}\n.bg-color-white {\n  --f7-theme-color-bg-color: #ffffff;\n}\n.border-color-white {\n  --f7-theme-color-border-color: #ffffff;\n}\n.ripple-color-white,\n.ripple-white {\n  --f7-theme-color-ripple-color: rgba(255, 255, 255, 0.3);\n}\n.color-black {\n  --f7-theme-color: #000000;\n  --f7-theme-color-rgb: 0, 0, 0;\n  --f7-theme-color-shade: #000000;\n  --f7-theme-color-tint: #141414;\n}\n.text-color-black {\n  --f7-theme-color-text-color: #000000;\n}\n.bg-color-black {\n  --f7-theme-color-bg-color: #000000;\n}\n.border-color-black {\n  --f7-theme-color-border-color: #000000;\n}\n.ripple-color-black,\n.ripple-black {\n  --f7-theme-color-ripple-color: rgba(0, 0, 0, 0.3);\n}\n@font-face {\n  font-family: 'framework7-core-icons';\n  src: url(\"data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAA0sABAAAAAAGRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAANEAAAABoAAAAci1jrz0dERUYAAAsIAAAAIwAAACQAfQBXR1BPUwAADOAAAAAuAAAANuAY7+xHU1VCAAALLAAAAbMAAAQuAxQJ5U9TLzIAAAHcAAAASgAAAGBRKF+WY21hcAAAAowAAACIAAABYt6F0cBjdnQgAAADFAAAAAQAAAAEABEBRGdhc3AAAAsAAAAACAAAAAj//wADZ2x5ZgAAA6wAAASlAAAKBIq7ZiloZWFkAAABbAAAADAAAAA2FnYC32hoZWEAAAGcAAAAIAAAACQHgQM9aG10eAAAAigAAABhAAABJC+cAAFsb2NhAAADGAAAAJQAAACURlRI+G1heHAAAAG8AAAAHwAAACAAjwBMbmFtZQAACFQAAAFTAAAC2WC6Sihwb3N0AAAJqAAAAVYAAAJ2B5LxL3jaY2BkYGAA4iKuLVLx/DZfGbiZGEDgZk2iIYz+/+NfL0sa02cgl4MBLA0AJsoLsnjaY2BkYGD6/K+XQY8l7f8PBgaWNAagCArwBACRVQXFeNpjYGRgYPBkkGZgYQABJiBmZACJOTDogQQADdEA3AB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPabPjMUwNYwHwEoUGMQAQ7UMZAAAeNpj2M0gyAACqxgGNWAMAGIdID4A5OwD0rOA+BBI7P9PhuNAMSBmSYOK+wKxExCfBWIJoNzZ/z8Y3YBsF6g4kM2UBpFjBNJMb/7/Z9gNZBtDzGY6CzGHCcQHigMA2dAWtwAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIB3gIAAioCPAJSAmQChAKUAqQC1gLsAv4DHgMwA0IDYANyA5YDtAPEA+oD/AQWBEYEZgR4BIoEsgTIBOIFAnja7VXBTyNVGP++Ke106XamnbYztYeVlukMRmWl03ZwLdAIeCCKZgOKXBY2m15Es8S03lpuSzaSGsOGQPZGoomegI0mmwjVC5uNdZPGgzGc8MDG4ImLmyxTvzfTKmX/A7PJe/O995vXN7/3+37fK3AQBIB1nAYX8NC/hXA5t813wV+pLY/7ILft4mgIWy4Guxm8zXvwaW4bGW4EjaBuBHuDy58VCjhtfRtEg3ZDajW70yg4wMbPsefY/x7jzmAuQl/nbBi6qF/A93CWKkyECCgAUsITllPZtJaSw56ElnabuoiKqX8zlctN5e4uTEwsTOCo/6YgLAqLmM9NDQ1NvT/B4CfCTT8DHQ7NH9Ggj0gAyYTIsZ1GUNfS2dSLKKOOiH/4emTf3p5PjvsOxW2OO/TJPb7dPYYeig7n5hHW8Cu6B16gXRRez+ie3gTbQ46EeSXBWBJbzC9pS3z/yPj8/O3rffx3c2Njc6MrS1olwvfN356fHx/u50fnRkfnbF6gwS6d1w0Q4mlLc7dUUjc2MGsHaHE/wQ1cAS99NRJnixQeN6wHVbVeV6u/p53YWgt+/AlvsP1MVFA3qyiqVr2qTrciYPMJafEyaUH3mZkdQaIfJkmZvJdRcyOdnM68u8vOfyg+Qtch04TmjhLsG2HYdzibREY39zfVSkX9np7lZOf7DFFV+NbrZLmi2jpaK10F7gR8LL9JnRYoJmXU1LkelQtIak+XFOC4/H52v93esH6xTtfW0IUpdK2t/blvtl+ZTw/+ha1TtuxZzZhgdP+auMF0Mr6osYCDJGBbszy+g3nw0EThB2g1vqQeLKqEUeh921mzgG+iBgEaMblsrWz3mFlMC/wyL1MXZG+x6EVNYBOGCXyxyNtnhlms0+/ZfwcMYTzizsQjWLcMrJ8Yxrph2JxrGKW8kG5JZLpitAnRx4+jNScQj+bf8CH8iq+CAECZU2QRBSQmZlaZmOsOBLo/doc8V/yCePHzL8Vun/i1F/m8eNEvOGe4hm8RB+Y1chGvb9qJQc0O4HgcZByj3Pmp+oCSd8bhnpa/j2dCM+pr5uTkJ5NbM8PDM8NLH4RmLtFs0hy4MsKQTr2Yw6jIbHvxrPA6xJKFtbZUpRJhnTxJBPKGw/Paplouq3YdrnAFPCElQwDpAJELeBJI52k76Z51754FzVih0G55hJ2dJuzg+hkQOjXPIPMqQvToKFrDluLtmirgp+RXQN4WzqaFhWpVbTd898yE8tS09rhjrgYxAHfQ1i9oDrMi49GjJ3TsJ9+kFBxU08mfpXRIkqyHkVgsZD2UMCRlpI+441gyGTsN19k8zd5yIcxKBq1scboE9/E60zfrePG/Qr7fab/+gHfZG6YekB03Or8fp/tQsz1vW95E49EN6eoPGLbD+buJ3To63UhqsYizFEqlll+as1yd0+AC8wvlwmDJ6E2EzlR1Y/VOo3FndbWcLVOrsOcr2NdoWL818G7FLJfNiv08X7f2N+OZuF5n9Wo9wMEqrrBh2q5bF+PHGcSP1RTlJphxqop1zjitO52USS/Z7bxuAceWrJadPwMy5C2ev+V1rIhXn9HtH4d0614AAAB42q2QvU7DMBSFj9u0EgyIgewe26qJnA79G6nUpQtiyB5S01ht4sqNVFW8DBsbIxtPwcLEzltw7RqJoQNDI135y/G59rkGcIVXMBy/Du49M4R48dzAJT48N5GwW88BQvbsuYVr9um5jbARkpMFF/R357osM/Tw5LmBG7x7buIBX54D9FjtuQXO3jy3Sf/GDBpbHGCgsEKBGpwy5+jSOoBAggn6xCk2yLAkV0llSFmQOyOyeklnKLeLmd4ejFoVNe/kXT4QyaTP0022VKUyfFFkZpOVW7Uk5yM121aJPYUwWGOEiK62LImU4wo7spqslHtt1qMo10ZGKtcVySe9fw1zJ9ZuNTSfdFPFNBfHlOr/EY7+BENSx1S/b4O5ruq5NivJB7HgU34yKunJMBpH9jnOMXhKPkP7yvk4ZbFpYrfa2ZBKs1O64kIksRCCn+HSH1E3hiEAeNptkAlPwkAUhGfAAxAsyCV4/hbjfd+3aWq7SiN0yXY5/rzRhVKhiZs06b5v3rzZhxTG5+cbxH/nyHxECmkUUUYFVdRQxyoaaGIN69jBLvawjwMcGu0xTnCKM5zjApe4wjVucIs73OMBj3jCM17wijemmOYc57nARWaYZY5LzLPAZVosssQVlllhlTXWucoGm1zjOje4yS1u50LhKLdl+zIsuS3RVzKwlf/Z0qNKdgI7nhWztvjQ5l5wlJKD+LZkqPv1Lofmv5hQGpNCwjY/i2uB1P6H7zraNxW3LUMx6rAi83eptewYy6xyPF+OSDnu9uQgsJ2ekspZDKUahwgHflcoOxBDbf0FijS5uK/XLUzeFIHSFEwq+dkRlifaQgtbyV7gzczoKtHPTphZRlcrO8o8m3G8gKlplMcIisk9m5UlphjFcmQW88z4haZeSXZG3r8TK74rAAAAAAAB//8AAnjaY2BkYGDgAWIZIGYCQmYGTQZGBi0GDyCbBSzGAAANdgDVAHjadVJJTgJBFH1FdwKOIKB0lEEGwSDOs+KsaDyDGzYaE+LCEA/gwjMY4zlcegbjEYwLb4HvVwM9hXS6q/q9V/+/+v9DARhGFjWoVrP9gAhMIuh0IIxq3d81icH+I2fqNQJl/CKMJJ5C7dC3YRolow6D+Dwa2EAUeT5ZlLmb4Frkk0Waf2kkqBh38XlYmEKKCptdwpiLnWGOyT4XxSyu8Yg3fOJHmaqsGupWPat39aG+1B+uqE7xndPnM77oMZQ0nufulNG8SieTW7cV0CW0s4xPV+c9vboScj7NQkDjdmcRK2CFukG+bMV5QOGv4CLXQTGE3+3ycUzr7lR8PlfZgUEZzjAaOGv7WusywawHAaZXw2WMBKKJwz3OZLCaMl9V9v+CHpM6epFvVGtKVCX6Xg65G6SQ+McY8vCCyXSv85YyrRZ9W3QV03vbQZx6iZ3sZ5ETJ6xVkfGlgs7UOvwmM8UYXZAeHiZSYx9vOMkveMU+YyT1+Thv7e3FEStU5rkcFZIlx6/UZceHZ7hW6KTKyrlj2Rlr+r4OKve9ZDUlhzNZ23TWQ+yKiNM4dxmdt/APtJZExAB42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPpmTaIhjAYAPREFnQAA\") format(\"woff\");\n  font-weight: 400;\n  font-style: normal;\n}\n@font-face {\n  font-family: 'framework7-skeleton';\n  src: url(\"data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAYQAA0AAAAAEcQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAF9AAAABkAAAAciVvoDU9TLzIAAAGcAAAASwAAAGBRtV1jY21hcAAAAfwAAAC8AAABamglddJjdnQgAAACuAAAAAQAAAAEABEBRGdhc3AAAAXsAAAACAAAAAj//wADZ2x5ZgAAA2wAAACUAAAJjHCzhiRoZWFkAAABMAAAAC4AAAA2ERr/HWhoZWEAAAFgAAAAGgAAACQC8ADFaG10eAAAAegAAAATAAAAtAMAABFsb2NhAAACvAAAAK4AAACuaNBmhG1heHAAAAF8AAAAHwAAACAAmgA5bmFtZQAABAAAAAFQAAACuLf6wytwb3N0AAAFUAAAAJkAAADOCKMIc3jaY2BkYGAA4lUx8ibx/DZfGbiZGEDgRu39AAT9/wAjA+MBIJeDASwNACBICpsAAHjaY2BkYGA88P8Agx6QAQSMYIQCWABQZgK3AAB42mNgZGBgCGPgYGBiAAEQycgAEnNg0AMJAAANJwDUAHjaY2BhZGCcwMDKwMDow5jGwMDgDqW/MkgytDAwMDGwcjLAACMDEghIc01haGBQYKhlPPD/AIMe4wEGB5gaxgNAHgNQjhEA6dgLvQB42mNkYBBkAAJGKB4KAAAOfQAVAHjaY2BgYGaAYBkGRgYQSAHyGMF8FgYPIM3HwMHAxMDGoMSgxWDNEMsQz1D7/z9QXIFBjUGHwRHIT/z////j/w/+3/9/6//N/zeg5iABRjYGuCAjE5BgQlcAdAILK5DBxs7BycXAzcPLxy8gKCQsIiomLiEpBVYjLSMrJ6+gqKSsoqqmrqGppa2jq6dvYGhkbGJqZs5gwWBpZW1ja2fv4Ojk7OLq5u7h6eXt4+vnHxAYFBwSyjDgAABJLiG7ABEBRAAAACoAKgAqADgARgBUAGIAcAB+AIwAmgCoALYAxADYAOYA9AECARABHgEsAToBSAFWAWQBcgGAAY4BnAGqAbgBxgHUAeIB8AH+AgwCGgIoAjYCRAJSAmACbgJ8AooCmAKmArQCwgLQAt4C8gMAAw4DHAMqAzgDRgNUA2IDcAN+A4wDmgOoA7YDxAPSA+AD7gP8BAoEGAQmBDQEQgRQBF4EbAR6BIgEnASqBLgExgAAeNpjYGIQZGBgmMkYysDMwM6gt5GRQd9mEzsLw1ujjWysd2w2MTMBmQwbmUHCrCDhTexsjH9sNjGCxI0FjQXVjQWVBTvK09IYQ/+tFmQ0BprGyMDw/wAjA+MBoJkMooKKgowMDkwM/xgYRuVwyjEhybFDZBXBKv4zQFVBVI6G36jcqNyo3GiZMSo3Kjes8hQAx51w5njapZC9agJBFIXP+EfSBMEXmEoU3GVcBNFWsLEJKbYKhEUnOrjryrggkgfIQ6RMnzZVHiBNijxM6pydHUiRFAEXLvebc8+duXcBXOEFAtXXw41ngQ6ePddwgXfPdYRCeW6gIx49N9EWb55b1L/oFI1Lnq5dV8kCXTx4rqGNV8913OLTcwNdcee5CSmePLeof2CGHHucYGGwxgYFJGdeos8cQWGICQbkGCkSrOjKGJbKgu6EVOoZ7zCuilm+P1mz3hSyt+zLSA0nAxmnycpkxsrFJrFpku3Nis57NpetGkcOYbHFGAEOzJqXao6SY0ebTTJ9zO12HBy2OtVFTvGX66c0d0LhsuVO2m0ScheJKeN/z1beESuRi+pPYJ7vinlu11pGoZJT+cdwVEdBFJSbn7djzLql1/iBlBsidLlcBrG2B8MHlRqGSil51nPfEi6AO3jaXc5ZM4IBAEbhp9RF1FhCRbmyVNYskSXG0CaEQvaf2j/LN112bt6Zc/HOETZiOJAJJmSc15ENmxARFTNpSlzCtBmz5iTNW7AoJR08LFmWlbNi1Zp1G/IKijZt2bZj156SfQcOHSk7dqLi1JlzF6ouXbl241ZNXUNTy522ew8edTx59qKrF3S9edf34dOXbz9+/f0DgycTFgAAAAAAAAH//wACeNpjYGBgZACCGwmaOWC69n4AjAYARC0G1wAAAA==\") format(\"woff\");\n  font-weight: 300, 400, 500, 600, 700;\n  font-style: normal, italic;\n}\nhtml,\nbody,\n.framework7-root {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  overflow-x: hidden;\n}\nbody {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  background: #fff;\n  overflow: hidden;\n  -webkit-text-size-adjust: 100%;\n  -webkit-font-smoothing: antialiased;\n  font-family: var(--f7-font-family);\n  font-size: var(--f7-font-size);\n  line-height: var(--f7-line-height);\n  color: var(--f7-text-color);\n}\n.theme-dark body,\nbody.theme-dark {\n  background: #000;\n}\n.theme-dark {\n  color: var(--f7-text-color);\n}\n.framework7-root {\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.framework7-initializing *,\n.framework7-initializing *:before,\n.framework7-initializing *:after {\n  transition-duration: 0ms !important;\n}\n.device-ios,\n.device-android {\n  cursor: pointer;\n}\n.device-ios {\n  touch-action: manipulation;\n}\n@media (width: 1024px) and (height: 691px) and (orientation: landscape) {\n  html,\n  body,\n  .framework7-root {\n    height: 671px;\n  }\n}\n@media (width: 1024px) and (height: 692px) and (orientation: landscape) {\n  html,\n  body,\n  .framework7-root {\n    height: 672px;\n  }\n}\n* {\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-touch-callout: none;\n}\na,\ninput,\ntextarea,\nselect {\n  outline: 0;\n}\na {\n  cursor: pointer;\n  text-decoration: none;\n  color: var(--f7-theme-color);\n}\n.link,\n.item-link {\n  cursor: pointer;\n}\np {\n  margin: 1em 0;\n}\n.disabled {\n  opacity: 0.55 !important;\n  pointer-events: none !important;\n}\nhtml.device-full-viewport,\nhtml.device-full-viewport body {\n  height: 100vh;\n}\n.ios .md-only,\n.ios .if-md,\n.ios .aurora-only,\n.ios .if-aurora,\n.ios .if-not-ios,\n.ios .not-ios {\n  display: none !important;\n}\n@media (width: 1024px) and (height: 691px) and (orientation: landscape) {\n  .ios,\n  .ios body,\n  .ios .framework7-root {\n    height: 671px;\n  }\n}\n@media (width: 1024px) and (height: 692px) and (orientation: landscape) {\n  .ios,\n  .ios body,\n  .ios .framework7-root {\n    height: 672px;\n  }\n}\n.md .ios-only,\n.md .if-ios,\n.md .aurora-only,\n.md .if-aurora,\n.md .if-not-md,\n.md .not-md {\n  display: none !important;\n}\n.aurora .ios-only,\n.aurora .if-ios,\n.aurora .md-only,\n.aurora .if-md,\n.aurora .if-not-aurora,\n.aurora .not-aurora {\n  display: none !important;\n}\n/* === Statusbar === */\n/* === Views === */\n.views,\n.view {\n  position: relative;\n  height: 100%;\n  z-index: 5000;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.framework7-root > .view,\n.framework7-root > .views {\n  height: calc(100% - var(--f7-appbar-app-offset, 0px));\n}\n.view-resize-handler {\n  width: 6px;\n  height: 100%;\n  position: absolute;\n  left: var(--f7-page-master-width);\n  margin-left: -3px;\n  top: 0;\n  cursor: col-resize;\n  z-index: 1000;\n  display: none;\n}\n.view-master-detail .view-resize-handler {\n  display: block;\n}\n/* === Pages === */\n:root {\n  --f7-page-master-width: 320px;\n  --f7-page-master-border-color: rgba(0, 0, 0, 0.1);\n  --f7-page-master-border-width: 1px;\n  --f7-page-swipeback-transition-duration: 300ms;\n  --f7-page-parallax-transition-duration: 500ms;\n  --f7-page-cover-transition-duration: 450ms;\n  --f7-page-dive-transition-duration: 500ms;\n  --f7-page-fade-transition-duration: 500ms;\n  --f7-page-flip-transition-duration: 700ms;\n  --f7-page-push-transition-duration: 500ms;\n  /*\n  --f7-page-content-extra-padding-top: 0px;\n  --f7-page-content-extra-padding-bottom: 0px;\n  */\n}\n.ios {\n  --f7-page-transition-duration: 400ms;\n  --f7-page-bg-color: #efeff4;\n}\n.ios .theme-dark,\n.ios.theme-dark {\n  --f7-page-bg-color: #000;\n}\n.md {\n  --f7-page-transition-duration: 250ms;\n  --f7-page-bg-color: #fff;\n}\n.md .theme-dark,\n.md.theme-dark {\n  --f7-page-bg-color: #121212;\n}\n.aurora {\n  --f7-page-transition-duration: 400ms;\n  --f7-page-bg-color: #f3f3f3;\n}\n.aurora .theme-dark,\n.aurora.theme-dark {\n  --f7-page-bg-color: #121212;\n}\n.theme-dark {\n  --f7-page-master-border-color: rgba(255, 255, 255, 0.1);\n}\n.pages {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n.page {\n  box-sizing: border-box;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: none;\n  background-color: var(--f7-page-bg-color);\n  z-index: 1;\n}\n.page.stacked {\n  display: none;\n}\n.page-with-navbar-large-collapsed {\n  --f7-navbar-large-collapse-progress: 1;\n}\n.page-previous {\n  pointer-events: none;\n}\n.page-content {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  box-sizing: border-box;\n  height: 100%;\n  position: relative;\n  z-index: 1;\n  padding-top: calc(var(--f7-page-navbar-offset, 0px) + var(--f7-page-toolbar-top-offset, 0px) + var(--f7-page-subnavbar-offset, 0px) + var(--f7-page-searchbar-offset, 0px) + var(--f7-page-content-extra-padding-top, 0px));\n  padding-bottom: calc(var(--f7-page-toolbar-bottom-offset, 0px) + var(--f7-safe-area-bottom) + var(--f7-page-content-extra-padding-bottom, 0px));\n}\n.page-transitioning,\n.page-transitioning .page-shadow-effect,\n.page-transitioning .page-opacity-effect {\n  transition-duration: var(--f7-page-transition-duration);\n}\n.page-transitioning-swipeback,\n.page-transitioning-swipeback .page-shadow-effect,\n.page-transitioning-swipeback .page-opacity-effect {\n  transition-duration: var(--f7-page-swipeback-transition-duration);\n}\n.router-transition-forward .page-next,\n.router-transition-backward .page-next,\n.router-transition-forward .page-current,\n.router-transition-backward .page-current,\n.router-transition-forward .page-previous:not(.stacked),\n.router-transition-backward .page-previous:not(.stacked) {\n  pointer-events: none;\n}\n.page-shadow-effect {\n  position: absolute;\n  top: 0;\n  width: 16px;\n  bottom: 0;\n  z-index: -1;\n  content: '';\n  opacity: 0;\n  right: 100%;\n  background: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) 10%, rgba(0, 0, 0, 0.01) 50%, rgba(0, 0, 0, 0.2) 100%);\n}\n.page-opacity-effect {\n  position: absolute;\n  left: 0;\n  top: 0;\n  background: rgba(0, 0, 0, 0.1);\n  width: 100%;\n  bottom: 0;\n  content: '';\n  opacity: 0;\n  z-index: 10000;\n}\n.ios .page-previous {\n  transform: translate3d(-20%, 0, 0);\n}\n.ios .page-next {\n  transform: translate3d(100%, 0, 0);\n}\n.ios .page-previous .page-opacity-effect {\n  opacity: 1;\n}\n.ios .page-previous:after {\n  opacity: 1;\n}\n.ios .page-current .page-shadow-effect {\n  opacity: 1;\n}\n.ios .router-transition-forward .page-next {\n  animation: ios-page-next-to-current var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-forward .page-next:before {\n  position: absolute;\n  top: 0;\n  width: 16px;\n  bottom: 0;\n  z-index: -1;\n  content: '';\n  opacity: 0;\n  right: 100%;\n  background: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) 10%, rgba(0, 0, 0, 0.01) 50%, rgba(0, 0, 0, 0.2) 100%);\n  animation: ios-page-element-fade-in var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-forward .page-current {\n  animation: ios-page-current-to-previous var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-forward .page-current:after {\n  position: absolute;\n  left: 0;\n  top: 0;\n  background: rgba(0, 0, 0, 0.1);\n  width: 100%;\n  bottom: 0;\n  content: '';\n  opacity: 0;\n  z-index: 10000;\n  animation: ios-page-element-fade-in var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-backward .page-previous {\n  animation: ios-page-previous-to-current var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-backward .page-previous:after {\n  position: absolute;\n  left: 0;\n  top: 0;\n  background: rgba(0, 0, 0, 0.1);\n  width: 100%;\n  bottom: 0;\n  content: '';\n  opacity: 0;\n  z-index: 10000;\n  animation: ios-page-element-fade-out var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-backward .page-current {\n  animation: ios-page-current-to-next var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-backward .page-current:before {\n  position: absolute;\n  top: 0;\n  width: 16px;\n  bottom: 0;\n  z-index: -1;\n  content: '';\n  opacity: 0;\n  right: 100%;\n  background: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0) 10%, rgba(0, 0, 0, 0.01) 50%, rgba(0, 0, 0, 0.2) 100%);\n  animation: ios-page-element-fade-out var(--f7-page-transition-duration) forwards;\n}\n@keyframes ios-page-next-to-current {\n  from {\n    transform: translate3d(100%, 0, 0);\n  }\n  to {\n    transform: translate3d(0%, 0, 0);\n  }\n}\n@keyframes ios-page-previous-to-current {\n  from {\n    transform: translate3d(-20%, 0, 0);\n  }\n  to {\n    transform: translate3d(0%, 0, 0);\n  }\n}\n@keyframes ios-page-current-to-previous {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    transform: translate3d(-20%, 0, 0);\n  }\n}\n@keyframes ios-page-current-to-next {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    transform: translate3d(100%, 0, 0);\n  }\n}\n@keyframes ios-page-element-fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes ios-page-element-fade-out {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n.md .page-next {\n  transform: translate3d(0, 56px, 0);\n  opacity: 0;\n  pointer-events: none;\n}\n.md .page-next.page-next-on-right {\n  transform: translate3d(100%, 0, 0);\n}\n.md .router-transition-forward .page-next {\n  animation: md-page-next-to-current var(--f7-page-transition-duration) forwards;\n}\n.md .router-transition-forward .page-current {\n  animation: none;\n}\n.md .router-transition-backward .page-current {\n  animation: md-page-current-to-next var(--f7-page-transition-duration) forwards;\n}\n.md .router-transition-backward .page-previous {\n  animation: none;\n}\n@keyframes md-page-next-to-current {\n  from {\n    transform: translate3d(0, 56px, 0);\n    opacity: 0;\n  }\n  to {\n    transform: translate3d(0, 0px, 0);\n    opacity: 1;\n  }\n}\n@keyframes md-page-current-to-next {\n  from {\n    transform: translate3d(0, 0, 0);\n    opacity: 1;\n  }\n  to {\n    transform: translate3d(0, 56px, 0);\n    opacity: 0;\n  }\n}\n.aurora .page-next {\n  pointer-events: none;\n  transform: translate3d(100%, 0px, 0);\n}\n.aurora .page-next.page-next-on-right {\n  transform: translate3d(100%, 0, 0);\n}\n.aurora .page-previous .page-opacity-effect {\n  opacity: 1;\n}\n.aurora .page-previous:after {\n  opacity: 1;\n}\n.aurora .router-transition-forward .page-next {\n  animation: aurora-page-next-to-current var(--f7-page-transition-duration) forwards;\n}\n.aurora .router-transition-forward .page-current {\n  animation: none;\n}\n.aurora .router-transition-forward .page-current:after {\n  position: absolute;\n  left: 0;\n  top: 0;\n  background: rgba(0, 0, 0, 0.1);\n  width: 100%;\n  bottom: 0;\n  content: '';\n  opacity: 0;\n  z-index: 10000;\n  animation: aurora-page-element-fade-in var(--f7-page-transition-duration) forwards;\n}\n.aurora .router-transition-backward .page-current {\n  animation: aurora-page-current-to-next var(--f7-page-transition-duration) forwards;\n}\n.aurora .router-transition-backward .page-previous {\n  animation: none;\n}\n.aurora .router-transition-backward .page-previous:after {\n  position: absolute;\n  left: 0;\n  top: 0;\n  background: rgba(0, 0, 0, 0.1);\n  width: 100%;\n  bottom: 0;\n  content: '';\n  opacity: 0;\n  z-index: 10000;\n  animation: aurora-page-element-fade-out var(--f7-page-transition-duration) forwards;\n}\n@keyframes aurora-page-next-to-current {\n  from {\n    transform: translate3d(100%, 0, 0);\n  }\n  to {\n    transform: translate3d(0, 0px, 0);\n  }\n}\n@keyframes aurora-page-current-to-next {\n  from {\n    transform: translate3d(0, 0, 0);\n  }\n  to {\n    transform: translate3d(100%, 0, 0);\n  }\n}\n@keyframes aurora-page-element-fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes aurora-page-element-fade-out {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n.view:not(.view-master-detail) .page-master-stacked {\n  display: none;\n}\n.view:not(.view-master-detail) .navbar-master-stacked {\n  display: none;\n}\n.view-master-detail .page-master,\n.view-master-detail .navbar-master {\n  width: var(--f7-page-master-width);\n  --f7-safe-area-right: 0px;\n  --f7-safe-area-outer-right: 0px;\n  border-right: var(--f7-page-master-border-width) solid var(--f7-page-master-border-color);\n}\n.view-master-detail .page-master-detail,\n.view-master-detail .navbar-master-detail {\n  width: calc(100% - var(--f7-page-master-width));\n  --f7-safe-area-left: 0px;\n  --f7-safe-area-outer-left: 0px;\n  left: var(--f7-page-master-width);\n}\n.view-master-detail .page-master {\n  z-index: 2;\n  transform: none;\n  pointer-events: auto;\n}\n.view-master-detail .page-master:before,\n.view-master-detail .page-master:after {\n  display: none;\n}\n.view-master-detail.router-transition .page-master {\n  animation: none;\n}\n.md .router-transition-custom .page-previous,\n.ios .router-transition-custom .page-previous,\n.aurora .router-transition-custom .page-previous,\n.md .router-transition-custom .page-next,\n.ios .router-transition-custom .page-next,\n.aurora .router-transition-custom .page-next {\n  opacity: 1;\n  transform: none;\n}\n.router-transition-f7-circle-forward:after,\n.router-transition-f7-circle-backward:after {\n  content: '';\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 100vmax;\n  height: 100vmax;\n  margin-left: -50vmax;\n  margin-top: -50vmax;\n  background: var(--f7-page-bg-color);\n  z-index: 100;\n}\n.router-transition-f7-circle-forward:after {\n  transform: scale(0);\n  border-radius: 50%;\n  animation: f7-circle-circle-in 400ms forwards;\n}\n.router-transition-f7-circle-forward .page-next {\n  opacity: 0 !important;\n  transform: scale(0.9) !important;\n  animation: f7-circle-next-to-current 300ms forwards;\n  animation-delay: 300ms;\n  z-index: 150;\n}\n.router-transition-f7-circle-backward:after {\n  animation: f7-circle-circle-out 300ms forwards;\n  animation-delay: 350ms;\n}\n.router-transition-f7-circle-backward .page-current {\n  animation: f7-circle-current-to-next 700ms forwards;\n  z-index: 150;\n}\n@keyframes f7-circle-circle-in {\n  from {\n    transform: scale(0);\n    border-radius: 50%;\n  }\n  50% {\n    border-radius: 50%;\n  }\n  to {\n    transform: scale(1);\n    border-radius: 0%;\n  }\n}\n@keyframes f7-circle-circle-out {\n  from {\n    transform: scale(1);\n    border-radius: 0%;\n  }\n  50% {\n    border-radius: 50%;\n  }\n  to {\n    transform: scale(0);\n    border-radius: 50%;\n  }\n}\n@keyframes f7-circle-next-to-current {\n  from {\n    transform: scale(0.9);\n    opacity: 0;\n  }\n  40% {\n    transform: scale(1.035);\n    opacity: 1;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n@keyframes f7-circle-current-to-next {\n  from {\n    transform: scale(1);\n    opacity: 1;\n  }\n  34% {\n    transform: scale(1.035);\n    opacity: 1;\n  }\n  57% {\n    transform: scale(0.9);\n    opacity: 0;\n  }\n  to {\n    transform: scale(0.9);\n    opacity: 0;\n  }\n}\n.router-transition-f7-cover-v-forward,\n.router-transition-f7-cover-v-backward {\n  background: #000;\n  perspective: 1200px;\n}\n.router-transition-f7-cover-v-forward .page-next {\n  animation: f7-cover-v-next-to-current var(--f7-page-cover-transition-duration) forwards;\n}\n.router-transition-f7-cover-v-forward .page-current {\n  animation: f7-cover-v-current-to-prev var(--f7-page-cover-transition-duration) forwards;\n}\n.router-transition-f7-cover-v-backward .page-current {\n  animation: f7-cover-v-current-to-next var(--f7-page-cover-transition-duration) forwards;\n}\n.router-transition-f7-cover-v-backward .page-previous {\n  animation: f7-cover-v-prev-to-current var(--f7-page-cover-transition-duration) forwards;\n}\n@keyframes f7-cover-v-next-to-current {\n  from {\n    transform: translateY(100%);\n  }\n  to {\n    transform: translateY(0%);\n  }\n}\n@keyframes f7-cover-v-current-to-next {\n  from {\n    transform: translateY(0%);\n  }\n  to {\n    transform: translateY(100%);\n  }\n}\n@keyframes f7-cover-v-current-to-prev {\n  from {\n    transform: translateZ(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateZ(-300px);\n    opacity: 0.5;\n  }\n}\n@keyframes f7-cover-v-prev-to-current {\n  from {\n    transform: translateZ(-300px);\n    opacity: 0.5;\n  }\n  to {\n    transform: translateZ(0);\n    opacity: 1;\n  }\n}\n.router-transition-f7-cover-forward,\n.router-transition-f7-cover-backward {\n  background: #000;\n  perspective: 1200px;\n}\n.router-transition-f7-cover-forward .page-next {\n  animation: f7-cover-next-to-current var(--f7-page-cover-transition-duration) forwards;\n}\n.router-transition-f7-cover-forward .page-current {\n  animation: f7-cover-current-to-prev var(--f7-page-cover-transition-duration) forwards;\n}\n.router-transition-f7-cover-backward .page-current {\n  animation: f7-cover-current-to-next var(--f7-page-cover-transition-duration) forwards;\n}\n.router-transition-f7-cover-backward .page-previous {\n  animation: f7-cover-prev-to-current var(--f7-page-cover-transition-duration) forwards;\n}\n@keyframes f7-cover-next-to-current {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0%);\n  }\n}\n@keyframes f7-cover-current-to-next {\n  from {\n    transform: translateX(0%);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n@keyframes f7-cover-current-to-prev {\n  from {\n    transform: translateZ(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateZ(-300px);\n    opacity: 0.5;\n  }\n}\n@keyframes f7-cover-prev-to-current {\n  from {\n    transform: translateZ(-300px);\n    opacity: 0.5;\n  }\n  to {\n    transform: translateZ(0);\n    opacity: 1;\n  }\n}\n.router-transition-f7-dive-forward,\n.router-transition-f7-dive-backward {\n  background: var(--f7-page-bg-color);\n  perspective: 1200px;\n}\n.router-transition-f7-dive-forward .page-next {\n  animation: f7-dive-next-to-current var(--f7-page-dive-transition-duration) forwards;\n}\n.router-transition-f7-dive-forward .page-current {\n  animation: f7-dive-current-to-prev var(--f7-page-dive-transition-duration) forwards;\n}\n.router-transition-f7-dive-backward .page-current {\n  animation: f7-dive-current-to-next var(--f7-page-dive-transition-duration) forwards;\n}\n.router-transition-f7-dive-backward .page-previous {\n  animation: f7-dive-prev-to-current var(--f7-page-dive-transition-duration) forwards;\n}\n@keyframes f7-dive-next-to-current {\n  from {\n    opacity: 0;\n    transform: translateZ(-150px);\n  }\n  50% {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n    transform: translateZ(0px);\n  }\n}\n@keyframes f7-dive-current-to-next {\n  from {\n    opacity: 1;\n    transform: translateZ(0px);\n  }\n  50% {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n    transform: translateZ(-150px);\n  }\n}\n@keyframes f7-dive-current-to-prev {\n  from {\n    transform: translateZ(0px);\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n    transform: translateZ(150px);\n  }\n}\n@keyframes f7-dive-prev-to-current {\n  from {\n    opacity: 0;\n    transform: translateZ(150px);\n  }\n  50% {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n    transform: translateZ(0px);\n  }\n}\n.router-transition-f7-fade-forward,\n.router-transition-f7-fade-backward {\n  background: var(--f7-page-bg-color);\n}\n.router-transition-f7-fade-forward .page-next {\n  opacity: 0 !important;\n  animation: f7-fade-in var(--f7-page-fade-transition-duration) forwards;\n}\n.router-transition-f7-fade-forward .page-current {\n  animation: f7-fade-out var(--f7-page-fade-transition-duration) forwards;\n}\n.router-transition-f7-fade-backward .page-current {\n  animation: f7-fade-out var(--f7-page-fade-transition-duration) forwards;\n}\n.router-transition-f7-fade-backward .page-previous {\n  animation: f7-fade-in var(--f7-page-fade-transition-duration) forwards;\n}\n@keyframes f7-fade-in {\n  from {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes f7-fade-out {\n  from {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n.router-transition-f7-flip-forward,\n.router-transition-f7-flip-backward {\n  background: #000;\n  perspective: 1200px;\n}\n.router-transition-f7-flip-forward .page,\n.router-transition-f7-flip-backward .page {\n  backface-visibility: hidden;\n}\n.router-transition-f7-flip-forward .page-next {\n  animation: f7-flip-next-to-current var(--f7-page-flip-transition-duration) forwards;\n}\n.router-transition-f7-flip-forward .page-current {\n  animation: f7-flip-current-to-prev var(--f7-page-flip-transition-duration) forwards;\n}\n.router-transition-f7-flip-backward .page-current {\n  animation: f7-flip-current-to-next var(--f7-page-flip-transition-duration) forwards;\n}\n.router-transition-f7-flip-backward .page-previous {\n  animation: f7-flip-prev-to-current var(--f7-page-flip-transition-duration) forwards;\n}\n@keyframes f7-flip-next-to-current {\n  from {\n    border-radius: 30px;\n    transform: translateZ(-100vmax) rotateY(180deg);\n  }\n  to {\n    border-radius: 0;\n    transform: translateZ(0px) rotateY(0deg);\n  }\n}\n@keyframes f7-flip-current-to-next {\n  from {\n    border-radius: 0px;\n    transform: translateZ(0px) rotateY(0deg);\n  }\n  to {\n    border-radius: 30px;\n    transform: translateZ(-100vmax) rotateY(180deg);\n  }\n}\n@keyframes f7-flip-current-to-prev {\n  from {\n    border-radius: 0px;\n    transform: translateZ(0px) rotateY(0deg);\n  }\n  to {\n    border-radius: 30px;\n    transform: translateZ(-100vmax) rotateY(-180deg);\n  }\n}\n@keyframes f7-flip-prev-to-current {\n  from {\n    border-radius: 30px;\n    transform: translateZ(-100vmax) rotateY(-180deg);\n  }\n  to {\n    border-radius: 0px;\n    transform: translateZ(0px) rotateY(0deg);\n  }\n}\n.router-transition-f7-parallax-forward .page-next {\n  animation: f7-parallax-next-to-current var(--f7-page-parallax-transition-duration) forwards;\n}\n.router-transition-f7-parallax-forward .page-current {\n  animation: f7-parallax-current-to-prev var(--f7-page-parallax-transition-duration) forwards;\n}\n.router-transition-f7-parallax-backward .page-current {\n  animation: f7-parallax-current-to-next var(--f7-page-parallax-transition-duration) forwards;\n}\n.router-transition-f7-parallax-backward .page-previous {\n  animation: f7-parallax-prev-to-current var(--f7-page-parallax-transition-duration) forwards;\n}\n@keyframes f7-parallax-next-to-current {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0%);\n  }\n}\n@keyframes f7-parallax-current-to-next {\n  from {\n    transform: translateX(0%);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n@keyframes f7-parallax-current-to-prev {\n  from {\n    transform: translateX(0%);\n  }\n  to {\n    transform: translateX(-20%);\n  }\n}\n@keyframes f7-parallax-prev-to-current {\n  from {\n    transform: translateX(-20%);\n  }\n  to {\n    transform: translateX(0%);\n  }\n}\n.router-transition-f7-push-forward .page-next {\n  animation: f7-push-next-to-current var(--f7-page-push-transition-duration) forwards;\n}\n.router-transition-f7-push-forward .page-current {\n  animation: f7-push-current-to-prev var(--f7-page-push-transition-duration) forwards;\n}\n.router-transition-f7-push-backward .page-current {\n  animation: f7-push-current-to-next var(--f7-page-push-transition-duration) forwards;\n}\n.router-transition-f7-push-backward .page-previous {\n  animation: f7-push-prev-to-current var(--f7-page-push-transition-duration) forwards;\n}\n@keyframes f7-push-next-to-current {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0%);\n  }\n}\n@keyframes f7-push-current-to-next {\n  from {\n    transform: translateX(0%);\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\n@keyframes f7-push-current-to-prev {\n  from {\n    transform: translateX(0%);\n  }\n  to {\n    transform: translateX(-100%);\n  }\n}\n@keyframes f7-push-prev-to-current {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0%);\n  }\n}\n/* === Link === */\n:root {\n  --f7-link-highlight-black: rgba(0, 0, 0, 0.1);\n  --f7-link-highlight-white: rgba(255, 255, 255, 0.15);\n  --f7-link-highlight-color: var(--f7-link-highlight-black);\n}\n.theme-dark {\n  --f7-link-highlight-color: var(--f7-link-highlight-white);\n}\n.link,\n.tab-link {\n  display: inline-flex;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  position: relative;\n  box-sizing: border-box;\n  z-index: 1;\n}\n.link i + span,\n.link i + i,\n.link span + i,\n.link span + span {\n  margin-left: 4px;\n}\n.ios .link {\n  transition: opacity 300ms;\n}\n.ios .link.active-state {\n  opacity: 0.3;\n  transition-duration: 0ms;\n}\n.aurora .link {\n  transition: opacity 300ms;\n}\n.aurora .link.active-state {\n  opacity: 0.3;\n  transition-duration: 0ms;\n}\n/* === Navbar === */\n:root {\n  /*\n  --f7-navbar-bg-color: var(--f7-bars-bg-color);\n  --f7-navbar-bg-color-rgb: var(--f7-bars-bg-color-rgb);\n  --f7-navbar-bg-image: var(--f7-bars-bg-image);\n  --f7-navbar-border-color: var(--f7-bars-border-color);\n  --f7-navbar-link-color: var(--f7-bars-link-color);\n  --f7-navbar-text-color: var(--f7-bars-text-color);\n  */\n  --f7-navbar-hide-show-transition-duration: 400ms;\n  --f7-navbar-title-line-height: 1.2;\n  --f7-navbar-title-font-size: inherit;\n  --f7-navbar-subtitle-text-align: inherit;\n  --f7-navbar-large-title-line-height: 1.2;\n  --f7-navbar-large-title-text-color: inherit;\n  --f7-navbar-large-title-padding-left: 16px;\n  --f7-navbar-large-title-padding-right: 16px;\n}\n.ios {\n  --f7-navbar-height: 44px;\n  --f7-navbar-tablet-height: 44px;\n  --f7-navbar-font-size: 17px;\n  --f7-navbar-inner-padding-left: 8px;\n  --f7-navbar-inner-padding-right: 8px;\n  --f7-navbar-title-font-weight: 600;\n  --f7-navbar-title-margin-left: 0;\n  --f7-navbar-title-margin-right: 0;\n  --f7-navbar-title-text-align: center;\n  --f7-navbar-subtitle-font-size: 10px;\n  --f7-navbar-subtitle-line-height: 1;\n  --f7-navbar-shadow-image: none;\n  --f7-navbar-large-title-height: 52px;\n  --f7-navbar-large-title-font-size: 34px;\n  --f7-navbar-large-title-font-weight: 700;\n  --f7-navbar-large-title-letter-spacing: -0.03em;\n  --f7-navbar-large-title-padding-vertical: 6px;\n  /*\n  --f7-navbar-link-height: var(--f7-navbar-height);\n  --f7-navbar-link-line-height: var(--f7-navbar-height);\n  */\n  --f7-navbar-subtitle-text-color: rgba(0, 0, 0, 0.55);\n}\n.ios .theme-dark,\n.ios.theme-dark {\n  --f7-navbar-subtitle-text-color: rgba(255, 255, 255, 0.55);\n}\n.md {\n  --f7-navbar-height: 56px;\n  --f7-navbar-tablet-height: 64px;\n  --f7-navbar-font-size: 20px;\n  --f7-navbar-inner-padding-left: 0px;\n  --f7-navbar-inner-padding-right: 0px;\n  --f7-navbar-title-font-weight: 500;\n  --f7-navbar-title-margin-left: 16px;\n  --f7-navbar-title-margin-right: 16px;\n  --f7-navbar-title-text-align: left;\n  --f7-navbar-subtitle-font-size: 14px;\n  --f7-navbar-subtitle-line-height: 1.2;\n  --f7-navbar-shadow-image: var(--f7-bars-shadow-bottom-image);\n  --f7-navbar-large-title-font-size: 34px;\n  --f7-navbar-large-title-height: 56px;\n  --f7-navbar-large-title-font-weight: 500;\n  --f7-navbar-large-title-letter-spacing: 0;\n  --f7-navbar-large-title-padding-vertical: 8px;\n  /*\n  --f7-navbar-link-height: var(--f7-navbar-height);\n  --f7-navbar-link-line-height: var(--f7-navbar-height);\n  */\n  --f7-navbar-subtitle-text-color: rgba(0, 0, 0, 0.85);\n}\n.md .theme-dark,\n.md.theme-dark {\n  --f7-navbar-subtitle-text-color: rgba(255, 255, 255, 0.85);\n}\n.aurora {\n  --f7-navbar-height: 38px;\n  --f7-navbar-tablet-height: 38px;\n  --f7-navbar-font-size: 14px;\n  --f7-navbar-inner-padding-left: 16px;\n  --f7-navbar-inner-padding-right: 16px;\n  --f7-navbar-title-font-weight: 600;\n  --f7-navbar-title-margin-left: 0;\n  --f7-navbar-title-margin-right: 0;\n  --f7-navbar-title-text-align: center;\n  --f7-navbar-subtitle-font-size: 12px;\n  --f7-navbar-subtitle-line-height: 1;\n  --f7-navbar-shadow-image: none;\n  --f7-navbar-large-title-height: 38px;\n  --f7-navbar-large-title-font-size: 26px;\n  --f7-navbar-large-title-font-weight: bold;\n  --f7-navbar-large-title-letter-spacing: -0.03em;\n  --f7-navbar-large-title-padding-vertical: 4px;\n  --f7-navbar-link-height: auto;\n  --f7-navbar-link-line-height: inherit;\n  --f7-navbar-subtitle-text-color: rgba(0, 0, 0, 0.6);\n}\n.aurora .theme-dark,\n.aurora.theme-dark {\n  --f7-navbar-subtitle-text-color: rgba(255, 255, 255, 0.5);\n}\n.navbars,\n.navbar {\n  z-index: 500;\n  left: 0;\n  top: 0;\n  width: 100%;\n}\n.navbars {\n  position: absolute;\n}\n.navbars .navbar {\n  z-index: auto;\n}\n.navbar {\n  --f7-navbar-large-collapse-progress: 0;\n  position: relative;\n  backface-visibility: hidden;\n  box-sizing: border-box;\n  margin: 0;\n  height: calc(var(--f7-navbar-height) + var(--f7-safe-area-top));\n  color: var(--f7-navbar-text-color, var(--f7-bars-text-color));\n  font-size: var(--f7-navbar-font-size);\n}\n.navbar.stacked {\n  display: none;\n}\n.navbar b {\n  font-weight: 500;\n}\n.navbar a {\n  color: var(--f7-navbar-link-color, var(--f7-bars-link-color, var(--f7-theme-color)));\n}\n.navbar a.link {\n  display: flex;\n  justify-content: flex-start;\n  line-height: var(--f7-navbar-link-line-height, var(--f7-navbar-height));\n  height: var(--f7-navbar-link-height, var(--f7-navbar-height));\n}\n.navbar .title,\n.navbar .left,\n.navbar .right {\n  position: relative;\n  z-index: 10;\n}\n.navbar .title {\n  position: relative;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  flex-shrink: 10;\n  font-weight: var(--f7-navbar-title-font-weight);\n  display: inline-block;\n  line-height: var(--f7-navbar-title-line-height);\n  text-align: var(--f7-navbar-title-text-align);\n  font-size: var(--f7-navbar-title-font-size);\n  margin-left: var(--f7-navbar-title-margin-left);\n  margin-right: var(--f7-navbar-title-margin-left);\n}\n.navbar .subtitle {\n  display: block;\n  color: var(--f7-navbar-subtitle-text-color);\n  font-weight: normal;\n  font-size: var(--f7-navbar-subtitle-font-size);\n  line-height: var(--f7-navbar-subtitle-line-height);\n  text-align: var(--f7-navbar-subtitle-text-align);\n}\n.navbar .left,\n.navbar .right {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n.navbar .right:first-child {\n  position: absolute;\n  height: 100%;\n}\n.navbar.no-hairline .navbar-bg:after,\n.navbar.no-border .navbar-bg:after,\n.navbar .no-hairline .navbar-bg:after,\n.navbar .no-border .navbar-bg:after {\n  display: none !important;\n}\n.navbar.no-hairline .title-large:after,\n.navbar.no-border .title-large:after,\n.navbar .no-hairline .title-large:after,\n.navbar .no-border .title-large:after {\n  display: none !important;\n}\n.navbar.no-shadow .navbar-bg:before,\n.navbar .no-shadow .navbar-bg:before {\n  display: none !important;\n}\n.navbar.navbar-hidden .navbar-bg:before,\n.navbar-hidden .navbar .navbar-bg:before {\n  opacity: 0 !important;\n}\n.navbar-bg {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 0;\n  background: var(--f7-navbar-bg-color);\n  background-image: var(--f7-navbar-bg-image, var(--f7-bars-bg-image));\n  background-color: var(--f7-navbar-bg-color, var(--f7-bars-bg-color));\n  transition-property: transform;\n}\n@supports (backdrop-filter: blur(20px)) {\n  .ios-translucent-bars .navbar-bg {\n    background-color: rgba(var(--f7-navbar-bg-color-rgb, var(--f7-bars-bg-color-rgb)), var(--f7-bars-translucent-opacity));\n    backdrop-filter: saturate(180%) blur(var(--f7-bars-translucent-blur));\n  }\n}\n.navbar-bg:after,\n.navbar-bg:before {\n  backface-visibility: hidden;\n}\n.navbar-bg:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-navbar-border-color, var(--f7-bars-border-color));\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.navbar-bg:before {\n  content: '';\n  position: absolute;\n  right: 0;\n  width: 100%;\n  top: 100%;\n  bottom: auto;\n  height: 8px;\n  pointer-events: none;\n  background: var(--f7-navbar-shadow-image);\n}\n.navbar-bg:after {\n  z-index: 1;\n}\n@media (min-width: 768px) and (min-height: 600px) {\n  :root {\n    --f7-navbar-height: var(--f7-navbar-tablet-height);\n  }\n}\n.navbar-transitioning,\n.navbar-transitioning .left,\n.navbar-transitioning .title,\n.navbar-transitioning .right,\n.navbar-transitioning .title-large-text,\n.navbar-transitioning .navbar-bg,\n.navbar-transitioning .subnavbar,\n.navbar-transitioning .navbar-bg:before {\n  transition-duration: var(--f7-navbar-hide-show-transition-duration);\n}\n.navbar-page-transitioning {\n  transition-duration: var(--f7-page-swipeback-transition-duration) !important;\n}\n.navbar-page-transitioning .title-large-text,\n.navbar-page-transitioning .navbar-bg {\n  transition-duration: var(--f7-page-swipeback-transition-duration) !important;\n}\n.navbar-hidden {\n  transform: translate3d(0, calc(-1 * var(--f7-navbar-height)), 0);\n}\n.navbar-hidden .navbar-inner {\n  pointer-events: none;\n}\n.navbar-hidden .navbar-inner > .left,\n.navbar-hidden .navbar-inner > .title,\n.navbar-hidden .navbar-inner > .right {\n  opacity: 0 !important;\n}\n.navbar-hidden .subnavbar {\n  pointer-events: auto;\n}\n.navbar-hidden-statusbar {\n  transform: translate3d(0, calc(-1 * var(--f7-navbar-height) - var(--f7-safe-area-top)), 0);\n}\n.navbar-large-hidden .navbar-large {\n  --f7-navbar-large-collapse-progress: 1;\n}\n.navbar-inner {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  padding: var(--f7-safe-area-top) calc(var(--f7-navbar-inner-padding-right) + var(--f7-safe-area-right)) 0 calc(var(--f7-navbar-inner-padding-left) + var(--f7-safe-area-left));\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.views > .navbar,\n.view > .navbar,\n.page > .navbar,\n.navbars > .navbar {\n  position: absolute;\n}\n.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible):not(.with-searchbar-expandable-enabled) .navbar-bg,\n.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible):not(.with-searchbar-expandable-enabled) .title {\n  opacity: 0;\n}\n.navbar-large .navbar-bg {\n  height: calc(100% + var(--f7-navbar-large-title-height));\n  transform: translate3d(0px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0);\n}\n.navbar-large-transparent .navbar-bg,\n.navbar-large.navbar-transparent .navbar-bg {\n  opacity: var(--f7-navbar-large-collapse-progress);\n  height: 100%;\n  transform: none;\n}\n.ios .router-navbar-transition-to-large .navbar-bg,\n.ios .router-navbar-transition-from-large .navbar-bg,\n.navbar-bg.ios-swipeback-navbar-bg-large,\n.navbar-large-transparent .navbar-bg.ios-swipeback-navbar-bg-large,\n.navbar-large.navbar-transparent .navbar-bg.ios-swipeback-navbar-bg-large {\n  height: calc(100% + var(--f7-navbar-large-title-height));\n  transform: translate3d(0px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0);\n}\n.ios .navbar:not(.navbar-large) .navbar-bg {\n  --f7-navbar-large-collapse-progress: 1;\n}\n.navbar-large .title {\n  opacity: var(--f7-navbar-large-collapse-progress);\n}\n.navbar-large-collapsed {\n  --f7-navbar-large-collapse-progress: 1;\n}\n.navbar-large-collapsed .title-large {\n  pointer-events: none;\n}\n.navbar .title-large {\n  box-sizing: border-box;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 100%;\n  display: flex;\n  align-items: flex-end;\n  white-space: nowrap;\n  overflow: hidden;\n  height: var(--f7-navbar-large-title-height);\n  z-index: 5;\n}\n.navbar .title-large-text {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: var(--f7-navbar-large-title-text-color);\n  letter-spacing: var(--f7-navbar-large-title-letter-spacing);\n  font-size: var(--f7-navbar-large-title-font-size);\n  font-weight: var(--f7-navbar-large-title-font-weight);\n  line-height: var(--f7-navbar-large-title-line-height);\n  padding-left: calc(var(--f7-navbar-large-title-padding-left) + var(--f7-safe-area-left));\n  padding-right: calc(var(--f7-navbar-large-title-padding-right) + var(--f7-safe-area-right));\n  padding-top: var(--f7-navbar-large-title-padding-vertical);\n  padding-bottom: var(--f7-navbar-large-title-padding-vertical);\n  box-sizing: border-box;\n  overflow: hidden;\n  width: 100%;\n  transform: translate3d(0px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0);\n  transform-origin: calc(var(--f7-navbar-large-title-padding-left) + var(--f7-safe-area-left)) center;\n}\n.navbar-no-title-large-transition .title-large-text {\n  transition-duration: 0ms;\n}\n.navbar ~ *,\n.navbars ~ * {\n  --f7-page-navbar-offset: calc(var(--f7-navbar-height) + var(--f7-safe-area-top));\n}\n.navbar ~ * .page-with-navbar-large,\n.navbar ~ .page-with-navbar-large,\n.navbars ~ * .page-with-navbar-large,\n.navbars ~ .page-with-navbar-large,\n.page-with-navbar-large .navbar ~ * {\n  --f7-page-navbar-offset: calc(var(--f7-navbar-height) + var(--f7-navbar-large-title-height) + var(--f7-safe-area-top));\n}\n.page.no-navbar,\n.page.no-navbar .navbar ~ * {\n  --f7-page-navbar-offset: var(--f7-safe-area-top);\n}\n.ios {\n  --f7-navbarLeftTextOffset: calc(4px + 12px + var(--f7-navbar-inner-padding-left));\n  --f7-navbarTitleLargeOffset: var(--f7-navbar-large-title-padding-left);\n  --f7-navbar-large-transparent-bg-center: translateX(0);\n  --f7-navbar-large-bg-center-top: translateX(0) translateY(calc(-1 * var(--f7-navbar-large-title-height)));\n  --f7-navbar-large-bg-center-bottom: translateX(0) translateY(0);\n  --f7-navbar-large-transparent-bg-left: translateX(-100%);\n  --f7-navbar-large-bg-left-top: translateX(-100%) translateY(calc(-1 * var(--f7-navbar-large-title-height)));\n  --f7-navbar-large-bg-left-bottom: translateX(-100%) translateY(0);\n  --f7-navbar-large-bg-right-top: translateX(100%) translateY(calc(-1 * var(--f7-navbar-large-title-height)));\n  --f7-navbar-large-bg-right-bottom: translateX(100%) translateY(0);\n}\n.ios .navbar a.icon-only {\n  width: 44px;\n  margin: 0;\n  justify-content: center;\n}\n.ios .navbar .left a + a,\n.ios .navbar .right a + a {\n  margin-left: 16px;\n}\n.ios .navbar b {\n  font-weight: 600;\n}\n.ios .navbar .left {\n  margin-right: 10px;\n}\n.ios .navbar .right {\n  margin-left: 10px;\n}\n.ios .navbar .right:first-child {\n  right: calc(8px + var(--f7-safe-area-right));\n}\n.ios .navbar-inner {\n  justify-content: space-between;\n}\n.ios .navbar-inner-left-title {\n  justify-content: flex-start;\n}\n.ios .navbar-inner-left-title .right {\n  margin-left: auto;\n}\n.ios .navbar-inner-left-title .title {\n  text-align: left;\n  margin-right: 10px;\n}\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .left,\n.ios .view:not(.view-master-detail) .navbar-previous .left,\n.ios .navbar-next .left,\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .title,\n.ios .view:not(.view-master-detail) .navbar-previous .title,\n.ios .navbar-next .title,\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .right,\n.ios .view:not(.view-master-detail) .navbar-previous .right,\n.ios .navbar-next .right,\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .subnavbar,\n.ios .view:not(.view-master-detail) .navbar-previous .subnavbar,\n.ios .navbar-next .subnavbar,\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .fading,\n.ios .view:not(.view-master-detail) .navbar-previous .fading,\n.ios .navbar-next .fading {\n  opacity: 0;\n}\n.ios .view-master-detail .navbar-previous:not(.navbar-master),\n.ios .view:not(.view-master-detail) .navbar-previous {\n  pointer-events: none;\n}\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .title-large,\n.ios .view:not(.view-master-detail) .navbar-previous .title-large {\n  opacity: 0;\n  transition-duration: 0ms;\n}\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .title-large .title-large-text,\n.ios .view:not(.view-master-detail) .navbar-previous .title-large .title-large-text {\n  transform: scale(0.5);\n  transition-duration: 0ms;\n}\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .subnavbar.sliding,\n.ios .view:not(.view-master-detail) .navbar-previous .subnavbar.sliding,\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .sliding .subnavbar,\n.ios .view:not(.view-master-detail) .navbar-previous .sliding .subnavbar {\n  opacity: 1;\n  transform: translate3d(-100%, 0, 0);\n}\n.ios .view:not(.view-master-detail) .navbar-previous .navbar-bg,\n.ios .view-master-detail .navbar-previous:not(.navbar-master) .navbar-bg {\n  transform: translateX(-100%);\n}\n.ios .navbar-next {\n  pointer-events: none;\n}\n.ios .navbar-next .navbar-bg {\n  transform: translateX(100%);\n}\n.ios .navbar-next .title-large .title-large-text {\n  transition-duration: 0ms;\n  transform: translateX(100%) translateY(calc(-1 * var(--f7-navbar-large-title-height)));\n}\n.ios .navbar-next .subnavbar.sliding,\n.ios .navbar-next .sliding .subnavbar {\n  opacity: 1;\n  transform: translate3d(100%, 0, 0);\n}\n.ios .router-transition .navbar,\n.ios .router-transition .navbar-bg {\n  transition-duration: var(--f7-page-transition-duration);\n}\n.ios .router-transition .navbar-bg {\n  animation-duration: var(--f7-page-transition-duration);\n  animation-fill-mode: forwards;\n}\n.ios .router-transition .title-large,\n.ios .router-transition .title-large-text {\n  transition-duration: 0ms;\n}\n.ios .router-transition .navbar-current .left,\n.ios .router-transition .navbar-current .title,\n.ios .router-transition .navbar-current .right,\n.ios .router-transition .navbar-current .subnavbar {\n  animation: ios-navbar-element-fade-out var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition .navbar-current .sliding.left,\n.ios .router-transition .navbar-current .sliding.left .icon + span,\n.ios .router-transition .navbar-current .sliding.title,\n.ios .router-transition .navbar-current .sliding.right,\n.ios .router-transition .navbar-current .sliding .left,\n.ios .router-transition .navbar-current .sliding .left .icon + span,\n.ios .router-transition .navbar-current .sliding .title,\n.ios .router-transition .navbar-current .sliding .right {\n  transition-duration: var(--f7-page-transition-duration);\n  opacity: 0 !important;\n  animation: none;\n}\n.ios .router-transition .navbar-current .sliding .subnavbar,\n.ios .router-transition .navbar-current .sliding.subnavbar {\n  transition-duration: var(--f7-page-transition-duration);\n  animation: none;\n  opacity: 1;\n}\n.ios .router-transition-forward .navbar-next .left,\n.ios .router-transition-backward .navbar-previous .left,\n.ios .router-transition-forward .navbar-next .title,\n.ios .router-transition-backward .navbar-previous .title,\n.ios .router-transition-forward .navbar-next .right,\n.ios .router-transition-backward .navbar-previous .right,\n.ios .router-transition-forward .navbar-next .subnavbar,\n.ios .router-transition-backward .navbar-previous .subnavbar {\n  animation: ios-navbar-element-fade-in var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-forward .navbar-next .sliding.left,\n.ios .router-transition-backward .navbar-previous .sliding.left,\n.ios .router-transition-forward .navbar-next .sliding.left .icon + span,\n.ios .router-transition-backward .navbar-previous .sliding.left .icon + span,\n.ios .router-transition-forward .navbar-next .sliding.title,\n.ios .router-transition-backward .navbar-previous .sliding.title,\n.ios .router-transition-forward .navbar-next .sliding.right,\n.ios .router-transition-backward .navbar-previous .sliding.right,\n.ios .router-transition-forward .navbar-next .sliding .left,\n.ios .router-transition-backward .navbar-previous .sliding .left,\n.ios .router-transition-forward .navbar-next .sliding .left .icon + span,\n.ios .router-transition-backward .navbar-previous .sliding .left .icon + span,\n.ios .router-transition-forward .navbar-next .sliding .title,\n.ios .router-transition-backward .navbar-previous .sliding .title,\n.ios .router-transition-forward .navbar-next .sliding .right,\n.ios .router-transition-backward .navbar-previous .sliding .right,\n.ios .router-transition-forward .navbar-next .sliding .subnavbar,\n.ios .router-transition-backward .navbar-previous .sliding .subnavbar {\n  transition-duration: var(--f7-page-transition-duration);\n  animation: none;\n  transform: translate3d(0, 0, 0) !important;\n  opacity: 1 !important;\n}\n.ios .router-transition-forward .navbar-next.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible) .title,\n.ios .router-transition-backward .navbar-previous.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible) .title {\n  animation: none;\n}\n.ios .router-transition-forward .navbar-next.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible) .sliding.title,\n.ios .router-transition-backward .navbar-previous.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible) .sliding.title,\n.ios .router-transition-forward .navbar-next.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible) .sliding .title,\n.ios .router-transition-backward .navbar-previous.navbar-transparent:not(.navbar-large):not(.navbar-transparent-visible) .sliding .title {\n  opacity: 0 !important;\n}\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled-no-transition .left,\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled .left,\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled-no-transition .title,\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled .title,\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled-no-transition .right,\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled .right,\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled-no-transition .subnavbar,\n.ios .router-transition-backward .navbar-previous.with-searchbar-expandable-enabled .subnavbar {\n  animation: none;\n}\n.ios .router-transition-forward .navbar-current.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large,\n.ios .router-transition-forward .navbar-current.router-navbar-transition-from-large:not(.router-navbar-transition-to-large) .title-large {\n  overflow: visible;\n}\n.ios .router-transition-forward .navbar-current.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large .title-large-text,\n.ios .router-transition-forward .navbar-current.router-navbar-transition-from-large:not(.router-navbar-transition-to-large) .title-large .title-large-text {\n  animation: ios-navbar-large-title-text-slide-up var(--f7-page-transition-duration) forwards, ios-navbar-large-title-text-fade-out var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-forward .navbar-next.router-navbar-transition-from-large .left .back span {\n  animation: ios-navbar-back-text-next-to-current var(--f7-page-transition-duration) forwards;\n  transition: none;\n  transform-origin: left center;\n}\n.ios .router-transition-forward .navbar-next.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large {\n  overflow: visible;\n}\n.ios .router-transition-forward .navbar-next.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large .title-large-text {\n  animation: ios-navbar-large-title-text-slide-left var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-forward .navbar-next.router-navbar-transition-to-large:not(.router-navbar-transition-from-large) .title-large .title-large-text {\n  animation: ios-navbar-large-title-text-slide-left var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-forward .navbar-next.navbar-large:not(.navbar-large-collapsed) .title,\n.ios .router-transition-forward .navbar-current.navbar-large:not(.navbar-large-collapsed) .title {\n  animation: none;\n  opacity: 0 !important;\n  transition-duration: 0;\n}\n.ios .router-transition-backward .navbar-current.router-navbar-transition-to-large .left .back span {\n  animation: ios-navbar-back-text-current-to-previous var(--f7-page-transition-duration) forwards;\n  transition: none;\n  transform-origin: left center;\n}\n.ios .router-transition-backward .navbar-current.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large {\n  overflow: visible;\n}\n.ios .router-transition-backward .navbar-current.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large .title-large-text {\n  animation: ios-navbar-large-title-text-slide-right var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-backward .navbar-current.router-navbar-transition-from-large:not(.router-navbar-transition-to-large) .title-large .title-large-text {\n  animation: ios-navbar-large-title-text-slide-right var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-backward .navbar-current.router-navbar-transition-to-large:not(.router-navbar-transition-from-large) .title-large {\n  opacity: 0;\n}\n.ios .router-transition-backward .navbar-previous.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large,\n.ios .router-transition-backward .navbar-previous.router-navbar-transition-to-large:not(.router-navbar-transition-from-large) .title-large {\n  overflow: visible;\n  opacity: 1;\n}\n.ios .router-transition-backward .navbar-previous.router-navbar-transition-from-large.router-navbar-transition-to-large .title-large .title-large-text,\n.ios .router-transition-backward .navbar-previous.router-navbar-transition-to-large:not(.router-navbar-transition-from-large) .title-large .title-large-text {\n  animation: ios-navbar-large-title-text-slide-down var(--f7-page-transition-duration) forwards, ios-navbar-large-title-text-fade-in var(--f7-page-transition-duration) forwards;\n}\n.ios .router-transition-backward .navbar-current.navbar-large:not(.navbar-large-collapsed) .title,\n.ios .router-transition-backward .navbar-previous.navbar-large:not(.navbar-large-collapsed) .title {\n  animation: none;\n  opacity: 0 !important;\n  transition-duration: 0;\n}\n.ios .router-transition-forward .navbar-current .navbar-bg {\n  animation-name: ios-navbar-bg-from-cb-to-lb;\n}\n.ios .router-transition-forward .navbar-current.router-navbar-transition-from-large.router-navbar-transition-to-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-cb-to-lb;\n}\n.ios .router-transition-forward .navbar-current.router-navbar-transition-from-large:not(.router-navbar-transition-to-large) .navbar-bg {\n  animation-name: ios-navbar-bg-from-cb-to-lt;\n}\n.ios .router-transition-forward .navbar-current:not(.router-navbar-transition-from-large).router-navbar-transition-to-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-ct-to-lb;\n}\n.ios .router-transition-forward .navbar-current.navbar-large-collapsed:not(.router-navbar-transition-to-large) .navbar-bg {\n  animation-name: ios-navbar-bg-from-ct-to-lt;\n}\n.ios .router-transition-forward .navbar-current.navbar-large-collapsed.navbar-large-transparent:not(.router-navbar-transition-to-large) .navbar-bg,\n.ios .router-transition-forward .navbar-current.navbar-large-collapsed.navbar-large.navbar-transparent:not(.router-navbar-transition-to-large) .navbar-bg {\n  animation-name: ios-navbar-transparent-bg-from-c-to-l;\n}\n.ios .router-transition-forward .navbar-next .navbar-bg {\n  animation-name: ios-navbar-bg-from-rb-to-cb;\n}\n.ios .router-transition-forward .navbar-next.router-navbar-transition-from-large.router-navbar-transition-to-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-rb-to-cb;\n}\n.ios .router-transition-forward .navbar-next.router-navbar-transition-from-large:not(.router-navbar-transition-to-large) .navbar-bg {\n  animation-name: ios-navbar-bg-from-rb-to-ct;\n}\n.ios .router-transition-forward .navbar-next:not(.router-navbar-transition-from-large).router-navbar-transition-to-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-rt-to-cb;\n}\n.ios .router-transition-backward .navbar-current .navbar-bg {\n  animation-name: ios-navbar-bg-from-cb-to-rb;\n}\n.ios .router-transition-backward .navbar-current:not(.router-navbar-transition-from-large).router-navbar-transition-to-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-ct-to-rb;\n}\n.ios .router-transition-backward .navbar-current.router-navbar-transition-from-large:not(.router-navbar-transition-to-large) .navbar-bg {\n  animation-name: ios-navbar-bg-from-cb-to-rt;\n}\n.ios .router-transition-backward .navbar-current.navbar-large-collapsed .navbar-bg {\n  animation-name: ios-navbar-bg-from-ct-to-rt;\n}\n.ios .router-transition-backward .navbar-current.navbar-large-collapsed.navbar-large-transparent .navbar-bg,\n.ios .router-transition-backward .navbar-current.navbar-large-collapsed.navbar-large.navbar-transparent .navbar-bg {\n  animation-name: ios-navbar-bg-from-cb-to-rb;\n}\n.ios .router-transition-backward .navbar-current.navbar-large-collapsed.router-navbar-transition-to-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-ct-to-rb;\n}\n.ios .router-transition-backward .navbar-previous .navbar-bg {\n  animation-name: ios-navbar-bg-from-lb-to-cb;\n}\n.ios .router-transition-backward .navbar-previous:not(.router-navbar-transition-from-large).router-navbar-transition-to-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-lt-to-cb;\n}\n.ios .router-transition-backward .navbar-previous.router-navbar-transition-from-large:not(.router-navbar-transition-to-large) .navbar-bg {\n  animation-name: ios-navbar-bg-from-lb-to-ct;\n}\n.ios .router-transition-backward .navbar-previous.navbar-large-collapsed .navbar-bg {\n  animation-name: ios-navbar-bg-from-lt-to-ct;\n}\n.ios .router-transition-backward .navbar-previous.navbar-large-collapsed.navbar-large-transparent .navbar-bg,\n.ios .router-transition-backward .navbar-previous.navbar-large-collapsed.navbar-large.navbar-transparent .navbar-bg {\n  animation-name: ios-navbar-transparent-bg-from-l-to-c;\n}\n.ios .router-transition-backward .navbar-previous.navbar-large-collapsed.navbar-large-transparent.router-navbar-transition-from-large .navbar-bg,\n.ios .router-transition-backward .navbar-previous.navbar-large-collapsed.navbar-large.navbar-transparent.router-navbar-transition-from-large .navbar-bg {\n  animation-name: ios-navbar-bg-from-lb-to-ct;\n}\n.view-master-detail .navbars {\n  z-index: auto;\n}\n.view-master-detail .page-master {\n  z-index: 525;\n}\n.view-master-detail .navbar-master .navbar-inner,\n.view-master-detail .navbar-master .navbar-bg {\n  z-index: 550;\n}\n.view-master-detail .navbar-master-detail .navbar-inner,\n.view-master-detail .navbar-master-detail .navbar-bg {\n  z-index: 500;\n}\n.view-master-detail .navbar-master.navbar-previous {\n  pointer-events: auto;\n}\n.view-master-detail .navbar-master.navbar-previous .left,\n.view-master-detail .navbar-master.navbar-previous:not(.navbar-large) .title,\n.view-master-detail .navbar-master.navbar-previous .right,\n.view-master-detail .navbar-master.navbar-previous .subnavbar {\n  opacity: 1;\n}\n.view-master-detail.router-transition .navbar-master .left,\n.view-master-detail.router-transition .navbar-master .left .icon + span,\n.view-master-detail.router-transition .navbar-master:not(.navbar-large) .title,\n.view-master-detail.router-transition .navbar-master .right,\n.view-master-detail.router-transition .navbar-master .subnavbar,\n.view-master-detail.router-transition .navbar-master .fading {\n  opacity: 1 !important;\n  transition-duration: 0ms;\n  transform: none !important;\n  animation: none !important;\n}\n.view-master-detail.router-transition .navbar-master .navbar-bg {\n  transition-duration: 0ms;\n  animation: none !important;\n}\n.view-master-detail.router-transition .navbar-master.navbar-large .title {\n  opacity: calc(-1 + 2 * var(--f7-navbar-large-collapse-progress)) !important;\n  transition-duration: 0ms;\n  transform: none !important;\n  animation: none !important;\n}\n.view-master-detail.router-transition .navbar-master.navbar-large .title-large,\n.view-master-detail.router-transition .navbar-master.navbar-large .title-large-text {\n  transition-duration: 0ms;\n  animation: none !important;\n}\n.view-master-detail.router-transition .navbar-master.navbar-large-transparent .navbar-bg,\n.view-master-detail.router-transition .navbar-master.navbar-large.navbar-transparent .navbar-bg {\n  height: 100% !important;\n  opacity: var(--f7-navbar-large-collapse-progress) !important;\n}\n@keyframes ios-navbar-element-fade-in {\n  0% {\n    opacity: 0;\n  }\n  25% {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes ios-navbar-element-fade-out {\n  from {\n    opacity: 1;\n  }\n  75% {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n@keyframes ios-navbar-large-title-text-slide-up {\n  0% {\n    transform: translateX(0px) translateY(0%) scale(1);\n  }\n  100% {\n    transform: translateX(calc(var(--f7-navbarLeftTextOffset) - var(--f7-navbarTitleLargeOffset))) translateY(calc(-1 * var(--f7-navbar-large-title-height) + var(--f7-navbar-large-title-padding-vertical))) scale(0.5);\n  }\n}\n@keyframes ios-navbar-large-title-text-slide-down {\n  0% {\n    transform: translateX(calc(var(--f7-navbarLeftTextOffset) - var(--f7-navbarTitleLargeOffset))) translateY(calc(-1 * var(--f7-navbar-large-title-height) + var(--f7-navbar-large-title-padding-vertical) / 2)) scale(0.5);\n  }\n  100% {\n    transform: translateX(0px) translateY(0%) scale(1);\n  }\n}\n@keyframes ios-navbar-large-title-text-slide-left {\n  0% {\n    transform: translateX(100%);\n  }\n  100% {\n    transform: translateX(0%);\n  }\n}\n@keyframes ios-navbar-large-title-text-slide-right {\n  0% {\n    transform: translateX(0%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n@keyframes ios-navbar-large-title-text-fade-out {\n  0% {\n    opacity: 1;\n  }\n  80% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n@keyframes ios-navbar-large-title-text-fade-in {\n  0% {\n    opacity: 0;\n  }\n  20% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes ios-navbar-back-text-current-to-previous {\n  0% {\n    opacity: 1;\n    transform: translateY(0px) translateX(0px) scale(1);\n  }\n  80% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0;\n    transform: translateX(calc(var(--f7-navbarTitleLargeOffset) - var(--f7-navbarLeftTextOffset))) translateY(calc(1 * var(--f7-navbar-large-title-height) - var(--f7-navbar-large-title-padding-vertical) / 2)) scale(2);\n  }\n}\n@keyframes ios-navbar-back-text-next-to-current {\n  0% {\n    opacity: 0;\n    transform: translateX(calc(var(--f7-navbarTitleLargeOffset) - var(--f7-navbarLeftTextOffset))) translateY(calc(1 * var(--f7-navbar-large-title-height) + var(--f7-navbar-large-title-padding-vertical) / 2)) scale(2);\n  }\n  20% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0px) translateY(0px) scale(1);\n  }\n}\n@keyframes ios-navbar-bg-from-cb-to-lb {\n  from {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-left-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-cb-to-lt {\n  from {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-left-top);\n  }\n}\n@keyframes ios-navbar-bg-from-ct-to-lb {\n  from {\n    transform: var(--f7-navbar-large-bg-center-top);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-left-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-ct-to-lt {\n  from {\n    transform: var(--f7-navbar-large-bg-center-top);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-left-top);\n  }\n}\n@keyframes ios-navbar-bg-from-rb-to-cb {\n  from {\n    transform: var(--f7-navbar-large-bg-right-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-rb-to-ct {\n  from {\n    transform: var(--f7-navbar-large-bg-right-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-center-top);\n  }\n}\n@keyframes ios-navbar-bg-from-rt-to-cb {\n  from {\n    transform: var(--f7-navbar-large-bg-right-top);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-cb-to-rb {\n  from {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-right-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-ct-to-rb {\n  from {\n    transform: var(--f7-navbar-large-bg-center-top);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-right-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-cb-to-rt {\n  from {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-right-top);\n  }\n}\n@keyframes ios-navbar-bg-from-ct-to-rt {\n  from {\n    transform: var(--f7-navbar-large-bg-center-top);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-right-top);\n  }\n}\n@keyframes ios-navbar-bg-from-lb-to-cb {\n  from {\n    transform: var(--f7-navbar-large-bg-left-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-lt-to-cb {\n  from {\n    transform: var(--f7-navbar-large-bg-left-top);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-center-bottom);\n  }\n}\n@keyframes ios-navbar-bg-from-lb-to-ct {\n  from {\n    transform: var(--f7-navbar-large-bg-left-bottom);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-center-top);\n  }\n}\n@keyframes ios-navbar-bg-from-lt-to-ct {\n  from {\n    transform: var(--f7-navbar-large-bg-left-top);\n  }\n  to {\n    transform: var(--f7-navbar-large-bg-center-top);\n  }\n}\n@keyframes ios-navbar-transparent-bg-from-l-to-c {\n  from {\n    transform: var(--f7-navbar-large-transparent-bg-left);\n  }\n  to {\n    transform: var(--f7-navbar-large-transparent-bg-center);\n  }\n}\n@keyframes ios-navbar-transparent-bg-from-c-to-l {\n  from {\n    transform: var(--f7-navbar-large-transparent-bg-center);\n  }\n  to {\n    transform: var(--f7-navbar-large-transparent-bg-left);\n  }\n}\n.md .navbar a.link {\n  padding: 0 16px;\n  min-width: 48px;\n}\n.md .navbar a.link:before {\n  content: '';\n  width: 152%;\n  height: 152%;\n  position: absolute;\n  left: -26%;\n  top: -26%;\n  background-image: radial-gradient(circle at center, var(--f7-link-highlight-color) 66%, rgba(255, 255, 255, 0) 66%);\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 100% 100%;\n  opacity: 0;\n  pointer-events: none;\n  transition-duration: 600ms;\n}\n.md .navbar a.link.active-state:before {\n  opacity: 1;\n  transition-duration: 150ms;\n}\n.md .navbar a.icon-only {\n  min-width: 0;\n  flex-shrink: 0;\n  width: 56px;\n}\n.md .navbar .right {\n  margin-left: auto;\n}\n.md .navbar .right:first-child {\n  right: var(--f7-safe-area-right);\n}\n.md .navbar-inner {\n  justify-content: flex-start;\n  overflow: hidden;\n}\n.md .navbar-large:not(.navbar-large-collapsed) .navbar-inner {\n  overflow: visible;\n}\n.md .page.page-with-subnavbar .navbar-inner {\n  overflow: visible;\n}\n.md .navbar-inner-centered-title {\n  justify-content: space-between;\n}\n.md .navbar-inner-centered-title .right {\n  margin-left: 0;\n}\n.md .navbar-inner-centered-title .title {\n  text-align: center;\n}\n.aurora .navbar a.icon-only {\n  margin: 0;\n  justify-content: center;\n}\n.aurora .navbar .left a + a,\n.aurora .navbar .right a + a {\n  margin-left: 10px;\n}\n.aurora .navbar b {\n  font-weight: bold;\n}\n.aurora .navbar .left {\n  margin-right: 10px;\n}\n.aurora .navbar .right {\n  margin-left: 10px;\n}\n.aurora .navbar .right:first-child {\n  right: calc(16px + var(--f7-safe-area-right));\n}\n.aurora .navbar-inner {\n  justify-content: space-between;\n}\n.aurora .navbar-inner-left-title {\n  justify-content: flex-start;\n}\n.aurora .navbar-inner-left-title .right {\n  margin-left: auto;\n}\n.aurora .navbar-inner-left-title .title {\n  text-align: left;\n  margin-right: 10px;\n}\n/* === Toolbar === */\n:root {\n  /*\n  --f7-toolbar-bg-color: var(--f7-bars-bg-color);\n  --f7-toolbar-bg-color-rgb: var(--f7-bars-bg-color-rgb);\n  --f7-toolbar-bg-image: var(--f7-bars-bg-image);\n  --f7-toolbar-border-color: var(--f7-bars-border-color);\n  --f7-toolbar-link-color: var(--f7-bars-link-color);\n  --f7-toolbar-text-color: var(--f7-bars-text-color);\n  --f7-tabbar-link-active-color: var(--f7-theme-color);\n  */\n  --f7-tabbar-link-active-bg-color: transparent;\n  --f7-tabbar-label-text-transform: none;\n  --f7-toolbar-hide-show-transition-duration: 400ms;\n}\n.ios {\n  --f7-toolbar-height: 44px;\n  --f7-toolbar-font-size: 17px;\n  --f7-toolbar-inner-padding-left: 8px;\n  --f7-toolbar-inner-padding-right: 8px;\n  /*\n  --f7-toolbar-link-height: var(--f7-toolbar-height);\n  --f7-toolbar-link-line-height: var(--f7-toolbar-height);\n  */\n  --f7-tabbar-labels-height: 50px;\n  --f7-tabbar-labels-tablet-height: 50px;\n  --f7-toolbar-top-shadow-image: none;\n  --f7-toolbar-bottom-shadow-image: none;\n  --f7-tabbar-icon-size: 28px;\n  --f7-tabbar-link-text-transform: none;\n  --f7-tabbar-link-font-weight: 400;\n  --f7-tabbar-link-letter-spacing: 0;\n  --f7-tabbar-label-font-size: 12px;\n  --f7-tabbar-label-tablet-font-size: 14px;\n  --f7-tabbar-label-font-weight: 500;\n  --f7-tabbar-label-letter-spacing: 0.01;\n  --f7-tabbar-link-inactive-color: rgba(0, 0, 0, 0.4);\n}\n.ios .theme-dark,\n.ios.theme-dark {\n  --f7-tabbar-link-inactive-color: rgba(255, 255, 255, 0.54);\n}\n.md {\n  --f7-toolbar-height: 48px;\n  --f7-toolbar-font-size: 14px;\n  --f7-toolbar-inner-padding-left: 0px;\n  --f7-toolbar-inner-padding-right: 0px;\n  /*\n  --f7-toolbar-link-height: var(--f7-toolbar-height);\n  --f7-toolbar-link-line-height: var(--f7-toolbar-height);\n  */\n  --f7-tabbar-labels-height: 56px;\n  --f7-tabbar-labels-tablet-height: 56px;\n  /*\n  --f7-tabbar-link-active-border-color: var(--f7-theme-color);\n  */\n  --f7-toolbar-top-shadow-image: var(--f7-bars-shadow-bottom-image);\n  --f7-toolbar-bottom-shadow-image: var(--f7-bars-shadow-top-image);\n  --f7-tabbar-icon-size: 24px;\n  --f7-tabbar-link-text-transform: uppercase;\n  --f7-tabbar-link-font-weight: 500;\n  --f7-tabbar-link-letter-spacing: 0.03em;\n  --f7-tabbar-label-font-size: 14px;\n  --f7-tabbar-label-tablet-font-size: 14px;\n  --f7-tabbar-label-font-weight: 400;\n  --f7-tabbar-label-letter-spacing: 0;\n  --f7-tabbar-link-inactive-color: rgba(0, 0, 0, 0.54);\n}\n.md .theme-dark,\n.md.theme-dark {\n  --f7-tabbar-link-inactive-color: rgba(255, 255, 255, 0.54);\n}\n.aurora {\n  --f7-toolbar-height: 38px;\n  --f7-toolbar-font-size: 14px;\n  --f7-toolbar-inner-padding-left: 16px;\n  --f7-toolbar-inner-padding-right: 16px;\n  --f7-toolbar-link-height: auto;\n  --f7-toolbar-link-line-height: inherit;\n  --f7-tabbar-labels-height: 44px;\n  --f7-tabbar-labels-tablet-height: 44px;\n  --f7-tabbar-link-inactive-bg-color: rgba(0, 0, 0, 0.2);\n  --f7-toolbar-top-shadow-image: none;\n  --f7-toolbar-bottom-shadow-image: none;\n  --f7-tabbar-icon-size: 18px;\n  --f7-tabbar-link-text-transform: none;\n  --f7-tabbar-link-font-weight: 400;\n  --f7-tabbar-link-letter-spacing: 0;\n  --f7-tabbar-label-font-size: 12px;\n  --f7-tabbar-label-tablet-font-size: 12px;\n  --f7-tabbar-label-font-weight: 500;\n  --f7-tabbar-label-letter-spacing: 0.01;\n  --f7-tabbar-link-inactive-color: rgba(0, 0, 0, 0.5);\n}\n.aurora .theme-dark,\n.aurora.theme-dark {\n  --f7-tabbar-link-inactive-color: rgba(255, 255, 255, 0.5);\n}\n.toolbar {\n  width: 100%;\n  position: relative;\n  margin: 0;\n  transform: translate3d(0, 0, 0);\n  backface-visibility: hidden;\n  z-index: 600;\n  box-sizing: border-box;\n  left: 0;\n  height: var(--f7-toolbar-height);\n  background-image: var(--f7-toolbar-bg-image, var(--f7-bars-bg-image));\n  background-color: var(--f7-toolbar-bg-color, var(--f7-bars-bg-color));\n  color: var(--f7-toolbar-text-color, var(--f7-bars-text-color));\n  font-size: var(--f7-toolbar-font-size);\n}\n@supports (backdrop-filter: blur(20px)) {\n  .ios-translucent-bars .toolbar {\n    background-color: rgba(var(--f7-toolbar-bg-color-rgb, var(--f7-bars-bg-color-rgb)), var(--f7-bars-translucent-opacity));\n    backdrop-filter: saturate(180%) blur(var(--f7-bars-translucent-blur));\n  }\n}\n.toolbar b {\n  font-weight: 600;\n}\n.toolbar a {\n  color: var(--f7-toolbar-link-color, var(--f7-bars-link-color, var(--f7-theme-color)));\n  box-sizing: border-box;\n  flex-shrink: 1;\n  position: relative;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n.toolbar .link {\n  display: flex;\n  line-height: var(--f7-toolbar-link-line-height, var(--f7-toolbar-height));\n  height: var(--f7-toolbar-link-height, var(--f7-toolbar-height));\n}\n.toolbar i.icon {\n  display: block;\n}\n.toolbar:after,\n.toolbar:before {\n  backface-visibility: hidden;\n}\n.views > .toolbar,\n.view > .toolbar,\n.page > .toolbar {\n  position: absolute;\n}\n.toolbar-top,\n.ios .toolbar-top-ios,\n.md .toolbar-top-md,\n.aurora .toolbar-top-aurora {\n  top: 0;\n}\n.toolbar-top .tab-link-highlight,\n.ios .toolbar-top-ios .tab-link-highlight,\n.md .toolbar-top-md .tab-link-highlight,\n.aurora .toolbar-top-aurora .tab-link-highlight {\n  bottom: 0;\n}\n.toolbar-top.no-hairline:after,\n.ios .toolbar-top-ios.no-hairline:after,\n.md .toolbar-top-md.no-hairline:after,\n.aurora .toolbar-top-aurora.no-hairline:after,\n.toolbar-top.no-border:after,\n.ios .toolbar-top-ios.no-border:after,\n.md .toolbar-top-md.no-border:after,\n.aurora .toolbar-top-aurora.no-border:after {\n  display: none !important;\n}\n.toolbar-top.no-shadow:before,\n.ios .toolbar-top-ios.no-shadow:before,\n.md .toolbar-top-md.no-shadow:before,\n.aurora .toolbar-top-aurora.no-shadow:before,\n.toolbar-top.toolbar-hidden:before,\n.ios .toolbar-top-ios.toolbar-hidden:before,\n.md .toolbar-top-md.toolbar-hidden:before,\n.aurora .toolbar-top-aurora.toolbar-hidden:before {\n  display: none !important;\n}\n.toolbar-top:after,\n.ios .toolbar-top-ios:after,\n.md .toolbar-top-md:after,\n.aurora .toolbar-top-aurora:after,\n.toolbar-top:before,\n.ios .toolbar-top-ios:before,\n.md .toolbar-top-md:before,\n.aurora .toolbar-top-aurora:before {\n  backface-visibility: hidden;\n}\n.toolbar-top:after,\n.ios .toolbar-top-ios:after,\n.md .toolbar-top-md:after,\n.aurora .toolbar-top-aurora:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-toolbar-border-color, var(--f7-bars-border-color));\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.toolbar-top:before,\n.ios .toolbar-top-ios:before,\n.md .toolbar-top-md:before,\n.aurora .toolbar-top-aurora:before {\n  content: '';\n  position: absolute;\n  right: 0;\n  width: 100%;\n  top: 100%;\n  bottom: auto;\n  height: 8px;\n  pointer-events: none;\n  background: var(--f7-toolbar-top-shadow-image);\n}\n.toolbar-bottom,\n.ios .toolbar-bottom-ios,\n.md .toolbar-bottom-md,\n.aurora .toolbar-bottom-aurora {\n  bottom: 0;\n  height: calc(var(--f7-toolbar-height) + var(--f7-safe-area-bottom));\n}\n.toolbar-bottom .tab-link-highlight,\n.ios .toolbar-bottom-ios .tab-link-highlight,\n.md .toolbar-bottom-md .tab-link-highlight,\n.aurora .toolbar-bottom-aurora .tab-link-highlight {\n  top: 0;\n}\n.toolbar-bottom .toolbar-inner,\n.ios .toolbar-bottom-ios .toolbar-inner,\n.md .toolbar-bottom-md .toolbar-inner,\n.aurora .toolbar-bottom-aurora .toolbar-inner {\n  height: auto;\n  top: 0;\n  bottom: var(--f7-safe-area-bottom);\n}\n.toolbar-bottom.no-hairline:before,\n.ios .toolbar-bottom-ios.no-hairline:before,\n.md .toolbar-bottom-md.no-hairline:before,\n.aurora .toolbar-bottom-aurora.no-hairline:before,\n.toolbar-bottom.no-border:before,\n.ios .toolbar-bottom-ios.no-border:before,\n.md .toolbar-bottom-md.no-border:before,\n.aurora .toolbar-bottom-aurora.no-border:before {\n  display: none !important;\n}\n.toolbar-bottom.no-shadow:after,\n.ios .toolbar-bottom-ios.no-shadow:after,\n.md .toolbar-bottom-md.no-shadow:after,\n.aurora .toolbar-bottom-aurora.no-shadow:after,\n.toolbar-bottom.toolbar-hidden:after,\n.ios .toolbar-bottom-ios.toolbar-hidden:after,\n.md .toolbar-bottom-md.toolbar-hidden:after,\n.aurora .toolbar-bottom-aurora.toolbar-hidden:after {\n  display: none !important;\n}\n.toolbar-bottom:before,\n.ios .toolbar-bottom-ios:before,\n.md .toolbar-bottom-md:before,\n.aurora .toolbar-bottom-aurora:before {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-toolbar-border-color, var(--f7-bars-border-color));\n  display: block;\n  z-index: 15;\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 0%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.toolbar-bottom:after,\n.ios .toolbar-bottom-ios:after,\n.md .toolbar-bottom-md:after,\n.aurora .toolbar-bottom-aurora:after {\n  content: '';\n  position: absolute;\n  right: 0;\n  width: 100%;\n  bottom: 100%;\n  height: 8px;\n  top: auto;\n  pointer-events: none;\n  background: var(--f7-toolbar-bottom-shadow-image);\n  transform: translate3d(0, 0, 0);\n}\n.toolbar-inner {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  box-sizing: border-box;\n  align-items: center;\n  align-content: center;\n  overflow: hidden;\n  padding: 0 calc(var(--f7-toolbar-inner-padding-right) + var(--f7-safe-area-right)) 0 calc(var(--f7-toolbar-inner-padding-left) + var(--f7-safe-area-left));\n}\n.views > .tabbar,\n.views > .tabbar-labels {\n  z-index: 5001;\n}\n.tabbar a,\n.tabbar-labels a {\n  color: var(--f7-tabbar-link-inactive-color);\n}\n.tabbar .tab-link:not(.tab-link-active),\n.tabbar-labels .tab-link:not(.tab-link-active) {\n  background-color: var(--f7-tabbar-link-inactive-bg-color, transparent);\n}\n.tabbar .link,\n.tabbar-labels .link {\n  line-height: 1.4;\n}\n.tabbar .tab-link,\n.tabbar-labels .tab-link,\n.tabbar .link,\n.tabbar-labels .link {\n  height: 100%;\n  width: 100%;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-transform: var(--f7-tabbar-link-text-transform);\n  font-weight: var(--f7-tabbar-link-font-weight);\n  letter-spacing: var(--f7-tabbar-link-letter-spacing);\n  overflow: hidden;\n}\n.tabbar .tab-link-active,\n.tabbar-labels .tab-link-active {\n  color: var(--f7-tabbar-link-active-color, var(--f7-theme-color));\n  background-color: var(--f7-tabbar-link-active-bg-color, transparent);\n}\n.tabbar i.icon,\n.tabbar-labels i.icon {\n  font-size: var(--f7-tabbar-icon-size);\n  height: var(--f7-tabbar-icon-size);\n  line-height: var(--f7-tabbar-icon-size);\n}\n.tabbar-labels {\n  --f7-toolbar-height: var(--f7-tabbar-labels-height);\n}\n.tabbar-labels .tab-link,\n.tabbar-labels .link {\n  height: 100%;\n  justify-content: space-between;\n  align-items: center;\n}\n.tabbar-labels .tabbar-label {\n  display: block;\n  line-height: 1;\n  margin: 0;\n  position: relative;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-size: var(--f7-tabbar-label-font-size);\n  text-transform: var(--f7-tabbar-label-text-transform);\n  font-weight: var(--f7-tabbar-label-font-weight);\n  letter-spacing: var(--f7-tabbar-label-letter-spacing);\n}\n@media (min-width: 768px) and (min-height: 600px) {\n  :root {\n    --f7-tabbar-labels-height: var(--f7-tabbar-labels-tablet-height);\n    --f7-tabbar-label-font-size: var(--f7-tabbar-label-tablet-font-size);\n  }\n}\n.tabbar-scrollable .toolbar-inner {\n  justify-content: flex-start;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n.tabbar-scrollable .toolbar-inner::-webkit-scrollbar {\n  display: none !important;\n  width: 0 !important;\n  height: 0 !important;\n  -webkit-appearance: none;\n  opacity: 0 !important;\n}\n.tabbar-scrollable .tab-link,\n.tabbar-scrollable .link {\n  width: auto;\n  flex-shrink: 0;\n}\n.toolbar-transitioning,\n.navbar-transitioning + .toolbar,\n.navbar-transitioning ~ * .toolbar {\n  transition-duration: var(--f7-toolbar-hide-show-transition-duration);\n}\n.toolbar-bottom ~ *,\n.ios .toolbar-bottom-ios ~ *,\n.md .toolbar-bottom-md ~ *,\n.aurora .toolbar-bottom-aurora ~ * {\n  --f7-page-toolbar-bottom-offset: var(--f7-toolbar-height);\n}\n.toolbar-bottom.tabbar-labels ~ *,\n.ios .toolbar-bottom-ios.tabbar-labels ~ *,\n.md .toolbar-bottom-md.tabbar-labels ~ *,\n.aurora .toolbar-bottom-aurora.tabbar-labels ~ * {\n  --f7-page-toolbar-bottom-offset: var(--f7-tabbar-labels-height);\n}\n.toolbar-bottom.toolbar-hidden,\n.ios .toolbar-bottom-ios.toolbar-hidden,\n.md .toolbar-bottom-md.toolbar-hidden,\n.aurora .toolbar-bottom-aurora.toolbar-hidden {\n  transform: translate3d(0, 100%, 0);\n}\n.toolbar-top ~ *,\n.ios .toolbar-top-ios ~ *,\n.md .toolbar-top-md ~ *,\n.aurora .toolbar-top-aurora ~ * {\n  --f7-page-toolbar-top-offset: var(--f7-toolbar-height);\n}\n.toolbar-top.tabbar-labels ~ *,\n.ios .toolbar-top-ios.tabbar-labels ~ *,\n.md .toolbar-top-md.tabbar-labels ~ *,\n.aurora .toolbar-top-aurora.tabbar-labels ~ * {\n  --f7-page-toolbar-top-offset: var(--f7-tabbar-labels-height);\n}\n.toolbar-top.toolbar-hidden,\n.ios .toolbar-top-ios.toolbar-hidden,\n.md .toolbar-top-md.toolbar-hidden,\n.aurora .toolbar-top-aurora.toolbar-hidden {\n  transform: translate3d(0, -100%, 0);\n}\n.navbar ~ .toolbar-top,\n.navbars ~ .toolbar-top,\n.ios .navbar ~ .toolbar-top-ios,\n.ios .navbars ~ .toolbar-top-ios,\n.md .navbar ~ .toolbar-top-md,\n.aurora .navbar ~ .toolbar-top-aurora,\n.navbar ~ * .toolbar-top,\n.navbars ~ * .toolbar-top,\n.ios .navbar ~ * .toolbar-top-ios,\n.ios .navbars ~ * .toolbar-top-ios,\n.md .navbar ~ * .toolbar-top-md,\n.aurora .navbar ~ * .toolbar-top-aurora,\n.navbar ~ .page:not(.no-navbar) .toolbar-top,\n.navbars ~ .page:not(.no-navbar) .toolbar-top,\n.ios .navbar ~ .page:not(.no-navbar) .toolbar-top-ios,\n.ios .navbars ~ .page:not(.no-navbar) .toolbar-top-ios,\n.md .navbar ~ .page:not(.no-navbar) .toolbar-top-md,\n.aurora .navbar ~ .page:not(.no-navbar) .toolbar-top-aurora {\n  top: calc(var(--f7-navbar-height) + var(--f7-safe-area-top));\n}\n.navbar ~ .toolbar-top.toolbar-hidden,\n.navbars ~ .toolbar-top.toolbar-hidden,\n.ios .navbar ~ .toolbar-top-ios.toolbar-hidden,\n.ios .navbars ~ .toolbar-top-ios.toolbar-hidden,\n.md .navbar ~ .toolbar-top-md.toolbar-hidden,\n.aurora .navbar ~ .toolbar-top-aurora.toolbar-hidden,\n.navbar ~ * .toolbar-top.toolbar-hidden,\n.navbars ~ * .toolbar-top.toolbar-hidden,\n.ios .navbar ~ * .toolbar-top-ios.toolbar-hidden,\n.ios .navbars ~ * .toolbar-top-ios.toolbar-hidden,\n.md .navbar ~ * .toolbar-top-md.toolbar-hidden,\n.aurora .navbar ~ * .toolbar-top-aurora.toolbar-hidden,\n.navbar ~ .page:not(.no-navbar) .toolbar-top.toolbar-hidden,\n.navbars ~ .page:not(.no-navbar) .toolbar-top.toolbar-hidden,\n.ios .navbar ~ .page:not(.no-navbar) .toolbar-top-ios.toolbar-hidden,\n.ios .navbars ~ .page:not(.no-navbar) .toolbar-top-ios.toolbar-hidden,\n.md .navbar ~ .page:not(.no-navbar) .toolbar-top-md.toolbar-hidden,\n.aurora .navbar ~ .page:not(.no-navbar) .toolbar-top-aurora.toolbar-hidden {\n  transform: translate3d(0, calc(-1 * (var(--f7-navbar-height) + var(--f7-toolbar-height) + var(--f7-safe-area-top))), 0);\n}\n.navbar ~ .toolbar-top.toolbar-hidden.tabbar-labels,\n.navbars ~ .toolbar-top.toolbar-hidden.tabbar-labels,\n.ios .navbar ~ .toolbar-top-ios.toolbar-hidden.tabbar-labels,\n.ios .navbars ~ .toolbar-top-ios.toolbar-hidden.tabbar-labels,\n.md .navbar ~ .toolbar-top-md.toolbar-hidden.tabbar-labels,\n.aurora .navbar ~ .toolbar-top-aurora.toolbar-hidden.tabbar-labels,\n.navbar ~ * .toolbar-top.toolbar-hidden.tabbar-labels,\n.navbars ~ * .toolbar-top.toolbar-hidden.tabbar-labels,\n.ios .navbar ~ * .toolbar-top-ios.toolbar-hidden.tabbar-labels,\n.ios .navbars ~ * .toolbar-top-ios.toolbar-hidden.tabbar-labels,\n.md .navbar ~ * .toolbar-top-md.toolbar-hidden.tabbar-labels,\n.aurora .navbar ~ * .toolbar-top-aurora.toolbar-hidden.tabbar-labels,\n.navbar ~ .page:not(.no-navbar) .toolbar-top.toolbar-hidden.tabbar-labels,\n.navbars ~ .page:not(.no-navbar) .toolbar-top.toolbar-hidden.tabbar-labels,\n.ios .navbar ~ .page:not(.no-navbar) .toolbar-top-ios.toolbar-hidden.tabbar-labels,\n.ios .navbars ~ .page:not(.no-navbar) .toolbar-top-ios.toolbar-hidden.tabbar-labels,\n.md .navbar ~ .page:not(.no-navbar) .toolbar-top-md.toolbar-hidden.tabbar-labels,\n.aurora .navbar ~ .page:not(.no-navbar) .toolbar-top-aurora.toolbar-hidden.tabbar-labels {\n  transform: translate3d(0, calc(-1 * (var(--f7-navbar-height) + var(--f7-tabbar-labels-height) + var(--f7-safe-area-top))), 0);\n}\n.navbar-hidden + .toolbar-top:not(.toolbar-hidden),\n.ios .navbar-hidden + .toolbar-top-ios:not(.toolbar-hidden),\n.md .navbar-hidden + .toolbar-top-md:not(.toolbar-hidden),\n.aurora .navbar-hidden + .toolbar-top-aurora:not(.toolbar-hidden),\n.navbar-hidden ~ * .toolbar-top:not(.toolbar-hidden),\n.ios .navbar-hidden ~ * .toolbar-top-ios:not(.toolbar-hidden),\n.md .navbar-hidden ~ * .toolbar-top-md:not(.toolbar-hidden),\n.aurora .navbar-hidden ~ * .toolbar-top-aurora:not(.toolbar-hidden) {\n  transform: translate3d(0, calc(0px - var(--f7-navbar-height)), 0);\n}\n.navbar-large-hidden + .toolbar-top:not(.toolbar-hidden),\n.ios .navbar-large-hidden + .toolbar-top-ios:not(.toolbar-hidden),\n.md .navbar-large-hidden + .toolbar-top-md:not(.toolbar-hidden),\n.navbar-large-hidden ~ * .toolbar-top:not(.toolbar-hidden),\n.ios .navbar-large-hidden ~ * .toolbar-top-ios:not(.toolbar-hidden),\n.md .navbar-large-hidden ~ * .toolbar-top-md:not(.toolbar-hidden),\n.aurora .navbar-large-hidden ~ * .toolbar-top-aurora:not(.toolbar-hidden) {\n  transform: translate3d(0, calc(0px - var(--f7-navbar-height) - var(--f7-navbar-large-title-height)), 0);\n}\n.ios .toolbar a.icon-only {\n  min-height: var(--f7-toolbar-height);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  min-width: 44px;\n}\n.ios .tabbar-labels .tab-link,\n.ios .tabbar-labels .link {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n.ios .tabbar-labels .tab-link i + span,\n.ios .tabbar-labels .link i + span {\n  margin: 0;\n}\n@media (min-width: 768px) and (min-height: 600px) {\n  .ios .tabbar .tab-link,\n  .ios .tabbar-labels .tab-link,\n  .ios .tabbar .link,\n  .ios .tabbar-labels .link {\n    justify-content: center;\n    flex-direction: row;\n  }\n  .ios .tabbar .tab-link i + span,\n  .ios .tabbar-labels .tab-link i + span,\n  .ios .tabbar .link i + span,\n  .ios .tabbar-labels .link i + span {\n    margin-left: 5px;\n  }\n}\n.ios .tabbar-scrollable .toolbar-inner {\n  justify-content: flex-start;\n}\n.ios .tabbar-scrollable .tab-link,\n.ios .tabbar-scrollable .link {\n  padding: 0 8px;\n}\n.md .toolbar .link {\n  justify-content: center;\n  padding: 0 16px;\n  min-width: 48px;\n}\n.md .toolbar .link:before {\n  content: '';\n  width: 152%;\n  height: 152%;\n  position: absolute;\n  left: -26%;\n  top: -26%;\n  background-image: radial-gradient(circle at center, var(--f7-link-highlight-color) 66%, rgba(255, 255, 255, 0) 66%);\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 100% 100%;\n  opacity: 0;\n  pointer-events: none;\n  transition-duration: 600ms;\n}\n.md .toolbar .link.active-state:before {\n  opacity: 1;\n  transition-duration: 150ms;\n}\n.md .toolbar a.icon-only {\n  min-width: 0;\n  flex-shrink: 0;\n}\n.md .tabbar .tab-link,\n.md .tabbar-labels .tab-link,\n.md .tabbar .link,\n.md .tabbar-labels .link {\n  padding-left: 0;\n  padding-right: 0;\n}\n.md .tabbar a.icon-only,\n.md .tabbar-labels a.icon-only {\n  flex-shrink: initial;\n}\n.md .tabbar .tab-link,\n.md .tabbar-labels .tab-link {\n  transition-duration: 300ms;\n  overflow: hidden;\n  position: relative;\n}\n.md .tabbar .tab-link-highlight,\n.md .tabbar-labels .tab-link-highlight {\n  position: absolute;\n  height: 2px;\n  background: var(--f7-tabbar-link-active-border-color, var(--f7-theme-color));\n  transition-duration: 300ms;\n  left: 0;\n}\n.md .tabbar-labels .tab-link,\n.md .tabbar-labels .link {\n  padding-top: 7px;\n  padding-bottom: 7px;\n}\n.md .tabbar-label {\n  max-width: 100%;\n  overflow: hidden;\n  line-height: 1.2;\n}\n.md .tabbar-scrollable .toolbar-inner {\n  overflow: auto;\n}\n.md .tabbar-scrollable .tab-link,\n.md .tabbar-scrollable .link {\n  padding: 0 16px;\n}\n.aurora .toolbar a.icon-only {\n  min-height: var(--f7-toolbar-height);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n}\n.aurora .tabbar .toolbar-inner,\n.aurora .tabbar-labels .toolbar-inner {\n  padding-left: 0;\n  padding-right: 0;\n}\n.aurora .tabbar .tab-link,\n.aurora .tabbar-labels .tab-link,\n.aurora .tabbar .link,\n.aurora .tabbar-labels .link {\n  transition-duration: 200ms;\n}\n.aurora .tabbar-labels .tab-link,\n.aurora .tabbar-labels .link {\n  padding-top: 5px;\n  padding-bottom: 5px;\n}\n.aurora .tabbar-labels .tab-link i + span,\n.aurora .tabbar-labels .link i + span {\n  margin: 0;\n}\n.aurora .tabbar-scrollable .toolbar-inner {\n  justify-content: flex-start;\n}\n.aurora .tabbar-scrollable .tab-link,\n.aurora .tabbar-scrollable .link {\n  padding: 0 16px;\n}\n/* === Subnavbar === */\n:root {\n  /*\n  --f7-subnavbar-bg-image: var(--f7-bars-bg-image);\n  --f7-subnavbar-bg-color: var(--f7-bars-bg-color);\n  --f7-subnavbar-bg-color-rgb: var(--f7-bars-bg-color-rgb);\n  --f7-subnavbar-border-color: var(--f7-bars-border-color);\n  --f7-subnavbar-link-color: var(--f7-bars-link-color);\n  --f7-subnavbar-text-color: var(--f7-bars-text-color);\n  */\n  --f7-subnavbar-title-line-height: 1.2;\n}\n.ios {\n  --f7-subnavbar-height: 44px;\n  --f7-subnavbar-inner-padding-left: 8px;\n  --f7-subnavbar-inner-padding-right: 8px;\n  --f7-subnavbar-title-font-size: 34px;\n  --f7-subnavbar-title-font-weight: 700;\n  --f7-subnavbar-title-letter-spacing: -0.03em;\n  --f7-subnavbar-title-margin-left: 8px;\n  --f7-subnavbar-shadow-image: none;\n  /*\n  --f7-subnavbar-link-height: var(--f7-subnavbar-height);\n  --f7-subnavbar-link-line-height: var(--f7-subnavbar-height);\n  */\n}\n.md {\n  --f7-subnavbar-height: 48px;\n  --f7-subnavbar-inner-padding-left: 16px;\n  --f7-subnavbar-inner-padding-right: 16px;\n  --f7-subnavbar-title-font-size: 20px;\n  --f7-subnavbar-title-font-weight: 500;\n  --f7-subnavbar-title-letter-spacing: 0;\n  --f7-subnavbar-title-margin-left: 0px;\n  --f7-subnavbar-shadow-image: var(--f7-bars-shadow-bottom-image);\n  /*\n  --f7-subnavbar-link-height: var(--f7-subnavbar-height);\n  --f7-subnavbar-link-line-height: var(--f7-subnavbar-height);\n  */\n}\n.aurora {\n  --f7-subnavbar-height: 38px;\n  --f7-subnavbar-inner-padding-left: 16px;\n  --f7-subnavbar-inner-padding-right: 16px;\n  --f7-subnavbar-title-font-size: 26px;\n  --f7-subnavbar-title-font-weight: bold;\n  --f7-subnavbar-title-letter-spacing: -0.03em;\n  --f7-subnavbar-title-margin-left: 0px;\n  --f7-subnavbar-shadow-image: none;\n  --f7-subnavbar-link-height: auto;\n  --f7-subnavbar-link-line-height: inherit;\n}\n.subnavbar {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 600;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-image: var(--f7-subnavbar-bg-image, var(--f7-bars-bg-image));\n  background-color: var(--f7-subnavbar-bg-color, var(--f7-bars-bg-color));\n  color: var(--f7-subnavbar-text-color, var(--f7-bars-text-color));\n}\n@supports (backdrop-filter: blur(20px)) {\n  .ios-translucent-bars .subnavbar {\n    background-color: rgba(var(--f7-subnavbar-bg-color-rgb, var(--f7-bars-bg-color-rgb)), var(--f7-bars-translucent-opacity));\n    backdrop-filter: saturate(180%) blur(var(--f7-bars-translucent-blur));\n  }\n}\n.subnavbar .subnavbar-title {\n  position: relative;\n  overflow: hidden;\n  text-overflow: ellpsis;\n  white-space: nowrap;\n  font-size: var(--f7-subnavbar-title-font-size);\n  font-weight: var(--f7-subnavbar-title-font-weight);\n  text-align: left;\n  display: inline-block;\n  line-height: var(--f7-subnavbar-title-line-height);\n  letter-spacing: var(--f7-subnavbar-title-letter-spacing);\n  margin-left: var(--f7-subnavbar-title-margin-left);\n}\n.subnavbar .left,\n.subnavbar .right {\n  flex-shrink: 0;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n.subnavbar .right:first-child {\n  position: absolute;\n  height: 100%;\n}\n.subnavbar a {\n  color: var(--f7-subnavbar-link-color, var(--f7-bars-link-color, var(--f7-theme-color)));\n}\n.subnavbar a.link {\n  line-height: var(--f7-subnavbar-link-line-height, var(--f7-subnavbar-height));\n  height: var(--f7-subnavbar-link-height, var(--f7-subnavbar-height));\n}\n.subnavbar a.icon-only {\n  min-width: var(--f7-subnavbar-height);\n}\n.subnavbar.no-hairline:after,\n.subnavbar.no-border:after {\n  display: none !important;\n}\n.subnavbar.no-shadow:before,\n.subnavbar.navbar-hidden:before {\n  display: none !important;\n}\n.subnavbar:after,\n.subnavbar:before {\n  backface-visibility: hidden;\n}\n.subnavbar:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-subnavbar-border-color, var(--f7-bars-border-color));\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.subnavbar:before {\n  content: '';\n  position: absolute;\n  right: 0;\n  width: 100%;\n  top: 100%;\n  bottom: auto;\n  height: 8px;\n  pointer-events: none;\n  background: var(--f7-subnavbar-shadow-image);\n}\n.subnavbar-inner {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  justify-content: space-between;\n  overflow: hidden;\n  padding: 0 calc(var(--f7-subnavbar-inner-padding-left) + var(--f7-safe-area-right)) 0 calc(var(--f7-subnavbar-inner-padding-right) + var(--f7-safe-area-left));\n}\n.subnavbar-inner.stacked {\n  display: none;\n}\n.navbar .subnavbar {\n  top: 100%;\n}\n.views > .subnavbar,\n.view > .subnavbar,\n.page > .subnavbar {\n  position: absolute;\n}\n.navbar ~ * .subnavbar,\n.navbars ~ * .subnavbar,\n.page-with-subnavbar .navbar ~ .subnavbar,\n.page-with-subnavbar .navbar ~ * .subnavbar,\n.navbar ~ .page-with-subnavbar:not(.no-navbar) .subnavbar,\n.navbar ~ .subnavbar,\n.navbars ~ .page-with-subnavbar:not(.no-navbar) .subnavbar,\n.navbars ~ .subnavbar {\n  top: calc(var(--f7-navbar-height) + var(--f7-safe-area-top));\n}\n.navbar ~ .page-with-navbar-large:not(.no-navbar) .subnavbar,\n.navbars ~ .page-with-navbar-large:not(.no-navbar) .subnavbar,\n.page-with-subnavbar.page-with-navbar-large .navbar ~ .subnavbar,\n.page-with-subnavbar.page-with-navbar-large .navbar ~ * .subnavbar,\n.navbar .title-large ~ .subnavbar {\n  top: calc(var(--f7-navbar-height) + var(--f7-navbar-large-title-height) + var(--f7-safe-area-top));\n  transform: translate3d(0, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0);\n}\n.page-with-subnavbar,\n.subnavbar ~ * {\n  --f7-page-subnavbar-offset: var(--f7-subnavbar-height);\n}\n.ios .subnavbar {\n  height: calc(var(--f7-subnavbar-height) + 1px);\n  margin-top: -1px;\n  padding-top: 1px;\n}\n.ios .subnavbar .title {\n  align-self: flex-start;\n  flex-shrink: 10;\n}\n.ios .subnavbar .left a + a,\n.ios .subnavbar .right a + a {\n  margin-left: 16px;\n}\n.ios .subnavbar .left {\n  margin-right: 10px;\n}\n.ios .subnavbar .right {\n  margin-left: 10px;\n}\n.ios .subnavbar .right:first-child {\n  right: 8px;\n}\n.ios .subnavbar a.link {\n  justify-content: flex-start;\n}\n.ios .subnavbar a.icon-only {\n  justify-content: center;\n  margin: 0;\n}\n.md .subnavbar {\n  height: var(--f7-subnavbar-height);\n}\n.md .subnavbar .right {\n  margin-left: auto;\n}\n.md .subnavbar .right:first-child {\n  right: 16px;\n}\n.md .subnavbar a.link {\n  justify-content: center;\n  padding: 0 16px;\n}\n.md .subnavbar a.link:before {\n  content: '';\n  width: 152%;\n  height: 152%;\n  position: absolute;\n  left: -26%;\n  top: -26%;\n  background-image: radial-gradient(circle at center, var(--f7-link-highlight-color) 66%, rgba(255, 255, 255, 0) 66%);\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 100% 100%;\n  opacity: 0;\n  pointer-events: none;\n  transition-duration: 600ms;\n}\n.md .subnavbar a.link.active-state:before {\n  opacity: 1;\n  transition-duration: 150ms;\n}\n.md .subnavbar a.icon-only {\n  flex-shrink: 0;\n}\n.md .subnavbar-inner > a.link:first-child {\n  margin-left: calc(-1 * var(--f7-subnavbar-inner-padding-left));\n}\n.md .subnavbar-inner > a.link:last-child {\n  margin-right: calc(-1 * var(--f7-subnavbar-inner-padding-right));\n}\n.aurora .subnavbar {\n  height: calc(var(--f7-subnavbar-height) + 1px);\n  margin-top: -1px;\n  padding-top: 1px;\n}\n.aurora .subnavbar .title {\n  align-self: flex-start;\n  flex-shrink: 10;\n}\n.aurora .subnavbar .left a + a,\n.aurora .subnavbar .right a + a {\n  margin-left: 10px;\n}\n.aurora .subnavbar .left {\n  margin-right: 10px;\n}\n.aurora .subnavbar .right {\n  margin-left: 10px;\n}\n.aurora .subnavbar .right:first-child {\n  right: 16px;\n}\n.aurora .subnavbar a.link {\n  justify-content: flex-start;\n}\n.aurora .subnavbar a.icon-only {\n  justify-content: center;\n  margin: 0;\n}\n/* === Content Block === */\n:root {\n  --f7-block-padding-horizontal: 16px;\n  --f7-block-padding-vertical: 16px;\n  --f7-block-font-size: inherit;\n  --f7-block-text-color: inherit;\n  --f7-block-header-margin: 10px;\n  --f7-block-footer-margin: 10px;\n  --f7-block-header-font-size: 14px;\n  --f7-block-footer-font-size: 14px;\n  --f7-block-title-text-transform: none;\n  --f7-block-title-white-space: nowrap;\n  --f7-block-title-medium-text-transform: none;\n  --f7-block-title-large-text-transform: none;\n  --f7-block-inset-side-margin: 16px;\n  --f7-block-title-medium-text-color: #000;\n  --f7-block-title-large-text-color: #000;\n  --f7-block-strong-bg-color: #fff;\n}\n:root .theme-dark,\n:root.theme-dark {\n  --f7-block-title-text-color: #fff;\n  --f7-block-strong-border-color: rgba(255, 255, 255, 0.15);\n  --f7-block-title-medium-text-color: #fff;\n  --f7-block-title-large-text-color: #fff;\n  --f7-block-strong-bg-color: #1c1c1d;\n}\n.ios {\n  --f7-block-margin-vertical: 35px;\n  --f7-block-strong-border-color: rgba(0, 0, 0, 0.22);\n  --f7-block-title-text-color: #000;\n  --f7-block-title-font-size: 16px;\n  --f7-block-title-font-weight: 600;\n  --f7-block-title-line-height: 20px;\n  --f7-block-title-margin-bottom: 10px;\n  --f7-block-title-medium-font-size: 22px;\n  --f7-block-title-medium-font-weight: bold;\n  --f7-block-title-medium-line-height: 1.4;\n  --f7-block-title-large-font-size: 30px;\n  --f7-block-title-large-font-weight: bold;\n  --f7-block-title-large-line-height: 1.3;\n  --f7-block-inset-border-radius: 8px;\n  --f7-block-strong-text-color: #000;\n  --f7-block-header-text-color: rgba(0, 0, 0, 0.45);\n  --f7-block-footer-text-color: rgba(0, 0, 0, 0.45);\n}\n.ios .theme-dark,\n.ios.theme-dark {\n  --f7-block-header-text-color: rgba(255, 255, 255, 0.55);\n  --f7-block-footer-text-color: rgba(255, 255, 255, 0.55);\n  --f7-block-strong-text-color: #fff;\n}\n.md {\n  --f7-block-margin-vertical: 32px;\n  --f7-block-strong-text-color: inherit;\n  --f7-block-strong-border-color: rgba(0, 0, 0, 0.12);\n  --f7-block-title-font-size: inherit;\n  --f7-block-title-text-color: rgba(0, 0, 0, 0.54);\n  --f7-block-title-font-weight: 500;\n  --f7-block-title-line-height: 16px;\n  --f7-block-title-margin-bottom: 16px;\n  --f7-block-title-medium-font-size: 24px;\n  --f7-block-title-medium-font-weight: 500;\n  --f7-block-title-medium-line-height: 1.3;\n  --f7-block-title-large-font-size: 34px;\n  --f7-block-title-large-font-weight: 500;\n  --f7-block-title-large-line-height: 1.2;\n  --f7-block-inset-border-radius: 4px;\n  --f7-block-header-text-color: rgba(0, 0, 0, 0.54);\n  --f7-block-footer-text-color: rgba(0, 0, 0, 0.54);\n}\n.md .theme-dark,\n.md.theme-dark {\n  --f7-block-header-text-color: rgba(255, 255, 255, 0.54);\n  --f7-block-footer-text-color: rgba(255, 255, 255, 0.54);\n}\n.aurora {\n  --f7-block-margin-vertical: 15px;\n  --f7-block-strong-border-color: rgba(0, 0, 0, 0.12);\n  --f7-block-title-font-size: inherit;\n  --f7-block-title-text-color: rgba(0, 0, 0, 0.7);\n  --f7-block-title-font-weight: 600;\n  --f7-block-title-line-height: 1.5;\n  --f7-block-title-margin-bottom: 5px;\n  --f7-block-title-medium-font-size: 20px;\n  --f7-block-title-medium-font-weight: 600;\n  --f7-block-title-medium-line-height: 1.4;\n  --f7-block-title-large-font-size: 28px;\n  --f7-block-title-large-font-weight: bold;\n  --f7-block-title-large-line-height: 1.3;\n  --f7-block-inset-border-radius: 4px;\n  --f7-block-strong-text-color: inherit;\n  --f7-block-header-text-color: rgba(0, 0, 0, 0.6);\n  --f7-block-footer-text-color: rgba(0, 0, 0, 0.6);\n}\n.aurora .theme-dark,\n.aurora.theme-dark {\n  --f7-block-header-text-color: rgba(255, 255, 255, 0.54);\n  --f7-block-footer-text-color: rgba(255, 255, 255, 0.54);\n  --f7-block-strong-text-color: #fff;\n}\n.block {\n  box-sizing: border-box;\n  position: relative;\n  z-index: 1;\n  color: var(--f7-block-text-color);\n  margin: var(--f7-block-margin-vertical) 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: calc(var(--f7-block-padding-horizontal) + var(--f7-safe-area-left));\n  padding-right: calc(var(--f7-block-padding-horizontal) + var(--f7-safe-area-right));\n  font-size: var(--f7-block-font-size);\n}\n.block.no-hairlines:before,\n.block.no-hairlines ul:before,\n.md .block.no-hairlines-md:before,\n.md .block.no-hairlines-md ul:before,\n.ios .block.no-hairlines-ios:before,\n.ios .block.no-hairlines-ios ul:before,\n.aurora .block.no-hairlines-aurora:before,\n.aurora .block.no-hairlines-aurora ul:before,\n.block.no-hairlines:after,\n.block.no-hairlines ul:after,\n.md .block.no-hairlines-md:after,\n.md .block.no-hairlines-md ul:after,\n.ios .block.no-hairlines-ios:after,\n.ios .block.no-hairlines-ios ul:after,\n.aurora .block.no-hairlines-aurora:after,\n.aurora .block.no-hairlines-aurora ul:after {\n  display: none !important;\n}\n.block.no-hairline-top:before,\n.block.no-hairline-top ul:before,\n.md .block.no-hairline-top-md:before,\n.md .block.no-hairline-top-md ul:before,\n.ios .block.no-hairline-top-ios:before,\n.ios .block.no-hairline-top-ios ul:before,\n.aurora .block.no-hairline-top-aurora:before,\n.aurora .block.no-hairline-top-aurora ul:before {\n  display: none !important;\n}\n.block.no-hairline-bottom:after,\n.block.no-hairline-bottom ul:after,\n.md .block.no-hairline-bottom-md:after,\n.md .block.no-hairline-bottom-md ul:after,\n.ios .block.no-hairline-bottom-ios:after,\n.ios .block.no-hairline-bottom-ios ul:after,\n.aurora .block.no-hairline-bottom-aurora:after,\n.aurora .block.no-hairline-bottom-aurora ul:after {\n  display: none !important;\n}\n.block > h1:first-child,\n.block > h2:first-child,\n.block > h3:first-child,\n.block > h4:first-child,\n.block > p:first-child {\n  margin-top: 0;\n}\n.block > h1:last-child,\n.block > h2:last-child,\n.block > h3:last-child,\n.block > h4:last-child,\n.block > p:last-child {\n  margin-bottom: 0;\n}\n.block-strong {\n  color: var(--f7-block-strong-text-color);\n  padding-top: var(--f7-block-padding-vertical);\n  padding-bottom: var(--f7-block-padding-vertical);\n  background-color: var(--f7-block-strong-bg-color);\n}\n.block-strong:before {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-block-strong-border-color);\n  display: block;\n  z-index: 15;\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 0%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.block-strong:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-block-strong-border-color);\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.block-title {\n  position: relative;\n  overflow: hidden;\n  margin: 0;\n  white-space: var(--f7-block-title-white-space);\n  text-overflow: ellipsis;\n  text-transform: var(--f7-block-title-text-transform);\n  color: var(--f7-block-title-text-color);\n  font-size: var(--f7-block-title-font-size, inherit);\n  font-weight: var(--f7-block-title-font-weight);\n  line-height: var(--f7-block-title-line-height);\n  margin-top: var(--f7-block-margin-vertical);\n  margin-bottom: var(--f7-block-title-margin-bottom);\n  margin-left: calc(var(--f7-block-padding-horizontal) + var(--f7-safe-area-left));\n  margin-right: calc(var(--f7-block-padding-horizontal) + var(--f7-safe-area-right));\n}\n.block-title + .list,\n.block-title + .block,\n.block-title + .card,\n.block-title + .timeline,\n.block-title + .block-header {\n  margin-top: 0px;\n}\n.block-title-medium {\n  font-size: var(--f7-block-title-medium-font-size);\n  text-transform: var(--f7-block-title-medium-text-transform);\n  color: var(--f7-block-title-medium-text-color);\n  font-weight: var(--f7-block-title-medium-font-weight);\n  line-height: var(--f7-block-title-medium-line-height);\n}\n.block-title-large {\n  font-size: var(--f7-block-title-large-font-size);\n  text-transform: var(--f7-block-title-large-text-transform);\n  color: var(--f7-block-title-large-text-color);\n  font-weight: var(--f7-block-title-large-font-weight);\n  line-height: var(--f7-block-title-large-line-height);\n}\n.block > .block-title:first-child,\n.list > .block-title:first-child {\n  margin-top: 0;\n  margin-left: 0;\n  margin-right: 0;\n}\n.block-header {\n  color: var(--f7-block-header-text-color);\n  font-size: var(--f7-block-header-font-size);\n  margin-bottom: var(--f7-block-header-margin);\n  margin-top: var(--f7-block-margin-vertical);\n}\n.block-header + .list,\n.block-header + .block,\n.block-header + .card,\n.block-header + .timeline {\n  margin-top: var(--f7-block-header-margin);\n}\n.block-footer {\n  color: var(--f7-block-footer-text-color);\n  font-size: var(--f7-block-footer-font-size);\n  margin-top: var(--f7-block-footer-margin);\n  margin-bottom: var(--f7-block-margin-vertical);\n}\n.block-footer,\n.block-header {\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: calc(var(--f7-block-padding-horizontal) + var(--f7-safe-area-left));\n  padding-right: calc(var(--f7-block-padding-horizontal) + var(--f7-safe-area-right));\n}\n.block-footer ul:first-child,\n.block-header ul:first-child,\n.block-footer p:first-child,\n.block-header p:first-child,\n.block-footer h1:first-child,\n.block-header h1:first-child,\n.block-footer h2:first-child,\n.block-header h2:first-child,\n.block-footer h3:first-child,\n.block-header h3:first-child,\n.block-footer h4:first-child,\n.block-header h4:first-child {\n  margin-top: 0;\n}\n.block-footer ul:last-child,\n.block-header ul:last-child,\n.block-footer p:last-child,\n.block-header p:last-child,\n.block-footer h1:last-child,\n.block-header h1:last-child,\n.block-footer h2:last-child,\n.block-header h2:last-child,\n.block-footer h3:last-child,\n.block-header h3:last-child,\n.block-footer h4:last-child,\n.block-header h4:last-child {\n  margin-bottom: 0;\n}\n.block-footer ul:first-child:last-child,\n.block-header ul:first-child:last-child,\n.block-footer p:first-child:last-child,\n.block-header p:first-child:last-child,\n.block-footer h1:first-child:last-child,\n.block-header h1:first-child:last-child,\n.block-footer h2:first-child:last-child,\n.block-header h2:first-child:last-child,\n.block-footer h3:first-child:last-child,\n.block-header h3:first-child:last-child,\n.block-footer h4:first-child:last-child,\n.block-header h4:first-child:last-child {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.list .block-header,\n.block .block-header,\n.card .block-header,\n.timeline .block-header {\n  margin-top: 0;\n}\n.list .block-footer,\n.block .block-footer,\n.card .block-footer,\n.timeline .block-footer {\n  margin-bottom: 0;\n}\n.list + .block-footer,\n.block + .block-footer,\n.card + .block-footer,\n.timeline + .block-footer {\n  margin-top: calc(-1 * (var(--f7-block-margin-vertical) - var(--f7-block-footer-margin)));\n}\n.block + .block-footer {\n  margin-top: calc(-1 * (var(--f7-block-margin-vertical) - var(--f7-block-footer-margin)));\n  margin-bottom: var(--f7-block-margin-vertical);\n}\n.block .block-header,\n.block .block-footer {\n  padding: 0;\n}\n.block.inset {\n  border-radius: var(--f7-block-inset-border-radius);\n  margin-left: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-left));\n  margin-right: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-right));\n  --f7-safe-area-left: 0px;\n  --f7-safe-area-right: 0px;\n}\n.block-strong.inset:before,\n.block-strong.inset:after {\n  display: none !important;\n}\n@media (min-width: 480px) {\n  .block.xsmall-inset {\n    border-radius: var(--f7-block-inset-border-radius);\n    margin-left: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-right));\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .block-strong.xsmall-inset:before,\n  .block-strong.xsmall-inset:after {\n    display: none !important;\n  }\n}\n@media (min-width: 568px) {\n  .block.small-inset {\n    border-radius: var(--f7-block-inset-border-radius);\n    margin-left: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-right));\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .block-strong.small-inset:before,\n  .block-strong.small-inset:after {\n    display: none !important;\n  }\n}\n@media (min-width: 768px) {\n  .block.medium-inset {\n    border-radius: var(--f7-block-inset-border-radius);\n    margin-left: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-right));\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .block-strong.medium-inset:before,\n  .block-strong.medium-inset:after {\n    display: none !important;\n  }\n}\n@media (min-width: 1024px) {\n  .block.large-inset {\n    border-radius: var(--f7-block-inset-border-radius);\n    margin-left: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-right));\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .block-strong.large-inset:before,\n  .block-strong.large-inset:after {\n    display: none !important;\n  }\n}\n@media (min-width: 1200px) {\n  .block.xlarge-inset {\n    border-radius: var(--f7-block-inset-border-radius);\n    margin-left: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-block-inset-side-margin) + var(--f7-safe-area-outer-right));\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .block-strong.xlarge-inset:before,\n  .block-strong.xlarge-inset:after {\n    display: none !important;\n  }\n}\n/* === List View === */\n:root {\n  --f7-list-inset-side-margin: 16px;\n  --f7-list-item-cell-margin: 16px;\n  --f7-list-item-padding-horizontal: 16px;\n  --f7-list-media-item-padding-horizontal: 16px;\n  --f7-list-item-text-max-lines: 2;\n  --f7-list-chevron-icon-font-size: 20px;\n  --f7-list-item-title-font-size: inherit;\n  --f7-list-item-title-font-weight: 400;\n  --f7-list-item-title-text-color: inherit;\n  --f7-list-item-title-line-height: inherit;\n  --f7-list-item-title-white-space: nowrap;\n  --f7-list-item-subtitle-font-weight: 400;\n  --f7-list-item-subtitle-text-color: inherit;\n  --f7-list-item-subtitle-line-height: inherit;\n  --f7-list-item-text-font-weight: 400;\n  --f7-list-item-after-font-weight: 400;\n  --f7-list-item-header-text-color: inherit;\n  --f7-list-item-header-font-size: 12px;\n  --f7-list-item-header-font-weight: 400;\n  --f7-list-item-header-line-height: 1.2;\n  --f7-list-item-footer-font-size: 12px;\n  --f7-list-item-footer-font-weight: 400;\n  --f7-list-item-footer-line-height: 1.2;\n  --f7-list-button-font-size: inherit;\n  --f7-list-button-font-weight: 400;\n  --f7-list-item-divider-line-height: inherit;\n  --f7-list-group-title-line-height: inherit;\n  --f7-list-bg-color: #fff;\n  --f7-list-chevron-icon-color: rgba(0, 0, 0, 0.2);\n}\n:root .theme-dark,\n:root.theme-dark {\n  --f7-list-button-border-color: rgba(255, 255, 255, 0.15);\n  --f7-list-bg-color: #1c1c1d;\n  --f7-list-border-color: rgba(255, 255, 255, 0.15);\n  --f7-list-item-border-color: rgba(255, 255, 255, 0.15);\n  --f7-list-item-divider-border-color: rgba(255, 255, 255, 0.15);\n  --f7-list-item-divider-bg-color: #232323;\n  --f7-list-group-title-bg-color: #232323;\n  --f7-list-chevron-icon-color: rgba(255, 255, 255, 0.3);\n}\n.ios {\n  --f7-list-in-list-padding-left: 30px;\n  --f7-list-inset-border-radius: 8px;\n  --f7-list-margin-vertical: 35px;\n  --f7-list-font-size: 17px;\n  --f7-list-chevron-icon-area: 20px;\n  --f7-list-border-color: rgba(0, 0, 0, 0.22);\n  --f7-list-item-border-color: rgba(0, 0, 0, 0.22);\n  --f7-list-link-pressed-bg-color: rgba(0, 0, 0, 0.15);\n  --f7-list-item-subtitle-font-size: 15px;\n  --f7-list-item-text-font-size: 15px;\n  --f7-list-item-text-line-height: 21px;\n  --f7-list-item-after-font-size: inherit;\n  --f7-list-item-after-line-height: inherit;\n  --f7-list-item-after-padding: 5px;\n  --f7-list-item-min-height: 44px;\n  --f7-list-item-media-margin: 16px;\n  --f7-list-item-media-icons-margin: 5px;\n  --f7-list-item-padding-vertical: 8px;\n  --f7-list-media-item-padding-vertical: 10px;\n  --f7-list-media-item-title-font-weight: 600;\n  /*\n  --f7-list-button-text-color: var(--f7-theme-color);\n  */\n  --f7-list-button-text-align: center;\n  --f7-list-button-border-color: rgba(0, 0, 0, 0.22);\n  --f7-list-item-divider-height: 31px;\n  --f7-list-item-divider-font-size: inherit;\n  --f7-list-item-divider-font-weight: 400;\n  --f7-list-item-divider-bg-color: rgba(0, 0, 0, 0.03);\n  --f7-list-item-divider-border-color: rgba(0, 0, 0, 0.22);\n  --f7-list-group-title-height: 31px;\n  --f7-list-group-title-font-size: inherit;\n  --f7-list-group-title-font-weight: 400;\n  --f7-list-group-title-bg-color: #f7f7f7;\n  --f7-list-item-after-text-color: rgba(0, 0, 0, 0.45);\n  --f7-list-item-footer-text-color: rgba(0, 0, 0, 0.45);\n  --f7-list-item-text-text-color: rgba(0, 0, 0, 0.45);\n  --f7-list-item-divider-text-color: rgba(0, 0, 0, 0.45);\n  --f7-list-group-title-text-color: rgba(0, 0, 0, 0.45);\n  --f7-list-button-pressed-bg-color: rgba(0, 0, 0, 0.15);\n}\n.ios .theme-dark,\n.ios.theme-dark {\n  --f7-list-item-after-text-color: rgba(255, 255, 255, 0.55);\n  --f7-list-item-header-text-color: rgba(255, 255, 255, 0.55);\n  --f7-list-item-footer-text-color: rgba(255, 255, 255, 0.55);\n  --f7-list-item-text-text-color: rgba(255, 255, 255, 0.55);\n  --f7-list-item-divider-text-color: rgba(255, 255, 255, 0.55);\n  --f7-list-group-title-text-color: rgba(255, 255, 255, 0.55);\n  --f7-list-link-pressed-bg-color: rgba(255, 255, 255, 0.08);\n  --f7-list-button-pressed-bg-color: rgba(255, 255, 255, 0.08);\n}\n.md {\n  --f7-list-in-list-padding-left: 40px;\n  --f7-list-inset-border-radius: 4px;\n  --f7-list-margin-vertical: 32px;\n  --f7-list-font-size: 16px;\n  --f7-list-chevron-icon-area: 26px;\n  --f7-list-border-color: rgba(0, 0, 0, 0.12);\n  --f7-list-item-border-color: rgba(0, 0, 0, 0.12);\n  --f7-list-item-subtitle-font-size: 14px;\n  --f7-list-item-text-font-size: 14px;\n  --f7-list-item-text-line-height: 20px;\n  --f7-list-item-after-font-size: 14px;\n  --f7-list-item-after-line-height: inherit;\n  --f7-list-item-after-padding: 8px;\n  --f7-list-item-min-height: 48px;\n  --f7-list-item-media-margin: 16px;\n  --f7-list-item-media-icons-margin: 8px;\n  --f7-list-item-padding-vertical: 8px;\n  --f7-list-media-item-padding-vertical: 14px;\n  /*\n  --f7-list-media-item-title-font-weight: var(--f7-list-item-title-font-weight);\n  */\n  --f7-list-button-text-align: left;\n  --f7-list-button-border-color: transparent;\n  --f7-list-item-divider-height: 48px;\n  --f7-list-item-divider-font-size: 14px;\n  --f7-list-item-divider-font-weight: 400;\n  --f7-list-item-divider-bg-color: #f4f4f4;\n  --f7-list-item-divider-border-color: transparent;\n  --f7-list-group-title-height: 48px;\n  --f7-list-group-title-font-size: 14px;\n  --f7-list-group-title-font-weight: 400;\n  --f7-list-group-title-bg-color: #f4f4f4;\n  --f7-list-link-pressed-bg-color: rgba(0, 0, 0, 0.1);\n  --f7-list-item-text-text-color: rgba(0, 0, 0, 0.54);\n  --f7-list-item-after-text-color: rgba(0, 0, 0, 0.54);\n  --f7-list-item-footer-text-color: rgba(0, 0, 0, 0.5);\n  --f7-list-button-text-color: #212121;\n  --f7-list-button-pressed-bg-color: rgba(0, 0, 0, 0.1);\n  --f7-list-item-divider-text-color: rgba(0, 0, 0, 0.54);\n  --f7-list-group-title-text-color: rgba(0, 0, 0, 0.54);\n}\n.md .theme-dark,\n.md.theme-dark {\n  --f7-list-button-text-color: #fff;\n  --f7-list-item-divider-text-color: #fff;\n  --f7-list-group-title-text-color: #fff;\n  --f7-list-link-pressed-bg-color: rgba(255, 255, 255, 0.05);\n  --f7-list-button-pressed-bg-color: rgba(255, 255, 255, 0.05);\n  --f7-list-item-text-text-color: rgba(255, 255, 255, 0.54);\n  --f7-list-item-after-text-color: rgba(255, 255, 255, 0.54);\n  --f7-list-item-footer-text-color: rgba(255, 255, 255, 0.54);\n}\n.aurora {\n  --f7-list-in-list-padding-left: 16px;\n  --f7-list-inset-border-radius: 4px;\n  --f7-list-margin-vertical: 15px;\n  --f7-list-font-size: 14px;\n  --f7-list-chevron-icon-area: 15px;\n  --f7-list-chevron-icon-font-size: 16px;\n  --f7-list-border-color: rgba(0, 0, 0, 0.12);\n  --f7-list-item-border-color: rgba(0, 0, 0, 0.12);\n  --f7-list-item-title-line-height: 1.3;\n  --f7-list-item-subtitle-font-size: 14px;\n  --f7-list-item-subtitle-line-height: 1.3;\n  --f7-list-item-text-font-size: 12px;\n  --f7-list-item-text-line-height: 16px;\n  --f7-list-item-after-font-size: 13px;\n  --f7-list-item-after-line-height: 1.2;\n  --f7-list-item-after-padding: 5px;\n  --f7-list-item-min-height: 32px;\n  --f7-list-item-media-margin: 10px;\n  --f7-list-item-media-icons-margin: 5px;\n  --f7-list-item-padding-vertical: 5px;\n  --f7-list-media-item-padding-vertical: 5px;\n  --f7-list-media-item-title-font-weight: 600;\n  /*\n  --f7-list-button-text-color: var(--f7-theme-color);\n  */\n  --f7-list-button-text-align: center;\n  --f7-list-button-border-color: rgba(0, 0, 0, 0.12);\n  --f7-list-item-divider-height: 19px;\n  --f7-list-item-divider-font-size: inherit;\n  --f7-list-item-divider-font-weight: 500;\n  --f7-list-item-divider-bg-color: rgba(0, 0, 0, 0.03);\n  --f7-list-item-divider-border-color: transparent;\n  --f7-list-group-title-height: 19px;\n  --f7-list-group-title-font-size: inherit;\n  --f7-list-group-title-font-weight: 500;\n  --f7-list-group-title-bg-color: #f7f7f7;\n  --f7-list-link-pressed-bg-color: rgba(0, 0, 0, 0.1);\n  --f7-list-link-hover-bg-color: rgba(0, 0, 0, 0.03);\n  --f7-list-item-text-text-color: rgba(0, 0, 0, 0.6);\n  --f7-list-item-after-text-color: rgba(0, 0, 0, 0.5);\n  --f7-list-item-footer-text-color: rgba(0, 0, 0, 0.6);\n  --f7-list-button-pressed-bg-color: rgba(0, 0, 0, 0.1);\n  --f7-list-button-hover-bg-color: rgba(0, 0, 0, 0.03);\n  --f7-list-item-divider-text-color: rgba(0, 0, 0, 0.6);\n  --f7-list-group-title-text-color: rgba(0, 0, 0, 0.6);\n}\n.aurora .theme-dark,\n.aurora.theme-dark {\n  --f7-list-item-text-text-color: rgba(255, 255, 255, 0.54);\n  --f7-list-item-after-text-color: rgba(255, 255, 255, 0.54);\n  --f7-list-item-footer-text-color: rgba(255, 255, 255, 0.54);\n  --f7-list-item-divider-text-color: rgba(255, 255, 255, 0.6);\n  --f7-list-group-title-text-color: rgba(255, 255, 255, 0.6);\n  --f7-list-link-pressed-bg-color: rgba(255, 255, 255, 0.05);\n  --f7-list-link-hover-bg-color: rgba(255, 255, 255, 0.03);\n  --f7-list-button-pressed-bg-color: rgba(255, 255, 255, 0.05);\n  --f7-list-button-hover-bg-color: rgba(255, 255, 255, 0.03);\n}\n:root {\n  --f7-list-chevron-icon-left: 'chevron_left';\n  --f7-list-chevron-icon-right: 'chevron_right';\n}\n.aurora {\n  --f7-list-chevron-icon-left: 'chevron_left_aurora';\n  --f7-list-chevron-icon-right: 'chevron_right_aurora';\n}\n.list {\n  position: relative;\n  z-index: 1;\n  font-size: var(--f7-list-font-size);\n  margin: var(--f7-list-margin-vertical) 0;\n}\n.list ul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  position: relative;\n  background: var(--f7-list-bg-color);\n}\n.list ul:before {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-list-border-color);\n  display: block;\n  z-index: 15;\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 0%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.list ul:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-list-border-color);\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.list ul ul {\n  padding-left: calc(var(--f7-list-item-padding-horizontal) + var(--f7-list-in-list-padding-left));\n}\n.list ul ul:before,\n.list ul ul:after {\n  display: none !important;\n}\n.list li {\n  position: relative;\n  box-sizing: border-box;\n}\n.list .item-media {\n  display: flex;\n  flex-shrink: 0;\n  flex-wrap: nowrap;\n  align-items: center;\n  box-sizing: border-box;\n  padding-bottom: var(--f7-list-item-padding-vertical);\n  padding-top: var(--f7-list-item-padding-vertical);\n}\n.list .item-media + .item-inner {\n  margin-left: var(--f7-list-item-media-margin);\n}\n.list .item-media i + i,\n.list .item-media i + img {\n  margin-left: var(--f7-list-item-media-icons-margin);\n}\n.list .item-after {\n  padding-left: var(--f7-list-item-after-padding);\n}\n.list .item-inner {\n  position: relative;\n  width: 100%;\n  min-width: 0;\n  display: flex;\n  justify-content: space-between;\n  box-sizing: border-box;\n  align-items: center;\n  align-self: stretch;\n  padding-top: var(--f7-list-item-padding-vertical);\n  padding-bottom: var(--f7-list-item-padding-vertical);\n  min-height: var(--f7-list-item-min-height);\n  padding-right: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n}\n.list .item-title {\n  min-width: 0;\n  flex-shrink: 1;\n  white-space: var(--f7-list-item-title-white-space);\n  position: relative;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  font-size: var(--f7-list-item-title-font-size);\n  font-weight: var(--f7-list-item-title-font-weight);\n  color: var(--f7-list-item-title-text-color);\n  line-height: var(--f7-list-item-title-line-height);\n}\n.list .item-after {\n  white-space: nowrap;\n  flex-shrink: 0;\n  display: flex;\n  font-size: var(--f7-list-item-after-font-size);\n  font-weight: var(--f7-list-item-after-font-weight);\n  color: var(--f7-list-item-after-text-color);\n  line-height: var(--f7-list-item-after-line-height);\n  margin-left: auto;\n}\n.list .item-header,\n.list .item-footer {\n  white-space: normal;\n}\n.list .item-header {\n  color: var(--f7-list-item-header-text-color);\n  font-size: var(--f7-list-item-header-font-size);\n  font-weight: var(--f7-list-item-header-font-weight);\n  line-height: var(--f7-list-item-header-line-height);\n}\n.list .item-footer {\n  color: var(--f7-list-item-footer-text-color);\n  font-size: var(--f7-list-item-footer-font-size);\n  font-weight: var(--f7-list-item-footer-font-weight);\n  line-height: var(--f7-list-item-footer-line-height);\n}\n.list .item-link,\n.list .list-button {\n  transition-duration: 300ms;\n  transition-property: background-color;\n  display: block;\n  position: relative;\n  overflow: hidden;\n  z-index: 0;\n}\n.list .item-link {\n  color: inherit;\n}\n.list .item-link.active-state {\n  background-color: var(--f7-list-link-pressed-bg-color);\n}\n.list .item-link .item-inner {\n  padding-right: calc(var(--f7-list-chevron-icon-area) + var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n}\n.list .item-content {\n  display: flex;\n  justify-content: space-between;\n  box-sizing: border-box;\n  align-items: center;\n  min-height: var(--f7-list-item-min-height);\n  padding-left: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-left));\n}\n.list .item-subtitle {\n  position: relative;\n  overflow: hidden;\n  white-space: nowrap;\n  max-width: 100%;\n  text-overflow: ellipsis;\n  font-size: var(--f7-list-item-subtitle-font-size);\n  font-weight: var(--f7-list-item-subtitle-font-weight);\n  color: var(--f7-list-item-subtitle-text-color);\n  line-height: var(--f7-list-item-subtitle-line-height);\n}\n.list .item-text {\n  position: relative;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  /* autoprefixer: ignore next */\n  -webkit-line-clamp: var(--f7-list-item-text-max-lines);\n  /* autoprefixer: ignore next */\n  -webkit-box-orient: vertical;\n  display: -webkit-box;\n  font-size: var(--f7-list-item-text-font-size);\n  font-weight: var(--f7-list-item-text-font-weight);\n  color: var(--f7-list-item-text-text-color);\n  line-height: var(--f7-list-item-text-line-height);\n  max-height: calc(var(--f7-list-item-text-line-height) * var(--f7-list-item-text-max-lines));\n}\n.list .item-title-row {\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  box-sizing: border-box;\n}\n.list .item-title-row .item-after {\n  align-self: center;\n}\n.list .item-row {\n  display: flex;\n  justify-content: space-between;\n  box-sizing: border-box;\n}\n.list .item-cell {\n  display: block;\n  align-self: center;\n  box-sizing: border-box;\n  width: 100%;\n  min-width: 0;\n  margin-left: var(--f7-list-item-cell-margin);\n  flex-shrink: 1;\n}\n.list .item-cell:first-child {\n  margin-left: 0;\n}\n.list .ripple-wave + .item-cell {\n  margin-left: 0;\n}\n.list li:last-child .list-button:after {\n  display: none !important;\n}\n.list li:last-child > .item-inner:after,\n.list li:last-child li:last-child > .item-inner:after,\n.list li:last-child > .item-content > .item-inner:after,\n.list li:last-child li:last-child > .item-content > .item-inner:after,\n.list li:last-child > .swipeout-content > .item-content > .item-inner:after,\n.list li:last-child li:last-child > .swipeout-content > .item-content > .item-inner:after,\n.list li:last-child > .item-link > .item-content > .item-inner:after,\n.list li:last-child li:last-child > .item-link > .item-content > .item-inner:after {\n  display: none !important;\n}\n.list li li:last-child .item-inner:after,\n.list li:last-child li .item-inner:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-list-item-border-color);\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.list.no-hairlines:before,\n.list.no-hairlines ul:before,\n.md .list.no-hairlines-md:before,\n.md .list.no-hairlines-md ul:before,\n.ios .list.no-hairlines-ios:before,\n.ios .list.no-hairlines-ios ul:before,\n.aurora .list.no-hairlines-aurora:before,\n.aurora .list.no-hairlines-aurora ul:before,\n.list.no-hairlines:after,\n.list.no-hairlines ul:after,\n.md .list.no-hairlines-md:after,\n.md .list.no-hairlines-md ul:after,\n.ios .list.no-hairlines-ios:after,\n.ios .list.no-hairlines-ios ul:after,\n.aurora .list.no-hairlines-aurora:after,\n.aurora .list.no-hairlines-aurora ul:after {\n  display: none !important;\n}\n.list.no-hairline-top:before,\n.list.no-hairline-top ul:before,\n.md .list.no-hairline-top-md:before,\n.md .list.no-hairline-top-md ul:before,\n.ios .list.no-hairline-top-ios:before,\n.ios .list.no-hairline-top-ios ul:before,\n.aurora .list.no-hairline-top-aurora:before,\n.aurora .list.no-hairline-top-aurora ul:before {\n  display: none !important;\n}\n.list.no-hairline-bottom:after,\n.list.no-hairline-bottom ul:after,\n.md .list.no-hairline-bottom-md:after,\n.md .list.no-hairline-bottom-md ul:after,\n.ios .list.no-hairline-bottom-ios:after,\n.ios .list.no-hairline-bottom-ios ul:after,\n.aurora .list.no-hairline-bottom-aurora:after,\n.aurora .list.no-hairline-bottom-aurora ul:after {\n  display: none !important;\n}\n.list.no-hairlines-between .item-inner:after,\n.md .list.no-hairlines-between-md .item-inner:after,\n.ios .list.no-hairlines-between-ios .item-inner:after,\n.aurora .list.no-hairlines-between-aurora .item-inner:after,\n.list.no-hairlines-between .list-button:after,\n.md .list.no-hairlines-between-md .list-button:after,\n.ios .list.no-hairlines-between-ios .list-button:after,\n.aurora .list.no-hairlines-between-aurora .list-button:after,\n.list.no-hairlines-between .item-divider:after,\n.md .list.no-hairlines-between-md .item-divider:after,\n.ios .list.no-hairlines-between-ios .item-divider:after,\n.aurora .list.no-hairlines-between-aurora .item-divider:after,\n.list.no-hairlines-between .list-group-title:after,\n.md .list.no-hairlines-between-md .list-group-title:after,\n.ios .list.no-hairlines-between-ios .list-group-title:after,\n.aurora .list.no-hairlines-between-aurora .list-group-title:after,\n.list.no-hairlines-between .list-group-title:after,\n.md .list.no-hairlines-between-md .list-group-title:after,\n.ios .list.no-hairlines-between-ios .list-group-title:after,\n.aurora .list.no-hairlines-between-aurora .list-group-title:after {\n  display: none !important;\n}\n.list.no-hairlines-between.simple-list li:after,\n.md .list.no-hairlines-between-md.simple-list li:after,\n.ios .list.no-hairlines-between-ios.simple-list li:after,\n.aurora .list.no-hairlines-between-aurora.simple-list li:after {\n  display: none !important;\n}\n.list.no-hairlines-between.links-list a:after,\n.md .list.no-hairlines-between-md.links-list a:after,\n.ios .list.no-hairlines-between-ios.links-list a:after,\n.aurora .list.no-hairlines-between-aurora.links-list a:after {\n  display: none !important;\n}\n.list-button {\n  padding: 0 var(--f7-list-item-padding-horizontal);\n  line-height: var(--f7-list-item-min-height);\n  color: var(--f7-list-button-text-color, var(--f7-theme-color));\n  font-size: var(--f7-list-button-font-size);\n  font-weight: var(--f7-list-button-font-weight);\n  text-align: var(--f7-list-button-text-align);\n}\n.list-button:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-list-button-border-color);\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.list-button.active-state {\n  background-color: var(--f7-list-button-pressed-bg-color);\n}\n.list-button[class*=\"color-\"] {\n  --f7-list-button-text-color: var(--f7-theme-color);\n}\n.simple-list li {\n  position: relative;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  align-content: center;\n  line-height: var(--f7-list-item-min-height);\n  height: var(--f7-list-item-min-height);\n  padding-left: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-left));\n  padding-right: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n}\n.simple-list li:after {\n  left: var(--f7-list-item-padding-horizontal);\n  width: auto;\n  left: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-left));\n  right: 0;\n}\n.simple-list li:last-child:after {\n  display: none !important;\n}\n.links-list li {\n  z-index: 1;\n}\n.links-list a {\n  transition-duration: 300ms;\n  transition-property: background-color;\n  display: block;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  align-content: center;\n  justify-content: space-between;\n  box-sizing: border-box;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  height: var(--f7-list-item-min-height);\n  color: inherit;\n}\n.links-list a .ripple-wave {\n  z-index: 0;\n}\n.links-list a:after {\n  width: auto;\n}\n.links-list a.active-state {\n  background-color: var(--f7-list-link-pressed-bg-color);\n}\n.links-list a {\n  padding-left: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-left));\n  padding-right: calc(var(--f7-list-chevron-icon-area) + var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n}\n.links-list a:after {\n  left: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-left));\n  right: 0;\n}\n.links-list li:last-child a:after {\n  display: none !important;\n}\n.simple-list li:after,\n.links-list a:after,\n.list .item-inner:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-list-item-border-color);\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.media-list,\nli.media-item {\n  --f7-list-item-padding-vertical: var(--f7-list-media-item-padding-vertical);\n  --f7-list-item-padding-horizontal: var(--f7-list-media-item-padding-horizontal);\n}\n.media-list .item-title,\nli.media-item .item-title {\n  font-weight: var(--f7-list-media-item-title-font-weight, var(--f7-list-item-title-font-weight, inherit));\n}\n.media-list .item-inner,\nli.media-item .item-inner {\n  display: block;\n  align-self: stretch;\n}\n.media-list .item-media,\nli.media-item .item-media {\n  align-self: flex-start;\n}\n.media-list .item-media img,\nli.media-item .item-media img {\n  display: block;\n}\n.media-list .item-link .item-inner,\nli.media-item .item-link .item-inner {\n  padding-right: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n}\n.media-list .item-link .item-title-row,\nli.media-item .item-link .item-title-row {\n  padding-right: calc(var(--f7-list-chevron-icon-area));\n}\n.media-list.chevron-center .item-link .item-inner,\n.media-list .chevron-center .item-link .item-inner,\n.media-list .item-link.chevron-center .item-inner,\nli.media-item.chevron-center .item-link .item-inner,\nli.media-item .item-link.chevron-center .item-inner,\nli.media-item .chevron-center .item-link .item-inner {\n  padding-right: calc(var(--f7-list-chevron-icon-area) + var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n}\n.media-list.chevron-center .item-title-row,\n.media-list .chevron-center .item-title-row,\nli.media-item.chevron-center .item-title-row,\nli.media-item .chevron-center .item-title-row {\n  padding-right: 0;\n}\n.list .item-link .item-inner:before,\n.links-list a:before,\n.media-list .item-link .item-title-row:before,\nli.media-item .item-link .item-title-row:before,\n.media-list.chevron-center .item-link .item-inner:before,\n.media-list .chevron-center .item-link .item-inner:before,\n.media-list .item-link.chevron-center .item-inner:before,\nli.media-item.chevron-center .item-link .item-inner:before,\nli.media-item .chevron-center .item-link .item-inner:before,\nli.media-item .item-link.chevron-center .item-inner:before {\n  font-family: 'framework7-core-icons';\n  font-weight: normal;\n  font-style: normal;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  -moz-osx-font-smoothing: grayscale;\n  font-feature-settings: \"liga\";\n  text-align: center;\n  display: block;\n  width: 100%;\n  height: 100%;\n  font-size: 20px;\n  position: absolute;\n  top: 50%;\n  width: 8px;\n  height: 14px;\n  margin-top: -7px;\n  font-size: var(--f7-list-chevron-icon-font-size);\n  line-height: 14px;\n  color: var(--f7-list-chevron-icon-color);\n  pointer-events: none;\n  right: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n  content: var(--f7-list-chevron-icon-right);\n}\n.media-list.chevron-center .item-title-row:before,\n.media-list .chevron-center .item-title-row:before,\nli.media-item.chevron-center .item-title-row:before,\nli.media-item .chevron-center .item-title-row:before {\n  display: none;\n}\n.media-list .item-link .item-inner:before,\nli.media-item .item-link .item-inner:before {\n  display: none;\n}\n.media-list .item-link .item-title-row:before,\nli.media-item .item-link .item-title-row:before {\n  right: 0;\n}\n.list-group ul:after,\n.list-group ul:before {\n  z-index: 25 !important;\n}\n.list-group + .list-group ul:before {\n  display: none !important;\n}\nli.item-divider,\n.item-divider,\nli.list-group-title {\n  white-space: nowrap;\n  position: relative;\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  z-index: 15;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-left));\n  padding-right: calc(var(--f7-list-item-padding-horizontal) + var(--f7-safe-area-right));\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  align-content: center;\n}\nli.item-divider:after,\n.item-divider:after,\nli.list-group-title:after {\n  display: none !important;\n}\nli.item-divider,\n.item-divider {\n  margin-top: -1px;\n  height: var(--f7-list-item-divider-height);\n  color: var(--f7-list-item-divider-text-color);\n  font-size: var(--f7-list-item-divider-font-size);\n  font-weight: var(--f7-list-item-divider-font-weight);\n  background-color: var(--f7-list-item-divider-bg-color);\n  line-height: var(--f7-list-item-divider-line-height);\n}\nli.item-divider:before,\n.item-divider:before {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-list-item-divider-border-color);\n  display: block;\n  z-index: 15;\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 0%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\nli.list-group-title,\n.list li.list-group-title {\n  position: relative;\n  position: sticky;\n  top: 0;\n  margin-top: 0;\n  z-index: 20;\n  height: var(--f7-list-group-title-height);\n  color: var(--f7-list-group-title-text-color);\n  font-size: var(--f7-list-group-title-font-size);\n  font-weight: var(--f7-list-group-title-font-weight);\n  background-color: var(--f7-list-group-title-bg-color);\n  line-height: var(--f7-list-group-title-line-height);\n}\n.page-with-navbar-large li.list-group-title,\n.page-with-navbar-large .list li.list-group-title {\n  top: calc(-1 * var(--f7-navbar-large-title-height));\n}\n.list.inset {\n  margin-left: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-left));\n  margin-right: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-right));\n  border-radius: var(--f7-list-inset-border-radius);\n  --f7-safe-area-left: 0px;\n  --f7-safe-area-right: 0px;\n}\n.list.inset .block-title {\n  margin-left: 0;\n  margin-right: 0;\n}\n.list.inset ul {\n  border-radius: var(--f7-list-inset-border-radius);\n}\n.list.inset ul:before,\n.list.inset ul:after {\n  display: none !important;\n}\n.list.inset li.swipeout:first-child,\n.list.inset li:first-child > a {\n  border-radius: var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius) 0 0;\n}\n.list.inset li.swipeout:last-child,\n.list.inset li:last-child > a {\n  border-radius: 0 0 var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius);\n}\n.list.inset li.swipeout:first-child:last-child,\n.list.inset li:first-child:last-child > a {\n  border-radius: var(--f7-list-inset-border-radius);\n}\n@media (min-width: 480px) {\n  .list.xsmall-inset {\n    margin-left: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-right));\n    border-radius: var(--f7-list-inset-border-radius);\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .list.xsmall-inset .block-title {\n    margin-left: 0;\n    margin-right: 0;\n  }\n  .list.xsmall-inset ul {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n  .list.xsmall-inset ul:before,\n  .list.xsmall-inset ul:after {\n    display: none !important;\n  }\n  .list.xsmall-inset li:first-child > a {\n    border-radius: var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius) 0 0;\n  }\n  .list.xsmall-inset li:last-child > a {\n    border-radius: 0 0 var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius);\n  }\n  .list.xsmall-inset li:first-child:last-child > a {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n}\n@media (min-width: 568px) {\n  .list.small-inset {\n    margin-left: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-right));\n    border-radius: var(--f7-list-inset-border-radius);\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .list.small-inset .block-title {\n    margin-left: 0;\n    margin-right: 0;\n  }\n  .list.small-inset ul {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n  .list.small-inset ul:before,\n  .list.small-inset ul:after {\n    display: none !important;\n  }\n  .list.small-inset li:first-child > a {\n    border-radius: var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius) 0 0;\n  }\n  .list.small-inset li:last-child > a {\n    border-radius: 0 0 var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius);\n  }\n  .list.small-inset li:first-child:last-child > a {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n}\n@media (min-width: 768px) {\n  .list.medium-inset {\n    margin-left: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-right));\n    border-radius: var(--f7-list-inset-border-radius);\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .list.medium-inset .block-title {\n    margin-left: 0;\n    margin-right: 0;\n  }\n  .list.medium-inset ul {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n  .list.medium-inset ul:before,\n  .list.medium-inset ul:after {\n    display: none !important;\n  }\n  .list.medium-inset li:first-child > a {\n    border-radius: var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius) 0 0;\n  }\n  .list.medium-inset li:last-child > a {\n    border-radius: 0 0 var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius);\n  }\n  .list.medium-inset li:first-child:last-child > a {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n}\n@media (min-width: 1024px) {\n  .list.large-inset {\n    margin-left: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-right));\n    border-radius: var(--f7-list-inset-border-radius);\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .list.large-inset .block-title {\n    margin-left: 0;\n    margin-right: 0;\n  }\n  .list.large-inset ul {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n  .list.large-inset ul:before,\n  .list.large-inset ul:after {\n    display: none !important;\n  }\n  .list.large-inset li:first-child > a {\n    border-radius: var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius) 0 0;\n  }\n  .list.large-inset li:last-child > a {\n    border-radius: 0 0 var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius);\n  }\n  .list.large-inset li:first-child:last-child > a {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n}\n@media (min-width: 1200px) {\n  .list.xlarge-inset {\n    margin-left: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-left));\n    margin-right: calc(var(--f7-list-inset-side-margin) + var(--f7-safe-area-outer-right));\n    border-radius: var(--f7-list-inset-border-radius);\n    --f7-safe-area-left: 0px;\n    --f7-safe-area-right: 0px;\n  }\n  .list.xlarge-inset .block-title {\n    margin-left: 0;\n    margin-right: 0;\n  }\n  .list.xlarge-inset ul {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n  .list.xlarge-inset ul:before,\n  .list.xlarge-inset ul:after {\n    display: none !important;\n  }\n  .list.xlarge-inset li:first-child > a {\n    border-radius: var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius) 0 0;\n  }\n  .list.xlarge-inset li:last-child > a {\n    border-radius: 0 0 var(--f7-list-inset-border-radius) var(--f7-list-inset-border-radius);\n  }\n  .list.xlarge-inset li:first-child:last-child > a {\n    border-radius: var(--f7-list-inset-border-radius);\n  }\n}\n.list.no-chevron,\n.list .no-chevron {\n  --f7-list-chevron-icon-color: transparent;\n  --f7-list-chevron-icon-area: 0px;\n}\n.ios .item-link.active-state .item-inner:after,\n.ios .list-button.active-state:after,\n.ios .links-list a.active-state:after {\n  background-color: transparent;\n}\n.ios .links-list a.active-state,\n.ios .list .item-link.active-state,\n.ios .list .list-button.active-state {\n  transition-duration: 0ms;\n}\n.md .list .item-media {\n  min-width: 40px;\n}\n.aurora .list .item-media {\n  min-width: 18px;\n}\n.aurora .links-list a,\n.aurora .list .item-link,\n.aurora .list .list-button {\n  transition-duration: 0ms;\n}\n.aurora.device-desktop .links-list a:hover:not(.active-state):not(.no-hover),\n.aurora.device-desktop .list .item-link:hover:not(.active-state):not(.no-hover) {\n  background: var(--f7-list-link-hover-bg-color);\n}\n.aurora.device-desktop .list .list-button:hover:not(.active-state):not(.no-hover) {\n  background: var(--f7-list-button-hover-bg-color);\n}\n/* === Badge === */\n:root {\n  --f7-badge-text-color: #fff;\n  --f7-badge-bg-color: #8e8e93;\n  --f7-badge-padding: 0 4px;\n  --f7-badge-in-icon-size: 16px;\n  --f7-badge-in-icon-font-size: 10px;\n  --f7-badge-font-weight: normal;\n  --f7-badge-font-size: 12px;\n}\n.ios {\n  --f7-badge-size: 20px;\n}\n.md {\n  --f7-badge-size: 18px;\n}\n.aurora {\n  --f7-badge-size: 18px;\n  --f7-badge-font-weight: 600;\n  --f7-badge-in-icon-size: 15px;\n}\n.badge {\n  display: inline-flex;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  color: var(--f7-badge-text-color);\n  background: var(--f7-badge-bg-color);\n  position: relative;\n  box-sizing: border-box;\n  text-align: center;\n  vertical-align: middle;\n  font-weight: var(--f7-badge-font-weight);\n  font-size: var(--f7-badge-font-size);\n  border-radius: var(--f7-badge-size);\n  padding: var(--f7-badge-padding);\n  height: var(--f7-badge-size);\n  min-width: var(--f7-badge-size);\n}\n.icon .badge,\n.f7-icons .badge,\n.framework7-icons .badge,\n.material-icons .badge {\n  position: absolute;\n  left: 100%;\n  margin-left: -10px;\n  top: -2px;\n  font-family: var(--f7-font-family);\n  --f7-badge-font-size: var(--f7-badge-in-icon-font-size);\n  --f7-badge-size: var(--f7-badge-in-icon-size);\n}\n.badge[class*=\"color-\"] {\n  --f7-badge-bg-color: var(--f7-theme-color);\n}\n:root {\n  --f7-button-min-width: 32px;\n  --f7-button-bg-color: transparent;\n  --f7-button-border-width: 0px;\n  /*\n  --f7-button-text-color: var(--f7-theme-color);\n  --f7-button-pressed-text-color: var(--f7-button-text-color, var(--f7-theme-color));\n  --f7-button-border-color: var(--f7-theme-color);\n  --f7-button-fill-text-color: #fff;\n  --f7-button-fill-bg-color: var(--f7-theme-color);\n  --f7-button-outline-border-color: var(--f7-theme-color);\n  */\n  --f7-button-outline-border-width: 2px;\n  --f7-button-raised-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0,0,0,0.24);\n  --f7-button-raised-pressed-box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0,0,0,0.23);\n  --f7-segmented-raised-divider-color: rgba(0, 0, 0, 0.1);\n  --f7-segmented-strong-padding: 2px;\n  --f7-segmented-strong-between-buttons: 4px;\n  --f7-segmented-strong-button-font-weight: 500;\n  --f7-segmented-strong-button-active-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);\n  --f7-segmented-strong-bg-color: rgba(0, 0, 0, 0.07);\n  --f7-segmented-strong-button-text-color: #000;\n  --f7-segmented-strong-button-pressed-bg-color: rgba(0, 0, 0, 0.07);\n  --f7-segmented-strong-button-hover-bg-color: rgba(0, 0, 0, 0.04);\n  --f7-segmented-strong-button-active-text-color: #000;\n  --f7-segmented-strong-button-active-bg-color: #fff;\n}\n:root .theme-dark,\n:root.theme-dark {\n  --f7-segmented-strong-bg-color: rgba(255, 255, 255, 0.1);\n  --f7-segmented-strong-button-pressed-bg-color: rgba(255, 255, 255, 0.04);\n  --f7-segmented-strong-button-hover-bg-color: rgba(255, 255, 255, 0.02);\n  --f7-segmented-strong-button-active-bg-color: rgba(255, 255, 255, 0.14);\n  --f7-segmented-strong-button-text-color: #fff;\n  --f7-segmented-strong-button-active-text-color: #fff;\n}\n.ios {\n  --f7-button-font-size: 13px;\n  --f7-button-height: 28px;\n  --f7-button-padding-horizontal: 10px;\n  --f7-button-border-radius: 5px;\n  --f7-button-font-weight: 600;\n  --f7-button-letter-spacing: 0;\n  --f7-button-text-transform: uppercase;\n  /*\n  --f7-button-pressed-bg-color: rgba(var(--f7-theme-color-rgb), .15);\n  --f7-button-fill-pressed-bg-color: var(--f7-theme-color-tint);\n  */\n  --f7-button-large-height: 44px;\n  --f7-button-large-font-size: 17px;\n  --f7-button-large-font-weight: 500;\n  --f7-button-large-text-transform: none;\n  --f7-button-small-height: 26px;\n  --f7-button-small-font-size: 13px;\n  --f7-button-small-font-weight: 600;\n  --f7-button-small-text-transform: uppercase;\n  --f7-button-small-outline-border-width: 2px;\n  --f7-segmented-strong-button-text-transform: none;\n  --f7-segmented-strong-button-active-font-weight: 600;\n}\n.md {\n  --f7-button-font-size: 14px;\n  --f7-button-height: 36px;\n  --f7-button-padding-horizontal: 8px;\n  --f7-button-border-radius: 4px;\n  --f7-button-font-weight: 500;\n  --f7-button-letter-spacing: 0.03em;\n  --f7-button-text-transform: uppercase;\n  /*\n  --f7-button-fill-pressed-bg-color: var(--f7-theme-color-shade);\n  */\n  --f7-button-large-height: 48px;\n  --f7-button-large-font-size: 14px;\n  --f7-button-large-font-weight: 500;\n  --f7-button-large-text-transform: uppercase;\n  --f7-button-small-height: 28px;\n  --f7-button-small-font-size: 12px;\n  --f7-button-small-font-weight: 500;\n  --f7-button-small-text-transform: uppercase;\n  --f7-button-small-outline-border-width: 2px;\n  --f7-segmented-strong-button-text-transform: uppercase;\n  --f7-segmented-strong-button-active-font-weight: 500;\n  --f7-button-pressed-bg-color: rgba(0, 0, 0, 0.1);\n}\n.md .theme-dark,\n.md.theme-dark {\n  --f7-button-pressed-bg-color: rgba(255, 255, 255, 0.1);\n}\n.aurora {\n  /*\n  --f7-button-hover-bg-color: rgba(var(--f7-theme-color-rgb), .07);\n  --f7-button-fill-hover-bg-color: var(--f7-theme-color-tint);\n  */\n  --f7-button-font-size: 14px;\n  --f7-button-height: 28px;\n  --f7-button-min-width: 24px;\n  --f7-button-padding-horizontal: 10px;\n  --f7-button-border-radius: 4px;\n  --f7-button-font-weight: 500;\n  --f7-button-letter-spacing: 0.02;\n  --f7-button-text-transform: none;\n  /*\n  --f7-button-pressed-bg-color: rgba(var(--f7-theme-color-rgb), .15);\n  --f7-button-fill-pressed-bg-color: var(--f7-theme-color-shade);\n  */\n  --f7-button-large-height: 34px;\n  --f7-button-large-font-size: 14px;\n  --f7-button-large-font-weight: 600;\n  --f7-button-large-text-transform: none;\n  --f7-button-small-height: 24px;\n  --f7-button-small-font-size: 12px;\n  --f7-button-small-font-weight: 600;\n  --f7-button-small-text-transform: none;\n  --f7-button-small-outline-border-width: 1px;\n  --f7-segmented-strong-button-text-transform: none;\n  --f7-segmented-strong-button-active-font-weight: 600;\n}\nbutton {\n  appearance: none;\n  width: 100%;\n}\n.button {\n  text-decoration: none;\n  text-align: center;\n  display: block;\n  appearance: none;\n  background: none;\n  margin: 0;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  position: relative;\n  overflow: hidden;\n  font-family: inherit;\n  cursor: pointer;\n  outline: 0;\n  box-sizing: border-box;\n  vertical-align: middle;\n  justify-content: center;\n  align-items: center;\n  border: var(--f7-button-border-width, 0px) solid var(--f7-button-border-color, var(--f7-theme-color));\n  font-size: var(--f7-button-font-size);\n  color: var(--f7-button-text-color, var(--f7-theme-color));\n  height: var(--f7-button-height);\n  line-height: calc(var(--f7-button-height) - var(--f7-button-border-width, 0) * 2);\n  padding: var(--f7-button-padding-vertical, 0px) var(--f7-button-padding-horizontal);\n  border-radius: var(--f7-button-border-radius);\n  min-width: var(--f7-button-min-width);\n  font-weight: var(--f7-button-font-weight);\n  letter-spacing: var(--f7-button-letter-spacing);\n  text-transform: var(--f7-button-text-transform);\n  background-color: var(--f7-button-bg-color);\n  box-shadow: var(--f7-button-box-shadow);\n}\n.button.active-state {\n  background-color: var(--f7-button-pressed-bg-color, rgba(var(--f7-theme-color-rgb), 0.15));\n  color: var(--f7-button-pressed-text-color, var(--f7-button-text-color, var(--f7-theme-color)));\n}\ninput[type=\"submit\"].button,\ninput[type=\"button\"].button {\n  width: 100%;\n}\n.button > i + span,\n.button > span + span,\n.button > span + i,\n.button > i + i {\n  margin-left: 4px;\n}\n.subnavbar .button,\n.navbar .button,\n.toolbar .button,\n.searchbar .button,\n.appbar .button {\n  color: var(--f7-button-text-color, var(--f7-theme-color));\n}\n.button-round,\n.ios .button-round-ios,\n.md .button-round-md,\n.aurora .button-round-aurora {\n  --f7-button-border-radius: var(--f7-button-height);\n}\n.button-fill,\n.ios .button-fill-ios,\n.md .button-fill-md,\n.aurora .button-fill-aurora,\n.button-active,\n.button.tab-link-active {\n  --f7-button-bg-color: var(--f7-button-fill-bg-color, var(--f7-theme-color));\n  --f7-button-text-color: var(--f7-button-fill-text-color, #fff);\n  --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n}\n.button-fill,\n.ios .button-fill-ios,\n.md .button-fill-md,\n.aurora .button-fill-aurora {\n  --f7-button-pressed-bg-color: var(--f7-button-fill-pressed-bg-color);\n}\n.button-active,\n.button.tab-link-active {\n  --f7-button-pressed-bg-color: var(--f7-button-bg-color);\n}\n.button-outline,\n.ios .button-outline-ios,\n.md .button-outline-md,\n.aurora .button-outline-aurora {\n  --f7-button-border-color: var(--f7-button-outline-border-color, var(--f7-theme-color));\n  --f7-button-border-width: var(--f7-button-outline-border-width);\n}\n.button-large,\n.ios .button-large-ios,\n.md .button-large-md,\n.aurora .button-large-aurora {\n  --f7-button-height: var(--f7-button-large-height);\n  --f7-button-font-size: var(--f7-button-large-font-size);\n  --f7-button-font-weight: var(--f7-button-large-font-weight);\n  --f7-button-text-transform: var(--f7-button-large-text-transform);\n}\n.button-small,\n.ios .button-small-ios,\n.md .button-small-md,\n.aurora .button-small-aurora {\n  --f7-button-outline-border-width: var(--f7-button-small-outline-border-width);\n  --f7-button-height: var(--f7-button-small-height);\n  --f7-button-font-size: var(--f7-button-small-font-size);\n  --f7-button-font-weight: var(--f7-button-small-font-weight);\n  --f7-button-text-transform: var(--f7-button-small-text-transform);\n}\n.ios .button-small.button-fill,\n.ios .button-small-ios.button-fill,\n.ios .button-small.button-fill-ios {\n  --f7-button-border-width: var(--f7-button-small-outline-border-width);\n  --f7-button-pressed-text-color: var(--f7-theme-color);\n  --f7-button-pressed-bg-color: transparent;\n}\n.segmented {\n  align-self: center;\n  display: flex;\n  flex-wrap: nowrap;\n  border-radius: var(--f7-button-border-radius);\n  box-shadow: var(--f7-button-box-shadow);\n  box-sizing: border-box;\n}\n.segmented .button,\n.segmented button {\n  width: 100%;\n  flex-shrink: 1;\n  min-width: 0;\n  border-radius: 0;\n}\n.segmented .button:first-child {\n  border-radius: var(--f7-button-border-radius) 0 0 var(--f7-button-border-radius);\n}\n.segmented .button:not(.button-outline):first-child {\n  border-left: none;\n}\n.segmented .button.button-outline:nth-child(n + 2) {\n  border-left: none;\n}\n.segmented .button:last-child {\n  border-radius: 0 var(--f7-button-border-radius) var(--f7-button-border-radius) 0;\n}\n.segmented .button-round:first-child {\n  border-radius: var(--f7-button-height) 0 0 var(--f7-button-height);\n}\n.segmented .button-round:last-child {\n  border-radius: 0 var(--f7-button-height) var(--f7-button-height) 0;\n}\n.segmented .button:first-child:last-child {\n  border-radius: var(--f7-button-border-radius);\n}\n.segmented-raised,\n.ios .segmented-raised-ios,\n.md .segmented-raised-md,\n.aurora .segmented-raised-aurora {\n  box-shadow: var(--f7-button-raised-box-shadow);\n}\n.segmented-raised .button:not(.button-outline),\n.ios .segmented-raised-ios .button:not(.button-outline),\n.md .segmented-raised-md .button:not(.button-outline),\n.aurora .segmented-raised-aurora .button:not(.button-outline) {\n  border-left: 1px solid var(--f7-segmented-raised-divider-color);\n}\n.button-raised,\n.ios .button-raised-ios,\n.md .button-raised-md,\n.aurora .button-raised-aurora {\n  --f7-button-box-shadow: var(--f7-button-raised-box-shadow);\n}\n.button-raised.active-state,\n.ios .button-raised-ios.active-state,\n.md .button-raised-md.active-state,\n.aurora .button-raised-aurora.active-state {\n  --f7-button-box-shadow: var(--f7-button-raised-pressed-box-shadow);\n}\n.segmented-strong,\n.ios .segmented-strong-ios,\n.md .segmented-strong-md,\n.aurora .segmented-strong-aurora {\n  --f7-button-bg-color: transparent;\n  --f7-button-hover-bg-color: var(--f7-segmented-strong-button-hover-bg-color);\n  --f7-button-text-color: var(--f7-segmented-strong-button-text-color);\n  --f7-button-font-weight: var(--f7-segmented-strong-button-font-weight);\n  --f7-button-text-transform: var(--f7-segmented-strong-button-text-transform);\n  --f7-button-pressed-bg-color: var(--f7-segmented-strong-button-pressed-bg-color);\n  position: relative;\n  background: var(--f7-segmented-strong-bg-color);\n  border-radius: calc(var(--f7-button-border-radius) + 2px);\n  box-shadow: none;\n  padding: var(--f7-segmented-strong-padding);\n  overflow: hidden;\n}\n.segmented-strong .button,\n.ios .segmented-strong-ios .button,\n.md .segmented-strong-md .button,\n.aurora .segmented-strong-aurora .button {\n  z-index: 1;\n  transform: translate3d(0, 0, 0);\n}\n.segmented-strong .button,\n.ios .segmented-strong-ios .button,\n.md .segmented-strong-md .button,\n.aurora .segmented-strong-aurora .button,\n.segmented-strong .button:first-child,\n.ios .segmented-strong-ios .button:first-child,\n.md .segmented-strong-md .button:first-child,\n.aurora .segmented-strong-aurora .button:first-child,\n.segmented-strong .button:last-child,\n.ios .segmented-strong-ios .button:last-child,\n.md .segmented-strong-md .button:last-child,\n.aurora .segmented-strong-aurora .button:last-child {\n  border-radius: var(--f7-button-border-radius);\n}\n.segmented-strong .button + .button,\n.ios .segmented-strong-ios .button + .button,\n.md .segmented-strong-md .button + .button,\n.aurora .segmented-strong-aurora .button + .button {\n  margin-left: var(--f7-segmented-strong-between-buttons);\n}\n.segmented-strong .button.button-active,\n.ios .segmented-strong-ios .button.button-active,\n.md .segmented-strong-md .button.button-active,\n.aurora .segmented-strong-aurora .button.button-active,\n.segmented-strong .button.tab-link-active,\n.ios .segmented-strong-ios .button.tab-link-active,\n.md .segmented-strong-md .button.tab-link-active,\n.aurora .segmented-strong-aurora .button.tab-link-active {\n  --f7-button-hover-bg-color: transparent;\n  --f7-button-bg-color: transparent;\n  --f7-button-text-color: var(--f7-segmented-strong-button-active-text-color);\n  --f7-button-font-weight: var(--f7-segmented-strong-button-active-font-weight);\n}\n.segmented-strong .segmented-highlight,\n.ios .segmented-strong-ios .segmented-highlight,\n.md .segmented-strong-md .segmented-highlight,\n.aurora .segmented-strong-aurora .segmented-highlight {\n  --f7-segmented-highlight-num: 1;\n  --f7-segmented-highlight-active: 0;\n  --f7-segmented-highlight-padding: calc(var(--f7-segmented-strong-padding) * 2);\n  --f7-segmented-highlight-between: var(--f7-segmented-strong-between-buttons);\n  --f7-segmented-highlight-width: calc((100% - var(--f7-segmented-highlight-padding) - var(--f7-segmented-highlight-between) * (var(--f7-segmented-highlight-num) - 1)) / var(--f7-segmented-highlight-num));\n  position: absolute;\n  background-color: var(--f7-segmented-strong-button-active-bg-color);\n  border-radius: var(--f7-button-border-radius);\n  box-shadow: var(--f7-segmented-strong-button-active-box-shadow);\n  left: var(--f7-segmented-strong-padding);\n  top: var(--f7-segmented-strong-padding);\n  height: calc(100% - var(--f7-segmented-strong-padding) * 2);\n  width: var(--f7-segmented-highlight-width);\n  z-index: 0;\n  transform: translateX(calc(var(--f7-segmented-highlight-active) * 100% + var(--f7-segmented-highlight-active) * var(--f7-segmented-highlight-between)));\n  transition: 200ms;\n}\n.button:nth-child(2) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 2;\n}\n.button:nth-child(3) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 3;\n}\n.button:nth-child(4) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 4;\n}\n.button:nth-child(5) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 5;\n}\n.button:nth-child(6) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 6;\n}\n.button:nth-child(7) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 7;\n}\n.button:nth-child(8) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 8;\n}\n.button:nth-child(9) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 9;\n}\n.button:nth-child(10) ~ .segmented-highlight {\n  --f7-segmented-highlight-num: 10;\n}\n.button-active:nth-child(2) ~ .segmented-highlight,\n.tab-link-active:nth-child(2) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 1;\n}\n.button-active:nth-child(3) ~ .segmented-highlight,\n.tab-link-active:nth-child(3) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 2;\n}\n.button-active:nth-child(4) ~ .segmented-highlight,\n.tab-link-active:nth-child(4) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 3;\n}\n.button-active:nth-child(5) ~ .segmented-highlight,\n.tab-link-active:nth-child(5) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 4;\n}\n.button-active:nth-child(6) ~ .segmented-highlight,\n.tab-link-active:nth-child(6) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 5;\n}\n.button-active:nth-child(7) ~ .segmented-highlight,\n.tab-link-active:nth-child(7) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 6;\n}\n.button-active:nth-child(8) ~ .segmented-highlight,\n.tab-link-active:nth-child(8) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 7;\n}\n.button-active:nth-child(9) ~ .segmented-highlight,\n.tab-link-active:nth-child(9) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 8;\n}\n.button-active:nth-child(10) ~ .segmented-highlight,\n.tab-link-active:nth-child(10) ~ .segmented-highlight {\n  --f7-segmented-highlight-active: 9;\n}\n.segmented-round,\n.ios .segmented-round-ios,\n.md .segmented-round-md,\n.aurora .segmented-round-aurora {\n  border-radius: var(--f7-button-height);\n}\n.segmented-round .segmented-highlight,\n.ios .segmented-round-ios .segmented-highlight,\n.md .segmented-round-md .segmented-highlight,\n.aurora .segmented-round-aurora .segmented-highlight {\n  border-radius: var(--f7-button-height);\n}\n.subnavbar .segmented {\n  width: 100%;\n}\n.ios .button {\n  transition-duration: 100ms;\n}\n.ios .button-fill,\n.ios .button-fill-ios {\n  --f7-button-pressed-bg-color: var(--f7-button-fill-pressed-bg-color, var(--f7-theme-color-tint));\n}\n.ios .button-small,\n.ios .button-small-ios {\n  transition-duration: 200ms;\n}\n.md .button {\n  transition-duration: 300ms;\n  transform: translate3d(0, 0, 0);\n}\n.md .button-fill,\n.md .button-fill-md {\n  --f7-button-pressed-bg-color: var(--f7-button-fill-pressed-bg-color, var(--f7-theme-color-shade));\n}\n.aurora .button {\n  transition-duration: 100ms;\n  transform: translate3d(0, 0, 0);\n}\n.aurora.device-desktop .button:not(.active-state):not(.no-hover):hover {\n  background-color: var(--f7-button-hover-bg-color, rgba(var(--f7-theme-color-rgb), 0.07));\n}\n.aurora .button-fill,\n.aurora .button-fill-aurora {\n  --f7-button-pressed-bg-color: var(--f7-button-fill-pressed-bg-color, var(--f7-theme-color-shade));\n}\n.aurora .button-fill,\n.aurora .button-active,\n.aurora .button.tab-link-active,\n.aurora .button-fill-aurora {\n  --f7-button-hover-bg-color: var(--f7-button-fill-hover-bg-color, var(--f7-theme-color-tint));\n}\n/* === Touch Ripple === */\n:root {\n  --f7-touch-ripple-black: rgba(0, 0, 0, 0.1);\n  --f7-touch-ripple-white: rgba(255, 255, 255, 0.3);\n  --f7-touch-ripple-color: var(--f7-touch-ripple-black);\n}\n.theme-dark {\n  --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n}\n.ripple,\n.fab a,\n.link,\n.item-link,\n.list-button,\n.button,\n.dialog-button,\n.tab-link,\n.radio,\n.checkbox,\n.actions-button,\n.speed-dial-buttons a {\n  -webkit-user-select: none;\n  user-select: none;\n}\n.ripple-wave {\n  left: 0;\n  top: 0;\n  position: absolute !important;\n  border-radius: 50%;\n  pointer-events: none;\n  z-index: -1;\n  padding: 0;\n  margin: 0;\n  font-size: 0;\n  transform: translate3d(0px, 0px, 0) scale(0);\n  transition-duration: 1400ms;\n  background-color: var(--f7-touch-ripple-color);\n}\n.ripple-wave.ripple-wave-fill {\n  transition-duration: 300ms;\n  opacity: 0.35;\n}\n.ripple-wave.ripple-wave-out {\n  transition-duration: 600ms;\n  opacity: 0;\n}\n.button-fill .ripple-wave,\n.picker-calendar-day .ripple-wave,\n.menu .ripple-wave {\n  z-index: 1;\n}\n.checkbox .ripple-wave,\n.radio .ripple-wave,\n.data-table .sortable-cell .ripple-wave {\n  z-index: 0;\n}\n[class*=\"ripple-color-\"] {\n  --f7-touch-ripple-color: var(--f7-theme-color-ripple-color);\n}\n/* === Icon === */\n.f7-icons,\n.material-icons {\n  width: 1em;\n  height: 1em;\n}\ni.icon {\n  display: inline-block;\n  vertical-align: middle;\n  background-size: 100% auto;\n  background-position: center;\n  background-repeat: no-repeat;\n  font-style: normal;\n  position: relative;\n}\n.icon-back:after,\n.icon-prev:after,\n.icon-forward:after,\n.icon-next:after {\n  font-family: 'framework7-core-icons';\n  font-weight: normal;\n  font-style: normal;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  -moz-osx-font-smoothing: grayscale;\n  font-feature-settings: \"liga\";\n  text-align: center;\n  display: block;\n  width: 100%;\n  height: 100%;\n  font-size: 20px;\n}\n.icon[class*=\"color-\"] {\n  color: var(--f7-theme-color);\n}\n.ios .icon-back,\n.ios .icon-prev,\n.ios .icon-forward,\n.ios .icon-next {\n  width: 12px;\n  height: 20px;\n  line-height: 20px;\n}\n.ios .icon-back:after,\n.ios .icon-prev:after,\n.ios .icon-forward:after,\n.ios .icon-next:after {\n  line-height: inherit;\n}\n.ios .icon-prev:after,\n.ios .icon-next:after {\n  font-size: 16px;\n}\n.ios .icon-back:after,\n.ios .icon-prev:after {\n  content: 'chevron_left_ios';\n}\n.ios .icon-forward:after,\n.ios .icon-next:after {\n  content: 'chevron_right_ios';\n}\n.md .icon-back,\n.md .icon-forward,\n.md .icon-next,\n.md .icon-prev {\n  width: 24px;\n  height: 24px;\n}\n.md .icon-back:after,\n.md .icon-forward:after,\n.md .icon-next:after,\n.md .icon-prev:after {\n  line-height: 1.2;\n}\n.md .icon-back:after {\n  content: 'arrow_left_md';\n}\n.md .icon-forward:after {\n  content: 'arrow_right_md';\n}\n.md .icon-next:after {\n  content: 'chevron_right_md';\n}\n.md .icon-prev:after {\n  content: 'chevron_left_md';\n}\n.aurora .f7-icons,\n.aurora .material-icons {\n  font-size: 18px;\n}\n.aurora .icon-back,\n.aurora .icon-prev,\n.aurora .icon-forward,\n.aurora .icon-next {\n  width: 9px;\n  height: 14px;\n  line-height: 14px;\n}\n.aurora .icon-back:after,\n.aurora .icon-prev:after,\n.aurora .icon-forward:after,\n.aurora .icon-next:after {\n  line-height: inherit;\n}\n.aurora .icon-back:after,\n.aurora .icon-prev:after {\n  content: 'chevron_left_aurora';\n}\n.aurora .icon-forward:after,\n.aurora .icon-next:after {\n  content: 'chevron_right_aurora';\n}\n.custom-modal-backdrop {\n  z-index: 10500;\n}\n.custom-modal-backdrop,\n.actions-backdrop,\n.dialog-backdrop,\n.popover-backdrop,\n.popup-backdrop,\n.preloader-backdrop,\n.sheet-backdrop,\n.fab-backdrop {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  z-index: 13000;\n  visibility: hidden;\n  opacity: 0;\n  transition-duration: 400ms;\n}\n.custom-modal-backdrop.not-animated,\n.actions-backdrop.not-animated,\n.dialog-backdrop.not-animated,\n.popover-backdrop.not-animated,\n.popup-backdrop.not-animated,\n.preloader-backdrop.not-animated,\n.sheet-backdrop.not-animated,\n.fab-backdrop.not-animated {\n  transition-duration: 0ms;\n}\n.custom-modal-backdrop.backdrop-in,\n.actions-backdrop.backdrop-in,\n.dialog-backdrop.backdrop-in,\n.popover-backdrop.backdrop-in,\n.popup-backdrop.backdrop-in,\n.preloader-backdrop.backdrop-in,\n.sheet-backdrop.backdrop-in,\n.fab-backdrop.backdrop-in {\n  visibility: visible;\n  opacity: 1;\n}\n/* === Card === */\n:root {\n  --f7-card-content-padding-horizontal: 16px;\n  --f7-card-content-padding-vertical: 16px;\n  --f7-card-border-radius: 4px;\n  --f7-card-font-size: inherit;\n  --f7-card-header-text-color: inherit;\n  --f7-card-header-font-weight: 400;\n  --f7-card-header-padding-horizontal: 16px;\n  --f7-card-footer-font-weight: 400;\n  --f7-card-footer-font-size: inherit;\n  --f7-card-footer-padding-horizontal: 16px;\n  --f7-card-expandable-font-size: 16px;\n  --f7-card-expandable-tablet-width: 670px;\n  --f7-card-expandable-tablet-height: 670px;\n  --f7-card-bg-color: #fff;\n  --f7-card-outline-border-color: rgba(0, 0, 0, 0.12);\n  --f7-card-header-border-color: rgba(0, 0, 0, 0.1);\n  --f7-card-footer-border-color: rgba(0, 0, 0, 0.1);\n  --f7-card-expandable-bg-color: #fff;\n}\n:root .theme-dark,\n:root.theme-dark {\n  --f7-card-bg-color: #1c1c1d;\n  --f7-card-expandable-bg-color: #1c1c1d;\n  --f7-card-outline-border-color: rgba(255, 255, 255, 0.15);\n  --f7-card-header-border-color: rgba(255, 255, 255, 0.15);\n  --f7-card-footer-border-color: rgba(255, 255, 255, 0.15);\n  --f7-card-footer-text-color: rgba(255, 255, 255, 0.55);\n}\n.ios {\n  --f7-card-margin-horizontal: 10px;\n  --f7-card-margin-vertical: 10px;\n  --f7-card-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2);\n  --f7-card-header-font-size: 17px;\n  --f7-card-header-padding-vertical: 10px;\n  --f7-card-header-min-height: 44px;\n  --f7-card-footer-text-color: rgba(0, 0, 0, 0.45);\n  --f7-card-footer-padding-vertical: 10px;\n  --f7-card-footer-min-height: 44px;\n  --f7-card-expandable-margin-horizontal: 20px;\n  --f7-card-expandable-margin-vertical: 30px;\n  --f7-card-expandable-box-shadow: 0px 20px 40px rgba(0, 0, 0, 0.3);\n  --f7-card-expandable-border-radius: 15px;\n  --f7-card-expandable-tablet-border-radius: 5px;\n  --f7-card-expandable-header-font-size: 27px;\n  --f7-card-expandable-header-font-weight: bold;\n}\n.md {\n  --f7-card-margin-horizontal: 8px;\n  --f7-card-margin-vertical: 8px;\n  --f7-card-box-shadow: var(--f7-elevation-1);\n  --f7-card-header-font-size: 16px;\n  --f7-card-header-padding-vertical: 4px;\n  --f7-card-header-min-height: 48px;\n  --f7-card-footer-text-color: rgba(0, 0, 0, 0.54);\n  --f7-card-footer-padding-vertical: 4px;\n  --f7-card-footer-min-height: 48px;\n  --f7-card-expandable-margin-horizontal: 12px;\n  --f7-card-expandable-margin-vertical: 24px;\n  --f7-card-expandable-box-shadow: var(--f7-elevation-10);\n  --f7-card-expandable-border-radius: 8px;\n  --f7-card-expandable-tablet-border-radius: 4px;\n  --f7-card-expandable-header-font-size: 24px;\n  --f7-card-expandable-header-font-weight: 500;\n}\n.aurora {\n  --f7-card-margin-horizontal: 10px;\n  --f7-card-margin-vertical: 10px;\n  --f7-card-box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.15);\n  --f7-card-header-font-size: 14px;\n  --f7-card-header-font-weight: bold;\n  --f7-card-header-padding-vertical: 10px;\n  --f7-card-header-min-height: 38px;\n  --f7-card-footer-text-color: rgba(0, 0, 0, 0.6);\n  --f7-card-footer-padding-vertical: 10px;\n  --f7-card-footer-min-height: 38px;\n  --f7-card-expandable-margin-horizontal: 10px;\n  --f7-card-expandable-margin-vertical: 20px;\n  --f7-card-expandable-box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.15);\n  --f7-card-expandable-border-radius: 15px;\n  --f7-card-expandable-tablet-border-radius: 5px;\n  --f7-card-expandable-header-font-size: 27px;\n  --f7-card-expandable-header-font-weight: bold;\n}\n.cards-list > ul:before,\n.card .list > ul:before,\n.cards-list > ul:after,\n.card .list > ul:after {\n  display: none !important;\n}\n.cards-list ul,\n.card .list ul {\n  background: none;\n}\n.card {\n  background: var(--f7-card-bg-color);\n  position: relative;\n  border-radius: var(--f7-card-border-radius);\n  font-size: var(--f7-card-font-size);\n  margin-top: var(--f7-card-margin-vertical);\n  margin-bottom: var(--f7-card-margin-vertical);\n  margin-left: calc(var(--f7-card-margin-horizontal) + var(--f7-safe-area-left));\n  margin-right: calc(var(--f7-card-margin-horizontal) + var(--f7-safe-area-right));\n  box-shadow: var(--f7-card-box-shadow);\n}\n.card .list,\n.card .block {\n  margin: 0;\n}\n.row:not(.no-gap) .col > .card {\n  margin-left: 0;\n  margin-right: 0;\n}\n.card.no-shadow {\n  box-shadow: none;\n}\n.card-outline,\n.ios .card-outline-ios,\n.md .card-outline-md,\n.aurora .card-outline-aurora {\n  box-shadow: none;\n  border: 1px solid var(--f7-card-outline-border-color);\n}\n.card-outline.no-border,\n.ios .card-outline-ios.no-border,\n.md .card-outline-md.no-border,\n.aurora .card-outline-aurora.no-border,\n.card-outline.no-hairlines,\n.ios .card-outline-ios.no-hairlines,\n.md .card-outline-md.no-hairlines,\n.aurora .card-outline-aurora.no-hairlines {\n  border: none;\n}\n.card-content {\n  position: relative;\n}\n.card-content-padding {\n  position: relative;\n  padding: var(--f7-card-content-padding-vertical) var(--f7-card-content-padding-horizontal);\n}\n.card-content-padding > .list,\n.card-content-padding > .block {\n  margin: calc(-1 * var(--f7-card-content-padding-vertical)) calc(-1 * var(--f7-card-content-padding-horizontal));\n}\n.card-content-padding > p:first-child {\n  margin-top: 0;\n}\n.card-content-padding > p:last-child {\n  margin-bottom: 0;\n}\n.card-header {\n  min-height: var(--f7-card-header-min-height);\n  color: var(--f7-card-header-text-color);\n  font-size: var(--f7-card-header-font-size);\n  font-weight: var(--f7-card-header-font-weight);\n  padding: var(--f7-card-header-padding-vertical) var(--f7-card-header-padding-horizontal);\n}\n.card-footer {\n  min-height: var(--f7-card-footer-min-height);\n  color: var(--f7-card-footer-text-color);\n  font-size: var(--f7-card-footer-font-size);\n  font-weight: var(--f7-card-footer-font-weight);\n  padding: var(--f7-card-footer-padding-vertical) var(--f7-card-footer-padding-horizontal);\n}\n.card-footer a.link {\n  overflow: hidden;\n}\n.card-header,\n.card-footer {\n  position: relative;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.card-header[valign=\"top\"],\n.card-footer[valign=\"top\"] {\n  align-items: flex-start;\n}\n.card-header[valign=\"bottom\"],\n.card-footer[valign=\"bottom\"] {\n  align-items: flex-end;\n}\n.card-header a.link,\n.card-footer a.link {\n  position: relative;\n}\n.card-header a.link i.icon,\n.card-footer a.link i.icon {\n  display: block;\n}\n.card-header a.icon-only,\n.card-footer a.icon-only {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n}\n.card-header {\n  border-radius: var(--f7-card-border-radius) var(--f7-card-border-radius) 0 0;\n}\n.card-header:after {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-card-header-border-color);\n  display: block;\n  z-index: 15;\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 100%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.card-header.no-hairline:after {\n  display: none !important;\n}\n.card-footer {\n  border-radius: 0 0 var(--f7-card-border-radius) var(--f7-card-border-radius);\n}\n.card-footer:before {\n  content: '';\n  position: absolute;\n  background-color: var(--f7-card-footer-border-color);\n  display: block;\n  z-index: 15;\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n  height: 1px;\n  width: 100%;\n  transform-origin: 50% 0%;\n  transform: scaleY(calc(1 / var(--f7-device-pixel-ratio)));\n}\n.card-footer.no-hairline:before {\n  display: none !important;\n}\n.card-expandable {\n  overflow: hidden;\n  height: 300px;\n  background: var(--f7-card-expandable-bg-color);\n  position: relative;\n  transform-origin: center center;\n  transition-property: transform, border-radius;\n  border-radius: var(--f7-card-expandable-border-radius);\n  z-index: 2;\n  transition-duration: 200ms;\n  margin-left: calc(var(--f7-card-expandable-margin-horizontal) + var(--f7-safe-area-left));\n  margin-right: calc(var(--f7-card-expandable-margin-horizontal) + var(--f7-safe-area-right));\n  margin-top: var(--f7-card-expandable-margin-vertical);\n  margin-bottom: var(--f7-card-expandable-margin-vertical);\n  box-shadow: var(--f7-card-expandable-box-shadow);\n  font-size: var(--f7-card-expandable-font-size);\n}\n.card-expandable:not(.card-opened) {\n  user-select: none;\n}\n.card-expandable.card-no-transition {\n  transition-duration: 0ms;\n}\n.card-expandable.card-expandable-animate-width .card-content {\n  transition-property: width, transform;\n  width: 100%;\n}\n.card-expandable.active-state {\n  transform: scale(0.97) translate3d(0, 0, 0);\n}\n.card-expandable .card-opened-fade-in,\n.card-expandable .card-opened-fade-out {\n  transition-duration: 400ms;\n}\n.card-expandable .card-opened-fade-in {\n  opacity: 0;\n  pointer-events: none;\n}\n.card-expandable .card-content {\n  position: absolute;\n  top: 0;\n  width: 100vw;\n  height: 100vh;\n  transform-origin: center top;\n  overflow: hidden;\n  transition-property: transform;\n  box-sizing: border-box;\n  pointer-events: none;\n  left: 0;\n}\n.card-expandable .card-content .card-content-padding {\n  padding-left: calc(var(--f7-safe-area-left) + var(--f7-card-content-padding-horizontal));\n  padding-right: calc(var(--f7-safe-area-right) + var(--f7-card-content-padding-horizontal));\n}\n.card-expandable.card-opened {\n  transition-duration: 0ms;\n}\n.card-expandable.card-opening,\n.card-expandable.card-closing,\n.card-expandable.card-transitioning {\n  transition-duration: 400ms;\n}\n.card-expandable.card-opening .card-content {\n  transition-duration: 300ms;\n}\n.card-expandable.card-closing .card-content {\n  transition-duration: 500ms;\n}\n.card-expandable.card-opening,\n.card-expandable.card-opened,\n.card-expandable.card-closing {\n  z-index: 300;\n}\n.card-expandable.card-opening,\n.card-expandable.card-opened {\n  border-radius: 0;\n}\n.card-expandable.card-opening .card-opened-fade-in,\n.card-expandable.card-opened .card-opened-fade-in {\n  opacity: 1;\n  pointer-events: auto;\n}\n.card-expandable.card-opening .card-opened-fade-out,\n.card-expandable.card-opened .card-opened-fade-out {\n  opacity: 0;\n  pointer-events: none;\n}\n.card-expandable.card-opened .card-content {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  pointer-events: auto;\n}\n.card-expandable .card-header {\n  font-size: var(--f7-card-expandable-header-font-size);\n  font-weight: var(--f7-card-expandable-header-font-weight);\n}\n.card-expandable .card-header:after {\n  display: none !important;\n}\n.card-prevent-open {\n  pointer-events: auto;\n}\n.card-expandable-size {\n  width: 0;\n  height: 0;\n  position: absolute;\n  left: 0;\n  top: 0;\n  opacity: 0;\n  pointer-events: none;\n  visibility: hidden;\n}\n@media (min-width: 768px) and (min-height: 670px) {\n  .card-expandable:not(.card-tablet-fullscreen) {\n    max-width: var(--f7-card-expandable-tablet-width);\n  }\n  .card-expandable:not(.card-tablet-fullscreen).card-opened,\n  .card-expandable:not(.card-tablet-fullscreen).card-opening {\n    border-radius: var(--f7-card-expandable-tablet-border-radius);\n  }\n  .card-expandable:not(.card-tablet-fullscreen):not(.card-expandable-animate-width) .card-content {\n    width: var(--f7-card-expandable-tablet-width);\n  }\n  .card-expandable:not(.card-tablet-fullscreen) .card-expandable-size {\n    width: var(--f7-card-expandable-tablet-width);\n    height: var(--f7-card-expandable-tablet-height);\n  }\n}\n.page.page-with-card-opened .page-content {\n  overflow: hidden;\n}\n.card-backdrop {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 299;\n  pointer-events: none;\n  background: rgba(0, 0, 0, 0.2);\n  opacity: 0;\n}\n.card-backdrop-in {\n  animation: card-backdrop-fade-in 400ms forwards;\n  pointer-events: auto;\n}\n.card-backdrop-out {\n  animation: card-backdrop-fade-out 400ms forwards;\n}\n@supports (backdrop-filter: blur(15px)) {\n  .card-backdrop {\n    background: transparent;\n    backdrop-filter: blur(15px);\n  }\n}\n@keyframes card-backdrop-fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes card-backdrop-fade-out {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n/* === Swiper === */\n@font-face {\n  font-family: 'swiper-icons';\n  src: url(\"data:application/font-woff;charset=utf-8;base64, d09GRgABAAAAAAZgABAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAGRAAAABoAAAAci6qHkUdERUYAAAWgAAAAIwAAACQAYABXR1BPUwAABhQAAAAuAAAANuAY7+xHU1VCAAAFxAAAAFAAAABm2fPczU9TLzIAAAHcAAAASgAAAGBP9V5RY21hcAAAAkQAAACIAAABYt6F0cBjdnQgAAACzAAAAAQAAAAEABEBRGdhc3AAAAWYAAAACAAAAAj//wADZ2x5ZgAAAywAAADMAAAD2MHtryVoZWFkAAABbAAAADAAAAA2E2+eoWhoZWEAAAGcAAAAHwAAACQC9gDzaG10eAAAAigAAAAZAAAArgJkABFsb2NhAAAC0AAAAFoAAABaFQAUGG1heHAAAAG8AAAAHwAAACAAcABAbmFtZQAAA/gAAAE5AAACXvFdBwlwb3N0AAAFNAAAAGIAAACE5s74hXjaY2BkYGAAYpf5Hu/j+W2+MnAzMYDAzaX6QjD6/4//Bxj5GA8AuRwMYGkAPywL13jaY2BkYGA88P8Agx4j+/8fQDYfA1AEBWgDAIB2BOoAeNpjYGRgYNBh4GdgYgABEMnIABJzYNADCQAACWgAsQB42mNgYfzCOIGBlYGB0YcxjYGBwR1Kf2WQZGhhYGBiYGVmgAFGBiQQkOaawtDAoMBQxXjg/wEGPcYDDA4wNUA2CCgwsAAAO4EL6gAAeNpj2M0gyAACqxgGNWBkZ2D4/wMA+xkDdgAAAHjaY2BgYGaAYBkGRgYQiAHyGMF8FgYHIM3DwMHABGQrMOgyWDLEM1T9/w8UBfEMgLzE////P/5//f/V/xv+r4eaAAeMbAxwIUYmIMHEgKYAYjUcsDAwsLKxc3BycfPw8jEQA/gZBASFhEVExcQlJKWkZWTl5BUUlZRVVNXUNTQZBgMAAMR+E+gAEQFEAAAAKgAqACoANAA+AEgAUgBcAGYAcAB6AIQAjgCYAKIArAC2AMAAygDUAN4A6ADyAPwBBgEQARoBJAEuATgBQgFMAVYBYAFqAXQBfgGIAZIBnAGmAbIBzgHsAAB42u2NMQ6CUAyGW568x9AneYYgm4MJbhKFaExIOAVX8ApewSt4Bic4AfeAid3VOBixDxfPYEza5O+Xfi04YADggiUIULCuEJK8VhO4bSvpdnktHI5QCYtdi2sl8ZnXaHlqUrNKzdKcT8cjlq+rwZSvIVczNiezsfnP/uznmfPFBNODM2K7MTQ45YEAZqGP81AmGGcF3iPqOop0r1SPTaTbVkfUe4HXj97wYE+yNwWYxwWu4v1ugWHgo3S1XdZEVqWM7ET0cfnLGxWfkgR42o2PvWrDMBSFj/IHLaF0zKjRgdiVMwScNRAoWUoH78Y2icB/yIY09An6AH2Bdu/UB+yxopYshQiEvnvu0dURgDt8QeC8PDw7Fpji3fEA4z/PEJ6YOB5hKh4dj3EvXhxPqH/SKUY3rJ7srZ4FZnh1PMAtPhwP6fl2PMJMPDgeQ4rY8YT6Gzao0eAEA409DuggmTnFnOcSCiEiLMgxCiTI6Cq5DZUd3Qmp10vO0LaLTd2cjN4fOumlc7lUYbSQcZFkutRG7g6JKZKy0RmdLY680CDnEJ+UMkpFFe1RN7nxdVpXrC4aTtnaurOnYercZg2YVmLN/d/gczfEimrE/fs/bOuq29Zmn8tloORaXgZgGa78yO9/cnXm2BpaGvq25Dv9S4E9+5SIc9PqupJKhYFSSl47+Qcr1mYNAAAAeNptw0cKwkAAAMDZJA8Q7OUJvkLsPfZ6zFVERPy8qHh2YER+3i/BP83vIBLLySsoKimrqKqpa2hp6+jq6RsYGhmbmJqZSy0sraxtbO3sHRydnEMU4uR6yx7JJXveP7WrDycAAAAAAAH//wACeNpjYGRgYOABYhkgZgJCZgZNBkYGLQZtIJsFLMYAAAw3ALgAeNolizEKgDAQBCchRbC2sFER0YD6qVQiBCv/H9ezGI6Z5XBAw8CBK/m5iQQVauVbXLnOrMZv2oLdKFa8Pjuru2hJzGabmOSLzNMzvutpB3N42mNgZGBg4GKQYzBhYMxJLMlj4GBgAYow/P/PAJJhLM6sSoWKfWCAAwDAjgbRAAB42mNgYGBkAIIbCZo5IPrmUn0hGA0AO8EFTQAA\") format(\"woff\");\n  font-weight: 400;\n  font-style: normal;\n}\n:root {\n  --swiper-theme-color: #007aff;\n}\n.swiper-container {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n}\n.swiper-container-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  box-sizing: content-box;\n}\n.swiper-container-android .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-container-multirow > .swiper-wrapper {\n  flex-wrap: wrap;\n}\n.swiper-container-multirow-column > .swiper-wrapper {\n  flex-wrap: wrap;\n  flex-direction: column;\n}\n.swiper-container-free-mode > .swiper-wrapper {\n  transition-timing-function: ease-out;\n  margin: 0 auto;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-container-autoheight,\n.swiper-container-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-container-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n/* 3D Effects */\n.swiper-container-3d {\n  perspective: 1200px;\n}\n.swiper-container-3d .swiper-wrapper,\n.swiper-container-3d .swiper-slide,\n.swiper-container-3d .swiper-slide-shadow-left,\n.swiper-container-3d .swiper-slide-shadow-right,\n.swiper-container-3d .swiper-slide-shadow-top,\n.swiper-container-3d .swiper-slide-shadow-bottom,\n.swiper-container-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n.swiper-container-3d .swiper-slide-shadow-left,\n.swiper-container-3d .swiper-slide-shadow-right,\n.swiper-container-3d .swiper-slide-shadow-top,\n.swiper-container-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-container-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-container-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-container-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-container-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n/* CSS Mode */\n.swiper-container-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-container-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-container-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n.swiper-container-horizontal.swiper-container-css-mode > .swiper-wrapper {\n  scroll-snap-type: x mandatory;\n}\n.swiper-container-vertical.swiper-container-css-mode > .swiper-wrapper {\n  scroll-snap-type: y mandatory;\n}\n/* a11y */\n.swiper-container .swiper-notification {\n  position: absolute;\n  left: 0;\n  top: 0;\n  pointer-events: none;\n  opacity: 0;\n  z-index: -1000;\n}\n.swiper-container-cube {\n  overflow: visible;\n}\n.swiper-container-cube .swiper-slide {\n  pointer-events: none;\n  backface-visibility: hidden;\n  z-index: 1;\n  visibility: hidden;\n  transform-origin: 0 0;\n  width: 100%;\n  height: 100%;\n}\n.swiper-container-cube .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-container-cube.swiper-container-rtl .swiper-slide {\n  transform-origin: 100% 0;\n}\n.swiper-container-cube .swiper-slide-active,\n.swiper-container-cube .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-container-cube .swiper-slide-active,\n.swiper-container-cube .swiper-slide-next,\n.swiper-container-cube .swiper-slide-prev,\n.swiper-container-cube .swiper-slide-next + .swiper-slide {\n  pointer-events: auto;\n  visibility: visible;\n}\n.swiper-container-cube .swiper-slide-shadow-top,\n.swiper-container-cube .swiper-slide-shadow-bottom,\n.swiper-container-cube .swiper-slide-shadow-left,\n.swiper-container-cube .swiper-slide-shadow-right {\n  z-index: 0;\n  backface-visibility: hidden;\n}\n.swiper-container-cube .swiper-cube-shadow {\n  position: absolute;\n  left: 0;\n  bottom: 0px;\n  width: 100%;\n  height: 100%;\n  background: #000;\n  opacity: 0.6;\n  -webkit-filter: blur(50px);\n  filter: blur(50px);\n  z-index: 0;\n}\n.swiper-container-fade.swiper-container-free-mode .swiper-slide {\n  transition-timing-function: ease-out;\n}\n.swiper-container-fade .swiper-slide {\n  pointer-events: none;\n  transition-property: opacity;\n}\n.swiper-container-fade .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-container-fade .swiper-slide-active,\n.swiper-container-fade .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-container-flip {\n  overflow: visible;\n}\n.swiper-container-flip .swiper-slide {\n  pointer-events: none;\n  backface-visibility: hidden;\n  z-index: 1;\n}\n.swiper-container-flip .swiper-slide .swiper-slide {\n  pointer-events: none;\n}\n.swiper-container-flip .swiper-slide-active,\n.swiper-container-flip .swiper-slide-active .swiper-slide-active {\n  pointer-events: auto;\n}\n.swiper-container-flip .swiper-slide-shadow-top,\n.swiper-container-flip .swiper-slide-shadow-bottom,\n.swiper-container-flip .swiper-slide-shadow-left,\n.swiper-container-flip .swiper-slide-shadow-right {\n  z-index: 0;\n  backface-visibility: hidden;\n}\n/* Preloader */\n:root {\n  /*\n  --swiper-preloader-color: var(--swiper-theme-color);\n  */\n}\n.swiper-lazy-preloader {\n  width: 42px;\n  height: 42px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  margin-left: -21px;\n  margin-top: -21px;\n  z-index: 10;\n  transform-origin: 50%;\n  animation: swiper-preloader-spin 1s infinite linear;\n  box-sizing: border-box;\n  border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\n  border-radius: 50%;\n  border-top-color: transparent;\n}\n.swiper-lazy-preloader-white {\n  --swiper-preloader-color: #fff;\n}\n.swiper-lazy-preloader-black {\n  --swiper-preloader-color: #000;\n}\n@keyframes swiper-preloader-spin {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n:root {\n  --swiper-navigation-size: 44px;\n  /*\n  --swiper-navigation-color: var(--swiper-theme-color);\n  */\n}\n.swiper-button-prev,\n.swiper-button-next {\n  position: absolute;\n  top: 50%;\n  width: calc(var(--swiper-navigation-size) / 44 * 27);\n  height: var(--swiper-navigation-size);\n  margin-top: calc(-1 * var(--swiper-navigation-size) / 2);\n  z-index: 10;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--swiper-navigation-color, var(--swiper-theme-color));\n}\n.swiper-button-prev.swiper-button-disabled,\n.swiper-button-next.swiper-button-disabled {\n  opacity: 0.35;\n  cursor: auto;\n  pointer-events: none;\n}\n.swiper-button-prev:after,\n.swiper-button-next:after {\n  font-family: swiper-icons;\n  font-size: var(--swiper-navigation-size);\n  text-transform: none !important;\n  letter-spacing: 0;\n  text-transform: none;\n  font-variant: initial;\n  line-height: 1;\n}\n.swiper-button-prev,\n.swiper-container-rtl .swiper-button-next {\n  left: 10px;\n  right: auto;\n}\n.swiper-button-prev:after,\n.swiper-container-rtl .swiper-button-next:after {\n  content: 'prev';\n}\n.swiper-button-next,\n.swiper-container-rtl .swiper-button-prev {\n  right: 10px;\n  left: auto;\n}\n.swiper-button-next:after,\n.swiper-container-rtl .swiper-button-prev:after {\n  content: 'next';\n}\n.swiper-button-lock {\n  display: none;\n}\n:root {\n  /*\n  --swiper-pagination-color: var(--swiper-theme-color);\n  */\n}\n.swiper-pagination {\n  position: absolute;\n  text-align: center;\n  transition: 300ms opacity;\n  transform: translate3d(0, 0, 0);\n  z-index: 10;\n}\n.swiper-pagination.swiper-pagination-hidden {\n  opacity: 0;\n}\n/* Common Styles */\n.swiper-pagination-fraction,\n.swiper-pagination-custom,\n.swiper-container-horizontal > .swiper-pagination-bullets {\n  bottom: 10px;\n  left: 0;\n  width: 100%;\n}\n/* Bullets */\n.swiper-pagination-bullets-dynamic {\n  overflow: hidden;\n  font-size: 0;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transform: scale(0.33);\n  position: relative;\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\n  transform: scale(1);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\n  transform: scale(0.66);\n}\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\n  transform: scale(0.33);\n}\n.swiper-pagination-bullet {\n  width: 8px;\n  height: 8px;\n  display: inline-block;\n  border-radius: 100%;\n  background: #000;\n  opacity: 0.2;\n}\nbutton.swiper-pagination-bullet {\n  border: none;\n  margin: 0;\n  padding: 0;\n  box-shadow: none;\n  appearance: none;\n}\n.swiper-pagination-clickable .swiper-pagination-bullet {\n  cursor: pointer;\n}\n.swiper-pagination-bullet-active {\n  opacity: 1;\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n}\n.swiper-container-vertical > .swiper-pagination-bullets {\n  right: 10px;\n  top: 50%;\n  transform: translate3d(0px, -50%, 0);\n}\n.swiper-container-vertical > .swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 6px 0;\n  display: block;\n}\n.swiper-container-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  top: 50%;\n  transform: translateY(-50%);\n  width: 8px;\n}\n.swiper-container-vertical > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  display: inline-block;\n  transition: 200ms transform, 200ms top;\n}\n.swiper-container-horizontal > .swiper-pagination-bullets .swiper-pagination-bullet {\n  margin: 0 4px;\n}\n.swiper-container-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\n  left: 50%;\n  transform: translateX(-50%);\n  white-space: nowrap;\n}\n.swiper-container-horizontal > .swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform, 200ms left;\n}\n.swiper-container-horizontal.swiper-container-rtl > .swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\n  transition: 200ms transform, 200ms right;\n}\n/* Progress */\n.swiper-pagination-progressbar {\n  background: rgba(0, 0, 0, 0.25);\n  position: absolute;\n}\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  background: var(--swiper-pagination-color, var(--swiper-theme-color));\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  transform: scale(0);\n  transform-origin: left top;\n}\n.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\n  transform-origin: right top;\n}\n.swiper-container-horizontal > .swiper-pagination-progressbar,\n.swiper-container-vertical > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite {\n  width: 100%;\n  height: 4px;\n  left: 0;\n  top: 0;\n}\n.swiper-container-vertical > .swiper-pagination-progressbar,\n.swiper-container-horizontal > .swiper-pagination-progressbar.swiper-pagination-progressbar-opposite {\n  width: 4px;\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n.swiper-pagination-lock {\n  display: none;\n}\n/* Scrollbar */\n.swiper-scrollbar {\n  border-radius: 10px;\n  position: relative;\n  -ms-touch-action: none;\n  background: rgba(0, 0, 0, 0.1);\n}\n.swiper-container-horizontal > .swiper-scrollbar {\n  position: absolute;\n  left: 1%;\n  bottom: 3px;\n  z-index: 50;\n  height: 5px;\n  width: 98%;\n}\n.swiper-container-vertical > .swiper-scrollbar {\n  position: absolute;\n  right: 3px;\n  top: 1%;\n  z-index: 50;\n  width: 5px;\n  height: 98%;\n}\n.swiper-scrollbar-drag {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  background: rgba(0, 0, 0, 0.5);\n  border-radius: 10px;\n  left: 0;\n  top: 0;\n}\n.swiper-scrollbar-cursor-drag {\n  cursor: move;\n}\n.swiper-scrollbar-lock {\n  display: none;\n}\n.swiper-zoom-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}\n.swiper-zoom-container > img,\n.swiper-zoom-container > svg,\n.swiper-zoom-container > canvas {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: contain;\n}\n.swiper-slide-zoomed {\n  cursor: move;\n}\n:root {\n  --swiper-theme-color: var(--f7-theme-color);\n}\n";
  styleInject(css_248z);

  var css_248z$1 = ":root {\n  --f7-card-margin-horizontal: 16px;\n  --f7-card-border-radius: 8px;\n}\nhtml.theme-dark {\n  background-color: black;\n}\nhtml.theme-dark body {\n  background-color: black;\n}\n.collections-list {\n  --f7-list-bg-color: transparent;\n  --f7-list-item-title-font-size: 21px;\n}\n.collections-list .card {\n  color: white;\n}\n.card-header::after {\n  background-color: transparent;\n}\n.card-content {\n  font-size: 20vw;\n  font-weight: 300;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  -webkit-align-items: center;\n  align-items: center;\n}\n.collections-list img {\n  border-radius: 8px;\n}\n@media (min-width: 768px) {\n  .collections-list .item-inner::after {\n    background-color: transparent;\n  }\n  .collections-list ul {\n    display: grid;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n@media (min-width: 1024px) {\n  .collections-list ul {\n    display: grid;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n/* custom */\n.demo-swiper {\n  width: 100%;\n  height: 100%;\n}\n.demo-swiper .swiper-slide {\n  font-size: 25px;\n  font-weight: 300;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  -webkit-align-items: center;\n  align-items: center;\n}\n.demo-swiper .swiper-pagination-bullet {\n  background: var(--swiper-pagination-color, white);\n}\n";
  styleInject(css_248z$1);

  /* src\pages\home.svelte generated by Svelte v3.29.4 */

  const file$o = "src\\pages\\home.svelte";

  function get_each_context$2(ctx, list, i) {
  	const child_ctx = ctx.slice();
  	child_ctx[1] = list[i].link;
  	child_ctx[2] = list[i].title;
  	child_ctx[3] = list[i].after;
  	child_ctx[4] = list[i].subtitle;
  	child_ctx[5] = list[i].text;
  	child_ctx[6] = list[i].img;
  	child_ctx[8] = i;
  	return child_ctx;
  }

  // (9:8) <CardHeader>
  function create_default_slot_5$1(ctx) {
  	let t0;
  	let small;

  	const block = {
  		c: function create() {
  			t0 = text$1("Nouveautés\r\n            ");
  			small = element("small");
  			small.textContent = "8 astuces";
  			set_style(small, "opacity", "0.7");
  			add_location(small, file$o, 10, 12, 374);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t0, anchor);
  			insert_dev(target, small, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t0);
  			if (detaching) detach_dev(small);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_5$1.name,
  		type: "slot",
  		source: "(9:8) <CardHeader>",
  		ctx
  	});

  	return block;
  }

  // (13:8) <CardContent>
  function create_default_slot_4$1(ctx) {
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1("14");
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_4$1.name,
  		type: "slot",
  		source: "(13:8) <CardContent>",
  		ctx
  	});

  	return block;
  }

  // (3:4) <Card class="collections-highlight" style="          background: url(https://cdn.mgig.fr/2019/06/mg-95319b11-16c8-496b-b6fb.png) no-repeat center top;        background-size: cover;           height: 55vw;          max-height: 400px;"      >
  function create_default_slot_3$1(ctx) {
  	let cardheader;
  	let t;
  	let cardcontent;
  	let current;

  	cardheader = new Card_header({
  			props: {
  				$$slots: { default: [create_default_slot_5$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	cardcontent = new Card_content({
  			props: {
  				$$slots: { default: [create_default_slot_4$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(cardheader.$$.fragment);
  			t = space();
  			create_component(cardcontent.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(cardheader, target, anchor);
  			insert_dev(target, t, anchor);
  			mount_component(cardcontent, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const cardheader_changes = {};

  			if (dirty & /*$$scope*/ 512) {
  				cardheader_changes.$$scope = { dirty, ctx };
  			}

  			cardheader.$set(cardheader_changes);
  			const cardcontent_changes = {};

  			if (dirty & /*$$scope*/ 512) {
  				cardcontent_changes.$$scope = { dirty, ctx };
  			}

  			cardcontent.$set(cardcontent_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(cardheader.$$.fragment, local);
  			transition_in(cardcontent.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(cardheader.$$.fragment, local);
  			transition_out(cardcontent.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(cardheader, detaching);
  			if (detaching) detach_dev(t);
  			destroy_component(cardcontent, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_3$1.name,
  		type: "slot",
  		source: "(3:4) <Card class=\\\"collections-highlight\\\" style=\\\"          background: url(https://cdn.mgig.fr/2019/06/mg-95319b11-16c8-496b-b6fb.png) no-repeat center top;        background-size: cover;           height: 55vw;          max-height: 400px;\\\"      >",
  		ctx
  	});

  	return block;
  }

  // (25:12) <img alt="img" slot="media" src={img} style="background: white; width:80px; height:80px; object-fit: scale-down;"/>
  function create_media_slot(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			attr_dev(img, "alt", "img");
  			attr_dev(img, "slot", "media");
  			if (img.src !== (img_src_value = /*img*/ ctx[6])) attr_dev(img, "src", img_src_value);
  			set_style(img, "background", "white");
  			set_style(img, "width", "80px");
  			set_style(img, "height", "80px");
  			set_style(img, "object-fit", "scale-down");
  			add_location(img, file$o, 24, 12, 826);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_media_slot.name,
  		type: "slot",
  		source: "(25:12) <img alt=\\\"img\\\" slot=\\\"media\\\" src={img} style=\\\"background: white; width:80px; height:80px; object-fit: scale-down;\\\"/>",
  		ctx
  	});

  	return block;
  }

  // (19:8) <ListItem              link={link}              title={title}              after={after}              subtitle={subtitle}              text={text}>
  function create_default_slot_2$4(ctx) {
  	let t;

  	const block = {
  		c: function create() {
  			t = space();
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_2$4.name,
  		type: "slot",
  		source: "(19:8) <ListItem              link={link}              title={title}              after={after}              subtitle={subtitle}              text={text}>",
  		ctx
  	});

  	return block;
  }

  // (18:8) {#each collections as { link, title, after, subtitle, text, img }
  function create_each_block$2(ctx) {
  	let listitem;
  	let current;

  	listitem = new List_item({
  			props: {
  				link: /*link*/ ctx[1],
  				title: /*title*/ ctx[2],
  				after: /*after*/ ctx[3],
  				subtitle: /*subtitle*/ ctx[4],
  				text: /*text*/ ctx[5],
  				$$slots: {
  					default: [create_default_slot_2$4],
  					media: [create_media_slot]
  				},
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(listitem.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(listitem, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const listitem_changes = {};

  			if (dirty & /*$$scope*/ 512) {
  				listitem_changes.$$scope = { dirty, ctx };
  			}

  			listitem.$set(listitem_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(listitem.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(listitem.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(listitem, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_each_block$2.name,
  		type: "each",
  		source: "(18:8) {#each collections as { link, title, after, subtitle, text, img }",
  		ctx
  	});

  	return block;
  }

  // (17:4) <List class="collections-list" mediaList noHairlines>
  function create_default_slot_1$4(ctx) {
  	let each_1_anchor;
  	let current;
  	let each_value = /*collections*/ ctx[0];
  	validate_each_argument(each_value);
  	let each_blocks = [];

  	for (let i = 0; i < each_value.length; i += 1) {
  		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
  	}

  	const out = i => transition_out(each_blocks[i], 1, 1, () => {
  		each_blocks[i] = null;
  	});

  	const block = {
  		c: function create() {
  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].c();
  			}

  			each_1_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].m(target, anchor);
  			}

  			insert_dev(target, each_1_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (dirty & /*collections*/ 1) {
  				each_value = /*collections*/ ctx[0];
  				validate_each_argument(each_value);
  				let i;

  				for (i = 0; i < each_value.length; i += 1) {
  					const child_ctx = get_each_context$2(ctx, each_value, i);

  					if (each_blocks[i]) {
  						each_blocks[i].p(child_ctx, dirty);
  						transition_in(each_blocks[i], 1);
  					} else {
  						each_blocks[i] = create_each_block$2(child_ctx);
  						each_blocks[i].c();
  						transition_in(each_blocks[i], 1);
  						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
  					}
  				}

  				group_outros();

  				for (i = each_value.length; i < each_blocks.length; i += 1) {
  					out(i);
  				}

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;

  			for (let i = 0; i < each_value.length; i += 1) {
  				transition_in(each_blocks[i]);
  			}

  			current = true;
  		},
  		o: function outro(local) {
  			each_blocks = each_blocks.filter(Boolean);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				transition_out(each_blocks[i]);
  			}

  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_each(each_blocks, detaching);
  			if (detaching) detach_dev(each_1_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_1$4.name,
  		type: "slot",
  		source: "(17:4) <List class=\\\"collections-list\\\" mediaList noHairlines>",
  		ctx
  	});

  	return block;
  }

  // (1:0) <Page name="home">
  function create_default_slot$5(ctx) {
  	let navbar;
  	let t0;
  	let card;
  	let t1;
  	let list;
  	let current;

  	navbar = new Navbar$2({
  			props: { large: true, title: "Collections" },
  			$$inline: true
  		});

  	card = new Card$1({
  			props: {
  				class: "collections-highlight",
  				style: "\r\n        background: url(https://cdn.mgig.fr/2019/06/mg-95319b11-16c8-496b-b6fb.png) no-repeat center top; \r\n\t    background-size: cover; \r\n        height: 55vw;\r\n        max-height: 400px;",
  				$$slots: { default: [create_default_slot_3$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	list = new List({
  			props: {
  				class: "collections-list",
  				mediaList: true,
  				noHairlines: true,
  				$$slots: { default: [create_default_slot_1$4] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(navbar.$$.fragment);
  			t0 = space();
  			create_component(card.$$.fragment);
  			t1 = space();
  			create_component(list.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(navbar, target, anchor);
  			insert_dev(target, t0, anchor);
  			mount_component(card, target, anchor);
  			insert_dev(target, t1, anchor);
  			mount_component(list, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const card_changes = {};

  			if (dirty & /*$$scope*/ 512) {
  				card_changes.$$scope = { dirty, ctx };
  			}

  			card.$set(card_changes);
  			const list_changes = {};

  			if (dirty & /*$$scope*/ 512) {
  				list_changes.$$scope = { dirty, ctx };
  			}

  			list.$set(list_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(navbar.$$.fragment, local);
  			transition_in(card.$$.fragment, local);
  			transition_in(list.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(navbar.$$.fragment, local);
  			transition_out(card.$$.fragment, local);
  			transition_out(list.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(navbar, detaching);
  			if (detaching) detach_dev(t0);
  			destroy_component(card, detaching);
  			if (detaching) detach_dev(t1);
  			destroy_component(list, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot$5.name,
  		type: "slot",
  		source: "(1:0) <Page name=\\\"home\\\">",
  		ctx
  	});

  	return block;
  }

  function create_fragment$o(ctx) {
  	let page;
  	let current;

  	page = new Page({
  			props: {
  				name: "home",
  				$$slots: { default: [create_default_slot$5] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(page.$$.fragment);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			mount_component(page, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			const page_changes = {};

  			if (dirty & /*$$scope*/ 512) {
  				page_changes.$$scope = { dirty, ctx };
  			}

  			page.$set(page_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(page.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(page.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(page, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$o.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$n($$self, $$props, $$invalidate) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Home", slots, []);

  	let collections = [
  		{
  			link: "/collection/welcome",
  			title: "Welcome to iPhone",
  			subtitle: "Get to know your iPhone",
  			text: "8 tips",
  			img: "https://support.apple.com/library/content/dam/edam/applecare/images/en_US/iOS/ios14-iphone-11pro-widgets-home-screen.jpg"
  		},
  		{
  			title: "Indispensables",
  			subtitle: "Des fonctionnalités à décourvrir absoluement et que vous adorerez",
  			text: "7 astuces",
  			img: "https://www.apple.com/fr/ios/ios-14/images/overview/maps/curated_city_guides__dapxuahzztua_medium_2x.jpg"
  		},
  		{
  			title: "Sélection Genius",
  			subtitle: "Les morceaux favoris de nos experts",
  			text: "6 astuces",
  			img: "https://www.apple.com/v/ios/ios-14/b/images/overview/translate/enlarged_view__bgzf09g02u5e_medium_2x.jpg"
  		},
  		{
  			title: "Bienvenue sur l'Apple Watch",
  			subtitle: "Faites connaissance avec votre montre",
  			text: "7 astuces",
  			img: "https://www.apple.com/fr/ios/ios-14/images/overview/carplay/car_keys_wallet__gnyts6h9zf6u_medium_2x.jpg"
  		}
  	];

  	const writable_props = [];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Home> was created with unknown prop '${key}'`);
  	});

  	$$self.$capture_state = () => ({
  		Page,
  		Navbar: Navbar$2,
  		List,
  		ListItem: List_item,
  		Card: Card$1,
  		CardContent: Card_content,
  		CardHeader: Card_header,
  		collections
  	});

  	$$self.$inject_state = $$props => {
  		if ("collections" in $$props) $$invalidate(0, collections = $$props.collections);
  	};

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	return [collections];
  }

  class Home extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$n, create_fragment$o, safe_not_equal, {});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Home",
  			options,
  			id: create_fragment$o.name
  		});
  	}
  }

  /* src\pages\collection.svelte generated by Svelte v3.29.4 */

  const file$p = "src\\pages\\collection.svelte";

  function get_each_context$3(ctx, list, i) {
  	const child_ctx = ctx.slice();
  	child_ctx[2] = list[i].title;
  	child_ctx[3] = list[i].src;
  	return child_ctx;
  }

  // (11:48) <Col class="col-center-content" style="height: 100%; width:100%">
  function create_default_slot_7$1(ctx) {
  	let img;
  	let img_src_value;

  	const block = {
  		c: function create() {
  			img = element("img");
  			attr_dev(img, "alt", "img");
  			if (img.src !== (img_src_value = /*src*/ ctx[3])) attr_dev(img, "src", img_src_value);
  			set_style(img, "width", "100%");
  			set_style(img, "height", "100%");
  			set_style(img, "object-fit", "none");
  			add_location(img, file$p, 10, 113, 433);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, img, anchor);
  		},
  		p: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(img);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_7$1.name,
  		type: "slot",
  		source: "(11:48) <Col class=\\\"col-center-content\\\" style=\\\"height: 100%; width:100%\\\">",
  		ctx
  	});

  	return block;
  }

  // (11:10) <Row style="height: 70%; width: 100%">
  function create_default_slot_6$1(ctx) {
  	let col;
  	let current;

  	col = new Col({
  			props: {
  				class: "col-center-content",
  				style: "height: 100%; width:100%",
  				$$slots: { default: [create_default_slot_7$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(col.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(col, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const col_changes = {};

  			if (dirty & /*$$scope*/ 64) {
  				col_changes.$$scope = { dirty, ctx };
  			}

  			col.$set(col_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(col.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(col.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(col, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_6$1.name,
  		type: "slot",
  		source: "(11:10) <Row style=\\\"height: 70%; width: 100%\\\">",
  		ctx
  	});

  	return block;
  }

  // (12:15) <Col class="col-center-content">
  function create_default_slot_5$2(ctx) {
  	let t_value = /*title*/ ctx[2] + "";
  	let t;

  	const block = {
  		c: function create() {
  			t = text$1(t_value);
  		},
  		m: function mount(target, anchor) {
  			insert_dev(target, t, anchor);
  		},
  		p: noop,
  		d: function destroy(detaching) {
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_5$2.name,
  		type: "slot",
  		source: "(12:15) <Col class=\\\"col-center-content\\\">",
  		ctx
  	});

  	return block;
  }

  // (12:10) <Row>
  function create_default_slot_4$2(ctx) {
  	let col;
  	let current;

  	col = new Col({
  			props: {
  				class: "col-center-content",
  				$$slots: { default: [create_default_slot_5$2] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(col.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(col, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const col_changes = {};

  			if (dirty & /*$$scope*/ 64) {
  				col_changes.$$scope = { dirty, ctx };
  			}

  			col.$set(col_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(col.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(col.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(col, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_4$2.name,
  		type: "slot",
  		source: "(12:10) <Row>",
  		ctx
  	});

  	return block;
  }

  // (10:10) <Block style="height: 100vh; width: 100%">
  function create_default_slot_3$2(ctx) {
  	let row0;
  	let t;
  	let row1;
  	let current;

  	row0 = new Row({
  			props: {
  				style: "height: 70%; width: 100%",
  				$$slots: { default: [create_default_slot_6$1] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	row1 = new Row({
  			props: {
  				$$slots: { default: [create_default_slot_4$2] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(row0.$$.fragment);
  			t = space();
  			create_component(row1.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(row0, target, anchor);
  			insert_dev(target, t, anchor);
  			mount_component(row1, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const row0_changes = {};

  			if (dirty & /*$$scope*/ 64) {
  				row0_changes.$$scope = { dirty, ctx };
  			}

  			row0.$set(row0_changes);
  			const row1_changes = {};

  			if (dirty & /*$$scope*/ 64) {
  				row1_changes.$$scope = { dirty, ctx };
  			}

  			row1.$set(row1_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(row0.$$.fragment, local);
  			transition_in(row1.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(row0.$$.fragment, local);
  			transition_out(row1.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(row0, detaching);
  			if (detaching) detach_dev(t);
  			destroy_component(row1, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_3$2.name,
  		type: "slot",
  		source: "(10:10) <Block style=\\\"height: 100vh; width: 100%\\\">",
  		ctx
  	});

  	return block;
  }

  // (9:8) <SwiperSlide>
  function create_default_slot_2$5(ctx) {
  	let block;
  	let t;
  	let current;

  	block = new Block({
  			props: {
  				style: "height: 100vh; width: 100%",
  				$$slots: { default: [create_default_slot_3$2] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block_1 = {
  		c: function create() {
  			create_component(block.$$.fragment);
  			t = space();
  		},
  		m: function mount(target, anchor) {
  			mount_component(block, target, anchor);
  			insert_dev(target, t, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const block_changes = {};

  			if (dirty & /*$$scope*/ 64) {
  				block_changes.$$scope = { dirty, ctx };
  			}

  			block.$set(block_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(block.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(block.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(block, detaching);
  			if (detaching) detach_dev(t);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block: block_1,
  		id: create_default_slot_2$5.name,
  		type: "slot",
  		source: "(9:8) <SwiperSlide>",
  		ctx
  	});

  	return block_1;
  }

  // (8:6) {#each collection as { title,src }}
  function create_each_block$3(ctx) {
  	let swiperslide;
  	let current;

  	swiperslide = new Swiper_slide({
  			props: {
  				$$slots: { default: [create_default_slot_2$5] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(swiperslide.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(swiperslide, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const swiperslide_changes = {};

  			if (dirty & /*$$scope*/ 64) {
  				swiperslide_changes.$$scope = { dirty, ctx };
  			}

  			swiperslide.$set(swiperslide_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(swiperslide.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(swiperslide.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(swiperslide, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_each_block$3.name,
  		type: "each",
  		source: "(8:6) {#each collection as { title,src }}",
  		ctx
  	});

  	return block;
  }

  // (3:4) <Swiper class="demo-swiper" pagination params={{          pagination: {            hideOnClick: true,          }        }}>
  function create_default_slot_1$5(ctx) {
  	let each_1_anchor;
  	let current;
  	let each_value = /*collection*/ ctx[1];
  	validate_each_argument(each_value);
  	let each_blocks = [];

  	for (let i = 0; i < each_value.length; i += 1) {
  		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
  	}

  	const out = i => transition_out(each_blocks[i], 1, 1, () => {
  		each_blocks[i] = null;
  	});

  	const block = {
  		c: function create() {
  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].c();
  			}

  			each_1_anchor = empty$1();
  		},
  		m: function mount(target, anchor) {
  			for (let i = 0; i < each_blocks.length; i += 1) {
  				each_blocks[i].m(target, anchor);
  			}

  			insert_dev(target, each_1_anchor, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			if (dirty & /*collection*/ 2) {
  				each_value = /*collection*/ ctx[1];
  				validate_each_argument(each_value);
  				let i;

  				for (i = 0; i < each_value.length; i += 1) {
  					const child_ctx = get_each_context$3(ctx, each_value, i);

  					if (each_blocks[i]) {
  						each_blocks[i].p(child_ctx, dirty);
  						transition_in(each_blocks[i], 1);
  					} else {
  						each_blocks[i] = create_each_block$3(child_ctx);
  						each_blocks[i].c();
  						transition_in(each_blocks[i], 1);
  						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
  					}
  				}

  				group_outros();

  				for (i = each_value.length; i < each_blocks.length; i += 1) {
  					out(i);
  				}

  				check_outros();
  			}
  		},
  		i: function intro(local) {
  			if (current) return;

  			for (let i = 0; i < each_value.length; i += 1) {
  				transition_in(each_blocks[i]);
  			}

  			current = true;
  		},
  		o: function outro(local) {
  			each_blocks = each_blocks.filter(Boolean);

  			for (let i = 0; i < each_blocks.length; i += 1) {
  				transition_out(each_blocks[i]);
  			}

  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_each(each_blocks, detaching);
  			if (detaching) detach_dev(each_1_anchor);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot_1$5.name,
  		type: "slot",
  		source: "(3:4) <Swiper class=\\\"demo-swiper\\\" pagination params={{          pagination: {            hideOnClick: true,          }        }}>",
  		ctx
  	});

  	return block;
  }

  // (1:0) <Page name="collection">
  function create_default_slot$6(ctx) {
  	let navbar;
  	let t;
  	let swiper;
  	let current;

  	navbar = new Navbar$2({
  			props: { backLink: true, title: /*name*/ ctx[0] },
  			$$inline: true
  		});

  	swiper = new Swiper$2({
  			props: {
  				class: "demo-swiper",
  				pagination: true,
  				params: { pagination: { hideOnClick: true } },
  				$$slots: { default: [create_default_slot_1$5] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(navbar.$$.fragment);
  			t = space();
  			create_component(swiper.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(navbar, target, anchor);
  			insert_dev(target, t, anchor);
  			mount_component(swiper, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, dirty) {
  			const navbar_changes = {};
  			if (dirty & /*name*/ 1) navbar_changes.title = /*name*/ ctx[0];
  			navbar.$set(navbar_changes);
  			const swiper_changes = {};

  			if (dirty & /*$$scope*/ 64) {
  				swiper_changes.$$scope = { dirty, ctx };
  			}

  			swiper.$set(swiper_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(navbar.$$.fragment, local);
  			transition_in(swiper.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(navbar.$$.fragment, local);
  			transition_out(swiper.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(navbar, detaching);
  			if (detaching) detach_dev(t);
  			destroy_component(swiper, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot$6.name,
  		type: "slot",
  		source: "(1:0) <Page name=\\\"collection\\\">",
  		ctx
  	});

  	return block;
  }

  function create_fragment$p(ctx) {
  	let page;
  	let current;

  	page = new Page({
  			props: {
  				name: "collection",
  				$$slots: { default: [create_default_slot$6] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(page.$$.fragment);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			mount_component(page, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			const page_changes = {};

  			if (dirty & /*$$scope, name*/ 65) {
  				page_changes.$$scope = { dirty, ctx };
  			}

  			page.$set(page_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(page.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(page.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(page, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$p.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$o($$self, $$props, $$invalidate) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("Collection", slots, []);
  	let { name } = $$props;

  	let collection = [
  		{
  			title: "Add widgets to Today View",
  			src: "https://support.apple.com/library/content/dam/edam/applecare/images/en_US/iOS/ios14-iphone-11pro-widgets-today-view.jpg"
  		},
  		{ title: "slide 2" },
  		{ title: "slide 3" }
  	];

  	const writable_props = ["name"];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Collection> was created with unknown prop '${key}'`);
  	});

  	$$self.$$set = $$props => {
  		if ("name" in $$props) $$invalidate(0, name = $$props.name);
  	};

  	$$self.$capture_state = () => ({
  		Page,
  		Navbar: Navbar$2,
  		Swiper: Swiper$2,
  		SwiperSlide: Swiper_slide,
  		Block,
  		Row,
  		Col,
  		name,
  		collection
  	});

  	$$self.$inject_state = $$props => {
  		if ("name" in $$props) $$invalidate(0, name = $$props.name);
  		if ("collection" in $$props) $$invalidate(1, collection = $$props.collection);
  	};

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	return [name, collection];
  }

  class Collection extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$o, create_fragment$p, safe_not_equal, { name: 0 });

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "Collection",
  			options,
  			id: create_fragment$p.name
  		});

  		const { ctx } = this.$$;
  		const props = options.props || {};

  		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
  			console.warn("<Collection> was created without expected prop 'name'");
  		}
  	}

  	get name() {
  		throw new Error("<Collection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}

  	set name(value) {
  		throw new Error("<Collection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  	}
  }

  var routes = [
      {
          path: '/',
          component: Home,
      },
      {
          path: '/collection/:name',
          component: Collection,
      }
  ];

  /* src\App.svelte generated by Svelte v3.29.4 */

  // (1:0) <App params={ f7params }>
  function create_default_slot$7(ctx) {
  	let view;
  	let current;

  	view = new View$2({
  			props: { main: true, class: "safe-areas" },
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(view.$$.fragment);
  		},
  		m: function mount(target, anchor) {
  			mount_component(view, target, anchor);
  			current = true;
  		},
  		p: noop,
  		i: function intro(local) {
  			if (current) return;
  			transition_in(view.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(view.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(view, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_default_slot$7.name,
  		type: "slot",
  		source: "(1:0) <App params={ f7params }>",
  		ctx
  	});

  	return block;
  }

  function create_fragment$q(ctx) {
  	let app;
  	let current;

  	app = new App({
  			props: {
  				params: /*f7params*/ ctx[0],
  				$$slots: { default: [create_default_slot$7] },
  				$$scope: { ctx }
  			},
  			$$inline: true
  		});

  	const block = {
  		c: function create() {
  			create_component(app.$$.fragment);
  		},
  		l: function claim(nodes) {
  			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
  		},
  		m: function mount(target, anchor) {
  			mount_component(app, target, anchor);
  			current = true;
  		},
  		p: function update(ctx, [dirty]) {
  			const app_changes = {};

  			if (dirty & /*$$scope*/ 2) {
  				app_changes.$$scope = { dirty, ctx };
  			}

  			app.$set(app_changes);
  		},
  		i: function intro(local) {
  			if (current) return;
  			transition_in(app.$$.fragment, local);
  			current = true;
  		},
  		o: function outro(local) {
  			transition_out(app.$$.fragment, local);
  			current = false;
  		},
  		d: function destroy(detaching) {
  			destroy_component(app, detaching);
  		}
  	};

  	dispatch_dev("SvelteRegisterBlock", {
  		block,
  		id: create_fragment$q.name,
  		type: "component",
  		source: "",
  		ctx
  	});

  	return block;
  }

  function instance$p($$self, $$props, $$invalidate) {
  	let { $$slots: slots = {}, $$scope } = $$props;
  	validate_slots("App", slots, []);

  	let f7params = {
  		name: "tips", // App name
  		theme: "auto", // Automatic theme detection
  		autoDarkTheme: true, // Automatic Dark Theme
  		routes, // App routes
  		
  	};

  	if (window.navigator.standalone) {
  		document.body.classList.add("standalone");
  	}

  	const writable_props = [];

  	Object.keys($$props).forEach(key => {
  		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
  	});

  	$$self.$capture_state = () => ({ App, View: View$2, routes, f7params });

  	$$self.$inject_state = $$props => {
  		if ("f7params" in $$props) $$invalidate(0, f7params = $$props.f7params);
  	};

  	if ($$props && "$$inject" in $$props) {
  		$$self.$inject_state($$props.$$inject);
  	}

  	return [f7params];
  }

  class App_1 extends SvelteComponentDev {
  	constructor(options) {
  		super(options);
  		init(this, options, instance$p, create_fragment$q, safe_not_equal, {});

  		dispatch_dev("SvelteRegisterComponent", {
  			component: this,
  			tagName: "App_1",
  			options,
  			id: create_fragment$q.name
  		});
  	}
  }

  // Import Framework7

  // Init F7 Svelte Plugin
  Framework7.use(Plugin);

  var app = new App_1({
  	target: document.body
  });

  return app;

}());
//# sourceMappingURL=bundle.js.map
